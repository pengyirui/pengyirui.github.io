<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>设计模式</title>
      <link href="/posts/3b8.html"/>
      <url>/posts/3b8.html</url>
      
        <content type="html"><![CDATA[<h2 id="Head-First设计模式（第二版）"><a href="#Head-First设计模式（第二版）" class="headerlink" title="Head First设计模式（第二版）"></a>Head First设计模式（第二版）</h2><p>随着写代码的增加，我渐渐觉得自己写出来的代码有时候真的差点意思，跟同事作对比他总能写出一些巧妙的代码，而我的有时会写重复代码，想作点修改而无从下手。回想起以前学习写HelloWorld时，有种东西叫【设计模式】。</p><p>书本代码资源<br><a href="https://wickedlysmart.com/head-first-design-patterns/">https://wickedlysmart.com/head-first-design-patterns/</a></p><p>菜鸟教程的一些参考总结<br><a href="https://m.runoob.com/design-pattern/">https://m.runoob.com/design-pattern/</a></p><h2 id="设计原则："><a href="#设计原则：" class="headerlink" title="设计原则："></a>设计原则：</h2><p>软件开发唯一的不变是【变化】本身</p><p>识别应用中变化的方面，把他们和不变的方面分开。</p><p>优先使用组合而不是继承。</p><p>针对接口编程，而不是针对实现编程。</p><p>尽量做到交互的对象之间的松耦合设计。松耦合设计允许我们建造能够应对变化的，有弹性的OO系统，因为对象之间的交互依赖降到最低。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>文章、教程记录</title>
      <link href="/posts/3b8.html"/>
      <url>/posts/3b8.html</url>
      
        <content type="html"><![CDATA[<h2 id="Lombok常用注解"><a href="#Lombok常用注解" class="headerlink" title="Lombok常用注解"></a>Lombok常用注解</h2><p><a href="https://www.cnblogs.com/ooo0/p/12448096.html">https://www.cnblogs.com/ooo0/p/12448096.html</a></p><h2 id="win多版本Java切换"><a href="#win多版本Java切换" class="headerlink" title="win多版本Java切换"></a>win多版本Java切换</h2><p>手动修改：<a href="https://www.cnblogs.com/luzhi0324/p/16421853.html">https://www.cnblogs.com/luzhi0324/p/16421853.html</a><br>软件：jenv、sdkman</p><h2 id="破解idea"><a href="#破解idea" class="headerlink" title="破解idea"></a>破解idea</h2><p><a href="https://www.cnblogs.com/gfl-1112/p/16595269.html">https://www.cnblogs.com/gfl-1112/p/16595269.html</a><br><a href="https://www.exception.site/essay/how-to-free-use-idea-202021-by-resigter-code">https://www.exception.site/essay/how-to-free-use-idea-202021-by-resigter-code</a></p><h2 id="快速切换node工具"><a href="#快速切换node工具" class="headerlink" title="快速切换node工具"></a>快速切换node工具</h2><p>软件：nvm<br>用法：<br>nvm（node包切换）<br>nvm ls （查看node）<br>nvm use 包（切换node）</p><h2 id="流程开发（临时存放"><a href="#流程开发（临时存放" class="headerlink" title="流程开发（临时存放"></a>流程开发（临时存放</h2><p>Activiti7 M4 会签，网关驳回流程（一）-一一网络<br><a href="https://www.proyy.com/6968069975093297165.html">https://www.proyy.com/6968069975093297165.html</a></p><p>Activiti7 回退与会签_mob604756f79c64的技术博客_51CTO博客<br><a href="https://blog.51cto.com/u_15127605/4335163">https://blog.51cto.com/u_15127605/4335163</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java新特性</title>
      <link href="/posts/1dft.html"/>
      <url>/posts/1dft.html</url>
      
        <content type="html"><![CDATA[<h2 id="技巧"><a href="#技巧" class="headerlink" title="技巧"></a>技巧</h2><h3 id="map-forEach"><a href="#map-forEach" class="headerlink" title="map.forEach"></a>map.forEach</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建一个Map</span></span><br><span class="line">Map&lt;String, Object&gt; map= <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">infoMap.put(<span class="string">&quot;a&quot;</span>, <span class="string">&quot;a&quot;</span>);</span><br><span class="line">infoMap.put(<span class="string">&quot;b&quot;</span>, <span class="string">&quot;b&quot;</span>);</span><br><span class="line">infoMap.put(<span class="string">&quot;c&quot;</span>, <span class="string">&quot;c&quot;</span>);</span><br><span class="line"><span class="comment">// 传统的Map迭代方式</span></span><br><span class="line"><span class="keyword">for</span> (Map.Entry&lt;String, Object&gt; entry : map.entrySet()) &#123;</span><br><span class="line">    System.out.println(entry.getKey() + <span class="string">&quot;：&quot;</span> + entry.getValue());</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// JDK8的迭代方式</span></span><br><span class="line">map.forEach((key, value) -&gt; &#123;</span><br><span class="line">    System.out.println(key + <span class="string">&quot;：&quot;</span> + value);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="字符串与列表转换"><a href="#字符串与列表转换" class="headerlink" title="字符串与列表转换"></a>字符串与列表转换</h3><ul><li><p>列表转换成字符串，以逗号隔开</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.util.StringUtils;</span><br><span class="line"></span><br><span class="line">    List&lt;Object&gt; objects = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    objects.add(<span class="number">1</span>);</span><br><span class="line">    objects.add(<span class="number">2</span>);</span><br><span class="line">    objects.add(<span class="number">3</span>);</span><br><span class="line"></span><br><span class="line">    <span class="type">String</span> <span class="variable">s</span> <span class="operator">=</span> StringUtils.collectionToDelimitedString(objects, <span class="string">&quot;,&quot;</span>);</span><br><span class="line">    System.out.println(s);</span><br><span class="line">    <span class="comment">// 1,2,3</span></span><br></pre></td></tr></table></figure></li><li><p>将字符串以逗号劈开，转换成列表</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">List&lt;String&gt; strings = Arrays.asList(<span class="string">&quot;1,2,3&quot;</span>.split(<span class="string">&quot;,&quot;</span>));</span><br><span class="line">System.out.println(strings);</span><br><span class="line"><span class="comment">// [1, 2, 3]</span></span><br></pre></td></tr></table></figure></li><li><p>将List<SystemRole> roleList 中的name获取出来，转化为list</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">List&lt;Student&gt; stuList = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">stuList.add(<span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&quot;张三&quot;</span>, <span class="number">18</span>));</span><br><span class="line">stuList.add(<span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&quot;李四&quot;</span>,<span class="number">20</span>));</span><br><span class="line"></span><br><span class="line">List&lt;String&gt; list = stuList.stream()</span><br><span class="line">        .map(Student::getName)</span><br><span class="line">        .collect(Collectors.toList());</span><br><span class="line">        </span><br><span class="line">System.out.println(list);</span><br><span class="line"><span class="comment">// [张三, 李四]</span></span><br></pre></td></tr></table></figure></li><li><p>根据所属类型分组 Collectors.groupingBy</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line">List&lt;Student&gt; users = Arrays.asList(</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&quot;Jack&quot;</span>,<span class="number">9</span>),</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&quot;Kreas&quot;</span>,<span class="number">10</span>),</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&quot;Marry&quot;</span>,<span class="number">13</span>),</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&quot;Timi&quot;</span>,<span class="number">14</span>));</span><br><span class="line"></span><br><span class="line">Map&lt;Integer,List&lt;Student&gt;&gt; map=users.stream().collect(Collectors.groupingBy(Student::getAge));</span><br><span class="line">Map&lt;String,List&lt;Student&gt;&gt; map1=users.stream().collect(Collectors.groupingBy(i-&gt;i.getAge()+<span class="string">&quot;_&quot;</span>+<span class="string">&quot;年龄&quot;</span>));</span><br><span class="line">Map&lt;String,List&lt;Student&gt;&gt; map2=users.stream().collect(Collectors.groupingBy(i-&gt;&#123;</span><br><span class="line">    <span class="keyword">if</span>(i.getAge()&lt;<span class="number">10</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;young&quot;</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;old&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;));</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">System.out.println(map);</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">&#123;9=[Student(name=Jack, age=9, subject=null)],</span></span><br><span class="line"><span class="comment">    10=[Student(name=Kreas, age=10, subject=null)],</span></span><br><span class="line"><span class="comment">    13=[Student(name=Marry, age=13, subject=null)], </span></span><br><span class="line"><span class="comment">    14=[Student(name=Timi, age=14, subject=null)]&#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">System.out.println(map1);</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">&#123;9_年龄=[Student(name=Jack, age=9, subject=null)],</span></span><br><span class="line"><span class="comment">    10_年龄=[Student(name=Kreas, age=10, subject=null)], </span></span><br><span class="line"><span class="comment">    13_年龄=[Student(name=Marry, age=13, subject=null)],</span></span><br><span class="line"><span class="comment">    14_年龄=[Student(name=Timi, age=14, subject=null)]&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">System.out.println(map2);</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">&#123;young=[Student(name=Jack, age=9, subject=null)],</span></span><br><span class="line"><span class="comment">    old=[Student(name=Kreas, age=10, subject=null),</span></span><br><span class="line"><span class="comment">        Student(name=Marry, age=13, subject=null),</span></span><br><span class="line"><span class="comment">        Student(name=Timi, age=14, subject=null)]&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">System.out.println(users);</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">[Student(name=Jack, age=9, subject=null),</span></span><br><span class="line"><span class="comment">Student(name=Kreas, age=10, subject=null),</span></span><br><span class="line"><span class="comment">Student(name=Marry, age=13, subject=null),</span></span><br><span class="line"><span class="comment">Student(name=Timi, age=14, subject=null)]</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ul><h2 id="java8-stream流"><a href="#java8-stream流" class="headerlink" title="java8 stream流"></a>java8 stream流</h2><p>主要是用来更好的过滤或加工成想要的内容</p><h3 id="contains包含"><a href="#contains包含" class="headerlink" title="contains包含"></a>contains包含</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Study</span> &#123;</span><br><span class="line"><span class="comment">//    stream：串行</span></span><br><span class="line"><span class="comment">//    parallelStream：并行</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 中间操作符：filter:用于通过设置的条件过滤出包含的元素</span></span><br><span class="line"><span class="comment">     * 中止操作符：collect：收集器，将流转换其他形式</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">filter</span><span class="params">()</span> &#123;</span><br><span class="line">        List&lt;String&gt; strings = Arrays.asList(<span class="string">&quot;abc&quot;</span>, <span class="string">&quot;abcd&quot;</span>, <span class="string">&quot;abcde&quot;</span>, <span class="string">&quot;f&quot;</span>);</span><br><span class="line">        List&lt;String&gt; filter = strings.stream().filter(str -&gt; str.contains(<span class="string">&quot;a&quot;</span>)).collect(Collectors.toList());</span><br><span class="line">        System.out.println(filter);</span><br><span class="line">        <span class="comment">//[abc, abcd, abcde]</span></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="distinct-去除重复的"><a href="#distinct-去除重复的" class="headerlink" title="distinct:去除重复的"></a>distinct:去除重复的</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * distinct:去除重复的</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">distinct</span><span class="params">()</span>&#123;</span><br><span class="line">    List&lt;String&gt; strings = Arrays.asList(<span class="string">&quot;abc&quot;</span>, <span class="string">&quot;abcd&quot;</span>, <span class="string">&quot;abcde&quot;</span>, <span class="string">&quot;f&quot;</span>,<span class="string">&quot;&quot;</span>,<span class="string">&quot;f&quot;</span>,<span class="string">&quot;c&quot;</span>,<span class="string">&quot;abc&quot;</span>);</span><br><span class="line">    List&lt;String&gt; distinct = strings.stream().distinct().collect(Collectors.toList());</span><br><span class="line">    System.out.println(distinct);</span><br><span class="line">    <span class="comment">// [abc, abcd, abcde, f, , c]</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="limit-边界长度"><a href="#limit-边界长度" class="headerlink" title="limit 边界长度"></a>limit 边界长度</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * limit:会返回一个不超过给定长度的流</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">limit</span><span class="params">()</span>&#123;</span><br><span class="line">    List&lt;String&gt; strings = Arrays.asList(<span class="string">&quot;abc&quot;</span>, <span class="string">&quot;abcd&quot;</span>, <span class="string">&quot;abcde&quot;</span>, <span class="string">&quot;f&quot;</span>,<span class="string">&quot;&quot;</span>,<span class="string">&quot;f&quot;</span>,<span class="string">&quot;c&quot;</span>,<span class="string">&quot;abc&quot;</span>);</span><br><span class="line">    List&lt;String&gt; limit = strings.stream().limit(<span class="number">4</span>).collect(Collectors.toList());</span><br><span class="line">    System.out.println(limit);</span><br><span class="line">    <span class="comment">// [abc, abcd, abcde, f]</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="anyMatch-一个满足"><a href="#anyMatch-一个满足" class="headerlink" title="anyMatch 一个满足"></a>anyMatch 一个满足</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 中止操作符</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * anyMatch: 集合中是否有一个元素满足条件</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">anyMatch</span><span class="params">()</span>&#123;</span><br><span class="line">    List&lt;String&gt; strings = Arrays.asList(<span class="string">&quot;abc&quot;</span>, <span class="string">&quot;abcd&quot;</span>, <span class="string">&quot;abcde&quot;</span>, <span class="string">&quot;f&quot;</span>,<span class="string">&quot;&quot;</span>,<span class="string">&quot;f&quot;</span>,<span class="string">&quot;c&quot;</span>,<span class="string">&quot;abc&quot;</span>);</span><br><span class="line">    <span class="type">boolean</span> <span class="variable">bc</span> <span class="operator">=</span> strings.stream().anyMatch(s -&gt; s.contains(<span class="string">&quot;bc&quot;</span>));</span><br><span class="line">    System.out.println(bc);<span class="comment">// true</span></span><br><span class="line"></span><br><span class="line">    <span class="type">boolean</span> <span class="variable">q</span> <span class="operator">=</span> strings.stream().anyMatch(s -&gt; s.contains(<span class="string">&quot;q&quot;</span>));</span><br><span class="line">    System.out.println(q); <span class="comment">//false</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="集体满足"><a href="#集体满足" class="headerlink" title="集体满足"></a>集体满足</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * anyMatch: 集合中元素是否满足条件</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">allMatch</span><span class="params">()</span>&#123;</span><br><span class="line">    List&lt;String&gt; strings = Arrays.asList(<span class="string">&quot;abc&quot;</span>, <span class="string">&quot;abcd&quot;</span>, <span class="string">&quot;abcde&quot;</span>, <span class="string">&quot;f&quot;</span>,<span class="string">&quot;&quot;</span>,<span class="string">&quot;f&quot;</span>,<span class="string">&quot;c&quot;</span>,<span class="string">&quot;abc&quot;</span>);</span><br><span class="line">    <span class="type">boolean</span> <span class="variable">length</span> <span class="operator">=</span> strings.stream().allMatch(s -&gt; s.length() &gt; <span class="number">3</span>);</span><br><span class="line">    System.out.println(length);<span class="comment">// false</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="返回元素"><a href="#返回元素" class="headerlink" title="返回元素"></a>返回元素</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * findAny：返回当前流中任意元素</span></span><br><span class="line"><span class="comment"> * findFirst:返回当前流中第一个元素</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">findAny</span><span class="params">()</span>&#123;</span><br><span class="line">    List&lt;String&gt; strings = Arrays.asList(<span class="string">&quot;abc&quot;</span>, <span class="string">&quot;abcd&quot;</span>, <span class="string">&quot;abcde&quot;</span>, <span class="string">&quot;f&quot;</span>,<span class="string">&quot;&quot;</span>,<span class="string">&quot;f&quot;</span>,<span class="string">&quot;c&quot;</span>,<span class="string">&quot;abc&quot;</span>);</span><br><span class="line">    Optional&lt;String&gt; any = strings.stream().findAny();</span><br><span class="line">    System.out.println(any.get()); <span class="comment">//abc</span></span><br><span class="line"></span><br><span class="line">    Optional&lt;String&gt; first = strings.stream().findFirst();</span><br><span class="line">    System.out.println(first.get()); <span class="comment">//abc</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="forEach-简单的循环"><a href="#forEach-简单的循环" class="headerlink" title="forEach 简单的循环"></a>forEach 简单的循环</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">forEach</span><span class="params">()</span>&#123;</span><br><span class="line">    List&lt;String&gt; strings = Arrays.asList(<span class="string">&quot;abc&quot;</span>, <span class="string">&quot;abcd&quot;</span>, <span class="string">&quot;abcde&quot;</span>, <span class="string">&quot;f&quot;</span>,<span class="string">&quot;&quot;</span>,<span class="string">&quot;f&quot;</span>,<span class="string">&quot;c&quot;</span>,<span class="string">&quot;abc&quot;</span>);</span><br><span class="line">    strings.stream().forEach(s -&gt; System.out.println(s));</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    abc</span></span><br><span class="line"><span class="comment">    abcd</span></span><br><span class="line"><span class="comment">    abcde</span></span><br><span class="line"><span class="comment">    f</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    f</span></span><br><span class="line"><span class="comment">    c</span></span><br><span class="line"><span class="comment">    abc</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="skip-去掉前面-n-个元素"><a href="#skip-去掉前面-n-个元素" class="headerlink" title="skip 去掉前面 n 个元素"></a>skip 去掉前面 n 个元素</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * skip:去掉前面 n 个元素</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">skip</span><span class="params">()</span>&#123;</span><br><span class="line">    List&lt;String&gt; strings = Arrays.asList(<span class="string">&quot;abc&quot;</span>,<span class="string">&quot;bc&quot;</span>,<span class="string">&quot;bc&quot;</span>,<span class="string">&quot;efg&quot;</span>,<span class="string">&quot;abcd&quot;</span>,<span class="string">&quot;&quot;</span>,<span class="string">&quot;f&quot;</span>,<span class="string">&quot;jkl&quot;</span>);</span><br><span class="line">    List&lt;String&gt; collect = strings.stream().skip(<span class="number">3</span>).collect(Collectors.toList());</span><br><span class="line">    System.out.println(collect);</span><br><span class="line">    <span class="comment">// [efg, abcd, , f, jkl]</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="map-对流中的所有元素作统一处理"><a href="#map-对流中的所有元素作统一处理" class="headerlink" title="map : 对流中的所有元素作统一处理"></a>map : 对流中的所有元素作统一处理</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * map : 对流中的所有元素作统一处理</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">map</span><span class="params">()</span>&#123;</span><br><span class="line">    List&lt;String&gt; strings = Arrays.asList(<span class="string">&quot;abc&quot;</span>,<span class="string">&quot;bc&quot;</span>,<span class="string">&quot;bc&quot;</span>,<span class="string">&quot;efg&quot;</span>,<span class="string">&quot;abcd&quot;</span>,<span class="string">&quot;&quot;</span>,<span class="string">&quot;f&quot;</span>,<span class="string">&quot;jkl&quot;</span>);</span><br><span class="line">    List&lt;String&gt; collect = strings.stream().map(str -&gt; <span class="string">&quot;Hulu_&quot;</span> + str.concat(<span class="string">&quot;_Bye&quot;</span>)).collect(Collectors.toList());</span><br><span class="line">    System.out.println(collect);</span><br><span class="line">    <span class="comment">// [Hulu_abc_Bye, Hulu_bc_Bye, Hulu_bc_Bye, Hulu_efg_Bye, Hulu_abcd_Bye, Hulu__Bye, Hulu_f_Bye, Hulu_jkl_Bye]</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="flatMap-小集合合并成大集合"><a href="#flatMap-小集合合并成大集合" class="headerlink" title="flatMap 小集合合并成大集合"></a>flatMap 小集合合并成大集合</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * flatmap的核心作用:把几个小的集合分别转换成流，再把各个流转换为一个流，流转集合，以此达到小集合合并到大集合的作用。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">en</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">Student</span> <span class="variable">z3</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&quot;z3&quot;</span>, <span class="number">22</span>,Arrays.asList(<span class="string">&quot;语文&quot;</span>, <span class="string">&quot;数学&quot;</span>));</span><br><span class="line">    <span class="type">Student</span> <span class="variable">l4</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&quot;l4&quot;</span>, <span class="number">18</span>,Arrays.asList(<span class="string">&quot;英语&quot;</span>, <span class="string">&quot;化学&quot;</span>));</span><br><span class="line">    <span class="type">Student</span> <span class="variable">w5</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&quot;w5&quot;</span>, <span class="number">20</span>,Arrays.asList(<span class="string">&quot;科学&quot;</span>));</span><br><span class="line">    </span><br><span class="line">    List&lt;Student&gt; students = Arrays.asList(z3, l4, w5);</span><br><span class="line">    List&lt;String&gt; collect = students.stream().flatMap(stu -&gt; stu.getSubject().stream()).collect(Collectors.toList());</span><br><span class="line"></span><br><span class="line">    System.out.println(collect);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//[语文, 数学, 英语, 化学, 科学]</span></span><br></pre></td></tr></table></figure><h3 id="sorted-排序"><a href="#sorted-排序" class="headerlink" title="sorted:排序"></a>sorted:排序</h3><p>Comparator.comparing () 对象特定排序<br>更多排序参考：<br><a href="https://www.cnblogs.com/zhangliang88/p/14341348.html">https://www.cnblogs.com/zhangliang88/p/14341348.html</a></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * sorted:排序，默认按照code排序，也可以传参排序</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">sorted</span><span class="params">()</span>&#123;</span><br><span class="line">    List&lt;String&gt; strings = Arrays.asList(<span class="string">&quot;abc&quot;</span>,<span class="string">&quot;bc&quot;</span>,<span class="string">&quot;bc&quot;</span>,<span class="string">&quot;efg&quot;</span>,<span class="string">&quot;abcd&quot;</span>,<span class="string">&quot;&quot;</span>,<span class="string">&quot;f&quot;</span>,<span class="string">&quot;jkl&quot;</span>);</span><br><span class="line">    List&lt;String&gt; collect = strings.stream().sorted().collect(Collectors.toList());</span><br><span class="line">    System.out.println(collect);</span><br><span class="line">    <span class="comment">// [, abc, abcd, bc, bc, efg, f, jkl]</span></span><br><span class="line">    Collator.getInstance(Locale.CHINA);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">Comparator.comparing () 对象特定排序</span></span><br><span class="line"><span class="comment">例子：根据学生年龄排序</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">paiXu</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">Student</span> <span class="variable">z3</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&quot;z3&quot;</span>, <span class="number">22</span>);</span><br><span class="line">    <span class="type">Student</span> <span class="variable">l4</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&quot;l4&quot;</span>, <span class="number">18</span>);</span><br><span class="line">    <span class="type">Student</span> <span class="variable">w5</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&quot;w5&quot;</span>, <span class="number">20</span>);</span><br><span class="line">    ArrayList&lt;Student&gt; objects = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    objects.add(z3);</span><br><span class="line">    objects.add(l4);</span><br><span class="line">    objects.add(w5);</span><br><span class="line"></span><br><span class="line">    List&lt;Student&gt; collect = objects.stream().sorted(Comparator.comparing(Student::getAge)).collect(Collectors.toList());</span><br><span class="line">    System.out.println(collect);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// [Student(name=l4, age=18, subject=null),      Student(name=w5, age=20, subject=null),     Student(name=z3, age=22, subject=null)]</span></span><br></pre></td></tr></table></figure><h3 id="summaryStatistics-统计"><a href="#summaryStatistics-统计" class="headerlink" title="summaryStatistics 统计"></a>summaryStatistics 统计</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * mapToInt:将list里面的 Integer 转话为 int （大概是这么个意思），并且转换为int流</span></span><br><span class="line"><span class="comment">     * summaryStatistics：将int流分别计算 平均数、总数、最大、最小值</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">summaryStatistics</span><span class="params">()</span>&#123;</span><br><span class="line">        List&lt;Integer&gt; primes = Arrays.asList(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">10</span>);</span><br><span class="line">        <span class="type">IntSummaryStatistics</span> <span class="variable">stats</span> <span class="operator">=</span> primes.stream().mapToInt(x-&gt;x).summaryStatistics();</span><br><span class="line">        System.out.println(<span class="string">&quot;max : &quot;</span> + stats.getMax());</span><br><span class="line">        System.out.println(<span class="string">&quot;min : &quot;</span> + stats.getMin());</span><br><span class="line">        System.out.println(<span class="string">&quot;sum : &quot;</span> + stats.getSum());</span><br><span class="line">        System.out.println(<span class="string">&quot;average : &quot;</span> + stats.getAverage());</span><br><span class="line"></span><br><span class="line">        <span class="comment">// max : 10</span></span><br><span class="line">        <span class="comment">// min : 1</span></span><br><span class="line">        <span class="comment">// sum : 55</span></span><br><span class="line">        <span class="comment">// average : 5.5</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="java8-日期时间类"><a href="#java8-日期时间类" class="headerlink" title="java8 日期时间类"></a>java8 日期时间类</h2><p>部分转载自<br><a href="https://blog.csdn.net/lemon_TT/article/details/109145432">https://blog.csdn.net/lemon_TT/article/details/109145432</a></p><h3 id="LocalDate"><a href="#LocalDate" class="headerlink" title="LocalDate"></a>LocalDate</h3><p>只会获取年月日</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//获取当前年月日  </span></span><br><span class="line"><span class="type">LocalDate</span> <span class="variable">localDate</span> <span class="operator">=</span> LocalDate.now();  </span><br><span class="line"><span class="comment">//构造指定的年月日  </span></span><br><span class="line"><span class="type">LocalDate</span> <span class="variable">localDate1</span> <span class="operator">=</span> LocalDate.of(<span class="number">2020</span>, <span class="number">10</span>, <span class="number">10</span>);  </span><br></pre></td></tr></table></figure><p>获取年、月、日、星期几</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//获取年</span></span><br><span class="line"><span class="type">int</span> <span class="variable">year</span> <span class="operator">=</span> localDate.getYear();  </span><br><span class="line"><span class="type">int</span> <span class="variable">year1</span> <span class="operator">=</span> localDate.get(ChronoField.YEAR);  </span><br><span class="line"><span class="comment">//获取月份</span></span><br><span class="line"><span class="type">Month</span> <span class="variable">month</span> <span class="operator">=</span> localDate.getMonth();  </span><br><span class="line"><span class="type">int</span> <span class="variable">month1</span> <span class="operator">=</span> localDate.get(ChronoField.MONTH_OF_YEAR);  </span><br><span class="line"><span class="comment">//获取天</span></span><br><span class="line"><span class="type">int</span> <span class="variable">day</span> <span class="operator">=</span> localDate.getDayOfMonth();  </span><br><span class="line"><span class="type">int</span> <span class="variable">day1</span> <span class="operator">=</span> localDate.get(ChronoField.DAY_OF_MONTH);  </span><br><span class="line"><span class="comment">//获取星期几</span></span><br><span class="line"><span class="type">DayOfWeek</span> <span class="variable">dayOfWeek</span> <span class="operator">=</span> localDate.getDayOfWeek();  </span><br><span class="line"><span class="type">int</span> <span class="variable">dayOfWeek1</span> <span class="operator">=</span> localDate.get(ChronoField.DAY_OF_WEEK);  </span><br></pre></td></tr></table></figure><h3 id="LocalTime"><a href="#LocalTime" class="headerlink" title="LocalTime"></a>LocalTime</h3><p>只会获取几点几分几秒</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">LocalTime</span> <span class="variable">localTime</span> <span class="operator">=</span> LocalTime.of(<span class="number">13</span>, <span class="number">51</span>, <span class="number">10</span>);  </span><br><span class="line"><span class="type">LocalTime</span> <span class="variable">localTime1</span> <span class="operator">=</span> LocalTime.now();  </span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//获取小时  </span></span><br><span class="line"><span class="type">int</span> <span class="variable">hour</span> <span class="operator">=</span> localTime.getHour();  </span><br><span class="line"><span class="type">int</span> <span class="variable">hour1</span> <span class="operator">=</span> localTime.get(ChronoField.HOUR_OF_DAY);  </span><br><span class="line"><span class="comment">//获取分  </span></span><br><span class="line"><span class="type">int</span> <span class="variable">minute</span> <span class="operator">=</span> localTime.getMinute();  </span><br><span class="line"><span class="type">int</span> <span class="variable">minute1</span> <span class="operator">=</span> localTime.get(ChronoField.MINUTE_OF_HOUR);  </span><br><span class="line"><span class="comment">//获取秒  </span></span><br><span class="line"><span class="type">int</span> <span class="variable">second</span> <span class="operator">=</span> localTime.getSecond();  </span><br><span class="line"><span class="type">int</span> <span class="variable">second1</span> <span class="operator">=</span> localTime.get(ChronoField.SECOND_OF_MINUTE);  </span><br></pre></td></tr></table></figure><h3 id="LocalDateTime"><a href="#LocalDateTime" class="headerlink" title="LocalDateTime"></a>LocalDateTime</h3><p>获取年月日时分秒，等于LocalDate+LocalTime</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">LocalDateTime</span> <span class="variable">localDateTime</span> <span class="operator">=</span> LocalDateTime.now();  </span><br><span class="line"><span class="type">LocalDateTime</span> <span class="variable">localDateTime1</span> <span class="operator">=</span> LocalDateTime.of(<span class="number">2020</span>, Month.SEPTEMBER, <span class="number">10</span>, <span class="number">14</span>, <span class="number">46</span>, <span class="number">56</span>);  </span><br><span class="line"><span class="type">LocalDateTime</span> <span class="variable">localDateTime2</span> <span class="operator">=</span> LocalDateTime.of(localDate, localTime);  </span><br><span class="line"><span class="type">LocalDateTime</span> <span class="variable">localDateTime3</span> <span class="operator">=</span> localDate.atTime(localTime);  </span><br><span class="line"><span class="type">LocalDateTime</span> <span class="variable">localDateTime4</span> <span class="operator">=</span> localTime.atDate(localDate);  </span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 获取LocalDate</span></span><br><span class="line"><span class="type">LocalDate</span> <span class="variable">localDate2</span> <span class="operator">=</span> localDateTime.toLocalDate();  </span><br><span class="line"><span class="comment">// 获取LocalTime</span></span><br><span class="line"><span class="type">LocalTime</span> <span class="variable">localTime2</span> <span class="operator">=</span> localDateTime.toLocalTime();  </span><br></pre></td></tr></table></figure><h3 id="Instant"><a href="#Instant" class="headerlink" title="Instant"></a>Instant</h3><p>获取秒数<br>如果只是为了获取秒数或者毫秒数，使用<code>System.currentTimeMillis()</code>来得更为方便</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Instant</span> <span class="variable">instant</span> <span class="operator">=</span> Instant.now();</span><br><span class="line"><span class="comment">// 获取秒数</span></span><br><span class="line"><span class="type">long</span> <span class="variable">currentSecond</span> <span class="operator">=</span> instant.getEpochSecond();  </span><br><span class="line"><span class="comment">// 获取毫秒数</span></span><br><span class="line"><span class="type">long</span> <span class="variable">currentMilli</span> <span class="operator">=</span> instant.toEpochMilli();  </span><br></pre></td></tr></table></figure><h3 id="日期时间的修改与计算"><a href="#日期时间的修改与计算" class="headerlink" title="日期时间的修改与计算"></a>日期时间的修改与计算</h3><p><strong>LocalDate、LocalTime、LocalDateTime、Instant</strong>为不可变对象，修改这些对象对象会返回一个副本</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">LocalDateTime</span> <span class="variable">localDateTime</span> <span class="operator">=</span> LocalDateTime.of(<span class="number">2020</span>, Month.SEPTEMBER, <span class="number">10</span>,  </span><br><span class="line">              <span class="number">14</span>, <span class="number">46</span>, <span class="number">56</span>);  </span><br><span class="line"><span class="comment">//增加一年  </span></span><br><span class="line">localDateTime = localDateTime.plusYears(<span class="number">1</span>);  </span><br><span class="line">localDateTime = localDateTime.plus(<span class="number">1</span>, ChronoUnit.YEARS);  </span><br><span class="line"><span class="comment">//减少一个月  </span></span><br><span class="line">localDateTime = localDateTime.minusMonths(<span class="number">1</span>);  </span><br><span class="line">localDateTime = localDateTime.minus(<span class="number">1</span>, ChronoUnit.MONTHS);  </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//使用with进行修改</span></span><br><span class="line"><span class="comment">//修改年为2020</span></span><br><span class="line">localDateTime = localDateTime.withYear(<span class="number">2020</span>);  </span><br><span class="line"><span class="comment">//修改为2022  </span></span><br><span class="line">localDateTime = localDateTime.with(ChronoField.YEAR, <span class="number">2022</span>);  </span><br></pre></td></tr></table></figure><p>另外比如有些时候想知道这个月的最后一天是几号、下个周末是几号，通过提供的时间和日期API可以很快得到答案，比如通过<code>firstDayOfYear()</code>返回了当前日期的第一天日期</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">System.out.println(<span class="string">&quot;//本月的第一天&quot;</span>);</span><br><span class="line">System.out.println(localDate.now().with(TemporalAdjusters.firstDayOfMonth()));</span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">&quot;//今年的程序员日&quot;</span>);</span><br><span class="line">System.out.println(LocalDate.now().with(TemporalAdjusters.firstDayOfYear()).plusDays(<span class="number">255</span>));</span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">&quot;//今天之前的一个周六&quot;</span>);</span><br><span class="line">System.out.println(LocalDate.now().with(TemporalAdjusters.previous(DayOfWeek.SATURDAY)));</span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">&quot;//本月最后一个工作日&quot;</span>);</span><br><span class="line">System.out.println(LocalDate.now().with(TemporalAdjusters.lastInMonth(DayOfWeek.FRIDAY)));</span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">&quot;//自定义逻辑&quot;</span>);</span><br><span class="line">System.out.println(LocalDate.now().with(temporal -&gt; temporal.plus(ThreadLocalRandom.current().nextInt(<span class="number">100</span>), ChronoUnit.DAYS)));</span><br></pre></td></tr></table></figure><p>Java 8 中有一个专门的类 Period 定义了日期间隔，通过 <code>Period.between</code> 得到了两个 <code>LocalDate</code>的差，返回的是两个日期差几年零几月零几天。如果希望得知两个日期之间差几天，直接调用<code>Period</code>的 <code>getDays()</code> 方法得到的只是最后的“零几天”，而不是算总的间隔天</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;//计算日期差&quot;</span>);</span><br><span class="line">    <span class="type">LocalDate</span> <span class="variable">today</span> <span class="operator">=</span> LocalDate.of(<span class="number">2019</span>, <span class="number">12</span>, <span class="number">12</span>);</span><br><span class="line">    <span class="type">LocalDate</span> <span class="variable">specifyDate</span> <span class="operator">=</span> LocalDate.of(<span class="number">2019</span>, <span class="number">10</span>, <span class="number">1</span>);</span><br><span class="line">    System.out.println(Period.between(specifyDate, today).getDays());</span><br><span class="line">    System.out.println(Period.between(specifyDate, today));</span><br><span class="line">    System.out.println(ChronoUnit.DAYS.between(specifyDate, today));</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 计算日期差</span></span><br><span class="line"><span class="comment">//11</span></span><br><span class="line"><span class="comment">//P2M11D</span></span><br><span class="line"><span class="comment">//72</span></span><br></pre></td></tr></table></figure><h3 id="格式化日期-常用"><a href="#格式化日期-常用" class="headerlink" title="格式化日期(常用)"></a>格式化日期(常用)</h3><p>DateTimeFormatter默认提供了多种格式化方式，如果默认提供的不能满足要求，可以通过DateTimeFormatter的ofPattern方法创建自定义格式化方式</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">LocalDate</span> <span class="variable">localDate1</span> <span class="operator">=</span> LocalDate.parse(<span class="string">&quot;20201010&quot;</span>, DateTimeFormatter.BASIC_ISO_DATE);</span><br><span class="line">System.out.println(<span class="string">&quot;localDate1 = &quot;</span> + localDate1);</span><br><span class="line"><span class="type">LocalDate</span> <span class="variable">localDate2</span> <span class="operator">=</span> LocalDate.parse(<span class="string">&quot;2020-10-10&quot;</span>, DateTimeFormatter.ISO_LOCAL_DATE);</span><br><span class="line">System.out.println(<span class="string">&quot;localDate2 = &quot;</span> + localDate2);</span><br><span class="line"><span class="comment">// localDate1 = 2020-10-10</span></span><br><span class="line"><span class="comment">// localDate2 = 2020-10-10</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 自定义</span></span><br><span class="line"><span class="type">LocalDateTime</span> <span class="variable">longTime</span> <span class="operator">=</span> LocalDateTime.of(<span class="number">1999</span>, <span class="number">10</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">2</span>,<span class="number">3</span>);</span><br><span class="line">System.out.println(longTime.format(DateTimeFormatter.ofPattern(<span class="string">&quot;yyyy-MM-dd HH:mm:ss&quot;</span>)));</span><br><span class="line"><span class="comment">// 1999-10-02 01:02:03</span></span><br></pre></td></tr></table></figure><p>自定义DateTimeFormatterBuilder。用得比较少</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 自定义模板</span></span><br><span class="line"><span class="type">DateTimeFormatter</span> <span class="variable">dateTimeFormatter</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DateTimeFormatterBuilder</span>()</span><br><span class="line">        .appendValue(ChronoField.YEAR)</span><br><span class="line">        .appendLiteral(<span class="string">&quot;/&quot;</span>)</span><br><span class="line">        .appendValue(ChronoField.MONTH_OF_YEAR)</span><br><span class="line">        .appendLiteral(<span class="string">&quot;/&quot;</span>)</span><br><span class="line">        .appendValue(ChronoField.DAY_OF_MONTH)</span><br><span class="line">        .appendLiteral(<span class="string">&quot; &quot;</span>)</span><br><span class="line">        .appendValue(ChronoField.HOUR_OF_DAY)</span><br><span class="line">        .appendLiteral(<span class="string">&quot;:&quot;</span>)</span><br><span class="line">        .appendValue(ChronoField.MINUTE_OF_HOUR)</span><br><span class="line">        .appendLiteral(<span class="string">&quot;:&quot;</span>)</span><br><span class="line">        .appendValue(ChronoField.SECOND_OF_MINUTE)</span><br><span class="line">        .appendLiteral(<span class="string">&quot;.&quot;</span>)</span><br><span class="line">        .appendValue(ChronoField.MILLI_OF_SECOND)</span><br><span class="line">        .toFormatter();</span><br><span class="line"></span><br><span class="line"><span class="comment">//使用模板</span></span><br><span class="line">System.out.println(LocalDateTime.now().format(dateTimeFormatter));</span><br><span class="line"><span class="comment">//       2023/1/19 9:50:22.624</span></span><br></pre></td></tr></table></figure><h3 id="时区"><a href="#时区" class="headerlink" title="时区"></a>时区</h3><p>Java 8 推出了新的时间日期类 ZoneId、ZoneOffset、LocalDateTime、ZonedDateTime和 DateTimeFormatter，处理时区问题更简单清晰</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">stringDate</span> <span class="operator">=</span> <span class="string">&quot;2020-01-02 22:00:00&quot;</span>;</span><br><span class="line"><span class="type">ZoneId</span> <span class="variable">timeZoneSH</span> <span class="operator">=</span> ZoneId.of(<span class="string">&quot;Asia/Shanghai&quot;</span>);</span><br><span class="line"><span class="type">ZoneId</span> <span class="variable">timeZoneNY</span> <span class="operator">=</span> ZoneId.of(<span class="string">&quot;America/New_York&quot;</span>);</span><br><span class="line"><span class="type">ZoneId</span> <span class="variable">timeZoneJST</span> <span class="operator">=</span> ZoneOffset.ofHours(<span class="number">9</span>);</span><br><span class="line"></span><br><span class="line"><span class="type">DateTimeFormatter</span> <span class="variable">dateTimeFormatter</span> <span class="operator">=</span> DateTimeFormatter.ofPattern(<span class="string">&quot;yyyy-MM-dd HH:mm:ss&quot;</span>);</span><br><span class="line"><span class="type">ZonedDateTime</span> <span class="variable">date</span> <span class="operator">=</span> ZonedDateTime.of(LocalDateTime.parse(stringDate, dateTimeFormatter), timeZoneJST);</span><br><span class="line"></span><br><span class="line"><span class="type">DateTimeFormatter</span> <span class="variable">outputFormat</span> <span class="operator">=</span> DateTimeFormatter.ofPattern(<span class="string">&quot;yyyy-MM-dd HH:mm:ss Z&quot;</span>);</span><br><span class="line">System.out.println(timeZoneSH.getId() +<span class="string">&quot;------&quot;</span>+ outputFormat.withZone(timeZoneSH).format(date));</span><br><span class="line">System.out.println(timeZoneNY.getId() +<span class="string">&quot;------&quot;</span>+ outputFormat.withZone(timeZoneNY).format(date));</span><br><span class="line">System.out.println(timeZoneJST.getId() +<span class="string">&quot;------&quot;</span>+ outputFormat.withZone(timeZoneJST).format(date));</span><br><span class="line"></span><br><span class="line"><span class="comment">// 输出</span></span><br><span class="line">Asia/Shanghai------<span class="number">2020</span>-<span class="number">01</span>-<span class="number">02</span> <span class="number">21</span>:<span class="number">00</span>:<span class="number">00</span> +0800</span><br><span class="line">America/New_York------<span class="number">2020</span>-<span class="number">01</span>-<span class="number">02</span> 08:<span class="number">00</span>:<span class="number">00</span> -<span class="number">0500</span></span><br><span class="line">+09:<span class="number">00</span>------<span class="number">2020</span>-<span class="number">01</span>-<span class="number">02</span> <span class="number">22</span>:<span class="number">00</span>:<span class="number">00</span> +0900</span><br></pre></td></tr></table></figure><h3 id="前后端日期时间转化问题"><a href="#前后端日期时间转化问题" class="headerlink" title="前后端日期时间转化问题"></a>前后端日期时间转化问题</h3><p>项目一般在实体类上加<code>@DatetimeFormat</code>与<code>@JsonFormat</code>注解<br>两个需要同时加，否则会有时区的问题</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ApiModelProperty(&quot;创建时间&quot;)</span></span><br><span class="line"><span class="meta">@DateTimeFormat(pattern = &quot;yyyy-MM-dd HH:mm:ss&quot;)</span></span><br><span class="line"><span class="meta">@JsonFormat(pattern = &quot;yyyy-MM-dd HH:mm:ss&quot;)</span></span><br><span class="line"><span class="keyword">private</span> LocalDateTime createTime;</span><br></pre></td></tr></table></figure><p>或者在配置文件加</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">#时间戳统一转换</span><br><span class="line">spring.jackson.date-format=yyyy-MM-dd HH:mm:ss</span><br><span class="line">spring.jackson.time-zone=GMT+8</span><br></pre></td></tr></table></figure><h3 id="消失的八小时"><a href="#消失的八小时" class="headerlink" title="消失的八小时"></a>消失的八小时</h3><ul><li><p>日期字符串存入DB后差8小时<br>在后端与数据库交互的时候，可能会遇到一个问题，就是往DB中存储了一个时间字段之后，后面再查询的时候，就会发现时间数值差了8个小时，这个需要在DB的连接信息中指定下时区信息：<br><code>spring.datasource.druid.url=jdbc:mysql://127.0.0.1:3306/test?serverTimezone=Asia/Shanghai</code></p></li><li><p>界面时间与后台时间差8小时<br>在有一些前后端交互的项目中，可能会遇到一个问题，就是前端选择并保存了一个时间信息，再查询的时候就会发现与设置的时间差了8个小时，这个其实就是后端时区转换设置的问题。SpringBoot的配置文件中，需要指定时间字符串转换的时区信息：<br><code>spring.jackson.time-zone=GMT+8</code><br>这样从接口json中传递过来的时间信息，jackson框架可以根据对应时区转换为正确的Date数据进行处理。</p></li></ul><h3 id="模板解释"><a href="#模板解释" class="headerlink" title="模板解释"></a>模板解释</h3><table><thead><tr><th>字母</th><th>使用说明</th></tr></thead><tbody><tr><td>yyyy</td><td>4位数的年</td></tr><tr><td>yy</td><td>显示2位数的年份，比如2022年，则显示为22年</td></tr><tr><td>MM</td><td>显示2位数的月份，不满2位数的，前面补0，比如7月份显示07月</td></tr><tr><td>M</td><td>月份，不满2位的月份不会补0</td></tr><tr><td>dd</td><td>天， 如果1位数的天数，则补0</td></tr><tr><td>d</td><td>天，不满2位数字的，不补0</td></tr><tr><td>HH</td><td>24小时制的时间显示，小时数，两位数，不满2位数字的前面补0</td></tr><tr><td>H</td><td>24小时制的时间显示，小时数，不满2位数字的不补0</td></tr><tr><td>hh</td><td>12小时制的时间显示，小时数，两位数，不满2位数字的前面补0</td></tr><tr><td>ss</td><td>秒数，不满2位的前面补0</td></tr><tr><td>s</td><td>秒数，不满2位的不补0</td></tr><tr><td>SSS</td><td>毫秒数</td></tr><tr><td>z</td><td>时区名称，比如北京时间东八区，则显示CST</td></tr><tr><td>Z</td><td>时区偏移信息，比如北京时间东八区，则显示+0800</td></tr><tr><td></td><td></td></tr></tbody></table>]]></content>
      
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>博客搬家</title>
      <link href="/posts/1df.html"/>
      <url>/posts/1df.html</url>
      
        <content type="html"><![CDATA[<p>这段时间总是忙前忙后，经历了人生各种波折，终于有时间缓一缓了。</p><h4 id="为什么博客搬家"><a href="#为什么博客搬家" class="headerlink" title="为什么博客搬家"></a>为什么博客搬家</h4><p>2022年头的时候jsdelivr被墙（还是服务器故障）的问题闹得沸沸扬扬，还需要把前缀的<code>cdn.</code>改成<code>fastly.</code>才得到缓解。再加上gitee的骚操作（需要审批才能公开访问）一度让我想放弃弄博客了。但学习和工作的时候就很麻烦了，没有知识的归纳体系，记下来的东西有时候也比较难找。想来想去，还是不得不把博客弄起来。</p><p>期间想要不换一个博客框架？<br>要不把博客部署在服务器上，做成动态的？<br>期间试过很多都不是很理想，也有种种原因不习惯。兜兜转转还是回到HEXO这种静态框架。顺便把主体也升级到最新版本的。砍掉以前一些花里胡哨的功能，保留一些基本功能。<br>最后，重启回以前的博客地址（平平淡淡才是真.jpg）：<a href="https://pengyirui.github.io/">https://pengyirui.github.io</a></p><h4 id="Twikoo"><a href="#Twikoo" class="headerlink" title="Twikoo"></a>Twikoo</h4><p>评论系统更换为<code>Twikoo</code>，地址：<a href="https://twikoo.js.org/quick-start.html#vercel-%E9%83%A8%E7%BD%B2">https://twikoo.js.org/quick-start.html#vercel-%E9%83%A8%E7%BD%B2</a><br><code>Twikoo</code>需要用到<code>mongodb</code>和<code>vercel</code></p><p><code>mongodb</code>：<a href="https://www.mongodb.com/">https://www.mongodb.com</a><br><code>vercel</code>：<a href="https://vercel.com/">https://vercel.com</a></p><h4 id="主题首页隐藏分类"><a href="#主题首页隐藏分类" class="headerlink" title="主题首页隐藏分类"></a>主题首页隐藏分类</h4><p><code>butterfly-&gt;layout-&gt;includes-&gt;widget-&gt;card_author.pug</code><br>将此路径文件下的<code>.car-info-data.site-data.is-center</code>下的第三个<code>a</code>方法注释掉（16-18行）</p><h4 id="推荐软件"><a href="#推荐软件" class="headerlink" title="推荐软件"></a>推荐软件</h4><p>在大陆访问github不到是个问题，所以我一般都会挂梯子<br>但对于如果只想访问github而买梯子的用户来说就有点亏了<br>这里推荐一款软件<code>stem++</code><br>很久以前就使用的一款软件，现在更新了更多功能也支持github的加速了</p><p>官网：<a href="https://steampp.net/">https://steampp.net</a></p><p>开源链接：<br><a href="https://github.com/BeyondDimension/SteamTools">https://github.com/BeyondDimension/SteamTools</a><br><a href="https://gitee.com/rmbgame/SteamTools">https://gitee.com/rmbgame/SteamTools</a></p><h4 id="最后一点吐槽"><a href="#最后一点吐槽" class="headerlink" title="最后一点吐槽"></a>最后一点吐槽</h4><p>现在什么专业都转程序员，太tm卷啦。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 博客 </tag>
            
            <tag> 自言自语 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>给函数取一个好的名字</title>
      <link href="/posts/1dfc.html"/>
      <url>/posts/1dfc.html</url>
      
        <content type="html"><![CDATA[<p>最近看到比较有趣的文章，记录一下重点内容<br>转载自<a href="https://www.cnblogs.com/dolphin0520/p/10567879.html">https://www.cnblogs.com/dolphin0520/p/10567879.html</a></p><h3 id="函数命名最佳实践"><a href="#函数命名最佳实践" class="headerlink" title="函数命名最佳实践"></a>函数命名最佳实践</h3><ol><li><p>要领1：动词选取要精准</p><p> 通常来说，动词决定了一个函数要采取什么”动作”。动词取的好，一个函数名字已经成功了80%。</p><p> 动词决定了函数的具体动作，而名词决定了函数具体的操作对象，对于名词，尽量使用领域词汇，不要使用生僻或者大家很少使用的词语。</p><p> 常用动词表：</p><table><thead><tr><th>类别</th><th>单词</th></tr></thead><tbody><tr><td>添加/插入/创建/初始化/加载</td><td>add、append、insert、create、initialize、load</td></tr><tr><td>删除/销毁</td><td>delete、remove、destroy、drop</td></tr><tr><td>打开/开始/启动</td><td>open、start</td></tr><tr><td>关闭/停止</td><td>close、stop</td></tr><tr><td>获取/读取/查找/查询</td><td>get、fetch、acquire、read、search、find、query</td></tr><tr><td>设置/重置/放入/写入/释放/刷新</td><td>set、reset、put、write、release、refresh</td></tr><tr><td>发送/推送</td><td>send、push</td></tr><tr><td>接收/拉取</td><td>receive、pull</td></tr><tr><td>提交/撤销/取消</td><td>submit、cancel</td></tr><tr><td>收集/采集/选取/选择</td><td>collect、pick、select</td></tr><tr><td>提取/解析</td><td>sub、extract、parse</td></tr><tr><td>编码/解码</td><td>encode、decode</td></tr><tr><td>填充/打包/压缩</td><td>fill、pack、compress</td></tr><tr><td>清空/拆包/解压</td><td>flush、clear、unpack、decompress</td></tr><tr><td>增加/减少</td><td>increase、decrease、reduce</td></tr><tr><td>分隔/拼接</td><td>split、join、concat</td></tr><tr><td>过滤/校验/检测</td><td>filter、valid、check</td></tr></tbody></table></li><li><p>要领2：名词使用领域词汇</p><p> 举个例子：集合的容量通常用capacity、集合实际元素个数用size、字符串长度用length，这种就遵循大家的使用习惯，不要用size去形如字符串的长度。</p><p> 再比如，假如使用到建造者模式，那么通常会用build作为函数名字，这个时候就不要另辟蹊径，用create来作为函数名字，使用大家约定俗成的命名习惯更容易让你的代码被别人读懂。</p><p> 常用名词表：</p><table><thead><tr><th>类别</th><th>单词</th></tr></thead><tbody><tr><td>容量/大小/长度</td><td>capacity、size、length</td></tr><tr><td>实例/上下文</td><td>instance、context</td></tr><tr><td>配置</td><td>config、settings</td></tr><tr><td>头部/前面/前一个/第一个</td><td>header、front、previous、first</td></tr><tr><td>尾部/后面/后一个/最后一个</td><td>tail、back、next、last</td></tr><tr><td>区间/区域/某一部分/范围/规模</td><td>range、interval、region、area、section、scope、scale</td></tr><tr><td>缓存/缓冲/会话</td><td>cache、buffer、session</td></tr><tr><td>本地/局部/全局</td><td>local、global</td></tr><tr><td>成员/元素</td><td>member、element</td></tr><tr><td>菜单/列表</td><td>menu、list</td></tr><tr><td>源/目标</td><td>source、destination、target</td></tr></tbody></table></li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringCloud</title>
      <link href="/posts/a67e.html"/>
      <url>/posts/a67e.html</url>
      
        <content type="html"><![CDATA[<h2 id="微服务概述"><a href="#微服务概述" class="headerlink" title="微服务概述"></a>微服务概述</h2><p>整个微服务架构是由大量的技术框架和方案构成，比如：</p><table><thead><tr><th>服务基础开发</th><th>Spring MVC、Spring、SpringBoot</th></tr></thead><tbody><tr><td>服务注册与发现</td><td>Netflix的Eureka、Apache的ZooKeeper等</td></tr><tr><td>服务调用</td><td>RPC调用有阿里巴巴的Dubbo，Rest方式调用有当当网Dubbo基础上扩展的Dubbox、还有其他方式实现的Rest，比如Ribbon、Feign</td></tr><tr><td>分布式配置管理</td><td>百度的Disconf、360的QConf、淘宝的Diamond、Netflix的Archaius等</td></tr><tr><td>负载均衡</td><td>Ribbon</td></tr><tr><td>服务熔断</td><td>Hystrix</td></tr><tr><td>API网关</td><td>Zuul</td></tr><tr><td>批量任务</td><td>当当网的Elastic-Job、Linkedln的Azkaban</td></tr><tr><td>服务跟踪</td><td>京东的Hydra、Twitter的Zipkin等</td></tr></tbody></table><p>Spring Cloud的出现，可以说是为微服务架构迎来一缕曙光，有SpringCloud社区的巨大支持和技术保障，让我们实施微服务架构变得异常简单了起来，它不像我们之前所列举的框架那样，只是解决微服务中的某一个问题，而是一个解决微服务架构实施的综合性解决框架，它整合了诸多被广泛实践和证明有效的框架作为实施的基础组件，又在该体系基础上创建了一些非常优秀的边缘组件将它们很好地整合起来。</p><p>加之Spring Cloud 有其Spring 的强大技术背景，极高的社区活跃度，也许未来Spring Cloud会成为微服务的标准技术解决方案；</p><p>SpringCloud官网：<a href="http://spring.io/">http://spring.io</a></p><h2 id="版本问题"><a href="#版本问题" class="headerlink" title="版本问题"></a>版本问题</h2><p>Spring Cloud的版本并不是传统的使用数字的方式标识，而是使用诸如：Angel、Brixton、Camden……等伦敦的地名来命名版本，版本的先后顺序使用字母表A-Z的先后来标识。从2020年开始以日期为版本</p><p>Spring Cloud与Spring Boot版本匹配关系</p><table><thead><tr><th>SpringCloud版本</th><th>SpringBoot版本</th></tr></thead><tbody><tr><td>2021.0.0</td><td>兼容Spring Boot2.6X</td></tr><tr><td>2020.0.X</td><td>兼容Spring Boot2.4X, 2.5X</td></tr><tr><td>Hoxton</td><td>兼容Sprint Boot2.2.X，2.3X</td></tr><tr><td>Finchley</td><td>兼容Spring Boot 2.0.x，  不兼容Spring Boot 1.5.x</td></tr><tr><td>Edgware</td><td>兼容Spring Boot 1.5.x，  不兼容Spring Boot 2.0.x</td></tr><tr><td>Dalston</td><td>兼容Spring Boot 1.5.x，  不兼容Spring Boot 2.0.x</td></tr><tr><td>Camden</td><td>兼容Spring Boot 1.4.x，  也兼容Spring Boot 1.5.x</td></tr><tr><td>Brixton</td><td>兼容Spring Boot 1.3.x，  也兼容Spring Boot 1.4.x</td></tr><tr><td>Angel</td><td>兼容Spring Boot 1.2.x</td></tr></tbody></table><p>spring-cloud版本：<code>Hoxton.SR3版本</code><br>spring版本：<code>2.2.6.RELEASE</code></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span> <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--2.2.6.RELEASE版本--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2.6.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">relativePath</span>/&gt;</span> <span class="comment">&lt;!-- lookup parent from repository --&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.peng<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>003-consumer-feign<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>003-consumer-feign<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">description</span>&gt;</span>Demo project for Spring Boot<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">java.version</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">java.version</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--Hoxton.SR3版本--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">spring-cloud.version</span>&gt;</span>Hoxton.SR3<span class="tag">&lt;/<span class="name">spring-cloud.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-dependencies<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring-cloud.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">type</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">scope</span>&gt;</span>import<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="主要学习"><a href="#主要学习" class="headerlink" title="主要学习"></a>主要学习</h2><table><thead><tr><th>组件名称</th><th>作用</th></tr></thead><tbody><tr><td>Eureka</td><td>服务注册中心</td></tr><tr><td>Ribbon</td><td>客户端负载均衡</td></tr><tr><td>Feign</td><td>声明式服务调用</td></tr><tr><td>Hystrix</td><td>客户端容错保护</td></tr><tr><td>Zuul</td><td>API服务网关</td></tr></tbody></table><p>Spring Cloud各个组件相互配合，合作支持了一套完整的微服务架构。<br><strong>注册中心</strong>—— 负责服务的注册与发现，很好将各服务连接起来<br><strong>断路器</strong>——负责监控服务之间的调用情况，连续多次失败进行熔断保护。<br><strong>API网关</strong>——负责转发所有对外的请求和服务<br><strong>配置中心</strong>——提供了统一的配置信息管理服务,可以实时的通知各个服务获取最新的配置信息<br><strong>链路追踪</strong>——可以将所有的请求数据记录下来，方便我们进行后续分析<br><strong>各个组件</strong>又提供了功能完善的dashboard监控平台,可以方便的监控各组件的运行状况  </p><h2 id="RestTemplate概述"><a href="#RestTemplate概述" class="headerlink" title="RestTemplate概述"></a>RestTemplate概述</h2><p> <code>RestTemplate</code> 是 <strong>Spring</strong> 提供的一个调用 <strong>Restful</strong> 服务的抽象层，它简化了 <strong>Restful</strong> 服务的通信方式，隐藏了不必要的一些细节，让我们更加优雅地在应用中调用 <strong>Restful</strong> 服务 。 我们在项目中经常要使用第三方的 <strong>Rest API</strong> 服务，比如短信、快递查询、天气预报等等。这些第三方只要提供了 <strong>Rest Api</strong> ，你都可以使用 <code>RestTemplate</code> 来调用它们。 只要你的项目使用了 <strong>Spring MVC</strong> 就已经集成了<code>RestTemplate</code> 。但是通常情况下该类不会自动被注入 <strong>Spring IoC</strong>容器 ，需要手动实例化。</p><h2 id="CAP理论"><a href="#CAP理论" class="headerlink" title="CAP理论"></a>CAP理论</h2><p>著名的CAP理论指出，一个分布式系统不可能同时满足C(一致性)、A(可用性)和P(分区容错性)。</p><p>由于分区容错性在是分布式系统中必须要保证的，因此我们只能在A和C之间进行权衡，在此Zookeeper保证的是CP, 而Eureka则是AP。</p><p><strong>Zookeeper保证CP</strong></p><p>在ZooKeeper中，当master节点因为网络故障与其他节点失去联系时，剩余节点会重新进行leader选举，但是问题在于，选举leader需要一定时间, 且选举期间整个ZooKeeper集群都是不可用的，这就导致在选举期间注册服务瘫痪。在云部署的环境下，因网络问题使得ZooKeeper集群失去master节点是大概率事件，虽然服务最终能够恢复，但是在选举时间内导致服务注册长期不可用是难以容忍的。</p><p><strong>Eureka保证AP</strong></p><p>Eureka优先保证可用性，Eureka各个节点是平等的，某几个节点挂掉不会影响正常节点的工作，剩余的节点依然可以提供注册和查询服务。而Eureka的客户端在向某个Eureka注册或时如果发现连接失败，则会自动切换至其它节点，只要有一台Eureka还在，就能保证注册服务可用(保证可用性)，只不过查到的信息可能不是最新的(不保证强一致性)。</p><p>所以Eureka在网络故障导致部分节点失去联系的情况下，只要有一个节点可用，那么注册和查询服务就可以正常使用，而不会像zookeeper那样使整个注册服务瘫痪，Eureka优先保证了可用性。</p><h2 id="服务注册中心"><a href="#服务注册中心" class="headerlink" title="服务注册中心"></a>服务注册中心</h2><p>作用类似zookeeper</p><p>注册中心负载均衡</p><h3 id="自我保护机制"><a href="#自我保护机制" class="headerlink" title="自我保护机制"></a>自我保护机制</h3><p>两个微服务客户端实例A和B之间有调用的关系，A是消费者，B是提供者，但是由于网络故障，B未能及时向Eureka发送心跳续约，这时候Eureka 不能简单的将B从注册表中剔除，因为如果剔除了，A就无法从Eureka 服务器中获取B注册的服务，但是这时候B服务是可用的；<br>所以，Eureka的自我保护模式最好还是开启它。 </p><p>关于自我保护常用几个配置如下：</p><p>分别修改2个Eureka服务服务端的application.properties文件增加一下配置</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#关闭自我保护模式 作用是如果开启了自我保护模式以后，那么如果服务的提供者或消费者（Eureka的客户端）因为网络波动问题</span></span><br><span class="line"><span class="comment">#暂时失去了与服务器端的连接那么Eureka就会直接注销这个服务删除这个服务相关的数据，如果关闭了这个自我保护，Eureka只</span></span><br><span class="line"><span class="comment">#会先挂起这个服务，当网络恢复正常以后这个服务将自动的恢复</span></span><br><span class="line"><span class="attr">eureka.server.enable-self-preservation</span> = <span class="string">false </span></span><br></pre></td></tr></table></figure><p>分别修改服务提供者和服务消费项目的application.properties文件添加一下配置</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#每间隔2s，向服务端发送一次心跳，证明自己依然&quot;存活&quot;</span></span><br><span class="line"><span class="attr">eureka.instance.lease-renewal-interval-in-seconds</span>=<span class="string">2</span></span><br><span class="line"><span class="comment">#告诉服务端，如果我10s之内没有给你发心跳，就代表我故障了，将我踢出掉</span></span><br><span class="line"><span class="attr">eureka.instance.lease-expiration-duration-in-seconds</span>=<span class="string">10</span></span><br></pre></td></tr></table></figure><h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><ul><li><p>导包<br>  Spring Cloud Discovery —&gt;Eureka Server</p>  <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-server<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>配置文件</p>  <figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#内嵌定时tomcat的端口</span></span><br><span class="line"><span class="attr">server.port</span>=<span class="string">9500</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">#设置该服务注册中心的hostname</span></span><br><span class="line"><span class="attr">eureka.instance.hostname</span>=<span class="string">eureka9500</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">#由于我们目前创建的应用是一个服务注册中心，而不是普通的应用，默认情况下，</span></span><br><span class="line"><span class="comment">#这个应用会向注册中心（也是它自己）注册它自己，设置为false表示禁止这种自己向自己注册的默认行为</span></span><br><span class="line"><span class="attr">eureka.client.register-with-eureka</span>=<span class="string">false</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">#表示不去检索其他的服务，因为服务注册中心本身的职责就是维护服务实例，它不需要去检索其他服务</span></span><br><span class="line"><span class="attr">eureka.client.fetch-registry</span>=<span class="string">false</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">#指定服务注册中心的位置（指向对方地址，多个server加逗号分割）</span></span><br><span class="line"><span class="attr">eureka.client.service-url.defaultZone</span>=<span class="string">http://localhost:9600/eureka</span></span><br></pre></td></tr></table></figure></li><li><p>主程序<br>  需要加入<code>@EnableEurekaServer</code>注释启动<br>  例子：</p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableEurekaServer</span> <span class="comment">// 注册中心专用</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Application9500</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        SpringApplication.run(Application9500.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="生产者"><a href="#生产者" class="headerlink" title="生产者"></a>生产者</h2><p>如果消费者需要轮询，服务者要相同服务名，用不同端口区分,并且注册中心的地址需要一致</p><ul><li><p>导包<br>  Spring Cloud Discovery —&gt; Eureka Discovery Clients</p>  <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>配置文件</p>  <figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#指定服务名字 这个名称将在服务消费者时被调用</span></span><br><span class="line"><span class="attr">spring.application.name</span>=<span class="string">003-provider</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">#指定eureka的访问地址</span></span><br><span class="line"><span class="attr">eureka.client.service-url.defaultZone</span>=<span class="string">http://localhost:9500/eureka,http://localhost:9600/eureka</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">#设置端口</span></span><br><span class="line"><span class="attr">server.port</span>=<span class="string">8081</span></span><br></pre></td></tr></table></figure></li><li><p>Controller</p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ProviderController</span> &#123;</span><br><span class="line">    <span class="meta">@GetMapping(&quot;/hello&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">hello</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;hello,集群模式使用,服务提供者向注册中心注册服务-8081&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>主程序</p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableEurekaClient</span> <span class="comment">// 启动生产者模式</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Application8081</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        SpringApplication.run(Application8081.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="消费者-Ribbon"><a href="#消费者-Ribbon" class="headerlink" title="消费者 - Ribbon"></a>消费者 - Ribbon</h2><p><strong>主要作用Ribbon实现客户端负载均衡</strong></p><p>Ribbon是一个基于HTTP 和 TCP 的客户端负载均衡器，当使用Ribbon对服务进行访问的时候，它会扩展Eureka客户端的服务发现功能，实现从Eureka注册中心中获取服务端列表，并通过Eureka客户端来确定服务端是否己经启动。Ribbon在Eureka客户端服务发现的基础上，实现了对服务实例的选择策略，从而实现对服务的负载均衡消费。</p><p>由于Spring Cloud Ribbon的封装， 我们在微服务架构中使用客户端负载均衡调用非常简单， 只需要如下两步：</p><p>1、启动多个服务提供者实例并注册到一个服务注册中心或是服务注册中心集群。</p><p>2、服务消费者通过被<code>＠LoadBalanced</code>注解修饰过的<code>RestTemplate</code>来调用服务提供者。</p><p>这样，我们就可以实现服务提供者的高可用以及服务消费者的负载均衡调用。</p><h3 id="策略"><a href="#策略" class="headerlink" title="策略"></a>策略</h3><table><thead><tr><th>方法</th><th>解释</th></tr></thead><tbody><tr><td>RandomRule</td><td>随机</td></tr><tr><td>RoundRobinRule</td><td>轮询</td></tr><tr><td>AvailabilityFilteringRule</td><td>先过滤掉由于多次访问故障的服务，以及并发连接数超过阈值的服务，然后对剩下的服务按照轮询策略进行访问；</td></tr><tr><td>WeightedResponseTimeRule</td><td>根据平均响应时间计算所有服务的权重，响应时间越快服务权重就越大被选中的概率即越高，如果服务刚启动时统计信息不足，则使用RoundRobinRule策略，待统计信息足够会切换到该WeightedResponseTimeRule策略；</td></tr><tr><td>RetryRule</td><td>先按照RoundRobinRule策略分发，如果分发到的服务不能访问，则在指定时间内进行重试，分发其他可用的服务；</td></tr><tr><td>BestAvailableRule</td><td>先过滤掉由于多次访问故障的服务，然后选择一个并发量最小的服务；</td></tr><tr><td>ZoneAvoidanceRule</td><td>综合判断服务节点所在区域的性能和服务节点的可用性，来决定选择哪个服务；</td></tr></tbody></table><h3 id="配置-1"><a href="#配置-1" class="headerlink" title="配置"></a>配置</h3><p>导包依旧是 eureka-client</p><ul><li><p>配置文件</p>  <figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#指定服务的名称 即使是服务的消费者也会将自己注册到注册中心</span></span><br><span class="line"><span class="attr">spring.application.name</span>=<span class="string">003-consumer</span></span><br><span class="line"><span class="comment">#指定Eureka注册中的访问地址</span></span><br><span class="line"><span class="attr">eureka.client.service-url.defaultZone</span>=<span class="string">http://localhost:9500/eureka,http://localhost:9600/eureka</span></span><br><span class="line"></span><br><span class="line"><span class="attr">server.port</span>=<span class="string">8080</span></span><br></pre></td></tr></table></figure></li><li><p>需要一个<code>RestConfig</code><br>  作用：</p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RestConfig</span> &#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="meta">@LoadBalanced</span> <span class="comment">//负载均衡</span></span><br><span class="line">    <span class="keyword">public</span> RestTemplate <span class="title function_">restTemplate</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">RestTemplate</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//不设置的话默认轮训</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span>  <span class="comment">//随机策略实现负载均衡</span></span><br><span class="line">    <span class="keyword">public</span> IRule <span class="title function_">rule</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">RandomRule</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>Controller</p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">IndexController</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RestTemplate restTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/queryProduct&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">test</span><span class="params">()</span>&#123;</span><br><span class="line">        String serviceUrl=<span class="string">&quot;http://003-provider/hello&quot;</span>; <span class="comment">// 这里用到的是生产者名</span></span><br><span class="line">        String result=restTemplate.getForObject(serviceUrl,String.class);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;集群模式，使用eureka调用结果：&quot;</span>+result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>主程序</p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableEurekaClient</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Application8080</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        SpringApplication.run(Application8080.class, args);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="消费者-Hystrix"><a href="#消费者-Hystrix" class="headerlink" title="消费者 - Hystrix"></a>消费者 - Hystrix</h2><p><strong>服务熔断Hystrix 主要解决雪崩问题</strong><br>还有个仪表盘能查看服务之间的情况</p><h3 id="知识点"><a href="#知识点" class="headerlink" title="知识点"></a>知识点</h3><ul><li><p>引起雪崩效应常见场景<br>  硬件故障：如服务器宕机，机房断电，光纤被挖断等</p><p>  流量激增：如异常流量，重试加大流量等</p><p>  缓存击穿：一般发生在应用重启，所有缓存失效时，以及短时间内大量缓存失效时。大量的缓存不命中，使请求直击后端服务，造成服务提供者超负荷运行，引起服务不可用</p><p>  程序 BUG：如程序逻辑导致内存泄漏，JVM 长时间 FullGC 等</p><p>  同步等待：服务间采用同步调用模式，同步等待造成的资源耗尽</p></li><li><p>服务熔断<br>  熔断机制是应对雪崩效应的一种微服务链路保护机制，一般来说，每个服务都需要熔断机制的。如高压电路中，如果某个地方的电压过高，熔断器就会熔断，对电路进行保护。在微服务架构中，熔断机制也是起着类似的作用。</p></li><li><p>服务降级<br>  降级是指自己的待遇下降了，从 <code>RPC</code> 调用环节来讲，就是说整体资源快不够了，忍痛将某些服务单元先关掉，关闭后还要返回一些可处理的备选方法，待渡过难关，再开启回来</p></li><li><p>熔断器的状态<br>  熔断器有三个状态 CLOSED 、 OPEN 、 HALF_OPEN 熔断器默认关闭状态。<br>  当触发熔断后状态变更为OPEN ,在等待到指定的时间，Hystrix会放请求检测服务是否开启，这期间熔断器会变为 HALF_OPEN 半开启状态，熔断探测服务可用则继续变更为 CLOSED 关闭熔断器。</p></li></ul><h3 id="配置-2"><a href="#配置-2" class="headerlink" title="配置"></a>配置</h3><ul><li><p>导包</p>  <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 客户端 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--熔断器--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-hystrix<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--仪表盘--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-hystrix-dashboard<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>配置文件</p>  <figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#指定服务的名称 即使是服务的消费者也会将自己注册到注册中心</span></span><br><span class="line"><span class="attr">spring.application.name</span>=<span class="string">003-consumer</span></span><br><span class="line"><span class="comment">#指定Eureka注册中的访问地址</span></span><br><span class="line"><span class="attr">eureka.client.service-url.defaultZone</span>=<span class="string">http://localhost:9500/eureka,http://localhost:9600/eureka</span></span><br><span class="line"></span><br><span class="line"><span class="attr">server.port</span>=<span class="string">8080</span></span><br></pre></td></tr></table></figure></li><li><p>Controller<br>  <strong>注意：</strong><br>  熔断的方法名可以不需要和主方法名保持一致<br>  但是错误的方法返回值类型必须和主方法返回值类型保持一致<br>  错误错误的方法参数类型必须和主方法的参数类型保持一致<br>  否则会报fallbackMethod找不到的异常</p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">IndexController</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RestTemplate restTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/queryProduct&quot;)</span></span><br><span class="line">    <span class="comment">//调用熔断方法,fallbackMethod方法名，commandProperties自定义熔断时间属性等（如果没有自定义，默认一秒）</span></span><br><span class="line">    <span class="meta">@HystrixCommand(fallbackMethod = &quot;orderback&quot;,</span></span><br><span class="line"><span class="meta">            commandProperties=&#123;@HystrixProperty(name=&quot;execution.isolation.thread.timeoutInMilliseconds&quot;, value=&quot;1500&quot;)&#125;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">test</span><span class="params">()</span>&#123;</span><br><span class="line">        String serviceUrl=<span class="string">&quot;http://003-provider/hello&quot;</span>; <span class="comment">// 这里用到的是生产者名</span></span><br><span class="line">        String result=restTemplate.getForObject(serviceUrl,String.class);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;集群模式，使用eureka调用结果：&quot;</span>+result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//熔断方法,需要和调用主体方法的返回值和入参一致</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">orderback</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;抢购的人太多了，请稍后....&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>主程序</p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableEurekaClient</span></span><br><span class="line"><span class="meta">@EnableCircuitBreaker</span>  <span class="comment">//启用熔断</span></span><br><span class="line"><span class="meta">@EnableHystrixDashboard</span>  <span class="comment">//启动熔断监控仪表盘</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Application8080</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        SpringApplication.run(Application8080.class, args);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Bean</span><span class="comment">//创建仪表盘</span></span><br><span class="line"><span class="keyword">public</span> ServletRegistrationBean <span class="title function_">getServlet</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">HystrixMetricsStreamServlet</span> <span class="variable">streamServlet</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HystrixMetricsStreamServlet</span>();</span><br><span class="line">    <span class="type">ServletRegistrationBean</span> <span class="variable">registrationBean</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ServletRegistrationBean</span>(streamServlet);</span><br><span class="line">    registrationBean.setLoadOnStartup(<span class="number">1</span>);</span><br><span class="line">    registrationBean.addUrlMappings(<span class="string">&quot;/actuator/hystrix.stream&quot;</span>); <span class="comment">// 这里指定的urlMapping 就是咱们在仪表盘中monitor Stream 的地址后缀</span></span><br><span class="line">    registrationBean.setName(<span class="string">&quot;HystrixMetricsStreamServlet&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> registrationBean;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p>打开仪表盘的方法，例如：<a href="http://localhost:8080/hystrix">http://localhost:8080/hystrix</a></p><p>仪表盘中的输入框，输入本机地址+端口号+UrlMappings<br>例如：<a href="http://localhost:8080//actuator/hystrix.stream">http://localhost:8080//actuator/hystrix.stream</a></p><p>右边框输入别名，然后回车，即可进入仪表盘</p><h2 id="消费者-Feign组件"><a href="#消费者-Feign组件" class="headerlink" title="消费者 - Feign组件"></a>消费者 - Feign组件</h2><p>整合了Ribbon 和 Hystrix，只需导一个包即可</p><p>主要好处，用方法调用而不是字符串拼接</p><ul><li>导包  <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--Feign组件--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-openfeign<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li>配置文件  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"># 指定服务的名称 即使是服务的消费者也会将自己注册到注册中心</span><br><span class="line">spring.application.name=003-consumer-feign</span><br><span class="line"></span><br><span class="line"># 指定Eureka注册中的访问地址</span><br><span class="line">eureka.client.service-url.defaultZone=http://localhost:9500/eureka,http://localhost:9600/eureka</span><br><span class="line"></span><br><span class="line"># 端口号</span><br><span class="line">server.port=9090</span><br><span class="line"></span><br><span class="line"># 开启熔断机制</span><br><span class="line">feign.hystrix.enabled=true</span><br></pre></td></tr></table></figure></li></ul><h3 id="创建feign接口"><a href="#创建feign接口" class="headerlink" title="创建feign接口"></a>创建feign接口</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// name：远程服务名/生产者服务名</span></span><br><span class="line"><span class="comment">// fallback：熔断器的类</span></span><br><span class="line"><span class="meta">@FeignClient(name = &quot;003-provider&quot;,fallback = ProductFeignClientCallback.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">ProductFeignClient</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/hello&quot;)</span><span class="comment">//远程服务名的地址</span></span><br><span class="line">    String <span class="title function_">hello</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Controller"><a href="#Controller" class="headerlink" title="Controller"></a>Controller</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">IndexController</span> &#123;</span><br><span class="line">    <span class="comment">// 导入接口，接口调用方法</span></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> ProductFeignClient feignClient;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/queryProduct&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">feign</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> feignClient.hello()+<span class="string">&quot;：feign&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>访问<code>/queryProduct</code>就可以调用远程的服务名</p><h3 id="实现服务熔断"><a href="#实现服务熔断" class="headerlink" title="实现服务熔断"></a>实现服务熔断</h3><p>配置文件需要开启熔断机制<br><code>feign.hystrix.enabled=true</code></p><p>自定义一个FeignClient接口的实现类，这个类就是熔断降级触发的逻辑代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ProductFeignClientCallback</span> <span class="keyword">implements</span> <span class="title class_">ProductFeignClient</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">hello</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;产品服务正在升级中，暂时不可用，请耐心等待....&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在接口上添加熔断类型的注解<br><code>@FeignClient(fallback = ProductFeignClientCallback.class)</code></p><h3 id="主程序"><a href="#主程序" class="headerlink" title="主程序"></a>主程序</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableEurekaClient</span></span><br><span class="line"><span class="meta">@EnableFeignClients</span> <span class="comment">//通过@EnableFeignClients注解开启Spring Cloud Feign的支持功能</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Application9090</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        SpringApplication.run(Application9090.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="服务网关Zuul"><a href="#服务网关Zuul" class="headerlink" title="服务网关Zuul"></a>服务网关Zuul</h2><p>Zuul是Netflix开源的微服务网关，它可以和Eureka、Ribbon、Hystrix等组件配合使用，Zuul组件的<br>核心是一系列的过滤器，这些过滤器可以完成以下功能：<br>动态路由：动态将请求路由到不同后端集群<br>压力测试：逐渐增加指向集群的流量，以了解性能<br>负载分配：为每一种负载类型分配对应容量，并弃用超出限定值的请求<br>静态响应处理：边缘位置进行响应，避免转发到内部集群<br>身份认证和安全: 识别每一个资源的验证要求，并拒绝那些不符的请求。Spring Cloud对Zuul进行了整合和增强。</p><h3 id="导包"><a href="#导包" class="headerlink" title="导包"></a>导包</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-zuul<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="主程序-1"><a href="#主程序-1" class="headerlink" title="主程序"></a>主程序</h3><p>开启Eureka客户端发现功能</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableEurekaClient</span></span><br><span class="line"><span class="meta">@EnableZuulProxy</span><span class="comment">//启用网关代理</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ZuulApplication</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        SpringApplication.run(ZuulApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h3><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#eureka服务器的地址</span></span><br><span class="line"><span class="attr">eureka.client.service-url.defaultZone</span>=<span class="string">http://localhost:9000/eureka/</span></span><br><span class="line"><span class="comment">#允许ip地址</span></span><br><span class="line"><span class="attr">eureka.instance.prefer-ip-address</span>=<span class="string">true</span></span><br><span class="line"><span class="comment">#服务端口</span></span><br><span class="line"><span class="attr">server.port</span>=<span class="string">8080</span></span><br><span class="line"><span class="comment">#当前网关服务的名字</span></span><br><span class="line"><span class="attr">spring.application.name</span>=<span class="string">musicstore-zuul-server</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">#musicstore-albumservice的路由规则，所有以/api-album/打头的服务都转发到musicstore-albumservice</span></span><br><span class="line"><span class="attr">zuul.routes.api-album.path</span>=<span class="string">/api-album/**</span></span><br><span class="line"><span class="attr">zuul.routes.api-album.service-id</span>=<span class="string">musicstore-albumservice</span></span><br><span class="line"><span class="comment">#musicstore-orderservice的路由规则，所有以/api-album/打头的服务都转发到musicstore-albumservice</span></span><br><span class="line"><span class="attr">zuul.routes.api-order.path</span>=<span class="string">/api-order/**</span></span><br><span class="line"><span class="attr">zuul.routes.api-order.service-id</span>=<span class="string">musicstore-orderservice</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">#简化路由规则的映射(根据服务名直接映射)</span></span><br><span class="line"><span class="comment">#zuul.routes.musicstore-albumservice.path=/api-album/**</span></span><br><span class="line"><span class="comment">#zuul.routes.musicstore-orderservice.path=/api-order/**</span></span><br></pre></td></tr></table></figure><p>例子： <code>http://127.0.0.1:8080/api-album/album/2   等于  http://127.0.0.1:9001/album/2</code></p><h3 id="配置过滤器"><a href="#配置过滤器" class="headerlink" title="配置过滤器"></a>配置过滤器</h3><p>Zuul 中的过滤器跟我们之前使用的 javax.servlet.Filter 不一样，javax.servlet.Filter 只有一种类型，可以通过配置 urlPatterns 来拦截对应的请求。而 Zuul 中的过滤器总共有 4 种类型，且每种类型都有对应的使用场景。</p><ol><li><p>PRE：<br> 这种过滤器在请求被路由之前调用。我们可利用这种过滤器实现身份验证、在集群中选择请求的微服务、记录调试信息等。</p></li><li><p>ROUTING：<br> 这种过滤器将请求路由到微服务。这种过滤器用于构建发送给微服务的请求，并使用Apache HttpClient或Netfilx Ribbon请求微服务。</p></li><li><p>POST：<br> 这种过滤器在路由到微服务以后执行。这种过滤器可用来为响应添加标准的HTTPHeader、收集统计信息和指标、将响应从微服务发送给客户端等。</p></li><li><p>ERROR：<br> 在其他阶段发生错误时执行该过滤器。Zuul提供了自定义过滤器的功能实现起来也十分简单，只需要编写一个类去实现zuul提供的接口</p></li></ol><h3 id="日志过滤器"><a href="#日志过滤器" class="headerlink" title="日志过滤器"></a>日志过滤器</h3><p>例子：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">//自定义日志过滤器</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LogFilter</span> <span class="keyword">extends</span> <span class="title class_">ZuulFilter</span> &#123;</span><br><span class="line">    <span class="comment">// 继承 ZuulFilter</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">filterType</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// 选择pre属性</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;pre&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">filterOrder</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// 优先级0，最优先的意思</span></span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">shouldFilter</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">//设置true，否则过滤器不执行</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">run</span><span class="params">()</span> <span class="keyword">throws</span> ZuulException &#123;</span><br><span class="line">        <span class="comment">//要做的事情</span></span><br><span class="line">        RequestContext context= RequestContext.getCurrentContext();</span><br><span class="line">        HttpServletRequest request=context.getRequest();</span><br><span class="line">        System.out.println(<span class="string">&quot;***请求地址=&quot;</span>+request.getRequestURI());</span><br><span class="line">        System.out.println(<span class="string">&quot;***客户端ip=&quot;</span>+request.getRemoteAddr());</span><br><span class="line">        System.out.println(<span class="string">&quot;***请求时间=&quot;</span>+<span class="keyword">new</span> <span class="title class_">Date</span>());</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="身份验证"><a href="#身份验证" class="headerlink" title="身份验证"></a>身份验证</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SecurityFilter</span> <span class="keyword">extends</span> <span class="title class_">ZuulFilter</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">filterType</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;pre&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">filterOrder</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">shouldFilter</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">//如果请求的路径中包含order，则执行身份验证，否则不执行</span></span><br><span class="line">        RequestContext context=RequestContext.getCurrentContext();</span><br><span class="line">        String url=context.getRequest().getRequestURI();</span><br><span class="line">        <span class="keyword">if</span>(url.contains(<span class="string">&quot;order&quot;</span>))</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">run</span><span class="params">()</span> <span class="keyword">throws</span> ZuulException &#123;</span><br><span class="line">        RequestContext context= RequestContext.getCurrentContext();</span><br><span class="line">        <span class="comment">//获取请求</span></span><br><span class="line">        HttpServletRequest request=context.getRequest();</span><br><span class="line">        HttpServletResponse response=context.getResponse();</span><br><span class="line">        <span class="comment">//获取请求头</span></span><br><span class="line"></span><br><span class="line">        String header=request.getHeader(<span class="string">&quot;token&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;用户身份=&quot;</span>+header);</span><br><span class="line">        <span class="keyword">if</span>(header!=<span class="literal">null</span> &amp;&amp; !header.isEmpty())&#123;</span><br><span class="line">            <span class="comment">//用户传递了token，则继续执行</span></span><br><span class="line">            context.addZuulRequestHeader(<span class="string">&quot;token&quot;</span>,header);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="comment">//没有身份信息，则不能调用服务</span></span><br><span class="line">            context.setSendZuulResponse(<span class="literal">false</span>);</span><br><span class="line">            context.setResponseStatusCode(<span class="number">401</span>); <span class="comment">//未授权</span></span><br><span class="line">            response.setContentType(<span class="string">&quot;text/html;charset=utf-8&quot;</span>);</span><br><span class="line">            context.setResponseBody(<span class="string">&quot;您没有登录，不能调用订单服务&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="请求生命周期"><a href="#请求生命周期" class="headerlink" title="请求生命周期"></a>请求生命周期</h2><ul><li>正常情况下所有的请求都是按照pre、routing、post的顺序来执行，然后由post返回response</li><li>在pre阶段，如果有自定义的过滤器则执行自定义的过滤器</li><li>pre、routing、post的任意一个阶段如果抛异常了，则执行error过滤器</li></ul><h3 id="异常过滤器"><a href="#异常过滤器" class="headerlink" title="异常过滤器"></a>异常过滤器</h3><p>禁用zuul默认的异常处理SendErrorFilter过滤器，然后自定义我们自己的Errorfilter过滤器</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">zuul.SendErrorFilter.error.disable</span>=<span class="string">true</span></span><br></pre></td></tr></table></figure><hr><p>当zuul服务中某个过滤器出现异常则会执行自定义异常过滤器。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">//自定义异常过滤器</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ErrorFilter</span> <span class="keyword">extends</span> <span class="title class_">SendErrorFilter</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        String msg=<span class="string">&quot;请求失败！&quot;</span>;</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            <span class="type">RequestContext</span> <span class="variable">ctx</span> <span class="operator">=</span> RequestContext.getCurrentContext();</span><br><span class="line">            <span class="type">ExceptionHolder</span> <span class="variable">exception</span> <span class="operator">=</span> findZuulException(ctx.getThrowable());</span><br><span class="line">            System.out.println(<span class="string">&quot;错误信息:&quot;</span>+exception.getErrorCause());</span><br><span class="line">            msg+=<span class="string">&quot;error:&quot;</span>+exception.getErrorCause();</span><br><span class="line">            <span class="type">HttpServletResponse</span> <span class="variable">response</span> <span class="operator">=</span> ctx.getResponse();</span><br><span class="line">            response.setContentType(<span class="string">&quot;text/html;charset=utf-8&quot;</span>);</span><br><span class="line">            response.getWriter().println(msg);</span><br><span class="line">        &#125;<span class="keyword">catch</span> (Exception ex) &#123;</span><br><span class="line">            ex.printStackTrace();</span><br><span class="line">            ReflectionUtils.rethrowRuntimeException(ex);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> msg;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><p>设置统一的网关异常处理页面<br>定义控制器，实现ErrorController接口，返回错误页面，并编写视图内容，但是要设置zuul.SendErrorFilter.error.disable=false才能生效。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//设置统一的网关异常处理页面</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">GloballErrorController</span> <span class="keyword">implements</span> <span class="title class_">ErrorController</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getErrorPath</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;error&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/error&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">error</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;服务出错了，请联系管理员&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MyCat</title>
      <link href="/posts/31ed.html"/>
      <url>/posts/31ed.html</url>
      
        <content type="html"><![CDATA[<h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>Mycat的前身是阿里巴巴大名鼎鼎的Cobar，Cobar在开源了一段时间后，就没有再维护了，阿里巴巴放弃了该项目，再加上Cobar在使用过程中也发现存在一些问题。</p><p>2013年国内一批开源软件爱好者对Cobar这个项目进行了改进，并命名为Mycat，这就是MyCat的诞生。</p><p>MyCat是完全免费开源的，不属于任何商业公司。</p><p>权威指南：<a href="https://www.yuque.com/books/share/0576de75-ffc4-4c34-8586-952ae4636944">https://www.yuque.com/books/share/0576de75-ffc4-4c34-8586-952ae4636944</a></p><p>Mycat是一个开源数据库中间件，是一个实现了MySQL协议的的数据库中间件服务器，我们可以把它看作是一个数据库代理，用MySQL客户端工具和命令行访问Mycat，而Mycat再使用MySQL原生（Native）协议与多个MySQL服务器通信，也可以用JDBC协议与大多数主流数据库服务器通信，包括SQL Server、Oracle、DB2、PostgreSQL等主流数据库，也支持MongoDB这种新型NoSQL方式的存储，未来还会支持更多类型的存储；</p><p>一般地，Mycat主要用于代理MySQL数据库，虽然它也支持去访问其他类型的数据库；</p><p>Mycat的默认端口是8066，一般地，我们可以使用常见的对象映射框架比如MyBatis操作Mycat。</p><h2 id="主要能做什么"><a href="#主要能做什么" class="headerlink" title="主要能做什么"></a>主要能做什么</h2><ul><li><p>负载均衡</p></li><li><p>数据库的读写分离<br>  如果有了Mycat，客户端直接连接Mycat，可以实现读写分离，如果主出现问题，会自动切换到从服务器上</p></li><li><p>数据库分库分表<br>  水平切分（横向切分）<br>  根据表中数据的逻辑关系，将同一个表中的数据按照某种条件拆分到多台数据库服务器上面</p><p>  垂直切分（纵向切分）<br>  按照不同的表来切分到不同的数据库服务器之上</p></li></ul><p><strong>性能有瓶颈了，可以读写分离</strong><br><strong>数据库容量有瓶颈了，可以分库分表</strong></p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>下载<br><a href="http://dl.mycat.org.cn/">http://dl.mycat.org.cn/</a></p><p>解压后切换到mycat的bin路径下，执行<br>启动Mycat服务：<code>./mycat start</code><br>关闭Mycat服务：<code>./mycat stop</code><br>启动后要观察下有没有要运行，错误地运行会掉服务<code>sp -ef | grep mycat</code></p><p>运行Mycat（以Mysql方式运行）<br><code>./mysql -umycat -p -P8066 -h127.0.0.1</code></p><h2 id="主要修改的配置文件"><a href="#主要修改的配置文件" class="headerlink" title="主要修改的配置文件"></a>主要修改的配置文件</h2><p>注意！！文件格式编码为UTF-8</p><h3 id="rule-xml"><a href="#rule-xml" class="headerlink" title="rule.xml"></a>rule.xml</h3><p>水平分表的时候用到<br>在原有的rule的xml文件中，设置节点配置的数量</p><h3 id="server-xml"><a href="#server-xml" class="headerlink" title="server.xml"></a>server.xml</h3><p>主要用于配置mycat需要的服务器信息</p><p>Ø 配置序列生成方式</p><p>Ø 配置mycat逻辑数据库</p><p>Ø 配置mycat的访问账户和密码</p><h4 id="sequnceHandlerType属性"><a href="#sequnceHandlerType属性" class="headerlink" title="sequnceHandlerType属性"></a>sequnceHandlerType属性</h4><p>指定使用Mycat全局序列的类型：</p><p>0为本地文件方式，1为数据库方式，2为时间戳序列方式<br>对于读写分离而言，是不需要考虑主键生成方式的，也就是不需要配置全局序列号的。</p><h4 id="user属性"><a href="#user属性" class="headerlink" title="user属性"></a>user属性</h4><p>创建一个用户，使用此用户，登录mysql时需要用到</p><h3 id="schema-xml"><a href="#schema-xml" class="headerlink" title="schema.xml"></a>schema.xml</h3><p>用于配置的逻辑数据库的映射、表、分片规则、数据结点及真实的数据库信息；</p><p>Ø 配置逻辑库映射</p><p>Ø 配置垂直切分的表</p><p>Ø 配置真实的数据库</p><p>Ø 配置读写结点</p><h4 id="配置dataNode"><a href="#配置dataNode" class="headerlink" title="配置dataNode"></a>配置dataNode</h4><p>dataNode定义了Mycat中的数据节点，也就是我们通常说所的数据分片。<br>一个dataNode标签就是一个独立的数据分片，通俗理解，一个分片就是一个<code>物理数据库</code></p><p>Ø name<br>定义数据节点的名字，这个名字需要是唯一的，这个名字在schema里面会使用到；</p><p>Ø dataHost<br>用于定义该分片属于哪个数据库实例的，属性值是引用dataHost标签上定义的name属性</p><p>Ø database<br><strong>用于对应真实的数据库名，必须是真实存在的；</strong></p><h4 id="配置dataHost"><a href="#配置dataHost" class="headerlink" title="配置dataHost"></a>配置dataHost</h4><p>定义具体的数据库实例、读写分离配置和心跳语句；</p><ul><li><p>Ø balance属性<br>  负载均衡类型，目前的取值有4种：<br>  n balance=”0”, 不开启读写分离机制，所有读操作都发送到当前可用的writeHost上;<br>  n balance=”1”，全部的readHost与stand by writeHost参与select语句的负载均衡，简单的说，当双主双从模式(M1-&gt;S1，M2-&gt;S2，并且M1与 M2互为主备)，正常情况下，M2,S1,S2都参与select语句的负载均衡。<br>  n balance=”2”，所有读操作都随机的在writeHost、readhost上分发<br>  n balance=”3”，所有读请求随机的分发到wiriterHost对应的readhost执行，writerHost不负担读压力</p></li><li><p>Ø switchType属性<br>  用于指定主服务器发生故障后的切换类型<br>  -1 表示不自动切换<br>  1 默认值，自动切换（推荐）<br>  2 基于MySQL主从同步的状态决定是否切换<br>  3 基于MySQL galary cluster的切换机制（适合集群）（1.4.1）<br>  通常情况下，我们MySQL采用双主双从的模式下，<code>switchType为1即可</code>。因为双主从模式下，主从同步关系很复杂，不能根据MySQL的状态来切换。只需要在一个主出问题后，切换到另外的主。</p></li><li><p>Ø heartbeat标签<br>  用于和后端数据库进行心跳检查的语句，检测MySQL数据库是否正常运行<br>  当switchType为1时，mysql心跳检查语句是select user()<br>  当switchType为2时，mysql心跳检查语句是show slave status<br>  当switchType为3时，mysql心跳检查语句是show status like ‘wsrep%’</p></li><li><p>Ø writeHost与readHost标签<br>  这两个标签都指定后端数据库的相关配置给mycat，用于实例化后端连接池。唯一不同的是，writeHost指定写实例、readHost指定读实例，组合这些读写实例来满足系统的要求。</p><p>  在一个dataHost内可以定义多个writeHost和readHost。但是，如果writeHost指定的后端数据库宕机，那么这个writeHost绑定的所有readHost都将不可用。另一方面，由于这个writeHost宕机系统会自动的检测到，并切换到备用的writeHost上去。</p></li></ul><h2 id="双主双从读写分离"><a href="#双主双从读写分离" class="headerlink" title="双主双从读写分离"></a>双主双从读写分离</h2><p>以下以双主，双从为例子，按端口区分<br>3307主（3308、3309从）<br>3308主（3307、3310从）<br>3307、3308互为从</p><h3 id="server"><a href="#server" class="headerlink" title="server"></a>server</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">mycat</span>:server <span class="keyword">SYSTEM</span> <span class="string">&quot;server.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mycat:server</span> <span class="attr">xmlns:mycat</span>=<span class="string">&quot;http://io.mycat/&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">system</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;useSqlStat&quot;</span>&gt;</span>0<span class="tag">&lt;/<span class="name">property</span>&gt;</span>  <span class="comment">&lt;!-- 1为开启实时统计、0为关闭 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;useGlobleTableCheck&quot;</span>&gt;</span>0<span class="tag">&lt;/<span class="name">property</span>&gt;</span>  <span class="comment">&lt;!-- 1为开启全加班一致性检测、0为关闭 --&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- sequnceHandlerType</span></span><br><span class="line"><span class="comment">        指定使用Mycat全局序列的类型：</span></span><br><span class="line"><span class="comment">        0为本地文件方式，1为数据库方式，2为时间戳序列方式</span></span><br><span class="line"><span class="comment">        对于读写分离而言，是不需要考虑主键生成方式的，也就是不需要配置全局序列号的。 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;sequnceHandlerType&quot;</span>&gt;</span>0<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--默认为type 0: DirectByteBufferPool | type 1 ByteBufferArena--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;processorBufferPoolType&quot;</span>&gt;</span>0<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--分布式事务开关，0为不过滤分布式事务，1为过滤分布式事务（如果分布式事务内只涉及全局表，则不过滤），2为不过滤分布式事务,但是记录分布式事务日志--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;handleDistributedTransactions&quot;</span>&gt;</span>0<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--off heap for merge/order/group/limit      1开启   0关闭--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;useOffHeapForMerge&quot;</span>&gt;</span>1<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--单位为m--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;memoryPageSize&quot;</span>&gt;</span>1m<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--单位为k--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;spillsFileBufferSize&quot;</span>&gt;</span>1k<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;useStreamOutput&quot;</span>&gt;</span>0<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--单位为m--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;systemReserveMemorySize&quot;</span>&gt;</span>384m<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--是否采用zookeeper协调切换  --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;useZKSwitch&quot;</span>&gt;</span>true<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">system</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 配置之后可以使用mycat账号登录mysql,逻辑库mycatdb需要在schema.xml文件中配置映射的物理数据库 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">user</span> <span class="attr">name</span>=<span class="string">&quot;mycat&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span>&gt;</span>Peng@2020google<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;schemas&quot;</span>&gt;</span>mycatdb<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">user</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">user</span> <span class="attr">name</span>=<span class="string">&quot;user&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span>&gt;</span>Peng@2020google<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;schemas&quot;</span>&gt;</span>mycatdb<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;readOnly&quot;</span>&gt;</span>true<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">user</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mycat:server</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="schema"><a href="#schema" class="headerlink" title="schema"></a>schema</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">mycat</span>:schema <span class="keyword">SYSTEM</span> <span class="string">&quot;schema.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mycat:schema</span> <span class="attr">xmlns:mycat</span>=<span class="string">&quot;http://io.mycat/&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- schema的name要与server.xml中的user&lt;property name=&quot;schemas&quot;&gt;&lt;/property&gt;相同 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">schema</span> <span class="attr">name</span>=<span class="string">&quot;mycatdb&quot;</span> <span class="attr">checkSQLschema</span>=<span class="string">&quot;false&quot;</span> <span class="attr">sqlMaxLimit</span>=<span class="string">&quot;100&quot;</span> <span class="attr">dataNode</span>=<span class="string">&quot;dn1&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 此处没有用到分表，不需要tablue标签 --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">schema</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">&lt;!-- 此处的mycinema，在真实的数据库中必须存在 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dataNode</span> <span class="attr">name</span>=<span class="string">&quot;dn1&quot;</span> <span class="attr">dataHost</span>=<span class="string">&quot;localhost1&quot;</span> <span class="attr">database</span>=<span class="string">&quot;mycinema&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 定义具体的数据库实例、读写分离配置和心跳语句； --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dataHost</span> <span class="attr">name</span>=<span class="string">&quot;localhost1&quot;</span> <span class="attr">maxCon</span>=<span class="string">&quot;1000&quot;</span> <span class="attr">minCon</span>=<span class="string">&quot;10&quot;</span> <span class="attr">balance</span>=<span class="string">&quot;1&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">writeType</span>=<span class="string">&quot;0&quot;</span> <span class="attr">dbType</span>=<span class="string">&quot;mysql&quot;</span> <span class="attr">dbDriver</span>=<span class="string">&quot;native&quot;</span> <span class="attr">switchType</span>=<span class="string">&quot;1&quot;</span>  <span class="attr">slaveThreshold</span>=<span class="string">&quot;100&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">heartbeat</span>&gt;</span>select user()<span class="tag">&lt;/<span class="name">heartbeat</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- 双主双从，用户名和密码都是真实的数据库 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">writeHost</span> <span class="attr">host</span>=<span class="string">&quot;hostM3307&quot;</span> <span class="attr">url</span>=<span class="string">&quot;localhost:3307&quot;</span> <span class="attr">user</span>=<span class="string">&quot;root&quot;</span> <span class="attr">password</span>=<span class="string">&quot;Peng@2020google&quot;</span>&gt;</span></span><br><span class="line">   <span class="comment">&lt;!--配置写数据库下的读数据库（从库）--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">readHost</span> <span class="attr">host</span>=<span class="string">&quot;hostS3308&quot;</span> <span class="attr">url</span>=<span class="string">&quot;localhost:3308&quot;</span> <span class="attr">user</span>=<span class="string">&quot;root&quot;</span> <span class="attr">password</span>=<span class="string">&quot;Peng@2020google&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">readHost</span> <span class="attr">host</span>=<span class="string">&quot;hostS3309&quot;</span> <span class="attr">url</span>=<span class="string">&quot;localhost:3309&quot;</span> <span class="attr">user</span>=<span class="string">&quot;root&quot;</span> <span class="attr">password</span>=<span class="string">&quot;Peng@2020google&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">writeHost</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 双主双从，用户名和密码都是真实的数据库 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">writeHost</span> <span class="attr">host</span>=<span class="string">&quot;hostM3308&quot;</span> <span class="attr">url</span>=<span class="string">&quot;localhost:3308&quot;</span> <span class="attr">user</span>=<span class="string">&quot;root&quot;</span> <span class="attr">password</span>=<span class="string">&quot;Peng@2020google&quot;</span>&gt;</span></span><br><span class="line">   <span class="comment">&lt;!--配置写数据库下的读数据库（从库）--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">readHost</span> <span class="attr">host</span>=<span class="string">&quot;hostS3307&quot;</span> <span class="attr">url</span>=<span class="string">&quot;localhost:3307&quot;</span> <span class="attr">user</span>=<span class="string">&quot;root&quot;</span> <span class="attr">password</span>=<span class="string">&quot;Peng@2020google&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">readHost</span> <span class="attr">host</span>=<span class="string">&quot;hostS3310&quot;</span> <span class="attr">url</span>=<span class="string">&quot;localhost:3310&quot;</span> <span class="attr">user</span>=<span class="string">&quot;root&quot;</span> <span class="attr">password</span>=<span class="string">&quot;Peng@2020google&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">writeHost</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dataHost</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mycat:schema</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><p>启动mycat服务<br>使用mysql登录mycat<br><code>./mysql -umycat -p -P8066 -h 192.168.235.128</code></p><h2 id="一主三从读写分离"><a href="#一主三从读写分离" class="headerlink" title="一主三从读写分离"></a>一主三从读写分离</h2><p>未测试过，测出省略server.xml表</p><p>Schema.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">mycat</span>:schema <span class="keyword">SYSTEM</span> <span class="string">&quot;schema.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mycat:schema</span> <span class="attr">xmlns:mycat</span>=<span class="string">&quot;http://io.mycat/&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">schema</span> <span class="attr">name</span>=<span class="string">&quot;mycatdb&quot;</span> <span class="attr">checkSQLschema</span>=<span class="string">&quot;false&quot;</span> <span class="attr">sqlMaxLimit</span>=<span class="string">&quot;100&quot;</span> <span class="attr">dataNode</span>=<span class="string">&quot;dn1&quot;</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 只实现读写分离，没有涉及到分库分表，那么&lt;schema&gt;标签下不需要配置任何表 --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">schema</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--配置真实的数据库名称 mycinema --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dataNode</span> <span class="attr">name</span>=<span class="string">&quot;dn1&quot;</span> <span class="attr">dataHost</span>=<span class="string">&quot;localhost1&quot;</span> <span class="attr">database</span>=<span class="string">&quot;mycinema&quot;</span> /&gt;</span></span><br><span class="line"><span class="comment">&lt;!--配置具体的数据库连接信息、读写分离、心跳语句 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dataHost</span> <span class="attr">name</span>=<span class="string">&quot;localhost1&quot;</span> </span></span><br><span class="line"><span class="tag">          <span class="attr">maxCon</span>=<span class="string">&quot;1000&quot;</span> </span></span><br><span class="line"><span class="tag">  <span class="attr">minCon</span>=<span class="string">&quot;10&quot;</span> </span></span><br><span class="line"><span class="tag">  <span class="attr">balance</span>=<span class="string">&quot;1&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">writeType</span>=<span class="string">&quot;0&quot;</span> </span></span><br><span class="line"><span class="tag">  <span class="attr">dbType</span>=<span class="string">&quot;mysql&quot;</span> </span></span><br><span class="line"><span class="tag">  <span class="attr">dbDriver</span>=<span class="string">&quot;native&quot;</span> </span></span><br><span class="line"><span class="tag">  <span class="attr">switchType</span>=<span class="string">&quot;1&quot;</span>  </span></span><br><span class="line"><span class="tag">  <span class="attr">slaveThreshold</span>=<span class="string">&quot;100&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">heartbeat</span>&gt;</span>select user()<span class="tag">&lt;/<span class="name">heartbeat</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--配置写数据库（主库） 一主三从的读写分离配置 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">writeHost</span> <span class="attr">host</span>=<span class="string">&quot;hostM3307&quot;</span> <span class="attr">url</span>=<span class="string">&quot;localhost:3307&quot;</span> <span class="attr">user</span>=<span class="string">&quot;root&quot;</span> <span class="attr">password</span>=<span class="string">&quot;123456&quot;</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--配置写数据库下的读数据库（从库）--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">readHost</span> <span class="attr">host</span>=<span class="string">&quot;hostS3308&quot;</span> <span class="attr">url</span>=<span class="string">&quot;localhost:3308&quot;</span> <span class="attr">user</span>=<span class="string">&quot;root&quot;</span> <span class="attr">password</span>=<span class="string">&quot;123456&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">readHost</span> <span class="attr">host</span>=<span class="string">&quot;hostS3309&quot;</span> <span class="attr">url</span>=<span class="string">&quot;localhost:3309&quot;</span> <span class="attr">user</span>=<span class="string">&quot;root&quot;</span> <span class="attr">password</span>=<span class="string">&quot;123456&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">readHost</span> <span class="attr">host</span>=<span class="string">&quot;hostS3310&quot;</span> <span class="attr">url</span>=<span class="string">&quot;localhost:3310&quot;</span> <span class="attr">user</span>=<span class="string">&quot;root&quot;</span> <span class="attr">password</span>=<span class="string">&quot;123456&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">writeHost</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dataHost</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mycat:schema</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="水平分表"><a href="#水平分表" class="headerlink" title="水平分表"></a>水平分表</h2><p>一张表被拆到n个库中</p><h3 id="一主三从"><a href="#一主三从" class="headerlink" title="一主三从"></a>一主三从</h3><p>指定逻辑库，分片结点，结点主机等</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">mycat</span>:schema <span class="keyword">SYSTEM</span> <span class="string">&quot;schema.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mycat:schema</span> <span class="attr">xmlns:mycat</span>=<span class="string">&quot;http://io.mycat/&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">schema</span> <span class="attr">name</span>=<span class="string">&quot;mycatdb&quot;</span> <span class="attr">checkSQLschema</span>=<span class="string">&quot;false&quot;</span> <span class="attr">sqlMaxLimit</span>=<span class="string">&quot;100&quot;</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 要实现分库分表，那么就需要在&lt;schema&gt;标签下配置表了，现在是水平切分 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">table</span> <span class="attr">name</span>=<span class="string">&quot;orders&quot;</span> <span class="attr">primaryKey</span>=<span class="string">&quot;id&quot;</span> <span class="attr">autoIncrement</span>=<span class="string">&quot;true&quot;</span> <span class="attr">dataNode</span>=<span class="string">&quot;dn1,dn2,dn3&quot;</span> <span class="attr">rule</span>=<span class="string">&quot;mod-long&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">schema</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--配置真实的数据库名称 test01,test02,test03 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dataNode</span> <span class="attr">name</span>=<span class="string">&quot;dn1&quot;</span> <span class="attr">dataHost</span>=<span class="string">&quot;localhost1&quot;</span> <span class="attr">database</span>=<span class="string">&quot;test01&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dataNode</span> <span class="attr">name</span>=<span class="string">&quot;dn2&quot;</span> <span class="attr">dataHost</span>=<span class="string">&quot;localhost1&quot;</span> <span class="attr">database</span>=<span class="string">&quot;test02&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dataNode</span> <span class="attr">name</span>=<span class="string">&quot;dn3&quot;</span> <span class="attr">dataHost</span>=<span class="string">&quot;localhost1&quot;</span> <span class="attr">database</span>=<span class="string">&quot;test03&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--配置具体的数据库连接信息、读写分离、心跳语句 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dataHost</span> <span class="attr">name</span>=<span class="string">&quot;localhost1&quot;</span> </span></span><br><span class="line"><span class="tag">          <span class="attr">maxCon</span>=<span class="string">&quot;1000&quot;</span> </span></span><br><span class="line"><span class="tag">  <span class="attr">minCon</span>=<span class="string">&quot;10&quot;</span> </span></span><br><span class="line"><span class="tag">  <span class="attr">balance</span>=<span class="string">&quot;1&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">writeType</span>=<span class="string">&quot;0&quot;</span> </span></span><br><span class="line"><span class="tag">  <span class="attr">dbType</span>=<span class="string">&quot;mysql&quot;</span> </span></span><br><span class="line"><span class="tag">  <span class="attr">dbDriver</span>=<span class="string">&quot;native&quot;</span> </span></span><br><span class="line"><span class="tag">  <span class="attr">switchType</span>=<span class="string">&quot;1&quot;</span>  </span></span><br><span class="line"><span class="tag">  <span class="attr">slaveThreshold</span>=<span class="string">&quot;100&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--配置心跳语句 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">heartbeat</span>&gt;</span>select user()<span class="tag">&lt;/<span class="name">heartbeat</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--配置写数据库一主三从的读写分离配置 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">writeHost</span> <span class="attr">host</span>=<span class="string">&quot;hostM3307&quot;</span> <span class="attr">url</span>=<span class="string">&quot;localhost:3307&quot;</span> <span class="attr">user</span>=<span class="string">&quot;root&quot;</span> <span class="attr">password</span>=<span class="string">&quot;123456&quot;</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--配置写数据库下的读数据库（从库）--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">readHost</span> <span class="attr">host</span>=<span class="string">&quot;hostS3308&quot;</span> <span class="attr">url</span>=<span class="string">&quot;localhost:3308&quot;</span> <span class="attr">user</span>=<span class="string">&quot;root&quot;</span> <span class="attr">password</span>=<span class="string">&quot;123456&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">readHost</span> <span class="attr">host</span>=<span class="string">&quot;hostS3309&quot;</span> <span class="attr">url</span>=<span class="string">&quot;localhost:3309&quot;</span> <span class="attr">user</span>=<span class="string">&quot;root&quot;</span> <span class="attr">password</span>=<span class="string">&quot;123456&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">readHost</span> <span class="attr">host</span>=<span class="string">&quot;hostS3310&quot;</span> <span class="attr">url</span>=<span class="string">&quot;localhost:3310&quot;</span> <span class="attr">user</span>=<span class="string">&quot;root&quot;</span> <span class="attr">password</span>=<span class="string">&quot;123456&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">writeHost</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dataHost</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mycat:schema</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="双主双从"><a href="#双主双从" class="headerlink" title="双主双从"></a>双主双从</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">mycat</span>:schema <span class="keyword">SYSTEM</span> <span class="string">&quot;schema.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mycat:schema</span> <span class="attr">xmlns:mycat</span>=<span class="string">&quot;http://io.mycat/&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">schema</span> <span class="attr">name</span>=<span class="string">&quot;mycatdb&quot;</span> <span class="attr">checkSQLschema</span>=<span class="string">&quot;false&quot;</span> <span class="attr">sqlMaxLimit</span>=<span class="string">&quot;100&quot;</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 要实现分库分表，那么就需要在&lt;schema&gt;标签下配置表了，现在是水平切分 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">table</span> <span class="attr">name</span>=<span class="string">&quot;orders&quot;</span> <span class="attr">primaryKey</span>=<span class="string">&quot;id&quot;</span> <span class="attr">autoIncrement</span>=<span class="string">&quot;true&quot;</span> <span class="attr">dataNode</span>=<span class="string">&quot;dn1,dn2,dn3&quot;</span> <span class="attr">rule</span>=<span class="string">&quot;mod-long&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">schema</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--配置真实的数据库名称 test01,test02,test03 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dataNode</span> <span class="attr">name</span>=<span class="string">&quot;dn1&quot;</span> <span class="attr">dataHost</span>=<span class="string">&quot;localhost1&quot;</span> <span class="attr">database</span>=<span class="string">&quot;test01&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dataNode</span> <span class="attr">name</span>=<span class="string">&quot;dn2&quot;</span> <span class="attr">dataHost</span>=<span class="string">&quot;localhost1&quot;</span> <span class="attr">database</span>=<span class="string">&quot;test02&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dataNode</span> <span class="attr">name</span>=<span class="string">&quot;dn3&quot;</span> <span class="attr">dataHost</span>=<span class="string">&quot;localhost1&quot;</span> <span class="attr">database</span>=<span class="string">&quot;test03&quot;</span> /&gt;</span></span><br><span class="line"><span class="comment">&lt;!--配置具体的数据库连接信息、读写分离、心跳语句 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dataHost</span> <span class="attr">name</span>=<span class="string">&quot;localhost1&quot;</span> </span></span><br><span class="line"><span class="tag">          <span class="attr">maxCon</span>=<span class="string">&quot;1000&quot;</span> </span></span><br><span class="line"><span class="tag">  <span class="attr">minCon</span>=<span class="string">&quot;10&quot;</span> </span></span><br><span class="line"><span class="tag">  <span class="attr">balance</span>=<span class="string">&quot;1&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">writeType</span>=<span class="string">&quot;0&quot;</span> </span></span><br><span class="line"><span class="tag">  <span class="attr">dbType</span>=<span class="string">&quot;mysql&quot;</span> </span></span><br><span class="line"><span class="tag">  <span class="attr">dbDriver</span>=<span class="string">&quot;native&quot;</span> </span></span><br><span class="line"><span class="tag">  <span class="attr">switchType</span>=<span class="string">&quot;1&quot;</span>  </span></span><br><span class="line"><span class="tag">  <span class="attr">slaveThreshold</span>=<span class="string">&quot;100&quot;</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--配置心跳语句 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">heartbeat</span>&gt;</span>select user()<span class="tag">&lt;/<span class="name">heartbeat</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--配置写数据库（主库） 双主双从的读写分离配置 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">writeHost</span> <span class="attr">host</span>=<span class="string">&quot;hostM3307&quot;</span> <span class="attr">url</span>=<span class="string">&quot;localhost:3307&quot;</span> <span class="attr">user</span>=<span class="string">&quot;root&quot;</span> <span class="attr">password</span>=<span class="string">&quot;123456&quot;</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--配置写数据库下的读数据库（从库）--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">readHost</span> <span class="attr">host</span>=<span class="string">&quot;hostS3308&quot;</span> <span class="attr">url</span>=<span class="string">&quot;localhost:3308&quot;</span> <span class="attr">user</span>=<span class="string">&quot;root&quot;</span> <span class="attr">password</span>=<span class="string">&quot;123456&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">readHost</span> <span class="attr">host</span>=<span class="string">&quot;hostS3309&quot;</span> <span class="attr">url</span>=<span class="string">&quot;localhost:3309&quot;</span> <span class="attr">user</span>=<span class="string">&quot;root&quot;</span> <span class="attr">password</span>=<span class="string">&quot;123456&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">writeHost</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">writeHost</span> <span class="attr">host</span>=<span class="string">&quot;hostM3308&quot;</span> <span class="attr">url</span>=<span class="string">&quot;localhost:3308&quot;</span> <span class="attr">user</span>=<span class="string">&quot;root&quot;</span> <span class="attr">password</span>=<span class="string">&quot;123456&quot;</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--配置写数据库下的读数据库（从库）--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">readHost</span> <span class="attr">host</span>=<span class="string">&quot;hostS3307&quot;</span> <span class="attr">url</span>=<span class="string">&quot;localhost:3307&quot;</span> <span class="attr">user</span>=<span class="string">&quot;root&quot;</span> <span class="attr">password</span>=<span class="string">&quot;123456&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">readHost</span> <span class="attr">host</span>=<span class="string">&quot;hostS3310&quot;</span> <span class="attr">url</span>=<span class="string">&quot;localhost:3310&quot;</span> <span class="attr">user</span>=<span class="string">&quot;root&quot;</span> <span class="attr">password</span>=<span class="string">&quot;123456&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">writeHost</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dataHost</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mycat:schema</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="配置rule-xml"><a href="#配置rule-xml" class="headerlink" title="配置rule.xml"></a>配置rule.xml</h3><p>在原有的rule的xml文件中，设置节点配置的数量</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">function</span> <span class="attr">name</span>=<span class="string">&quot;mod-long&quot;</span> <span class="attr">class</span>=<span class="string">&quot;io.mycat.route.function.PartitionByMod&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 节点分片数量 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;count&quot;</span>&gt;</span>3<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">function</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="垂直分库"><a href="#垂直分库" class="headerlink" title="垂直分库"></a>垂直分库</h2><p>逻辑数据库与实际数据库的差别<br><strong>双主双从</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">mycat</span>:schema <span class="keyword">SYSTEM</span> <span class="string">&quot;schema.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mycat:schema</span> <span class="attr">xmlns:mycat</span>=<span class="string">&quot;http://io.mycat/&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">schema</span> <span class="attr">name</span>=<span class="string">&quot;mycatdb&quot;</span> <span class="attr">checkSQLschema</span>=<span class="string">&quot;false&quot;</span> <span class="attr">sqlMaxLimit</span>=<span class="string">&quot;100&quot;</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 要实现分库分表，那么就需要在&lt;schema&gt;标签下配置表了，现在是垂直切分 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!--需求：整个money平台的数据库（moneydb）进行垂直切分，分为前台数据库（money-web）、后台数据库（money-admin）--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--money-web前台数据库--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">table</span> <span class="attr">name</span>=<span class="string">&quot;orders&quot;</span> <span class="attr">primaryKey</span>=<span class="string">&quot;id&quot;</span> <span class="attr">autoIncrement</span>=<span class="string">&quot;true&quot;</span> <span class="attr">dataNode</span>=<span class="string">&quot;dn1&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">table</span> <span class="attr">name</span>=<span class="string">&quot;users&quot;</span> <span class="attr">primaryKey</span>=<span class="string">&quot;id&quot;</span> <span class="attr">autoIncrement</span>=<span class="string">&quot;true&quot;</span> <span class="attr">dataNode</span>=<span class="string">&quot;dn1&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--money-admin后台数据库--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">table</span> <span class="attr">name</span>=<span class="string">&quot;products&quot;</span> <span class="attr">primaryKey</span>=<span class="string">&quot;id&quot;</span> <span class="attr">autoIncrement</span>=<span class="string">&quot;true&quot;</span> <span class="attr">dataNode</span>=<span class="string">&quot;dn2&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">table</span> <span class="attr">name</span>=<span class="string">&quot;news&quot;</span> <span class="attr">primaryKey</span>=<span class="string">&quot;id&quot;</span> <span class="attr">autoIncrement</span>=<span class="string">&quot;true&quot;</span> <span class="attr">dataNode</span>=<span class="string">&quot;dn2&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">schema</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--配置真实的数据库名称 testdb01 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dataNode</span> <span class="attr">name</span>=<span class="string">&quot;dn1&quot;</span> <span class="attr">dataHost</span>=<span class="string">&quot;localhost1&quot;</span> <span class="attr">database</span>=<span class="string">&quot;money-web&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dataNode</span> <span class="attr">name</span>=<span class="string">&quot;dn2&quot;</span> <span class="attr">dataHost</span>=<span class="string">&quot;localhost1&quot;</span> <span class="attr">database</span>=<span class="string">&quot;money-admin&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--配置具体的数据库连接信息、读写分离、心跳语句 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dataHost</span> <span class="attr">name</span>=<span class="string">&quot;localhost1&quot;</span> </span></span><br><span class="line"><span class="tag">          <span class="attr">maxCon</span>=<span class="string">&quot;1000&quot;</span> </span></span><br><span class="line"><span class="tag">  <span class="attr">minCon</span>=<span class="string">&quot;10&quot;</span> </span></span><br><span class="line"><span class="tag">  <span class="attr">balance</span>=<span class="string">&quot;1&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">writeType</span>=<span class="string">&quot;0&quot;</span> </span></span><br><span class="line"><span class="tag">  <span class="attr">dbType</span>=<span class="string">&quot;mysql&quot;</span> </span></span><br><span class="line"><span class="tag">  <span class="attr">dbDriver</span>=<span class="string">&quot;native&quot;</span> </span></span><br><span class="line"><span class="tag">  <span class="attr">switchType</span>=<span class="string">&quot;1&quot;</span>  </span></span><br><span class="line"><span class="tag">  <span class="attr">slaveThreshold</span>=<span class="string">&quot;100&quot;</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--配置心跳语句 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">heartbeat</span>&gt;</span>select user()<span class="tag">&lt;/<span class="name">heartbeat</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--配置写数据库（主库） 双主双从的读写分离配置 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">writeHost</span> <span class="attr">host</span>=<span class="string">&quot;hostM3307&quot;</span> <span class="attr">url</span>=<span class="string">&quot;localhost:3307&quot;</span> <span class="attr">user</span>=<span class="string">&quot;root&quot;</span> <span class="attr">password</span>=<span class="string">&quot;123456&quot;</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--配置写数据库下的读数据库（从库）--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">readHost</span> <span class="attr">host</span>=<span class="string">&quot;hostS3308&quot;</span> <span class="attr">url</span>=<span class="string">&quot;localhost:3308&quot;</span> <span class="attr">user</span>=<span class="string">&quot;root&quot;</span> <span class="attr">password</span>=<span class="string">&quot;123456&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">readHost</span> <span class="attr">host</span>=<span class="string">&quot;hostS3309&quot;</span> <span class="attr">url</span>=<span class="string">&quot;localhost:3309&quot;</span> <span class="attr">user</span>=<span class="string">&quot;root&quot;</span> <span class="attr">password</span>=<span class="string">&quot;123456&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">writeHost</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">writeHost</span> <span class="attr">host</span>=<span class="string">&quot;hostM3308&quot;</span> <span class="attr">url</span>=<span class="string">&quot;localhost:3308&quot;</span> <span class="attr">user</span>=<span class="string">&quot;root&quot;</span> <span class="attr">password</span>=<span class="string">&quot;123456&quot;</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--配置写数据库下的读数据库（从库）--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">readHost</span> <span class="attr">host</span>=<span class="string">&quot;hostS3307&quot;</span> <span class="attr">url</span>=<span class="string">&quot;localhost:3307&quot;</span> <span class="attr">user</span>=<span class="string">&quot;root&quot;</span> <span class="attr">password</span>=<span class="string">&quot;123456&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">readHost</span> <span class="attr">host</span>=<span class="string">&quot;hostS3310&quot;</span> <span class="attr">url</span>=<span class="string">&quot;localhost:3310&quot;</span> <span class="attr">user</span>=<span class="string">&quot;root&quot;</span> <span class="attr">password</span>=<span class="string">&quot;123456&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">writeHost</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dataHost</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mycat:schema</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>一主三从</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">mycat</span>:schema <span class="keyword">SYSTEM</span> <span class="string">&quot;schema.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mycat:schema</span> <span class="attr">xmlns:mycat</span>=<span class="string">&quot;http://io.mycat/&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">schema</span> <span class="attr">name</span>=<span class="string">&quot;mycatdb&quot;</span> <span class="attr">checkSQLschema</span>=<span class="string">&quot;false&quot;</span> <span class="attr">sqlMaxLimit</span>=<span class="string">&quot;100&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">table</span> <span class="attr">name</span>=<span class="string">&quot;orders&quot;</span> <span class="attr">primaryKey</span>=<span class="string">&quot;id&quot;</span> <span class="attr">autoIncrement</span>=<span class="string">&quot;true&quot;</span> <span class="attr">dataNode</span>=<span class="string">&quot;dn1&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">table</span> <span class="attr">name</span>=<span class="string">&quot;users&quot;</span> <span class="attr">primaryKey</span>=<span class="string">&quot;id&quot;</span> <span class="attr">autoIncrement</span>=<span class="string">&quot;true&quot;</span> <span class="attr">dataNode</span>=<span class="string">&quot;dn1&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">table</span> <span class="attr">name</span>=<span class="string">&quot;products&quot;</span> <span class="attr">primaryKey</span>=<span class="string">&quot;id&quot;</span> <span class="attr">autoIncrement</span>=<span class="string">&quot;true&quot;</span> <span class="attr">dataNode</span>=<span class="string">&quot;dn2&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">table</span> <span class="attr">name</span>=<span class="string">&quot;news&quot;</span> <span class="attr">primaryKey</span>=<span class="string">&quot;id&quot;</span> <span class="attr">autoIncrement</span>=<span class="string">&quot;true&quot;</span> <span class="attr">dataNode</span>=<span class="string">&quot;dn2&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">schema</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dataNode</span> <span class="attr">name</span>=<span class="string">&quot;dn1&quot;</span> <span class="attr">dataHost</span>=<span class="string">&quot;localhost1&quot;</span> <span class="attr">database</span>=<span class="string">&quot;money_web&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dataNode</span> <span class="attr">name</span>=<span class="string">&quot;dn2&quot;</span> <span class="attr">dataHost</span>=<span class="string">&quot;localhost1&quot;</span> <span class="attr">database</span>=<span class="string">&quot;money_admin&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dataHost</span> <span class="attr">name</span>=<span class="string">&quot;localhost1&quot;</span> </span></span><br><span class="line"><span class="tag">          <span class="attr">maxCon</span>=<span class="string">&quot;1000&quot;</span> </span></span><br><span class="line"><span class="tag">  <span class="attr">minCon</span>=<span class="string">&quot;10&quot;</span> </span></span><br><span class="line"><span class="tag">  <span class="attr">balance</span>=<span class="string">&quot;1&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">writeType</span>=<span class="string">&quot;0&quot;</span> </span></span><br><span class="line"><span class="tag">  <span class="attr">dbType</span>=<span class="string">&quot;mysql&quot;</span> </span></span><br><span class="line"><span class="tag">  <span class="attr">dbDriver</span>=<span class="string">&quot;native&quot;</span> </span></span><br><span class="line"><span class="tag">  <span class="attr">switchType</span>=<span class="string">&quot;1&quot;</span>  </span></span><br><span class="line"><span class="tag">  <span class="attr">slaveThreshold</span>=<span class="string">&quot;100&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">heartbeat</span>&gt;</span>select user()<span class="tag">&lt;/<span class="name">heartbeat</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">writeHost</span> <span class="attr">host</span>=<span class="string">&quot;hostM3307&quot;</span> <span class="attr">url</span>=<span class="string">&quot;localhost:3307&quot;</span> <span class="attr">user</span>=<span class="string">&quot;root&quot;</span> <span class="attr">password</span>=<span class="string">&quot;123456&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">readHost</span> <span class="attr">host</span>=<span class="string">&quot;hostS3308&quot;</span> <span class="attr">url</span>=<span class="string">&quot;localhost:3308&quot;</span> <span class="attr">user</span>=<span class="string">&quot;root&quot;</span> <span class="attr">password</span>=<span class="string">&quot;123456&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">readHost</span> <span class="attr">host</span>=<span class="string">&quot;hostS3309&quot;</span> <span class="attr">url</span>=<span class="string">&quot;localhost:3309&quot;</span> <span class="attr">user</span>=<span class="string">&quot;root&quot;</span> <span class="attr">password</span>=<span class="string">&quot;123456&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">readHost</span> <span class="attr">host</span>=<span class="string">&quot;hostS3310&quot;</span> <span class="attr">url</span>=<span class="string">&quot;localhost:3309&quot;</span> <span class="attr">user</span>=<span class="string">&quot;root&quot;</span> <span class="attr">password</span>=<span class="string">&quot;123456&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">writeHost</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">dataHost</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mycat:schema</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="MyCat的主键生成方式"><a href="#MyCat的主键生成方式" class="headerlink" title="MyCat的主键生成方式"></a>MyCat的主键生成方式</h2><p>不管是何种方式的切分，主键生成必须交给MyCat实现，生成方式有四种</p><h2 id="本地文件方式"><a href="#本地文件方式" class="headerlink" title="本地文件方式"></a>本地文件方式</h2><ol><li><p>修改conf/server.xml文件中配置sequnceHandlerType=0</p></li><li><p>在conf/sequence_conf.properties中维护主键信息</p></li><li><p>如果想要每个表生成的主键连续，可以在sequence_conf.properties配置当前表的生成值，一般将Global替换为自己对应的前缀即可（三个地方）,取值的时候通过next value for MYCATSEQ_XXXX获取</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">INFO.CURID=1256</span><br><span class="line">INFO.MINID=3000</span><br><span class="line">INFO.MAXID=3000000</span><br></pre></td></tr></table></figure></li><li><p>优点:本地加载，读取速度较快，配置简单 </p><p>缺点：mycat重新发布时，seq文件需要替换，集群部署无法用此方式，路由到不同的mycat上无法保证id唯一，使mycat变成了有状态的中间件</p></li></ol><p>5.关闭服务，并重启</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">/usr/local/mycat/bin/mycat stop</span><br><span class="line">/usr/local/mycat/bin/mycat start</span><br></pre></td></tr></table></figure><p>6.测试</p><p>(1)创建测试表Info</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> info</span><br><span class="line">(id <span class="type">VARCHAR</span>(<span class="number">64</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">PRIMARY</span> KEY,</span><br><span class="line"> NAME <span class="type">VARCHAR</span>(<span class="number">50</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>);</span><br><span class="line"> </span><br></pre></td></tr></table></figure><p>(2)插入数据</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> info (id,NAME) <span class="keyword">VALUES</span>(NEXT <span class="keyword">VALUE</span> <span class="keyword">FOR</span> MYCATSEQ_INFO, <span class="string">&#x27;本地文件方式1&#x27;</span>);</span><br></pre></td></tr></table></figure><h2 id="本地时间戳方式"><a href="#本地时间戳方式" class="headerlink" title="本地时间戳方式"></a>本地时间戳方式</h2><p>1.修改conf/server.xml文件中配置sequnceHandlerType=2</p><p>2.本地时间戳计算方式：</p><p>ID= 64 位二进制 (42(毫秒)+5(机器 ID)+5(业务编码)+12(重复累加) 长度18位，因此表主键字段长度必须大于等于18位</p><p>3.优点：不存在mycat重新发布影响seq的问题，</p><p>   缺点：字段长度是18位，比较占空间</p><p>4.关闭服务，并重启</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">/usr/local/mycat/bin/mycat stop</span><br><span class="line">/usr/local/mycat/bin/mycat start</span><br></pre></td></tr></table></figure><p>5.测试</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> info(NAME) <span class="keyword">VALUES</span>(<span class="string">&#x27;本地时间戳方式1&#x27;</span>);</span><br></pre></td></tr></table></figure><p>结果如下图：</p><p><img src="MyCat%E6%96%87%E6%A1%A3.assets/image-20211228145043961-16406742467201.png" alt="image-20211228145043961"></p><h2 id="数据库方式"><a href="#数据库方式" class="headerlink" title="数据库方式"></a>数据库方式</h2><p>1.修改conf/server.xml文件中配置sequnceHandlerType=1</p><p>2.在3307的money_admin数据库中执行以下代码，用于创建表MyCAT_SEQUENCE，生成序列值</p><p> MYCAT_SEQUENCE 的三个字段：</p><ul><li>name sequence名称</li><li>current_value 当前value</li><li>increment 增长步长 </li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> IF <span class="keyword">EXISTS</span> MYCAT_SEQUENCE;</span><br><span class="line">#创建表</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> MYCAT_SEQUENCE (</span><br><span class="line">    NAME <span class="type">VARCHAR</span>(<span class="number">50</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">    current_value <span class="type">INT</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">    increment <span class="type">INT</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="number">1</span>,<span class="keyword">PRIMARY</span> KEY(NAME))</span><br><span class="line">    ENGINE<span class="operator">=</span>INNODB <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8;</span><br><span class="line">#插入数据</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> MYCAT_SEQUENCE(NAME,current_value,increment) <span class="keyword">VALUES</span> (&quot;GLOBAL&quot;, <span class="number">0</span>, <span class="number">10000</span>);</span><br><span class="line"></span><br><span class="line">#创建函数，处理当前值</span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">FUNCTION</span> IF <span class="keyword">EXISTS</span> mycat_seq_currval;</span><br><span class="line">DELIMITER <span class="operator">/</span><span class="operator">/</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">FUNCTION</span> mycat_seq_currval(seq_name <span class="type">VARCHAR</span>(<span class="number">50</span>)) <span class="keyword">RETURNS</span> <span class="type">VARCHAR</span>(<span class="number">64</span>) CHARSET utf8</span><br><span class="line"><span class="keyword">DETERMINISTIC</span></span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line"><span class="keyword">DECLARE</span> retval <span class="type">VARCHAR</span>(<span class="number">64</span>);</span><br><span class="line"><span class="keyword">SET</span> retval<span class="operator">=</span>&quot;-999999999,null&quot;;</span><br><span class="line"><span class="keyword">SELECT</span> CONCAT(<span class="built_in">CAST</span>(current_value <span class="keyword">AS</span> <span class="type">CHAR</span>),&quot;,&quot;,<span class="built_in">CAST</span>(increment <span class="keyword">AS</span> <span class="type">CHAR</span>)) <span class="keyword">INTO</span> retval <span class="keyword">FROM</span> MYCAT_SEQUENCE <span class="keyword">WHERE</span> NAME <span class="operator">=</span> seq_name;</span><br><span class="line"><span class="keyword">RETURN</span> retval;</span><br><span class="line"><span class="keyword">END</span> <span class="operator">/</span><span class="operator">/</span></span><br><span class="line">DELIMITER  ;</span><br><span class="line">#创建函数，设置序列值</span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">FUNCTION</span> IF <span class="keyword">EXISTS</span> mycat_seq_setval;</span><br><span class="line">DELIMITER <span class="operator">/</span><span class="operator">/</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">FUNCTION</span> mycat_seq_setval(seq_name <span class="type">VARCHAR</span>(<span class="number">50</span>),<span class="keyword">VALUE</span> <span class="type">INTEGER</span>) <span class="keyword">RETURNS</span> <span class="type">VARCHAR</span>(<span class="number">64</span>) CHARSET utf8</span><br><span class="line"><span class="keyword">DETERMINISTIC</span></span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line"><span class="keyword">UPDATE</span> MYCAT_SEQUENCE</span><br><span class="line"><span class="keyword">SET</span> current_value <span class="operator">=</span> <span class="keyword">VALUE</span></span><br><span class="line"><span class="keyword">WHERE</span> NAME <span class="operator">=</span> seq_name;</span><br><span class="line"><span class="keyword">RETURN</span> mycat_seq_currval(seq_name);</span><br><span class="line"><span class="keyword">END</span> <span class="operator">/</span><span class="operator">/</span></span><br><span class="line">DELIMITER ;</span><br><span class="line">#创建函数，处理序列的下一个值</span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">FUNCTION</span> IF <span class="keyword">EXISTS</span> mycat_seq_nextval;</span><br><span class="line">DELIMITER <span class="operator">/</span><span class="operator">/</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">FUNCTION</span> mycat_seq_nextval(seq_name <span class="type">VARCHAR</span>(<span class="number">50</span>)) <span class="keyword">RETURNS</span> <span class="type">VARCHAR</span>(<span class="number">64</span>) CHARSET utf8</span><br><span class="line"><span class="keyword">DETERMINISTIC</span></span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line"><span class="keyword">UPDATE</span> MYCAT_SEQUENCE</span><br><span class="line"><span class="keyword">SET</span> current_value <span class="operator">=</span> current_value <span class="operator">+</span> increment <span class="keyword">WHERE</span> NAME <span class="operator">=</span> seq_name;</span><br><span class="line"><span class="keyword">RETURN</span> mycat_seq_currval(seq_name);</span><br><span class="line"><span class="keyword">END</span> <span class="operator">/</span><span class="operator">/</span></span><br><span class="line">DELIMITER ;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>3.查看表mycat_sequence</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> mycat_sequence</span><br></pre></td></tr></table></figure><p><img src="MyCat%E6%96%87%E6%A1%A3.assets/image-20211228153708485.png" alt="image-20211228153708485"></p><p>4.根据我们在schema.xml文件中的配置，money_admin数据库对应的节点应该是dn2,所以在sequence_db_conf.properties中配置的GLOBAL应该就是dn2</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#sequence stored in datanode</span></span><br><span class="line"><span class="attr">GLOBAL</span>=<span class="string">dn2</span></span><br><span class="line"><span class="attr">INFO</span>=<span class="string">dn2</span></span><br></pre></td></tr></table></figure><p>5.关闭mycat服务，并重启</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">/usr/local/mycat/bin/mycat stop</span><br><span class="line">/usr/local/mycat/bin/mycat start</span><br></pre></td></tr></table></figure><p>6.测试</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> info(id,NAME) <span class="keyword">VALUES</span>(NEXT <span class="keyword">VALUE</span> <span class="keyword">FOR</span> MYCATSEQ_GLOBAL,&quot;数据库生成1&quot;);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> info(id,NAME) <span class="keyword">VALUES</span>(NEXT <span class="keyword">VALUE</span> <span class="keyword">FOR</span> MYCATSEQ_GLOBAL,&quot;数据库生成2&quot;);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> info(id,NAME) <span class="keyword">VALUES</span>(NEXT <span class="keyword">VALUE</span> <span class="keyword">FOR</span> MYCATSEQ_GLOBAL,&quot;数据库生成3&quot;);</span><br></pre></td></tr></table></figure><p>结果如下图</p><p><img src="MyCat%E6%96%87%E6%A1%A3.assets/image-20211228153215247.png" alt="image-20211228153215247"></p><h2 id="ZK方式"><a href="#ZK方式" class="headerlink" title="ZK方式"></a>ZK方式</h2><p>使用zookeeper服务器提供序列值，优点：无悲观锁，无强竞争，吞吐量更高。缺点：对zookeeper集群的要求增加</p>]]></content>
      
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> SQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Shiro</title>
      <link href="/posts/fc2c.html"/>
      <url>/posts/fc2c.html</url>
      
        <content type="html"><![CDATA[<h2 id="简述"><a href="#简述" class="headerlink" title="简述"></a>简述</h2><p>程序的访问安全性一直是开发的重要环节，JavaEE开源世界中有两大常用的安全框架：Apache Shiro 和 Spring Security。前者结构简单容易上手，后者结构复杂功能强大，多年来各有大量的支持者。 Shiro可以非常容易的开发出足够好的应用，其不仅可以用在JavaSE环境，也可以用在JavaEE环境。Shiro可以帮助我们完成：认证、授权、加密、会话管理、与Web集成、缓存等。而且Shiro的API也是非常简单。</p><h2 id="四大核心功能"><a href="#四大核心功能" class="headerlink" title="四大核心功能"></a>四大核心功能</h2><p><img src="https://raw.githubusercontent.com/pengyirui/blog_img/main/2022-01-04-1.png"><br>验证（Authentication）、授权（Authorization）、会话管理（Session Management）和加密管理（Cryptography）。</p><p><strong>Authentication</strong>：身份认证/登录，验证用户是不是拥有相应的身份； </p><p><strong>Authorization</strong>：授权，即权限验证，验证某个已认证的用户是否拥有某个权限；即判断用户是否能做事情，常见的如：验证某个用户是否拥有某个角色。或者细粒度的验证某个用户对某个资源是否具有某个权限；</p><p><strong>Session Manager</strong>：会话管理，即用户登录后就是一次会话，在没有退出之前，它的所有信息都在会话中；会话可以是普通JavaSE环境的，也可以是如Web环境的；</p><p><strong>Cryptography</strong>：加密，保护数据的安全性，如密码加密存储到数据库，而不是明文存储；</p><p><strong>Web Support</strong>：Web支持，可以非常容易的集成到Web环境；</p><p> <strong>Caching</strong>：缓存，比如用户登录后，其用户信息、拥有的角色/权限不必每次去查，这样可以提高效率；</p><p><strong>Concurrency</strong>：shiro支持多线程应用的并发验证，即如在一个线程中开启另一个线程，能把权限自动传播过去； <strong>Testing</strong>：提供测试支持；</p><p><strong>Run As</strong>：允许一个用户假装为另一个用户（如果他们允许）的身份进行访问；</p><p><strong>Remember Me</strong>：记住我，这个是非常常见的功能，即一次登录后，下次再来的话不用登录了。</p><h2 id="外部结构（应用程序角度）"><a href="#外部结构（应用程序角度）" class="headerlink" title="外部结构（应用程序角度）"></a>外部结构（应用程序角度）</h2><p><img src="https://raw.githubusercontent.com/pengyirui/blog_img/main/2022-01-04-2.png"></p><p>可以看到：应用代码直接交互的对象是Subject，也就是说Shiro的对外API核心就是Subject；</p><p><strong>（1）Subject</strong>：主体，代表了当前“用户”，这个用户不一定是一个具体的人，与当前应用交互的任何东西都是Subject，如网络爬虫，机器人等；即一个抽象概念；所有Subject都绑定到SecurityManager，与Subject的所有交互都会委托给</p><p><strong>（2）SecurityManager</strong>：安全管理器；即所有与安全有关的操作都会与SecurityManager交互；且它管理着所有Subject；可以看出它是Shiro的核心，它负责与后边介绍的其他组件进行交互，如果学习过SpringMVC，你可以把它看成DispatcherServlet前端控制器；</p><p><strong>（3）Realm</strong>：安全域，Shiro从从Realm获取安全数据（如用户、角色、权限），就是说SecurityManager要验证用户身份，那么它需要从Realm获取相应的用户进行比较以确定用户身份是否合法；也需要从Realm得到用户相应的角色/权限进行验证用户是否能进行操可以把Realm看成DataSource，即安全数据源。</p><h2 id="内部架构"><a href="#内部架构" class="headerlink" title="内部架构"></a>内部架构</h2><p><img src="https://raw.githubusercontent.com/pengyirui/blog_img/main/2022-01-04-3.png"></p><p><strong>Subject</strong>：主体，可以看到主体可以是任何可以与应用交互的“用户”； </p><p><strong>SecurityManager</strong>：相当于SpringMVC中的DispatcherServlet或者Struts2中的FilterDispatcher；是Shiro的心脏；所有具体的交互都通过SecurityManager进行控制；它管理着所有Subject、且负责进行认证和授权、及会话、缓存的管理。</p><p><strong>Authenticator</strong>：认证器，负责主体认证的，这是一个扩展点，如果用户觉得Shiro默认的不好，可以自定义实现；其需要认证策略（Authentication Strategy），即什么情况下算用户认证通过了；</p><p> <strong>Authorizer</strong>：授权器，或者访问控制器，用来决定主体是否有权限进行相应的操作；即控制着用户能访问应用中的哪些功能；</p><p><strong>Realm</strong>：可以有1个或多个Realm，可以认为是安全实体数据源，即用于获取安全实体的；可以是JDBC实现，也可以是LDAP实现，或者内存实现等等；由用户提供；注意：Shiro 不知道你的用户/权限存储在哪及以何种格式存储；所以我们一般在应用中都需要实现自己的Realm；</p><p> <strong>SessionManager</strong>：如果写过Servlet就应该知道Session的概念，Session需要有人去管理它的生命周期，这个组件就是SessionManager；而Shiro并不仅仅可以用在Web环境，也可以用在如普通的JavaSE环境、EJB等环境；Shiro抽象了一个自己的Session来管理主体与应用之间交互的数据；</p><p><strong>SessionDAO</strong>：数据访问对象，用于会话的CRUD，比如我们想把Session保存到数据库，那么可以实现自己的SessionDAO，通过如JDBC写到数据库；比如想把Session放到Memcached中，可以实现自己的Memcached SessionDAO；另外SessionDAO中可以使用Cache进行缓存，以提高性能；</p><h2 id="身份验证"><a href="#身份验证" class="headerlink" title="身份验证"></a>身份验证</h2><p><strong>身份验证</strong>，即在应用中谁能证明他就是他本人。一般提供如他们的身份ID一些标识信息来表明他就是他本人，如提供身份证，用户名/密码来证明。 在shiro中，用户需要提供principals （身份）和credentials（证明）给shiro，从而应用能验证用户身份：</p><p><strong>principals</strong>：身份，即主体的标识属性，可以是任何东西，如用户名、邮箱等，唯一即可。一个主体可以有多个principals，但只有一个Primary principals，一般是用户名/密码/手机号。</p><p><strong>credentials</strong>：证明/凭证，即只有主体知道的安全值，如密码/数字证书等。 最常见的principals和credentials组合就是用户名/密码了。</p><p><strong>SecurityUtils</strong>：是一个抽象的工具类，提供了SecurityManager实例的保存和获取方法，以及创建Subject的方法。</p><p><strong>UsernamePasswordToken</strong>:是一个简单的包含username及password即用户名及密码的登录验证用token，这个类同时继承了HostAuthenticationToken及RememberMeAuthenticationToken,主要包含用户名，密码，是否记住token以及验证来源的host主机地址。</p><h2 id="核心过滤器"><a href="#核心过滤器" class="headerlink" title="核心过滤器"></a>核心过滤器</h2><table><thead><tr><th>配置缩写</th><th>过滤器</th><th></th></tr></thead><tbody><tr><td>anon</td><td>AnonymousFilter</td><td>指定url可以匿名访问</td></tr><tr><td>authc</td><td>FormAuthenticationFilter</td><td>指定url需要form表单登录，默认会从请求中获取username、password,rememberMe等参数并尝试登录，如果登录不了就会跳转到loginUrl配置的路径。我们也可以用这个过滤器做默认的登录逻辑，但是一般都是我们自己在控制器写登录</td></tr><tr><td>authcBasic</td><td>BasicHttpAuthenticationFilter</td><td>指定url需要basic登录</td></tr><tr><td>logout</td><td>LogoutFilter</td><td>登出过滤器，配置指定url就可以实现退出功能，非常方便</td></tr><tr><td>noSessionCreation</td><td>noSessionCreation</td><td>禁止创建会话</td></tr><tr><td>perms</td><td>PermissionsAuthorizationFilter</td><td>需要指定权限才能访问</td></tr><tr><td>rest</td><td>HttpMethodPermissionFilter</td><td>将http请求方法转化成相应的动词来构造一个权限字符串</td></tr><tr><td>roles</td><td>RolesAuthorizationFilter</td><td>需要指定的角色才能访问</td></tr><tr><td>ssl</td><td>SslFilter</td><td>需要https请求才能访问</td></tr><tr><td>user</td><td>UserFilter</td><td>需要已登录或“记住我”的用户才能访问</td></tr></tbody></table><h2 id="网页简易demo"><a href="#网页简易demo" class="headerlink" title="网页简易demo"></a>网页简易demo</h2><p>两个用户，一个张三（zhangsan）一个管理员（admin），分别有不同的权限</p><h3 id="导包"><a href="#导包" class="headerlink" title="导包"></a>导包</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- shiro 整合spring boot web项目 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.shiro<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>shiro-spring-boot-web-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.4.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="继承身份验证安全域"><a href="#继承身份验证安全域" class="headerlink" title="继承身份验证安全域"></a>继承身份验证安全域</h3><p>自定义安全域继承身份验证安全域<br>有两个作用，<br>1.获取身份验证信息（账号密码） 并且  验证用户信息<br>2.权限分配</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//安全域继承抽象类后成为 身份验证安全域</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyRealm</span> <span class="keyword">extends</span> <span class="title class_">AuthorizingRealm</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 1.获取身份验证信息 并且  验证用户信息</span></span><br><span class="line">    <span class="comment">// subject.login(token); 后执行这里</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> AuthenticationInfo <span class="title function_">doGetAuthenticationInfo</span><span class="params">(AuthenticationToken authenticationToken)</span> <span class="keyword">throws</span> AuthenticationException &#123;</span><br><span class="line">        <span class="comment">//将AuthenticationToken强转成UsernamePasswordToken 这样获取账号和密码更加的方便</span></span><br><span class="line">        UsernamePasswordToken token= (UsernamePasswordToken)authenticationToken;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取用户在浏览器中输入的账号</span></span><br><span class="line">        String username=token.getUsername();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//认证账号,正常情况我们需要这里从数据库中获取账号的信息，以及其他关键数据，例如账号是否被冻结等等</span></span><br><span class="line">        String dbusername=username;</span><br><span class="line">        <span class="keyword">if</span>(!<span class="string">&quot;admin&quot;</span>.equals(dbusername)&amp;&amp;!<span class="string">&quot;zhangsan&quot;</span>.equals(dbusername))&#123;<span class="comment">//判断用户账号是否正确</span></span><br><span class="line">            <span class="keyword">throw</span>  <span class="keyword">new</span> <span class="title class_">UnknownAccountException</span>(<span class="string">&quot;账号错误&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//定义一个密码这个密码应该来自数据库中</span></span><br><span class="line">        String dbpassword=<span class="string">&quot;123456&quot;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//使用MD5哈希加密，不加盐，加密1次</span></span><br><span class="line">        Object objectPwd=<span class="keyword">new</span> <span class="title class_">SimpleHash</span>(<span class="string">&quot;MD5&quot;</span>,dbpassword,<span class="string">&quot;&quot;</span>,<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//认证密码是否正确</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">SimpleAuthenticationInfo</span>(dbusername,objectPwd.toString(),<span class="built_in">this</span>.getName());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 2.权限分配</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> AuthorizationInfo <span class="title function_">doGetAuthorizationInfo</span><span class="params">(PrincipalCollection principalCollection)</span> &#123;</span><br><span class="line">        <span class="comment">//从Shiro中获取用户名</span></span><br><span class="line">        Object username=principalCollection.getPrimaryPrincipal();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建一个SimpleAuthorizationInfo类的对象，利用这个对象需要设置当前用户的权限信息</span></span><br><span class="line">        SimpleAuthorizationInfo simpleAuthorizationInfo=<span class="keyword">new</span> <span class="title class_">SimpleAuthorizationInfo</span>();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建角色信息的集合</span></span><br><span class="line">        Set&lt;String&gt; roles=<span class="keyword">new</span> <span class="title class_">HashSet</span>&lt;String&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//这里应该根据账号到数据库中获取用户的所对应的所有角色信息并初始化到roles集合中</span></span><br><span class="line">        <span class="keyword">if</span>(<span class="string">&quot;admin&quot;</span>.equals(username))&#123;</span><br><span class="line">            roles.add(<span class="string">&quot;admins&quot;</span>);</span><br><span class="line">            roles.add(<span class="string">&quot;users&quot;</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span> (<span class="string">&quot;zhangsan&quot;</span>.equals(username))&#123;</span><br><span class="line">            roles.add(<span class="string">&quot;users&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 权限集合</span></span><br><span class="line">        Set&lt;String&gt;psermission=<span class="keyword">new</span> <span class="title class_">HashSet</span>&lt;String&gt;();</span><br><span class="line">        <span class="keyword">if</span>(<span class="string">&quot;admin&quot;</span>.equals(username))&#123;</span><br><span class="line">            psermission.add(<span class="string">&quot;admin:add&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 设置角色信息</span></span><br><span class="line">        simpleAuthorizationInfo.setRoles(roles);</span><br><span class="line">        simpleAuthorizationInfo.setStringPermissions(psermission);</span><br><span class="line">        <span class="keyword">return</span> simpleAuthorizationInfo;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="自定义安全管理器ShiroConfig"><a href="#自定义安全管理器ShiroConfig" class="headerlink" title="自定义安全管理器ShiroConfig"></a>自定义安全管理器ShiroConfig</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span> <span class="comment">//配置类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ShiroConfig</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span> <span class="comment">//创建自定义安全域对象,方法名需要与安全管理器的入参一致</span></span><br><span class="line">    <span class="keyword">public</span> MyRealm <span class="title function_">realm</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// 新建自定义域</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">MyRealm</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//安全管理器，返回值要与权限拦截过滤器入参一致</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> DefaultWebSecurityManager <span class="title function_">securityManager</span><span class="params">(Realm realm)</span>&#123;</span><br><span class="line">        DefaultWebSecurityManager defaultWebSecurityManager=<span class="keyword">new</span> <span class="title class_">DefaultWebSecurityManager</span>();</span><br><span class="line">        <span class="comment">//设置一个Realm，这个Realm是最终用于完成我们的认证号和授权操作的具体对象</span></span><br><span class="line">        defaultWebSecurityManager.setRealm(realm);</span><br><span class="line">        <span class="keyword">return</span> defaultWebSecurityManager;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//配置权限拦截过滤器</span></span><br><span class="line">    <span class="meta">@Bean</span> <span class="comment">//配置一个Shiro的过滤器bean，这个bean将配置Shiro相关的一个规则的拦截</span></span><br><span class="line">    <span class="keyword">public</span> ShiroFilterFactoryBean <span class="title function_">shiroFilterFactoryBean</span><span class="params">(DefaultWebSecurityManager defaultWebSecurityManager)</span>&#123;</span><br><span class="line">        <span class="comment">//创建过滤器工厂对象，负责执行过滤器</span></span><br><span class="line">        ShiroFilterFactoryBean shiroFilterFactoryBean=<span class="keyword">new</span> <span class="title class_">ShiroFilterFactoryBean</span>();</span><br><span class="line">        shiroFilterFactoryBean.setSecurityManager(defaultWebSecurityManager);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//配置登录路径</span></span><br><span class="line">        shiroFilterFactoryBean.setLoginUrl(<span class="string">&quot;/&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//配置登录成功之后重定向的url</span></span><br><span class="line">        shiroFilterFactoryBean.setSuccessUrl(<span class="string">&quot;/success&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//配置权限不够，跳转的url</span></span><br><span class="line">        shiroFilterFactoryBean.setUnauthorizedUrl(<span class="string">&quot;/noPermission&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//定义过滤器集合</span></span><br><span class="line">        Map&lt;String,String&gt; map=<span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        <span class="comment">//登录验证允许匿名访问    anon是核心过滤器之一</span></span><br><span class="line">        map.put(<span class="string">&quot;/login&quot;</span>,<span class="string">&quot;anon&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//设置过滤器链</span></span><br><span class="line">        shiroFilterFactoryBean.setFilterChainDefinitionMap(map);</span><br><span class="line">        <span class="keyword">return</span> shiroFilterFactoryBean;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//开启Shiro的注解例如（@RequiresRoles @RequiresUser @RequiresPermissions）需要借助SpringAOP来扫描这些注解</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> DefaultAdvisorAutoProxyCreator <span class="title function_">advisorAutoProxyCreator</span><span class="params">()</span>&#123;</span><br><span class="line">        DefaultAdvisorAutoProxyCreator defaultAdvisorAutoProxyCreator=<span class="keyword">new</span> <span class="title class_">DefaultAdvisorAutoProxyCreator</span>();</span><br><span class="line">        defaultAdvisorAutoProxyCreator.setProxyTargetClass(<span class="literal">true</span>);</span><br><span class="line">        <span class="keyword">return</span> defaultAdvisorAutoProxyCreator;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 开启AOP的注解支持</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> AuthorizationAttributeSourceAdvisor <span class="title function_">authorizationAttributeSourceAdvisor</span><span class="params">(DefaultWebSecurityManager securityManager)</span>&#123;</span><br><span class="line">        AuthorizationAttributeSourceAdvisor authorizationAttributeSourceAdvisor=<span class="keyword">new</span> <span class="title class_">AuthorizationAttributeSourceAdvisor</span>();</span><br><span class="line">        authorizationAttributeSourceAdvisor.setSecurityManager(securityManager);</span><br><span class="line">        <span class="keyword">return</span> authorizationAttributeSourceAdvisor;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Controller"><a href="#Controller" class="headerlink" title="Controller"></a>Controller</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserController</span> &#123;</span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">index</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;login&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/login&quot;)</span> <span class="comment">//登录验证逻辑，类似dologin</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">login</span><span class="params">(String username, String password, Model model)</span>&#123;</span><br><span class="line">        <span class="comment">//获取主体Subject</span></span><br><span class="line">        Subject subject= SecurityUtils.getSubject();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//判断是否验证</span></span><br><span class="line">        <span class="comment">//if(!subject.isAuthenticated())</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">//用户名密码票据对象</span></span><br><span class="line">            UsernamePasswordToken token=<span class="keyword">new</span> <span class="title class_">UsernamePasswordToken</span>();</span><br><span class="line">            token.setUsername(username);</span><br><span class="line">            token.setPassword(password.toCharArray());</span><br><span class="line"></span><br><span class="line">            <span class="comment">//登录</span></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="comment">// 这里开始就转 身份验证安全域了</span></span><br><span class="line">                subject.login(token);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">catch</span> (UnknownAccountException ex)&#123;</span><br><span class="line">                model.addAttribute(<span class="string">&quot;errorMsg&quot;</span>,ex.getMessage());</span><br><span class="line">                <span class="keyword">return</span> <span class="string">&quot;login&quot;</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">catch</span> (LockedAccountException ex)&#123;</span><br><span class="line">                model.addAttribute(<span class="string">&quot;errorMsg&quot;</span>,ex.getMessage());</span><br><span class="line">                <span class="keyword">return</span> <span class="string">&quot;login&quot;</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">catch</span> (IncorrectCredentialsException ex)&#123;</span><br><span class="line">                model.addAttribute(<span class="string">&quot;errorMsg&quot;</span>,<span class="string">&quot;密码不正确&quot;</span>);</span><br><span class="line">                <span class="keyword">return</span> <span class="string">&quot;login&quot;</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;redirect:/success&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/success&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">success</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;success&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/noPermission&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">noPermission</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;noPermission&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/user/test&quot;)</span></span><br><span class="line">    <span class="meta">@RequiresRoles(&quot;users&quot;)</span> <span class="comment">//普通用户角色才能访问</span></span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">userTest</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;这是普通用户请求&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/admin/test&quot;)</span></span><br><span class="line">    <span class="meta">@RequiresRoles(&quot;admins&quot;)</span> <span class="comment">//管理员角色才能访问</span></span><br><span class="line">    <span class="meta">@ResponseBody</span> </span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">adminTest</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;这是管理员的adminTest请求&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/admin/add&quot;)</span></span><br><span class="line">    <span class="meta">@RequiresPermissions(&quot;admin:add&quot;)</span><span class="comment">//权限 admin:add</span></span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">adminAdd</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;这是管理员adminAdd请求&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ExceptionHandler(value = &#123;Exception.class&#125;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">myError</span><span class="params">(Throwable throwable)</span>&#123;</span><br><span class="line">        <span class="comment">//获取异常的类型，应该根据不同的异常类型进入到不通的页面显示不同提示信息</span></span><br><span class="line">        System.out.println(throwable.getClass());</span><br><span class="line">        System.out.println(<span class="string">&quot;---------------------------------&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;nopermission&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="定义页面"><a href="#定义页面" class="headerlink" title="定义页面"></a>定义页面</h3><p>login.html</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;login&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span>&gt;</span></span><br><span class="line">    账号<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    密码<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">id</span>=<span class="string">&quot;password&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;登录&quot;</span> <span class="attr">id</span>=<span class="string">&quot;loginBut&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">style</span>=<span class="string">&quot;color: red&quot;</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;errorMessage&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br></pre></td></tr></table></figure><p>nopermission.html</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>没有权限请联系管理员<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br></pre></td></tr></table></figure><p>success.html</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>登录成功<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br></pre></td></tr></table></figure><p>张三能够访问，<code>/user/test</code><br>管理员能够访问<code>/admin/add</code>,<code>/admin/test</code>,<code>/user/test</code></p><h2 id="大致流程"><a href="#大致流程" class="headerlink" title="大致流程"></a>大致流程</h2><p>shiro 运行大致流程<br>Shiro配置类（安全域、安全管理器、权限拦截过滤器、注解以及AOP支持）</p><p>身份认证<br>用户访问<code>Controller</code>后触发<code>subject.login</code><br>触发后进入自定义安全域的身份验证（安全域需要继承<code>AuthorizingRealm</code>），一顿操作后成功则返回认证信息<code>authenticationInfo</code>,否则不返回</p><p>授权<br>每个<code>Controller</code>都有对应的授权页面</p><p>在安全区域授权</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">//获取用户名</span><br><span class="line">String username=principalCollection.getPrimaryPrincipal().toString();</span><br><span class="line">//创建授权对象</span><br><span class="line">SimpleAuthorizationInfo authorizationInfo=new SimpleAuthorizationInfo();</span><br><span class="line">// 赋给授权 对象角色</span><br><span class="line">authorizationInfo.addRole(角色);</span><br><span class="line">// 添加权限</span><br><span class="line">authorizationInfo.addStringPermission(权限);</span><br></pre></td></tr></table></figure><p><code>Controller</code>页面的每个对应的权限与角色<br>注解可以放在类上或者方法上</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequiresPermissions(&quot;org&quot;)</span> <span class="comment">// 只有org权限的才能进入此页面</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/index&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">index</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;org/index&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequiresRoles(&quot;user&quot;)</span> <span class="comment">// 只有user角色的才可以进入</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/user-list&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">userlist</span><span class="params">(Model model )</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;security/user-list&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="主要配置"><a href="#主要配置" class="headerlink" title="主要配置"></a>主要配置</h2><p>shiro的主要配置</p><h3 id="配置类"><a href="#配置类" class="headerlink" title="配置类"></a>配置类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span> <span class="comment">//配置类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ShiroConfiguration</span> &#123;</span><br><span class="line">    <span class="meta">@Bean</span> <span class="comment">//创建自定义安全域对象,方法名需要与安全管理器的入参一致</span></span><br><span class="line">    <span class="keyword">public</span> MyRealm <span class="title function_">realm</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// 新建自定义域</span></span><br><span class="line">        <span class="type">MyRealm</span> <span class="variable">myRealm</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MyRealm</span>();</span><br><span class="line">        <span class="comment">// 这里可以用自带的加密 设置MD5加密</span></span><br><span class="line">        <span class="type">HashedCredentialsMatcher</span> <span class="variable">credentialMatcher</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashedCredentialsMatcher</span>();</span><br><span class="line">        credentialMatcher.setHashAlgorithmName(<span class="string">&quot;MD5&quot;</span>);</span><br><span class="line">        credentialMatcher.setHashIterations(<span class="number">1024</span>);</span><br><span class="line">        myRealm.setCredentialsMatcher(credentialMatcher);</span><br><span class="line">        <span class="keyword">return</span> myRealm;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//安全管理器，返回值要与权限拦截过滤器入参一致</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> DefaultWebSecurityManager <span class="title function_">securityManager</span><span class="params">(Realm realm)</span>&#123;</span><br><span class="line">        DefaultWebSecurityManager defaultWebSecurityManager=<span class="keyword">new</span> <span class="title class_">DefaultWebSecurityManager</span>();</span><br><span class="line">        <span class="comment">//设置一个Realm，这个Realm是最终用于完成我们的认证号和授权操作的具体对象</span></span><br><span class="line">        defaultWebSecurityManager.setRealm(realm);</span><br><span class="line">        <span class="keyword">return</span> defaultWebSecurityManager;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//配置权限拦截过滤器</span></span><br><span class="line">    <span class="meta">@Bean</span> <span class="comment">//配置一个Shiro的过滤器bean，这个bean将配置Shiro相关的一个规则的拦截</span></span><br><span class="line">    <span class="keyword">public</span> ShiroFilterChainDefinition <span class="title function_">shiroFilterChainDefinition</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">DefaultShiroFilterChainDefinition</span> <span class="variable">chain</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DefaultShiroFilterChainDefinition</span>();</span><br><span class="line">        <span class="comment">//访问控制</span></span><br><span class="line">        chain.addPathDefinition(<span class="string">&quot;/login&quot;</span>, <span class="string">&quot;anon&quot;</span>);<span class="comment">//可以匿名访问</span></span><br><span class="line">        chain.addPathDefinition(<span class="string">&quot;/deny&quot;</span>, <span class="string">&quot;anon&quot;</span>);<span class="comment">//可以匿名访问</span></span><br><span class="line">        chain.addPathDefinition(<span class="string">&quot;/menus&quot;</span>, <span class="string">&quot;anon&quot;</span>);<span class="comment">//可以匿名访问</span></span><br><span class="line">        chain.addPathDefinition(<span class="string">&quot;/logout&quot;</span>, <span class="string">&quot;logout&quot;</span>);<span class="comment">//可以匿名访问</span></span><br><span class="line">        <span class="comment">//其它路径均需要登录</span></span><br><span class="line">        chain.addPathDefinition(<span class="string">&quot;/**/*&quot;</span>, <span class="string">&quot;authc&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> chain;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//开启Shiro的注解例如（@RequiresRoles @RequiresUser @RequiresPermissions）需要借助SpringAOP来扫描这些注解</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> DefaultAdvisorAutoProxyCreator <span class="title function_">advisorAutoProxyCreator</span><span class="params">()</span>&#123;</span><br><span class="line">        DefaultAdvisorAutoProxyCreator defaultAdvisorAutoProxyCreator=<span class="keyword">new</span> <span class="title class_">DefaultAdvisorAutoProxyCreator</span>();</span><br><span class="line">        defaultAdvisorAutoProxyCreator.setProxyTargetClass(<span class="literal">true</span>);</span><br><span class="line">        <span class="keyword">return</span> defaultAdvisorAutoProxyCreator;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 开启AOP的注解支持</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> AuthorizationAttributeSourceAdvisor <span class="title function_">authorizationAttributeSourceAdvisor</span><span class="params">(DefaultWebSecurityManager securityManager)</span>&#123;</span><br><span class="line">        AuthorizationAttributeSourceAdvisor authorizationAttributeSourceAdvisor=<span class="keyword">new</span> <span class="title class_">AuthorizationAttributeSourceAdvisor</span>();</span><br><span class="line">        authorizationAttributeSourceAdvisor.setSecurityManager(securityManager);</span><br><span class="line">        <span class="keyword">return</span> authorizationAttributeSourceAdvisor;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>访问控制过滤器</strong>还能在配置文件里面配置</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">shiro.loginUrl</span>=<span class="string">/login</span></span><br><span class="line"><span class="attr">shiro.successUrl</span>=<span class="string">/index</span></span><br></pre></td></tr></table></figure><h3 id="授权与身份验证"><a href="#授权与身份验证" class="headerlink" title="授权与身份验证"></a>授权与身份验证</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyRealm</span> <span class="keyword">extends</span> <span class="title class_">AuthorizingRealm</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserService userService;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> PermissionService permissionService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span> <span class="comment">//授权</span></span><br><span class="line">    <span class="keyword">protected</span> AuthorizationInfo <span class="title function_">doGetAuthorizationInfo</span><span class="params">(PrincipalCollection principalCollection)</span> &#123;</span><br><span class="line">        <span class="comment">//获取用户名</span></span><br><span class="line">        String username=principalCollection.getPrimaryPrincipal().toString();</span><br><span class="line">        System.out.println(<span class="string">&quot;获取用户名&quot;</span> + username);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//根据用户名查找出对象</span></span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> userService.findByUsername(username);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建授权对象</span></span><br><span class="line">        SimpleAuthorizationInfo authorizationInfo=<span class="keyword">new</span> <span class="title class_">SimpleAuthorizationInfo</span>();</span><br><span class="line">        System.out.println(<span class="string">&quot;创建授权对象&quot;</span>+ authorizationInfo);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (Role role : user.getRoles()) &#123;</span><br><span class="line">            <span class="comment">// 赋给授权对象角色</span></span><br><span class="line">            authorizationInfo.addRole(role.getName());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//获取当前用户所有的权限编码</span></span><br><span class="line">        List&lt;Permission&gt; permissionList=permissionService.findPermissionsByUsername(username);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (Permission permission : permissionList) &#123;</span><br><span class="line">            <span class="comment">//添加父权限</span></span><br><span class="line">            authorizationInfo.addStringPermission(permission.getCode());</span><br><span class="line">            <span class="keyword">for</span> (Permission child : permission.getChildren()) &#123;</span><br><span class="line">                <span class="comment">//添加子权限</span></span><br><span class="line">                authorizationInfo.addStringPermission(child.getCode());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> authorizationInfo;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span> <span class="comment">//身份验证---控制前执行subject.login调用此方法</span></span><br><span class="line">    <span class="keyword">protected</span> AuthenticationInfo <span class="title function_">doGetAuthenticationInfo</span><span class="params">(AuthenticationToken authenticationToken)</span> <span class="keyword">throws</span> AuthenticationException &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取用户输入的身份标识</span></span><br><span class="line">        <span class="type">Object</span> <span class="variable">principal</span> <span class="operator">=</span> authenticationToken.getPrincipal();</span><br><span class="line">        <span class="comment">// doLogin传入的username，但类型是Object</span></span><br><span class="line">        System.out.println(<span class="string">&quot;获取用户输入的身份标识&quot;</span> + principal);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 是否验证过了</span></span><br><span class="line">        <span class="keyword">if</span> (principal != <span class="literal">null</span>)&#123;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 获取用户名，要转换为string</span></span><br><span class="line">            String username=principal.toString();</span><br><span class="line">            <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> userService.findByUsername(username);</span><br><span class="line">            <span class="comment">// 数据库查询不到此用户</span></span><br><span class="line">            <span class="keyword">if</span> (user==<span class="literal">null</span>)&#123;</span><br><span class="line">                <span class="keyword">throw</span>  <span class="keyword">new</span> <span class="title class_">UnknownAccountException</span>(<span class="string">&quot;用户名不正确&quot;</span>);</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span> (user.getStatus() == <span class="number">0</span>)&#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">LockedAccountException</span>(<span class="string">&quot;账户已经锁定&quot;</span>);</span><br><span class="line">            &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">// 认证通过后，加盐</span></span><br><span class="line">                <span class="type">SimpleAuthenticationInfo</span> <span class="variable">authenticationInfo</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SimpleAuthenticationInfo</span>(</span><br><span class="line">                        username,</span><br><span class="line">                        user.getPassword(),</span><br><span class="line">                        ByteSource.Util.bytes(user.getUsername()), <span class="comment">//shiro自带方法加盐 ， 根据用户名</span></span><br><span class="line">                        <span class="built_in">this</span>.getName());</span><br><span class="line">                <span class="keyword">return</span> authenticationInfo;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SQL进阶</title>
      <link href="/posts/92b7.html"/>
      <url>/posts/92b7.html</url>
      
        <content type="html"><![CDATA[<h2 id="mysql目录结构"><a href="#mysql目录结构" class="headerlink" title="mysql目录结构"></a>mysql目录结构</h2><p>为了保存表结构， InnoDB 和 MyISAM 在 数据目录 下对应的数据库子目录下创建了一个专门用于 描述表结构的文件 ，文件名是这样：</p><ul><li>InnoDB 5.7<br>  <code>.opt</code>    数据库结构<br>  <code>.frm</code>    表结构<br>  <code>.ibd</code>    表数据存储默认存储地（独立表空间）<br>  <code>ibdata1</code> 表数据存储存储地之一（系统表空间）</li><li>InnoDB 8.0<br>  <code>.ibd</code>    表结构与表数据合一了，都存在这文件中<br>  没有.opt了</li><li>MyISAM 5.7<br>  <code>.frm</code>    表结构<br>  <code>.MYD</code>    表数据<br>  <code>.MYI</code>    存的是索引</li><li>MyISAM 8.0<br>  <code>.sdi</code>    表结构（.frm更名成的）</li></ul><h2 id="索引"><a href="#索引" class="headerlink" title="索引"></a>索引</h2><p>对于单列索引，尽量选择针对当前query过滤性更好的索引<br>在选择组合索引的时候，当前query中过滤性最好的字段在索引字段顺序中，位置越靠前越好。<br>在选择组合索引的时候，尽量选择能够包含当前query中的where子句中更多字段的索引。<br>在选择组合索引的时候，如果某个字段可能出现范围查询时，尽量把这个字段放在索引次序的最后面。</p><p>失去索引的口诀：<br>模：模糊查询LIKE以%开头<br>型：数据类型错误<br>数：对索引字段使用内部函数<br>空：索引列是NULL<br>运：索引列进行四则运算<br>最：复合索引不按索引列最左开始查找<br>快：全表查找预计比索引更快​（数据库的判断）</p>]]></content>
      
      
      
        <tags>
            
            <tag> SQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>RabbitMQ</title>
      <link href="/posts/83ac.html"/>
      <url>/posts/83ac.html</url>
      
        <content type="html"><![CDATA[<h2 id="消息队列"><a href="#消息队列" class="headerlink" title="消息队列"></a>消息队列</h2><p>消息（Message）是指在应用间传送的数据。消息可以非常简单，比如只包含文本字符串，也可以更复杂，可能包含嵌入对象。</p><p>消息队列（Message Queue）是一种应用间的<code>通信方式</code>，消息发送后可以立即返回，由消息系统来确保消息的可靠传递。消息发布者只管把消息发布到 MQ 中而不用管谁来取，消息使用者只管从 MQ 中取消息而不管是谁发布的。这样发布者和使用者都不用知道对方的存在。</p><p>以常见的订单系统为例，用户点击【下单】按钮之后的业务逻辑可能包括：扣减库存、生成相应单据、发红包、发短信通知。在业务发展初期这些逻辑可能放在一起同步执行，随着业务的发展订单量增长，需要提升系统服务的性能，这时可以将一些不需要立即生效的操作拆分出来异步执行，比如发放红包、发短信通知等。这种场景下就可以用 MQ ，在下单的主流程（比如扣减库存、生成相应单据）完成之后发送一条消息到 MQ 让主流程快速完结，而由另外的单独线程拉取MQ的消息（或者由 MQ 推送消息），当发现 MQ 中有发红包或发短信之类的消息时，执行相应的业务逻辑。</p><p>以上是用于业务解耦的情况，其它常见场景包括最终一致性、广播、错峰流控等等。</p><h2 id="RabbitMQ-特点"><a href="#RabbitMQ-特点" class="headerlink" title="RabbitMQ 特点"></a>RabbitMQ 特点</h2><p>RabbitMQ 是一个由 Erlang 语言开发的 AMQP 的开源实现。</p><p>AMQP ：Advanced Message Queue，高级消息队列协议。它是应用层协议的一个开放标准，为面向消息的中间件设计，基于此协议的客户端与消息中间件可传递消息，并不受产品、开发语言等条件的限制。</p><p>RabbitMQ 最初起源于金融系统，用于在分布式系统中存储转发消息，在易用性、扩展性、高可用性等方面表现不俗。具体特点包括： </p><p>  1、可靠性（Reliability）</p><p>  RabbitMQ 使用一些机制来保证可靠性，如持久化、传输确认、发布确认。 </p><p>  2、灵活的路由（Flexible Routing）</p><p>在消息进入队列之前，通过 Exchange 来路由消息的。对于典型的路由功能，RabbitMQ 已经提供了一些内置的 Exchange 来实现。针对更复杂的路由功能，可以将多个 Exchange 绑定在一起，也通过插件机制实现自己的 Exchange 。</p><p>  3、 消息集群（Clustering）</p><p>多个 RabbitMQ 服务器可以组成一个集群，形成一个逻辑 Broker 。</p><p>  3、 高可用（Highly Available Queues）</p><p>队列可以在集群中的机器上进行镜像，使得在部分节点出问题的情况下队列仍然可用。</p><p>  4、多种协议（Multi-protocol）</p><p>   RabbitMQ 支持多种消息队列协议，比如 STOMP、MQTT 等等。</p><p>  5、多语言客户端（Many Clients）</p><p>   RabbitMQ 几乎支持所有常用语言，比如 Java、.NET、Ruby 等等。</p><p>  6、 管理界面（Management UI）</p><p>RabbitMQ 提供了一个易用的用户界面，使得用户可以监控和管理消息 Broker 的许多方面。</p><p>  7、 跟踪机制（Tracing）</p><p>  如果消息异常，RabbitMQ 提供了消息跟踪机制，使用者可以找出发生了什么。 </p><h2 id="RabbitMQ安装"><a href="#RabbitMQ安装" class="headerlink" title="RabbitMQ安装"></a>RabbitMQ安装</h2><p>一般来说安装 RabbitMQ 之前要安装 Erlang ，可以去Erlang官网下载。接着去RabbitMQ官网下载安装包，之后解压缩即可。</p><p>Erlang官方下载地址：<a href="https://www.erlang.org/downloads">https://www.erlang.org/downloads</a></p><p>RabbitMQ官方下载地址：<a href="https://www.rabbitmq.com/download.html">https://www.rabbitmq.com/download.html</a></p><h3 id="依赖包安装"><a href="#依赖包安装" class="headerlink" title="依赖包安装"></a>依赖包安装</h3><p>安装RabbitMQ之前必须要先安装所需要的依赖包可以使用下面的一次性安装命令</p><p><code>yum install gcc glibc-devel make ncurses-devel openssl-devel xmlto -y</code></p><h3 id="安装Erlang"><a href="#安装Erlang" class="headerlink" title="安装Erlang"></a>安装Erlang</h3><p>1、 将Erlang源代码包otp_src_19.3.tar.gz上传到Linux的/home目录下</p><p>2、解压erlang 源码包</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tar -zxvf otp_src_19.3.tar.gz</span><br></pre></td></tr></table></figure><p>3、手动创建erlang 的安装目录</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mkdir /usr/local/erlang</span><br></pre></td></tr></table></figure><p>4、进入erlang的解压目录</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cd otp_src_19.3</span><br></pre></td></tr></table></figure><p>5、配置erlang的安装信息</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./configure --prefix=/usr/local/erlang --without-javac</span><br></pre></td></tr></table></figure><p>6、编译并安装</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">make &amp;&amp; make install</span><br></pre></td></tr></table></figure><p>7、配置环境变量</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/profile</span><br></pre></td></tr></table></figure><p>8、将这些配置填写到profile文件的最后</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ERL_HOME=/usr/local/erlang</span><br><span class="line">PATH=$ERL_HOME/bin:$PATH</span><br><span class="line">export ERL_HOME PATH</span><br></pre></td></tr></table></figure><p>9、启动环境变量配置文件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">source /etc/profile</span><br></pre></td></tr></table></figure><h3 id="开始安装"><a href="#开始安装" class="headerlink" title="开始安装"></a>开始安装</h3><p>1、 将RabbitMQ安装包rabbitmq-server-3.7.2-1.el7.noarch.rpm上传到/home目录</p><p>2、安装RabbitMQ</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rpm -ivh --nodeps rabbitmq-server-3.7.2-1.el7.noarch.rpm</span><br></pre></td></tr></table></figure><h3 id="启动和关闭"><a href="#启动和关闭" class="headerlink" title="启动和关闭"></a>启动和关闭</h3><p>1、启动RabbitMQ</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rabbitmq-server start &amp;</span><br></pre></td></tr></table></figure><p>1.5、后台启动<br>有时<code>&amp;</code>不能后台启动，用以下命令即可（关闭服务的状态下，后台启动）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rabbitmq-server -detached</span><br></pre></td></tr></table></figure><p>注意：这里可能会出现错误，错误原因是/var/lib/rabbitmq/.erlang.cookie文件权限不够。</p><p>解决方案对这个文件授权</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">chown rabbitmq:rabbitmq /var/lib/rabbitmq/.erlang.cookie</span><br><span class="line"></span><br><span class="line">chmod 400 /var/lib/rabbitmq/.erlang.cookie</span><br></pre></td></tr></table></figure><p>2、停止服务</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rabbitmqctl stop</span><br></pre></td></tr></table></figure><h3 id="插件管理"><a href="#插件管理" class="headerlink" title="插件管理"></a>插件管理</h3><p>1、添加插件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rabbitmq-plugins enable &#123;插件名&#125;</span><br></pre></td></tr></table></figure><p>2、删除插件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rabbitmq-plugins disable &#123;插件名&#125;</span><br></pre></td></tr></table></figure><p>注意：RabbitMQ启动以后可以使用浏览器进入管控台，但是默认情况RabbitMQ不允许直接使用浏览器浏览器进行访问因此必须添加插件  </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rabbitmq-plugins enable rabbitmq_management</span><br></pre></td></tr></table></figure><p>3、使用浏览器访问管控台<a href="http://rabbitmq服务器ip:15672/">http://RabbitMQ服务器IP:15672</a></p><p><code>http://192.168.147.130:15672</code></p><h3 id="用户管理"><a href="#用户管理" class="headerlink" title="用户管理"></a>用户管理</h3><p>RabbitMQ安装成功后使用默认用户名guest登录</p><p>账号：guest</p><p>密码：guest</p><p>注意：这里guest只允许本机登录访问需要创建用户并授权远程访问命令如下 </p><p>1、 添加用户：rabbitmqctl add_user {username} {password}</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rabbitmqctl add_user root root</span><br></pre></td></tr></table></figure><p>2、 删除用户：rabbitmqctl delete_user {username}</p><p>3、 修改密码：rabbitmqctl change_password {username} {newpassword}</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rabbitmqctl change_password root root</span><br></pre></td></tr></table></figure><p>4、 设置用户角色：rabbitmqctl set_user_tags {username} {tag}</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rabbitmqctl set_user_tags root administrator</span><br></pre></td></tr></table></figure><p>tag参数表示用户角色取值为：<code>management、monitoring、policymaker、administrator</code></p><p>各角色详解：</p><p><strong>management</strong></p><p>用户可以通过AMQP做的任何事外加：</p><p>列出自己可以通过AMQP登入的virtual hosts </p><p>查看自己的virtual hosts中的queues, exchanges 和 bindings</p><p>查看和关闭自己的channels 和 connections</p><p>查看有关自己的virtual hosts的“全局”的统计信息，包含其他用户在这些virtual hosts中的活动。</p><p><strong>policymaker</strong> </p><p>management可以做的任何事外加：</p><p>查看、创建和删除自己的virtual hosts所属的policies和parameters</p><p> <strong>monitoring</strong> </p><p>management可以做的任何事外加：</p><p>列出所有virtual hosts，包括他们不能登录的virtual hosts</p><p>查看其他用户的connections和channels</p><p>查看节点级别的数据如clustering和memory使用情况</p><p>查看真正的关于所有virtual hosts的全局的统计信息</p><p> <strong>administrator</strong>  </p><p>policymaker和monitoring可以做的任何事外加:</p><p>创建和删除virtual hosts</p><p>查看、创建和删除users</p><p>查看创建和删除permissions</p><p>关闭其他用户的connections </p><h3 id="权限管理"><a href="#权限管理" class="headerlink" title="权限管理"></a>权限管理</h3><p>1、 授权命令：<code>rabbitmqctl set_permissions [-p vhostpath] &#123;user&#125; &#123;conf&#125; &#123;write&#125; &#123;read&#125;</code></p><p>-p vhostpath ：用于指定一个资源的命名空间，例如 –p / 表示根路径命名空间</p><p>user：用于指定要为哪个用户授权填写用户名<br>conf:一个正则表达式match哪些配置资源能够被该用户配置。<br>write:一个正则表达式match哪些配置资源能够被该用户读。<br>read:一个正则表达式match哪些配置资源能够被该用户访问。</p><p>例如：  </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rabbitmqctl set_permissions -p / root &#x27;.*&#x27; &#x27;.*&#x27; &#x27;.*&#x27;</span><br></pre></td></tr></table></figure><p>用于设置root用户拥有对所有资源的 读写配置权限</p><p>2、查看用户权限 rabbitmqctl list_permissions [vhostpath]</p><p>例如</p><p>查看根径经下的所有用户权限 </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rabbitmqctl list_permissions </span><br></pre></td></tr></table></figure><p> 查看指定命名空间下的所有用户权限</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rabbitmqctl list_permissions /abc </span><br></pre></td></tr></table></figure><p>3、查看指定用户下的权限rabbitmqctl list_user_permissions {username}</p><p>例如</p><p>查看root用户下的权限</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rabbitmqctl list_user_permissions root</span><br></pre></td></tr></table></figure><p>4、清除用户权限rabbitmqctl clear_permissions {username}</p><p>例如：</p><p>清除root用户的权限</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rabbitmqctl clear_permissions root</span><br></pre></td></tr></table></figure><h3 id="vhost管理"><a href="#vhost管理" class="headerlink" title="vhost管理"></a>vhost管理</h3><p>vhost是RabbitMQ中的一个命名空间，可以限制消息的存放位置利用这个命名空间可以进行权限的控制有点类似Windows中的文件夹一样，在不同的文件夹中存放不同的文件。</p><p>1、添加vhost: rabbitmqctl add vhost {name}</p><p>例如</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rabbitmqctl add_vhost powernode</span><br></pre></td></tr></table></figure><p>2、删除vhost：rabbitmqctl delete vhost {name}</p><p>  例如</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rabbitmqctl delete_vhost powernode</span><br></pre></td></tr></table></figure><h2 id="消息发送和接收"><a href="#消息发送和接收" class="headerlink" title="消息发送和接收"></a>消息发送和接收</h2><p>所有 MQ 产品从模型抽象上来说都是一样的过程：<br>消费者（consumer）订阅某个队列。<br>生产者（producer）创建消息，然后发布到队列（queue）中，最后将消息发送到监听的消费者。</p><p>上面是MQ的基本抽象模型，但是不同的MQ产品有有者不同的机制，RabbitMQ实际基于AMQP协议的一个开源实现，因此RabbitMQ内部也是AMQP的基本概念。</p><p>RabbitMQ的内部接收如下：</p><p><img src="https://raw.githubusercontent.com/pengyirui/blog_img/main/2021-12-27-1.png"></p><p><strong>1、Message</strong><br> 消息，消息是不具体的，它由消息头和消息体组成。消息体是不透明的，而消息头则由一系列的可选属性组成，这些属性包括routing-key（路由键）、priority（相对于其他消息的优先权）、delivery-mode（指出该消息可能需要持久性存储）等。 </p><p><strong>2、Publisher</strong><br> 消息的生产者，也是一个向交换器发布消息的客户端应用程序。 </p><p><strong>3、Exchange</strong><br> 交换器，用来接收生产者发送的消息并将这些消息路由给服务器中的队列。.</p><p><strong>4  Binding</strong><br> 绑定，用于消息队列和交换器之间的关联。一个绑定就是基于路由键将交换器和消息队列连接起来的路由规则，所以可以将交换器理解成一个由绑定构成的路由表。 </p><p><strong>5、Queue</strong><br> 消息队列，用来保存消息直到发送给消费者。它是消息的容器，也是消息的终点。一个消息可投入一个或多个队列。消息一直在队列里面，等待消费者连接到这个队列将其取走。 </p><p><strong>6、Connection</strong><br> 网络连接，比如一个TCP连接。</p><p><strong>7、Channel</strong><br> 信道，多路复用连接中的一条独立的双向数据流通道。信道是建立在真实的TCP连接内地虚拟连接，AMQP 命令都是通过信道发出去的，不管是发布消息、订阅队列还是接收消息，这些动作都是通过信道完成。因为对于操作系统来说建立和销毁 TCP 都是非常昂贵的开销，所以引入了信道的概念，以复用一条 TCP 连接。 </p><p><strong>8、Consumer</strong><br> 消息的消费者，表示一个从消息队列中取得消息的客户端应用程序。</p><p><strong>9、Virtual Host</strong><br> 虚拟主机，表示一批交换器、消息队列和相关对象。虚拟主机是共享相同的身份认证和加密环境的独立服务器域。每个 vhost 本质上就是一个 mini 版的 RabbitMQ 服务器，拥有自己的队列、交换器、绑定和权限机制。vhost 是 AMQP 概念的基础，必须在连接时指定，RabbitMQ 默认的 vhost 是 / </p><p><strong>10、Broker</strong><br> 表示消息队列服务器实体。</p><h2 id="Exchange-类型"><a href="#Exchange-类型" class="headerlink" title="Exchange 类型"></a>Exchange 类型</h2><p>Exchange分发消息时根据类型的不同分发策略有区别，目前共四种类型：direct、fanout、topic、headers 。headers 匹配 AMQP 消息的 header 而不是路由键，此外 headers 交换器和 direct 交换器完全一致，但性能差很多，目前几乎用不到了，所以直接看另外三种类型 </p><ol><li><p>direct<br> <code>消息中的路由键（routing key）如果和 Binding 中的 binding key 一致， 交换器就将消息发到对应的队列中</code>。路由键与队列名完全匹配，如果一个队列绑定到交换机要求路由键为“green”，则只转发 routing key 标记为“green”的消息，它是完全匹配、单播的模式。</p></li><li><p>fanout<br> 每个发到 fanout 类型交换器的消息都会分到所有绑定的队列上去。fanout 交换器不处理路由键，只是简单的将队列绑定到交换器上，每个发送到交换器的消息都会被转发到与该交换器绑定的所有队列上。<code>很像子网广播</code>，每台子网内的主机都获得了一份复制的消息。fanout 类型转发消息是最快的。</p><ul><li>适用场景：<br>  群聊功能，广播消息给当前群聊中的所有人<br>  大型玩家在玩在线游戏的时候，可以用它来广播重大消息</li></ul></li><li><p>topic<br> <code>topic 交换器通过模式匹配分配消息的路由键属性，将路由键和某个模式进行匹配，此时队列需要绑定到一个模式上</code>。它将路由键和绑定键的字符串切分成单词，这些单词之间用点隔开。它同样也会识别两个通配符：符号<code>“#”</code>和<code>“*”</code>。<code>#</code>匹配0个或多个单词，<code>*</code>匹配不多不少一个单词。</p><ul><li>适用场景:<br>  新闻的分类更新<br>  同一个任务多个工作者协调完成<br>  同一问题需要特定人员知晓</li></ul></li></ol><h2 id="Java调用Rabbitmq客户端"><a href="#Java调用Rabbitmq客户端" class="headerlink" title="Java调用Rabbitmq客户端"></a>Java调用Rabbitmq客户端</h2><p>此处是原生写法，以后一般都是用springboot的啦</p><p>在java中实现对Rabbitmq进行消息队列编程，需要<code>导入rabbitmq客户端</code>。为了实现生产者和消费者的通信，接下来<code>分别创建两个项目</code>进行模拟。</p><h3 id="导包"><a href="#导包" class="headerlink" title="导包"></a>导包</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.rabbitmq<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>amqp-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.13.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="小总结"><a href="#小总结" class="headerlink" title="小总结"></a>小总结</h3><p>一般情况下交换机和队列都是让监听者/消费者去创建（也要看实际业务情况）</p><p>创建<code>工厂</code>、配置好<code>地址</code>和<code>端口号</code>、<code>账号</code>与<code>密码</code>、<code>实例化链接对象</code>和<code>实例化通道对象</code><br>就可以设置<code>队列</code>和<code>交换机</code>啦</p><p>创建队列：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">//创建队列 ，名字为myQueue</span><br><span class="line">//参数一：队列名</span><br><span class="line">//参数二：消息是否持久化</span><br><span class="line">//参数三：是否独有的,一般false</span><br><span class="line">//参数四：队列消费完后是否删除</span><br><span class="line">//参数五：？？？</span><br><span class="line">channel.queueDeclare(&quot;myQueue&quot;, true, false, false, null);</span><br></pre></td></tr></table></figure><p>直连交换机</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">//参数一：交换机名</span><br><span class="line">//参数二：队列名/路由名</span><br><span class="line">//参数三：道具？？？</span><br><span class="line">//参数四：要发送的信息，需编码</span><br><span class="line">channel.basicPublish(&quot;&quot;,&quot;myQueue&quot;,null,message.getBytes(&quot;UTF-8&quot;));</span><br></pre></td></tr></table></figure><p>声明交换机</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">//参数一：交换机名</span><br><span class="line">//参数二：类型</span><br><span class="line">//参数三：是否持久化</span><br><span class="line">channel.exchangeDeclare(&quot;topicExchange&quot;,&quot;topic&quot;,true);</span><br></pre></td></tr></table></figure><p>绑定</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">//参数一：队列名</span><br><span class="line">//参数二：交换机名</span><br><span class="line">//参数三：key</span><br><span class="line">channel.queueBind(&quot;topicQueue01&quot;,&quot;topicExchange&quot;,&quot;aa.#&quot;);</span><br></pre></td></tr></table></figure><h3 id="无交换机模式"><a href="#无交换机模式" class="headerlink" title="无交换机模式"></a>无交换机模式</h3><h4 id="生产者"><a href="#生产者" class="headerlink" title="生产者"></a>生产者</h4><p>创建发送者类Sender，编写发送消息的方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Sender</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException, TimeoutException &#123;</span><br><span class="line">        <span class="comment">//创建链接工厂对象</span></span><br><span class="line">        ConnectionFactory factory=<span class="keyword">new</span> <span class="title class_">ConnectionFactory</span>();</span><br><span class="line">        factory.setHost(<span class="string">&quot;119.91.252.224&quot;</span>);<span class="comment">//设置RabbitMQ的主机IP</span></span><br><span class="line">        factory.setPort(<span class="number">5672</span>);<span class="comment">//设置RabbitMQ的端口号</span></span><br><span class="line">        factory.setUsername(<span class="string">&quot;root&quot;</span>);<span class="comment">//设置访问用户名</span></span><br><span class="line">        factory.setPassword(<span class="string">&quot;root&quot;</span>);<span class="comment">//设置访问密码</span></span><br><span class="line">        Connection connection=<span class="literal">null</span>;<span class="comment">//定义链接对象</span></span><br><span class="line">        Channel channel=<span class="literal">null</span>;<span class="comment">//定义通道对象</span></span><br><span class="line">        connection=factory.newConnection();<span class="comment">//实例化链接对象</span></span><br><span class="line">        channel=connection.createChannel();<span class="comment">//实例化通道对象</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">message</span> <span class="operator">=</span><span class="string">&quot;Hello World!&quot;</span>;</span><br><span class="line">        <span class="comment">//创建队列 ，名字为myQueue</span></span><br><span class="line">        <span class="comment">//参数一：队列名</span></span><br><span class="line">        <span class="comment">//参数二：消息是否持久化</span></span><br><span class="line">        <span class="comment">//参数三：是否独有的,一般false</span></span><br><span class="line">        <span class="comment">//参数四：队列消费完后是否删除</span></span><br><span class="line">        <span class="comment">//参数五：？？？</span></span><br><span class="line">        channel.queueDeclare(<span class="string">&quot;myQueue&quot;</span>, <span class="literal">true</span>, <span class="literal">false</span>, <span class="literal">false</span>, <span class="literal">null</span>);</span><br><span class="line">        <span class="comment">//发送消息到指定队列</span></span><br><span class="line">        <span class="comment">//参数一：交换机名</span></span><br><span class="line">        <span class="comment">//参数二：队列名/路由名</span></span><br><span class="line">        <span class="comment">//参数三：道具？？？</span></span><br><span class="line">        <span class="comment">//参数四：要发送的信息，需编码</span></span><br><span class="line">        channel.basicPublish(<span class="string">&quot;&quot;</span>,<span class="string">&quot;myQueue&quot;</span>,<span class="literal">null</span>,message.getBytes(<span class="string">&quot;UTF-8&quot;</span>));</span><br><span class="line">        System.out.println(<span class="string">&quot;消息发送成功: &quot;</span>+message);</span><br><span class="line">        channel.close();</span><br><span class="line">        connection.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="消费者"><a href="#消费者" class="headerlink" title="消费者"></a>消费者</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Receiver</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException, TimeoutException &#123;</span><br><span class="line">        <span class="comment">//创建连接工厂</span></span><br><span class="line">        <span class="type">ConnectionFactory</span> <span class="variable">factory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ConnectionFactory</span>();</span><br><span class="line">        factory.setUsername(<span class="string">&quot;root&quot;</span>); <span class="comment">//设置用户名</span></span><br><span class="line">        factory.setPassword(<span class="string">&quot;root&quot;</span>); <span class="comment">//设置密码</span></span><br><span class="line">        factory.setHost(<span class="string">&quot;119.91.252.224&quot;</span>); <span class="comment">//消费队列服务器名</span></span><br><span class="line">        <span class="comment">//建立到代理服务器到连接</span></span><br><span class="line">        <span class="type">Connection</span> <span class="variable">conn</span> <span class="operator">=</span> factory.newConnection();</span><br><span class="line">        <span class="comment">//获得信道</span></span><br><span class="line">        <span class="keyword">final</span> <span class="type">Channel</span> <span class="variable">channel</span> <span class="operator">=</span> conn.createChannel();</span><br><span class="line">        <span class="comment">//声明队列</span></span><br><span class="line">        channel.queueDeclare(<span class="string">&quot;myQueue&quot;</span>, <span class="literal">true</span>, <span class="literal">false</span>, <span class="literal">false</span>, <span class="literal">null</span>);</span><br><span class="line">        <span class="comment">//消费消息</span></span><br><span class="line">        <span class="type">boolean</span> <span class="variable">autoAck</span> <span class="operator">=</span> <span class="literal">true</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">consumerTag</span> <span class="operator">=</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">        <span class="comment">//接收消息</span></span><br><span class="line">        <span class="comment">//参数1 队列名称</span></span><br><span class="line">        <span class="comment">//参数2 是否自动确认消息 true表示自动确认 false表示手动确认</span></span><br><span class="line">        <span class="comment">//参数3 为消息标签 用来区分不同的消费者这里暂时为&quot;&quot;</span></span><br><span class="line">        <span class="comment">// 参数4 消费者回调方法用于编写处理消息的具体代码（例如打印或将消息写入数据库）</span></span><br><span class="line">        channel.basicConsume(<span class="string">&quot;myQueue&quot;</span>, autoAck, consumerTag, <span class="keyword">new</span> <span class="title class_">DefaultConsumer</span>(channel) &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">handleDelivery</span><span class="params">(String consumerTag,</span></span><br><span class="line"><span class="params">                                       Envelope envelope,</span></span><br><span class="line"><span class="params">                                       AMQP.BasicProperties properties,</span></span><br><span class="line"><span class="params">                                       <span class="type">byte</span>[] body)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">                <span class="comment">//获取消息数据</span></span><br><span class="line">                <span class="type">String</span> <span class="variable">bodyStr</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(body, <span class="string">&quot;UTF-8&quot;</span>);</span><br><span class="line">                System.out.println(bodyStr); <span class="comment">//输出消息</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//流关闭，工厂关闭</span></span><br><span class="line">        channel.close();</span><br><span class="line">        conn.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="direct模式"><a href="#direct模式" class="headerlink" title="direct模式"></a>direct模式</h3><p>只接收相同key、路由匹配的</p><h4 id="消费者-1"><a href="#消费者-1" class="headerlink" title="消费者"></a>消费者</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DirectReceiver</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException, TimeoutException &#123;</span><br><span class="line">        <span class="type">ConnectionFactory</span> <span class="variable">factory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ConnectionFactory</span>();</span><br><span class="line">        factory.setHost(<span class="string">&quot;119.91.252.224&quot;</span>);</span><br><span class="line">        factory.setPort(<span class="number">5672</span>);</span><br><span class="line">        factory.setUsername(<span class="string">&quot;root&quot;</span>);</span><br><span class="line">        factory.setPassword(<span class="string">&quot;root&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">Connection</span> <span class="variable">connection</span> <span class="operator">=</span> factory.newConnection();</span><br><span class="line">        <span class="type">Channel</span> <span class="variable">channel</span> <span class="operator">=</span> connection.createChannel();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建队列</span></span><br><span class="line">        channel.queueDeclare(<span class="string">&quot;myDirectQue1&quot;</span>,<span class="literal">true</span>,<span class="literal">false</span>,<span class="literal">false</span>,<span class="literal">null</span>);</span><br><span class="line">        <span class="comment">// 船舰交换机</span></span><br><span class="line">        channel.exchangeDeclare(<span class="string">&quot;directExchange&quot;</span>, <span class="string">&quot;direct&quot;</span>,<span class="literal">true</span>);</span><br><span class="line">        <span class="comment">// 队列，交换机，key相互绑定</span></span><br><span class="line">        channel.queueBind(<span class="string">&quot;myDirectQue1&quot;</span>,<span class="string">&quot;directExchange&quot;</span>, <span class="string">&quot;directRoutingKey&quot;</span>);</span><br><span class="line">        <span class="comment">// 开始监听</span></span><br><span class="line">        channel.basicConsume(<span class="string">&quot;myDirectQue1&quot;</span>,<span class="literal">true</span>,<span class="string">&quot;&quot;</span>,<span class="keyword">new</span> <span class="title class_">DefaultConsumer</span>(channel)&#123;</span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">handleDelivery</span><span class="params">(String consumerTag, Envelope envelope, AMQP.BasicProperties properties, <span class="type">byte</span>[] body)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">                <span class="type">String</span> <span class="variable">message</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(body);</span><br><span class="line">                System.out.println(<span class="string">&quot;消费者 = &quot;</span> + message);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="生产者-1"><a href="#生产者-1" class="headerlink" title="生产者"></a>生产者</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DirectSender</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException, TimeoutException &#123;</span><br><span class="line">        <span class="type">ConnectionFactory</span> <span class="variable">factory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ConnectionFactory</span>();</span><br><span class="line">        factory.setHost(<span class="string">&quot;119.91.252.224&quot;</span>);</span><br><span class="line">        factory.setPort(<span class="number">5672</span>);</span><br><span class="line">        factory.setUsername(<span class="string">&quot;root&quot;</span>);</span><br><span class="line">        factory.setPassword(<span class="string">&quot;root&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">Connection</span> <span class="variable">connection</span> <span class="operator">=</span> factory.newConnection();</span><br><span class="line">        <span class="type">Channel</span> <span class="variable">channel</span> <span class="operator">=</span> connection.createChannel();</span><br><span class="line"></span><br><span class="line">        <span class="type">String</span> <span class="variable">message</span> <span class="operator">=</span> <span class="string">&quot;direct的消息！&quot;</span>;</span><br><span class="line">        <span class="comment">// 发送</span></span><br><span class="line">        channel.basicPublish(<span class="string">&quot;directExchange&quot;</span>, <span class="string">&quot;directRoutingKey&quot;</span>, <span class="literal">null</span>, message.getBytes(<span class="string">&quot;utf-8&quot;</span>));</span><br><span class="line">        System.out.println(<span class="string">&quot;发送成功&quot;</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="fanout模式"><a href="#fanout模式" class="headerlink" title="fanout模式"></a>fanout模式</h3><p>类似广播</p><h4 id="消费者-2"><a href="#消费者-2" class="headerlink" title="消费者"></a>消费者</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FanoutReceiver</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException, TimeoutException &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">ConnectionFactory</span> <span class="variable">factory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ConnectionFactory</span>();</span><br><span class="line">        factory.setHost(<span class="string">&quot;119.91.252.224&quot;</span>);</span><br><span class="line">        factory.setPort(<span class="number">5672</span>);</span><br><span class="line">        factory.setUsername(<span class="string">&quot;root&quot;</span>);</span><br><span class="line">        factory.setPassword(<span class="string">&quot;root&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">Connection</span> <span class="variable">connection</span> <span class="operator">=</span> factory.newConnection();</span><br><span class="line">        <span class="type">Channel</span> <span class="variable">channel</span> <span class="operator">=</span> connection.createChannel();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 随机生成队列名</span></span><br><span class="line">        String queueName= channel.queueDeclare().getQueue();</span><br><span class="line">        <span class="comment">// 第二个属性 == fanout</span></span><br><span class="line">        channel.exchangeDeclare(<span class="string">&quot;fanoutExchange&quot;</span>,<span class="string">&quot;fanout&quot;</span>,<span class="literal">true</span>);</span><br><span class="line">        <span class="comment">//将这个随机的队列绑定到交换机中， 由于是fanout类型的交换机因此不需指定RoutingKey进行绑定</span></span><br><span class="line">        channel.queueBind(queueName,<span class="string">&quot;fanoutExchange&quot;</span>,<span class="string">&quot;&quot;</span>);</span><br><span class="line">        <span class="comment">// 开始监听</span></span><br><span class="line">        channel.basicConsume(queueName,<span class="literal">true</span>,<span class="string">&quot;&quot;</span>,<span class="keyword">new</span> <span class="title class_">DefaultConsumer</span>(channel)&#123;</span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">handleDelivery</span><span class="params">(String consumerTag, Envelope envelope, AMQP.BasicProperties properties, <span class="type">byte</span>[] body)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">                String message=<span class="keyword">new</span> <span class="title class_">String</span>(body);</span><br><span class="line">                System.out.println(<span class="string">&quot;Receive01消费者 ---&quot;</span>+message);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="生产者-2"><a href="#生产者-2" class="headerlink" title="生产者"></a>生产者</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FanoutSender</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException, TimeoutException &#123;</span><br><span class="line">        <span class="type">ConnectionFactory</span> <span class="variable">factory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ConnectionFactory</span>();</span><br><span class="line">        factory.setHost(<span class="string">&quot;119.91.252.224&quot;</span>);</span><br><span class="line">        factory.setPort(<span class="number">5672</span>);</span><br><span class="line">        factory.setUsername(<span class="string">&quot;root&quot;</span>);</span><br><span class="line">        factory.setPassword(<span class="string">&quot;root&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">Connection</span> <span class="variable">connection</span> <span class="operator">=</span> factory.newConnection();</span><br><span class="line">        <span class="type">Channel</span> <span class="variable">channel</span> <span class="operator">=</span> connection.createChannel();</span><br><span class="line"></span><br><span class="line">        <span class="type">String</span> <span class="variable">message</span> <span class="operator">=</span> <span class="string">&quot;fanout的测试消息！&quot;</span>;</span><br><span class="line">        <span class="comment">// 发送</span></span><br><span class="line">        channel.basicPublish(<span class="string">&quot;fanoutExchange&quot;</span>, <span class="string">&quot;&quot;</span>, <span class="literal">null</span>, message.getBytes(<span class="string">&quot;utf-8&quot;</span>));</span><br><span class="line">        System.out.println(<span class="string">&quot;消息发送成功&quot;</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="topic模式"><a href="#topic模式" class="headerlink" title="topic模式"></a>topic模式</h3><p>根据不同的key接受相应的消息</p><h4 id="消费者-3"><a href="#消费者-3" class="headerlink" title="消费者"></a>消费者</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TopicReceiver</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException, TimeoutException &#123;</span><br><span class="line">        <span class="type">ConnectionFactory</span> <span class="variable">factory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ConnectionFactory</span>();</span><br><span class="line">        factory.setHost(<span class="string">&quot;119.91.252.224&quot;</span>);</span><br><span class="line">        factory.setPort(<span class="number">5672</span>);</span><br><span class="line">        factory.setUsername(<span class="string">&quot;root&quot;</span>);</span><br><span class="line">        factory.setPassword(<span class="string">&quot;root&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">Connection</span> <span class="variable">connection</span> <span class="operator">=</span> factory.newConnection();</span><br><span class="line">        <span class="type">Channel</span> <span class="variable">channel</span> <span class="operator">=</span> connection.createChannel();</span><br><span class="line">        <span class="comment">// 声明队列</span></span><br><span class="line">        channel.queueDeclare(<span class="string">&quot;topicQueue01&quot;</span>,<span class="literal">true</span>,<span class="literal">false</span>,<span class="literal">true</span>,<span class="literal">null</span>);</span><br><span class="line">        <span class="comment">// 声明交换机</span></span><br><span class="line">        channel.exchangeDeclare(<span class="string">&quot;topicExchange&quot;</span>,<span class="string">&quot;topic&quot;</span>,<span class="literal">true</span>);</span><br><span class="line">        <span class="comment">// 绑定，第三个属性类似正则表达式（但有区别）</span></span><br><span class="line">        channel.queueBind(<span class="string">&quot;topicQueue01&quot;</span>,<span class="string">&quot;topicExchange&quot;</span>,<span class="string">&quot;aa.#&quot;</span>);</span><br><span class="line">        <span class="comment">// 开始监听</span></span><br><span class="line">        channel.basicConsume(<span class="string">&quot;topicQueue01&quot;</span>,<span class="literal">true</span>,<span class="string">&quot;&quot;</span>,<span class="keyword">new</span> <span class="title class_">DefaultConsumer</span>(channel)&#123;</span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">handleDelivery</span><span class="params">(String consumerTag, Envelope envelope, AMQP.BasicProperties properties, <span class="type">byte</span>[] body)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">                String message=<span class="keyword">new</span> <span class="title class_">String</span>(body);</span><br><span class="line">                System.out.println(<span class="string">&quot;Receive01消费者aa.# ---&quot;</span>+message);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="生产者-3"><a href="#生产者-3" class="headerlink" title="生产者"></a>生产者</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TopicSender</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException, TimeoutException &#123;</span><br><span class="line">        <span class="type">ConnectionFactory</span> <span class="variable">factory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ConnectionFactory</span>();</span><br><span class="line">        factory.setHost(<span class="string">&quot;119.91.252.224&quot;</span>);</span><br><span class="line">        factory.setPort(<span class="number">5672</span>);</span><br><span class="line">        factory.setUsername(<span class="string">&quot;root&quot;</span>);</span><br><span class="line">        factory.setPassword(<span class="string">&quot;root&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">Connection</span> <span class="variable">connection</span> <span class="operator">=</span> factory.newConnection();</span><br><span class="line">        <span class="type">Channel</span> <span class="variable">channel</span> <span class="operator">=</span> connection.createChannel();</span><br><span class="line"></span><br><span class="line">        String message=<span class="string">&quot;topic的测试消息！&quot;</span>;</span><br><span class="line">        <span class="comment">// 发送指定交换机，符合的key</span></span><br><span class="line">        channel.basicPublish(<span class="string">&quot;topicExchange&quot;</span>,<span class="string">&quot;aa.bb.cc&quot;</span>,<span class="literal">null</span>,message.getBytes(<span class="string">&quot;utf-8&quot;</span>));</span><br><span class="line">        System.out.println(<span class="string">&quot;消息发送成功&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="确认机制"><a href="#确认机制" class="headerlink" title="确认机制"></a>确认机制</h2><p>在使用RabbitMQ的时候，我们可以通过消息持久化操作来解决因为服务器的异常奔溃导致的消息丢失，除此之外我们还会遇到一个问题，当消息的发布者在将消息发送出去之后，消息到底有没有正确到达broker代理服务器呢？如果不进行特殊配置的话，默认情况下发布操作是不会返回任何信息给生产者的，也就是默认情况下我们的生产者是不知道消息有没有正确到达broker的，如果在消息到达broker之前已经丢失的话，持久化操作也解决不了这个问题，因为消息根本就没到达代理服务器，你怎么进行持久化，那么这个问题该怎么解决呢？</p><p>RabbitMQ为我们提供了两种方式：</p><p>通过AMQP<code>事务</code>机制实现，这也是AMQP协议层面提供的解决方案；<br>通过将channel设置成<code>confirm模式</code>来实现；</p><h3 id="事务机制"><a href="#事务机制" class="headerlink" title="事务机制"></a>事务机制</h3><p>RabbitMQ中与事务机制有关的方法有三个：<code>txSelect(), txCommit()以及txRollback()</code></p><p>txSelect：用于将当前channel设置成transaction模式</p><p>txCommit：用于提交事务</p><p>txRollback：用于回滚事务</p><p>在通过txSelect开启事务之后，我们便可以发布消息给broker代理服务器了，如果txCommit提交成功了，则消息一定到达了broker了，如果在txCommit执行之前broker异常崩溃或者由于其他原因抛出异常，这个时候我们便可以捕获异常通过txRollback回滚事务了。</p><h4 id="发送者"><a href="#发送者" class="headerlink" title="发送者"></a>发送者</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Sender</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException, TimeoutException &#123;</span><br><span class="line">        <span class="comment">//创建链接工厂对象</span></span><br><span class="line">        <span class="type">ConnectionFactory</span> <span class="variable">factory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ConnectionFactory</span>();</span><br><span class="line">        factory.setHost(<span class="string">&quot;119.91.252.224&quot;</span>);<span class="comment">//设置RabbitMQ的主机IP</span></span><br><span class="line">        factory.setPort(<span class="number">5672</span>);<span class="comment">//设置RabbitMQ的端口号</span></span><br><span class="line">        factory.setUsername(<span class="string">&quot;root&quot;</span>);<span class="comment">//设置访问用户名</span></span><br><span class="line">        factory.setPassword(<span class="string">&quot;root&quot;</span>);<span class="comment">//设置访问密码</span></span><br><span class="line"></span><br><span class="line">        <span class="type">Connection</span> <span class="variable">connection</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">Channel</span> <span class="variable">channel</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">        connection = factory.newConnection();</span><br><span class="line"></span><br><span class="line">        channel = connection.createChannel();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 声明交换机</span></span><br><span class="line">        channel.exchangeDeclare(<span class="string">&quot;directTransactionExchange&quot;</span>, <span class="string">&quot;direct&quot;</span>, <span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">String</span> <span class="variable">message</span> <span class="operator">=</span> <span class="string">&quot;事务的第一条消息&quot;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="type">String</span> <span class="variable">message2</span> <span class="operator">=</span> <span class="string">&quot;事务的第二条消息&quot;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="type">long</span> <span class="variable">start</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">        <span class="comment">// 开启事务</span></span><br><span class="line">        channel.txSelect();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 这里循环只为测试时间，对比效率</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">10000</span>; i++) &#123;</span><br><span class="line">            </span><br><span class="line">            <span class="comment">// 发送</span></span><br><span class="line">            channel.basicPublish(<span class="string">&quot;directTransactionExchange&quot;</span>, <span class="string">&quot;transactionRoutingKey&quot;</span>, <span class="literal">null</span>, message.getBytes(<span class="string">&quot;utf-8&quot;</span>));</span><br><span class="line"></span><br><span class="line">            channel.basicPublish(<span class="string">&quot;directTransactionExchange&quot;</span>, <span class="string">&quot;transactionRoutingKey&quot;</span>, <span class="literal">null</span>, message2.getBytes(<span class="string">&quot;utf-8&quot;</span>));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//提交事务</span></span><br><span class="line">        channel.txCommit();</span><br><span class="line">        <span class="type">long</span> <span class="variable">end</span> <span class="operator">=</span> System.currentTimeMillis() - start;</span><br><span class="line">        System.out.println(<span class="string">&quot;运行时间&quot;</span> + end);</span><br><span class="line">        <span class="comment">// 运行时间1706</span></span><br><span class="line">        System.out.println(<span class="string">&quot;消息发送成功&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="接收者"><a href="#接收者" class="headerlink" title="接收者"></a>接收者</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Reciver</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException, TimeoutException &#123;</span><br><span class="line">        <span class="comment">//创建链接工厂对象</span></span><br><span class="line">        <span class="type">ConnectionFactory</span> <span class="variable">factory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ConnectionFactory</span>();</span><br><span class="line">        factory.setHost(<span class="string">&quot;119.91.252.224&quot;</span>);<span class="comment">//设置RabbitMQ的主机IP</span></span><br><span class="line">        factory.setPort(<span class="number">5672</span>);<span class="comment">//设置RabbitMQ的端口号</span></span><br><span class="line">        factory.setUsername(<span class="string">&quot;root&quot;</span>);<span class="comment">//设置访问用户名</span></span><br><span class="line">        factory.setPassword(<span class="string">&quot;root&quot;</span>);<span class="comment">//设置访问密码</span></span><br><span class="line"></span><br><span class="line">        <span class="type">Connection</span> <span class="variable">connection</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">Channel</span> <span class="variable">channel</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">        connection = factory.newConnection();</span><br><span class="line"></span><br><span class="line">        channel = connection.createChannel();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 声明队列</span></span><br><span class="line">        channel.queueDeclare(<span class="string">&quot;transactionQueue&quot;</span>, <span class="literal">true</span>, <span class="literal">false</span>, <span class="literal">false</span>, <span class="literal">null</span>);</span><br><span class="line">        <span class="comment">// 声明交换机</span></span><br><span class="line">        channel.exchangeDeclare(<span class="string">&quot;directTransactionExchange&quot;</span>, <span class="string">&quot;direct&quot;</span>, <span class="literal">true</span>);</span><br><span class="line">        <span class="comment">// 绑定队列</span></span><br><span class="line">        channel.queueBind(<span class="string">&quot;transactionQueue&quot;</span>, <span class="string">&quot;directTransactionExchange&quot;</span>, <span class="string">&quot;transactionRoutingKey&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//开始消费</span></span><br><span class="line">        channel.basicConsume(<span class="string">&quot;transactionQueue&quot;</span>, <span class="literal">true</span>, <span class="string">&quot;&quot;</span>, <span class="keyword">new</span> <span class="title class_">DefaultConsumer</span>(channel) &#123;</span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">handleDelivery</span><span class="params">(String consumerTag, Envelope envelope, AMQP.BasicProperties properties, <span class="type">byte</span>[] body)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">                <span class="type">String</span> <span class="variable">message</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(body);</span><br><span class="line">                System.out.println(<span class="string">&quot;消费者 ---&quot;</span> + message);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="生产者确认模式"><a href="#生产者确认模式" class="headerlink" title="生产者确认模式"></a>生产者确认模式</h3><p>生产者将信道设置成confirm模式，一旦信道进入confirm模式，所有在该信道上面发布的消息都将会被指派一个唯一的ID(从1开始)，一旦消息被投递到所有匹配的队列之后，broker就会发送一个确认给生产者(包含消息的唯一ID)，这就使得生产者知道消息已经正确到达目的队列了，如果消息和队列是可持久化的，那么确认消息会在将消息写入磁盘之后发出，broker回传给生产者的确认消息中delivery-tag域包含了确认消息的序列号，此外broker也可以设置basic.ack的multiple域，表示到这个序列号之前的所有消息都已经得到了处理；</p><p>confirm模式最大的好处在于他是异步的，一旦发布一条消息，生产者应用程序就可以在等信道返回确认的同时继续发送下一条消息，当消息最终得到确认之后，生产者应用便可以通过回调方法来处理该确认消息，如果RabbitMQ因为自身内部错误导致消息丢失，就会发送一条nack消息，生产者应用程序同样可以在回调方法中处理该nack消息；<br>开启confirm模式的方法：</p><p>生产者通过调用channel的confirmSelect方法将channel设置为confirm模式，(注意一点，已经在transaction事务模式的channel是不能再设置成confirm模式的，即这两种模式是不能共存的)</p><h4 id="普通confirm模式"><a href="#普通confirm模式" class="headerlink" title="普通confirm模式"></a>普通confirm模式</h4><p>每发送一条消息，调用<code>waitForConfirms()</code>方法等待服务端confirm，这实际上是一种串行的confirm，每publish一条消息之后就等待服务端confirm，如果服务端返回false或者超时时间内未返回，客户端进行消息重传；</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SenderConfirm</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException, TimeoutException, InterruptedException &#123;</span><br><span class="line">        <span class="comment">//创建链接工厂对象</span></span><br><span class="line">        <span class="type">ConnectionFactory</span> <span class="variable">factory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ConnectionFactory</span>();</span><br><span class="line">        factory.setHost(<span class="string">&quot;119.91.252.224&quot;</span>);<span class="comment">//设置RabbitMQ的主机IP</span></span><br><span class="line">        factory.setPort(<span class="number">5672</span>);<span class="comment">//设置RabbitMQ的端口号</span></span><br><span class="line">        factory.setUsername(<span class="string">&quot;root&quot;</span>);<span class="comment">//设置访问用户名</span></span><br><span class="line">        factory.setPassword(<span class="string">&quot;root&quot;</span>);<span class="comment">//设置访问密码</span></span><br><span class="line"></span><br><span class="line">        <span class="type">Connection</span> <span class="variable">connection</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">Channel</span> <span class="variable">channel</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">        connection = factory.newConnection();</span><br><span class="line"></span><br><span class="line">        channel = connection.createChannel();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建队列名字confirmQueue</span></span><br><span class="line">        channel.queueDeclare(<span class="string">&quot;confirmQueue&quot;</span>,<span class="literal">true</span>,<span class="literal">false</span>,<span class="literal">false</span>,<span class="literal">null</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//开启发送方确认模式</span></span><br><span class="line">        String message=<span class="string">&quot;普通发送者确认模式测试消息！&quot;</span>;</span><br><span class="line">        <span class="comment">//启动发送者确认模式</span></span><br><span class="line">        channel.confirmSelect();</span><br><span class="line"></span><br><span class="line">        <span class="type">long</span> time=System.currentTimeMillis();</span><br><span class="line">        <span class="comment">// 循环100次，发送消息到指定的队列</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=<span class="number">100</span>;i++)&#123;</span><br><span class="line">            message=<span class="string">&quot;Hello World!...&quot;</span>+i;</span><br><span class="line">            System.out.println(message);</span><br><span class="line">            channel.basicPublish(<span class="string">&quot;&quot;</span>,<span class="string">&quot;confirmQueue&quot;</span>,<span class="literal">null</span>,message.getBytes(<span class="string">&quot;utf-8&quot;</span>));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// System.out.println(channel.waitForConfirms()); 返回布尔类型</span></span><br><span class="line">        System.out.println(<span class="string">&quot;单条确认使用时间=&quot;</span>+(System.currentTimeMillis()-time));</span><br><span class="line">        <span class="comment">// 时间大概10左右</span></span><br><span class="line">        System.out.println(<span class="string">&quot;消息发送成功&quot;</span>+message);</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//阻塞线程等待服务返回响应 ，用于是否消费发送成功，如果服务确认消费已经发送完成则返回true 否则返回false</span></span><br><span class="line">    <span class="comment">//可以为这个方法指定一个毫秒用于确定我们的需要等待服务确认的超时时间，</span></span><br><span class="line">    <span class="comment">//如果超过了指定的时间以后则会抛出异常InterruptedException 表示服务器出现问题了需要补发消息或</span></span><br><span class="line">    <span class="comment">//将消息缓存到Redis中稍后利用定时任务补发</span></span><br><span class="line">    <span class="comment">//无论是返回false还是抛出异常消息都有可能发送成功有可能没有发送成功</span></span><br><span class="line">    <span class="comment">//如果我们要求这个消息一定要发送到队列例如订单数据，那怎么我们可以采用消息补发</span></span><br><span class="line">    <span class="comment">//所谓补发就是重新发送一次消息，可以使用递归或利用Redis+定时任务来完成补发</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="批量confirm模式"><a href="#批量confirm模式" class="headerlink" title="批量confirm模式"></a>批量confirm模式</h4><p>每发送一批消息之后，调用<code>waitForConfirms()</code>方法，等待服务端confirm，这种批量确认的模式极大的提高了confirm效率，但是如果一旦出现confirm返回false或者超时的情况，客户端需要将这一批次的消息全部重发，这会带来明显的重复消息，如果这种情况频繁发生的话，效率也会不升反降；</p><p>这种模式生产者不是每发送一条就等待broker确认，而是发送一批，实现代码见下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SenderPConfirm</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException, TimeoutException, InterruptedException &#123;</span><br><span class="line">        <span class="comment">//创建链接工厂对象</span></span><br><span class="line">        <span class="type">ConnectionFactory</span> <span class="variable">factory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ConnectionFactory</span>();</span><br><span class="line">        factory.setHost(<span class="string">&quot;119.91.252.224&quot;</span>);<span class="comment">//设置RabbitMQ的主机IP</span></span><br><span class="line">        factory.setPort(<span class="number">5672</span>);<span class="comment">//设置RabbitMQ的端口号</span></span><br><span class="line">        factory.setUsername(<span class="string">&quot;root&quot;</span>);<span class="comment">//设置访问用户名</span></span><br><span class="line">        factory.setPassword(<span class="string">&quot;root&quot;</span>);<span class="comment">//设置访问密码</span></span><br><span class="line"></span><br><span class="line">        <span class="type">Connection</span> <span class="variable">connection</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">Channel</span> <span class="variable">channel</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        connection=factory.newConnection();</span><br><span class="line">        channel=connection.createChannel();</span><br><span class="line">        channel.queueDeclare(<span class="string">&quot;confirmQueue&quot;</span>,<span class="literal">true</span>,<span class="literal">false</span>,<span class="literal">false</span>,<span class="literal">null</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//开启发送方确认模式</span></span><br><span class="line">        channel.confirmSelect();</span><br><span class="line">        </span><br><span class="line">        <span class="type">long</span> time=System.currentTimeMillis();</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">10000</span>;i++) &#123;</span><br><span class="line">            String message=String.format(<span class="string">&quot;时间=》%s&quot;</span>,<span class="keyword">new</span> <span class="title class_">Date</span>().getTime());</span><br><span class="line">            System.out.println(message);</span><br><span class="line">            channel.basicPublish(<span class="string">&quot;&quot;</span>,<span class="string">&quot;confirmQueue&quot;</span>,<span class="literal">null</span>,message.getBytes(<span class="string">&quot;utf-8&quot;</span>));</span><br><span class="line">            <span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">100</span>/<span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        channel.waitForConfirmsOrDie(); <span class="comment">//直到所有的消息都发布，只要有一个没有确认就抛异常</span></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">        * waitForConfirmsOrDie 批量消息确认，它会同时向服务中确认之前当前通道中发送的所有的消息是否已经全部成功写入</span></span><br><span class="line"><span class="comment">        * 这个方法没有任何的返回值，如果服务器中有一条消息没有能够成功或向服务器发送确认时服务不可访问都被认定为</span></span><br><span class="line"><span class="comment">        * 消息确认失败，可能有有消息没有发送成功，我们需要进行消费的补发。</span></span><br><span class="line"><span class="comment">        * 如果无法向服务器获取确认信息那么方法就会抛出InterruptedException异常，这时就需要补发消息到队列</span></span><br><span class="line"><span class="comment">        * waitForConfirmsOrDie方法可以指定一个参数timeout 用于等待服务器的确认时间，如果超过这个时间也会</span></span><br><span class="line"><span class="comment">        * 抛出异常，表示确认失败需要补发消息</span></span><br><span class="line"><span class="comment">        *</span></span><br><span class="line"><span class="comment">        * 注意：</span></span><br><span class="line"><span class="comment">        *    批量消息确认的速度比普通的消息确认要快，但是如果一旦出现了消息补发的情况，我们不能确定具体</span></span><br><span class="line"><span class="comment">        *    是哪条消息没有完成发送，需要将本次的发送的所有消息全部进行补发</span></span><br><span class="line"><span class="comment">        *</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;批量确认使用时间=&quot;</span>+(System.currentTimeMillis()-time));</span><br><span class="line">        <span class="comment">// 批量确认使用时间=1047</span></span><br><span class="line">        System.out.println(<span class="string">&quot;全部发送完成...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="异步Confirm模式"><a href="#异步Confirm模式" class="headerlink" title="异步Confirm模式"></a>异步Confirm模式</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SenderYConfirm</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException, TimeoutException, InterruptedException &#123;</span><br><span class="line">        <span class="comment">//创建链接工厂对象</span></span><br><span class="line">        <span class="type">ConnectionFactory</span> <span class="variable">factory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ConnectionFactory</span>();</span><br><span class="line">        factory.setHost(<span class="string">&quot;119.91.252.224&quot;</span>);<span class="comment">//设置RabbitMQ的主机IP</span></span><br><span class="line">        factory.setPort(<span class="number">5672</span>);<span class="comment">//设置RabbitMQ的端口号</span></span><br><span class="line">        factory.setUsername(<span class="string">&quot;root&quot;</span>);<span class="comment">//设置访问用户名</span></span><br><span class="line">        factory.setPassword(<span class="string">&quot;root&quot;</span>);<span class="comment">//设置访问密码</span></span><br><span class="line"></span><br><span class="line">        <span class="type">Connection</span> <span class="variable">connection</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">Channel</span> <span class="variable">channel</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        connection=factory.newConnection();</span><br><span class="line">        channel=connection.createChannel();</span><br><span class="line">        channel.queueDeclare(<span class="string">&quot;confirmQueue&quot;</span>,<span class="literal">true</span>,<span class="literal">false</span>,<span class="literal">false</span>,<span class="literal">null</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//开启发送方确认模式</span></span><br><span class="line">        channel.confirmSelect();</span><br><span class="line">        </span><br><span class="line">        <span class="type">long</span> time=System.currentTimeMillis();</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">10000</span>;i++) &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">message</span> <span class="operator">=</span> <span class="string">&quot;生产者：&quot;</span>+i;</span><br><span class="line">            System.out.println(message);</span><br><span class="line">            channel.basicPublish(<span class="string">&quot;&quot;</span>, <span class="string">&quot;confirmQueue&quot;</span>, <span class="literal">null</span>, message.getBytes(<span class="string">&quot;utf-8&quot;</span>));</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">            channel.addConfirmListener(<span class="keyword">new</span> <span class="title class_">ConfirmListener</span>() &#123;</span><br><span class="line">                <span class="comment">//消息确认以后的回调方法</span></span><br><span class="line">                <span class="comment">//参数 1 为被确认的消息的编号 从 1 开始自动递增用于标记当前是第几个消息</span></span><br><span class="line">                <span class="comment">//参数 2 为当前消息是否同时确认了多个</span></span><br><span class="line">                <span class="comment">//注意：如果参数 2 为true 则表示本次确认同时确认了多条消息，消息等于当前参数1 （消息编号）的所有消息 全部被确认 如果为false 则表示只确认多了当前编号的消息</span></span><br><span class="line">                <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">handleAck</span><span class="params">(<span class="type">long</span> l, <span class="type">boolean</span> b)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">                    System.out.println(<span class="string">&quot;消息被确认了 --- 消息编号：&quot;</span> + l + <span class="string">&quot;    是否确认了多条：&quot;</span> + b);</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="comment">//消息没有确认的回调方法</span></span><br><span class="line">                <span class="comment">//如果这个方法被执行表示当前的消息没有被确认 需要进行消息补发</span></span><br><span class="line">                <span class="comment">//参数 1 为没有被确认的消息的编号 从 1 开始自动递增用于标记当前是第几个消息</span></span><br><span class="line">                <span class="comment">//参数 2 为当前消息是否同时没有确认多个</span></span><br><span class="line">                <span class="comment">//注意： 如果参数2 为true 则表示小于当前编号的所有的消息可能都没有发送成功需要进行消息的补发</span></span><br><span class="line">                <span class="comment">//  如果参数2 为false则表示当前编号的消息没法发送成功需要进行补发</span></span><br><span class="line">                <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">handleNack</span><span class="params">(<span class="type">long</span> l, <span class="type">boolean</span> b)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">                    System.out.println(<span class="string">&quot;消息没有被确认-----消息编号：&quot;</span> + l + <span class="string">&quot;    是否没有确认多条：&quot;</span> + b);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;批量确认使用时间=&quot;</span>+(System.currentTimeMillis()-time));</span><br><span class="line">        <span class="comment">// 批量确认使用时间=458</span></span><br><span class="line">        System.out.println(<span class="string">&quot;全部发送完成...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到，虽然我们还是发送了100条消息，同样我们并没有收到100个ack消息 ，只收到两个或者三个ack消息，并且这两个ack消息的multiple域都为true，这点和测试1是相同的，你多次运行程序会发现每次发送回来的ack消息中的deliveryTag域的值并不是一样的，说明broker端批量回传给发送者的ack消息并不是以固定的批量大小回传的；</p><p>类似测核酸，十个人为一组进行抽查</p><p>从以上测试示例时间就可以看到waitForConfirmsOrDie方法发送100条消息并且全部收到确认需要135ms，测试2中通过监听器的方式仅仅需要1ms，说明调用waitForConfirmsOrDie会造成程序的阻塞，通过监听器并不会造成程序的阻塞</p><h2 id="SpringBoot整合"><a href="#SpringBoot整合" class="headerlink" title="SpringBoot整合"></a>SpringBoot整合</h2><p>之前的代码可以看到有很多地方冗余，spring boot就是减少重复代码的。</p><h3 id="导包，配置文件"><a href="#导包，配置文件" class="headerlink" title="导包，配置文件"></a>导包，配置文件</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-amqp<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring.rabbitmq.addresses</span>=<span class="string">119.91.252.224</span></span><br><span class="line"><span class="attr">spring.rabbitmq.port</span>=<span class="string">5672</span></span><br><span class="line"><span class="attr">spring.rabbitmq.username</span>=<span class="string">root</span></span><br><span class="line"><span class="attr">spring.rabbitmq.password</span>=<span class="string">root</span></span><br></pre></td></tr></table></figure><h3 id="direct"><a href="#direct" class="headerlink" title="direct"></a>direct</h3><h4 id="发送者-1"><a href="#发送者-1" class="headerlink" title="发送者"></a>发送者</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PaymentNotifySender</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> AmqpTemplate rabbitTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">sender</span><span class="params">(String msg)</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;notify.payment 已发送消息: &quot;</span>+msg);</span><br><span class="line">        <span class="comment">//第一个参数为对列名字，第二个参数为消息内容</span></span><br><span class="line">        rabbitTemplate.convertAndSend(<span class="string">&quot;notify.payment&quot;</span>, msg);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>@Test</code> 调用发送者</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">RabbitmqSenderApplicationTests</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> PaymentNotifySender sender;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test_sender1</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">long</span> <span class="variable">start</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">            sender.sender(<span class="string">&quot;测试1：&quot;</span>+i);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(System.currentTimeMillis() - start);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="接收者-1"><a href="#接收者-1" class="headerlink" title="接收者"></a>接收者</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DirectConfig</span> &#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> Queue <span class="title function_">paymentNotifyQueue</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">//创建队列</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Queue</span>(<span class="string">&quot;notify.payment&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@RabbitListener(queues = &quot;notify.payment&quot;)</span> <span class="comment">//监听</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PaymentNotifyReceive</span> &#123;</span><br><span class="line">    <span class="meta">@RabbitHandler</span>  <span class="comment">//消息处理</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">receive</span><span class="params">(String msg)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;notify.payment接收消息: &quot;</span>+msg);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Topic模式"><a href="#Topic模式" class="headerlink" title="Topic模式"></a>Topic模式</h3><p>topic转发信息主要是依据通配符,队列和交换机的绑定。主要是依据一种模式(通配符+字符串),而当发送消息的时候,只有指定的Key和该模式相匹配的时候,消息才会被发送到该消息队列中.</p><h4 id="生产者-4"><a href="#生产者-4" class="headerlink" title="生产者"></a>生产者</h4><p>用于创建队列，交换机，绑定交换机。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TopicConfig</span> &#123;</span><br><span class="line">    <span class="comment">//配置一个routingKey为api.core的消息队列并绑定在coreExchange交换机上（交换机的匹配规则为api.core.*）</span></span><br><span class="line">    <span class="comment">//配置一个routingKey为api.payment的消息队列并绑定在paymentExchange交换机上（交换机的匹配规则为api.payment.#）</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> Queue <span class="title function_">coreQueue</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Queue</span>(<span class="string">&quot;api.core&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> Queue <span class="title function_">paymentQueue</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Queue</span>(<span class="string">&quot;api.payment&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span> <span class="comment">//交换机coreExchange</span></span><br><span class="line">    <span class="keyword">public</span> TopicExchange <span class="title function_">coreExchange</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">TopicExchange</span>(<span class="string">&quot;coreExchange&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Bean</span> <span class="comment">//交换机paymentExchange</span></span><br><span class="line">    <span class="keyword">public</span> TopicExchange <span class="title function_">paymentExchange</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">TopicExchange</span>(<span class="string">&quot;paymentExchange&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="comment">/*号只能向后多匹配一层路径(表示一个词）</span></span><br><span class="line"><span class="comment">     #号可以向后匹配多层路径（表示零个或多个词）</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="comment">//BindingBuilder.bind(指定队列).to(交换机).with(路由键);  路由键相当于队列名</span></span><br><span class="line">    <span class="comment">//队列coreQueue绑定到交换机coreExchange</span></span><br><span class="line">    <span class="keyword">public</span> Binding <span class="title function_">bindingCoreExchange</span><span class="params">(Queue coreQueue, TopicExchange coreExchange)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> BindingBuilder.bind(coreQueue).to(coreExchange).with(<span class="string">&quot;api.core.*&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Bean</span> <span class="comment">//队列paymentQueue绑定到paymentExchange交换机</span></span><br><span class="line">    <span class="keyword">public</span> Binding <span class="title function_">bindingPaymentExchange</span><span class="params">(Queue paymentQueue, TopicExchange paymentExchange)</span>     &#123;</span><br><span class="line">        <span class="keyword">return</span> BindingBuilder.bind(paymentQueue).to(paymentExchange).with(<span class="string">&quot;api.payment.#&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>负责用户消息发送</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ApiCoreSender</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RabbitTemplate rabbitTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">user</span><span class="params">(String msg)</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;api.core.user send message: &quot;</span>+msg);</span><br><span class="line">        <span class="comment">//rabbitTemplate.convertAndSend(&quot;交换机名&quot;，“路由键”，“消息内容”)</span></span><br><span class="line">        <span class="comment">//RabbitMQ将会根据第二个参数去寻找有没有匹配此规则的队列,如果有,则把消息给它,如果有不止一个,则把消息分发给匹配的队列(每个队列都有消息!)</span></span><br><span class="line">        rabbitTemplate.convertAndSend(<span class="string">&quot;coreExchange&quot;</span>, <span class="string">&quot;api.core.user&quot;</span>, msg);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//查询用户方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">userQuery</span><span class="params">(String msg)</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;api.core.user.query send message: &quot;</span>+msg);</span><br><span class="line">        rabbitTemplate.convertAndSend(<span class="string">&quot;coreExchange&quot;</span>, <span class="string">&quot;api.core.core.query&quot;</span>, msg);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>负责订单消息发送</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ApiPaymentSender</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RabbitTemplate rabbitTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//订单管理方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">order</span><span class="params">(String msg)</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;api.payment.order send message: &quot;</span>+msg);</span><br><span class="line">        rabbitTemplate.convertAndSend(<span class="string">&quot;paymentExchange&quot;</span>, <span class="string">&quot;api.payment.order&quot;</span>, msg);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//订单查询</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">orderQuery</span><span class="params">(String msg)</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;api.payment.order.query send message: &quot;</span>+msg);</span><br><span class="line">        rabbitTemplate.convertAndSend(<span class="string">&quot;paymentExchange&quot;</span>, <span class="string">&quot;api.payment.order.query&quot;</span>, msg);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//订单明细查询</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">orderDetailQuery</span><span class="params">(String msg)</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;api.payment.order.detail.query send message: &quot;</span>+msg);</span><br><span class="line">        rabbitTemplate.convertAndSend(<span class="string">&quot;paymentExchange&quot;</span>, <span class="string">&quot;api.payment.order.detail.query&quot;</span>, msg);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ApiCoreSenderTest</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> ApiCoreSender sender;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test_user</span><span class="params">()</span> &#123;</span><br><span class="line">        sender.user(<span class="string">&quot;用户管理！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test_userQuery</span><span class="params">()</span> &#123;</span><br><span class="line">        sender.userQuery(<span class="string">&quot;查询用户信息！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ApiPaymentSenderTest</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> ApiPaymentSender sender;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test_order</span><span class="params">()</span> &#123;</span><br><span class="line">        sender.order(<span class="string">&quot;订单管理！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test_orderQuery</span><span class="params">()</span> &#123;</span><br><span class="line">        sender.orderQuery(<span class="string">&quot;查询订单信息！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test_orderDetailQuery</span><span class="params">()</span> &#123;</span><br><span class="line">        sender.orderDetailQuery(<span class="string">&quot;查询订单详情信息！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="消费者-4"><a href="#消费者-4" class="headerlink" title="消费者"></a>消费者</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ApiCoreRecive</span> &#123;</span><br><span class="line">    <span class="meta">@RabbitHandler</span></span><br><span class="line">    <span class="meta">@RabbitListener(queues = &quot;api.core&quot;)</span></span><br><span class="line">    <span class="comment">//注意：topic模式中只有消费端监听的路由键符合发送端的路由规则（路由键决定）的队列才会收到消息。</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">user</span><span class="params">(String msg)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;api.core 接受的消息: &quot;</span> + msg);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ApiPaymentRecive</span> &#123;</span><br><span class="line">    <span class="meta">@RabbitHandler</span></span><br><span class="line">    <span class="meta">@RabbitListener(queues = &quot;api.payment&quot;)</span></span><br><span class="line">    <span class="comment">//注意：topic模式中只有消费端监听的路由键符合发送端的路由规则（路由键决定）的队列才会收到消息。</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">order</span><span class="params">(String msg)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;api.payment.order 接收消息: &quot;</span>+msg);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>启动消费者项目，分别调用生产者的用户消息和订单消息的发送，测试消费者接受到消息。</p><h3 id="fanout模式-1"><a href="#fanout模式-1" class="headerlink" title="fanout模式"></a>fanout模式</h3><p>是路由广播的形式,将会把消息发给绑定它的全部队列,即便设置了key,也会被忽略.在广播模式中，发送者只要发送消息，所有绑定的队列都会接收到，所以在本例中，将交换机，队列的创建都交给消费者项目完成。</p><p>广播：发送到路由器的消息会使得绑定到该路由器的每一个Queue接收到消息,这个时候就算指定了Key,或者规则(即上文中convertAndSend方法的参数2),也会被忽略!<br>交换机类型：FanoutExchange<br>rabbitTemplate.convertAndSend(“交换机名”，“ ”，“消息内容”)；//路由键被忽略<br>消费端：只要是绑定到该交换机上的都能收到消息</p><h4 id="生产者-5"><a href="#生产者-5" class="headerlink" title="生产者"></a>生产者</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ApiReportSender</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> AmqpTemplate rabbitTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">generateReports</span><span class="params">(String msg)</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;api.generate.reports 发送消息: &quot;</span>+msg);</span><br><span class="line">        rabbitTemplate.convertAndSend(<span class="string">&quot;reportExchange&quot;</span>, <span class="string">&quot;api.generate.reports&quot;</span>, msg);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ApiReportSenderTest</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> ApiReportSender sender;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test_generateReports</span><span class="params">()</span> &#123;</span><br><span class="line">        sender.generateReports(<span class="string">&quot;开始生成报表！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="消费者-5"><a href="#消费者-5" class="headerlink" title="消费者"></a>消费者</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FanoutConfig</span> &#123;</span><br><span class="line">    <span class="meta">@Bean</span> <span class="comment">//创建队列</span></span><br><span class="line">    <span class="keyword">public</span> Queue <span class="title function_">reportPaymentQueue</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Queue</span>(<span class="string">&quot;api.report.payment&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Bean</span>  <span class="comment">//创建队列</span></span><br><span class="line">    <span class="keyword">public</span> Queue <span class="title function_">reportRefundQueue</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Queue</span>(<span class="string">&quot;api.report.refund&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Bean</span>  <span class="comment">//创建交换机</span></span><br><span class="line">    <span class="keyword">public</span> FanoutExchange <span class="title function_">reportExchange</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">FanoutExchange</span>(<span class="string">&quot;reportExchange&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span>  <span class="comment">//配置一个routingKey为api.report.payment的消息队列并绑定在reportExchange交换机上</span></span><br><span class="line">    <span class="keyword">public</span> Binding <span class="title function_">bindingReportPaymentExchange</span><span class="params">(Queue reportPaymentQueue, FanoutExchange reportExchange)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> BindingBuilder.bind(reportPaymentQueue).to(reportExchange);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Bean</span> <span class="comment">//配置一个routingKey为api.report.refund的消息队列并绑定在reportExchange交换机上</span></span><br><span class="line">    <span class="keyword">public</span> Binding <span class="title function_">bindingReportRefundExchange</span><span class="params">(Queue reportRefundQueue, FanoutExchange reportExchange)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> BindingBuilder.bind(reportRefundQueue).to(reportExchange);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ApiReportReceived</span> &#123;</span><br><span class="line">    <span class="meta">@RabbitHandler</span></span><br><span class="line">    <span class="meta">@RabbitListener(queues = &quot;api.report.payment&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">payment</span><span class="params">(String msg)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;api.report.payment 接收的消息: &quot;</span>+msg);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RabbitHandler</span></span><br><span class="line">    <span class="meta">@RabbitListener(queues = &quot;api.report.refund&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">refund</span><span class="params">(String msg)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;api.report.refund 接收的消息: &quot;</span>+msg);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="消息发送复杂对象"><a href="#消息发送复杂对象" class="headerlink" title="消息发送复杂对象"></a>消息发送复杂对象</h3><p>在生产者项目中定义实体对象Order,对象必须可序列化</p><p>在消费者项目中定义同样的实体类型Order，用于接收消息中的订单对象</p><h2 id="集群"><a href="#集群" class="headerlink" title="集群"></a>集群</h2><p>待记录</p><h2 id="项目使用记录"><a href="#项目使用记录" class="headerlink" title="项目使用记录"></a>项目使用记录</h2><p>生产控制层</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@PostMapping(&quot;/convertAndSend&quot;)</span></span><br><span class="line"><span class="meta">@ApiOperation(value = &quot;mq生产，批量插入&quot;)</span></span><br><span class="line"><span class="keyword">public</span> R <span class="title function_">convertAndSend</span><span class="params">(<span class="meta">@RequestBody</span> List&lt;Message&gt; entitys)</span> &#123;</span><br><span class="line">    fanoutProducer.sendMessage(entitys);</span><br><span class="line">    log.info(<span class="string">&quot;消息开始插入&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> R.ok(<span class="string">&quot;sucess&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>发送到mq里面去</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.gx.<span class="keyword">module</span>.message.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> cn.gx.api.demo.domain.Message;</span><br><span class="line"><span class="keyword">import</span> com.gx.common.mq.FanoutMQConfig;</span><br><span class="line"><span class="keyword">import</span> lombok.AllArgsConstructor;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.rabbit.core.RabbitTemplate;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@AllArgsConstructor(onConstructor_ = &#123;@Autowired&#125;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FanoutProducer</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> RabbitTemplate rabbitTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 发送消息至fanout交换机,由于fanout只关注订阅关系，所以routing key随便指定都可以</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> message</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">sendMessage</span><span class="params">(List&lt;Message&gt; message)</span>&#123;</span><br><span class="line">        <span class="comment">//convertAndSend传入的内容 交换机名，key名字，传输的东西</span></span><br><span class="line">        rabbitTemplate.convertAndSend(FanoutMQConfig.FANOUT_EXCHANGE_NAME, <span class="string">&quot;&quot;</span>, message);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>预先写好订阅哪个交换机和队列</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.gx.common.mq;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.core.Binding;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.core.BindingBuilder;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.core.FanoutExchange;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.core.Queue;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * fanout:订阅交换机,可以实现发布订阅模式的消费模型&lt;br&gt;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FanoutMQConfig</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 与fanout绑定的第一个队列</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">FIRST_FANOUT_QUEUE_NAME</span> <span class="operator">=</span> <span class="string">&quot;cn.gx.mq.fanout.first&quot;</span>;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 与fanout交换机绑定的第二个队列</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">SECOND_FANOUT_QUEUE_NAME</span> <span class="operator">=</span> <span class="string">&quot;cn.gx.mq.fanout.second&quot;</span>;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * fanout 交换机</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">FANOUT_EXCHANGE_NAME</span> <span class="operator">=</span> <span class="string">&quot;cn.gx.mq.fanout.exchange&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * FanoutExchange,持久化、非自动删除</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> FanoutExchange <span class="title function_">fanoutExchange</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">FanoutExchange</span>(FANOUT_EXCHANGE_NAME);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> Queue <span class="title function_">firstFanoutQueue</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Queue</span>(FIRST_FANOUT_QUEUE_NAME);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> Queue <span class="title function_">secondFanoutQueue</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Queue</span>(SECOND_FANOUT_QUEUE_NAME);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> Binding <span class="title function_">firstFanoutBinding</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> BindingBuilder.bind(firstFanoutQueue()).to(fanoutExchange());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> Binding <span class="title function_">secondFanoutBinding</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> BindingBuilder.bind(secondFanoutQueue()).to(fanoutExchange());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接收控制层（这里有两个Message是应为一开始命名不规范导致的，一个是传输的消息，另一个是用作应答的）<br>这里注意Chanel导入的是这个包<br>import com.rabbitmq.client.Channel;</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 批量插入</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line"><span class="meta">@ApiOperation(value = &quot;mq消息消费，批量插入&quot;)</span></span><br><span class="line"><span class="meta">@RabbitListener(queues = &#123;FanoutMQConfig.FIRST_FANOUT_QUEUE_NAME&#125;)</span></span><br><span class="line"><span class="meta">@RabbitHandler</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addBatch</span><span class="params">(<span class="meta">@RequestBody</span> List&lt;Message&gt; entitys, org.springframework.amqp.core.Message messageTemp, Channel channel)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">    baseService.addBatch(entitys, messageTemp, channel);</span><br><span class="line">    log.info(<span class="string">&quot;消息插入成功:&#123;&#125;&quot;</span> + entitys);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>service层应答，这里省略业务逻辑</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addBatch</span><span class="params">(List&lt;Message&gt; entitys, org.springframework.amqp.core.Message messageTemp, Channel channel)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">    <span class="comment">// 业务代码。。。。。。</span></span><br><span class="line">    <span class="comment">//手动应答</span></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        channel.basicAck(messageTemp.getMessageProperties().getDeliveryTag(), <span class="literal">false</span>);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">        channel.basicNack(messageTemp.getMessageProperties().getDeliveryTag(), <span class="literal">false</span>, <span class="literal">false</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>nacos配置文件用作参考。。。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="comment"># mq 配置</span></span><br><span class="line">  <span class="attr">rabbitmq:</span></span><br><span class="line">    <span class="attr">primary:</span> <span class="string">first</span></span><br><span class="line">    <span class="attr">listener:</span></span><br><span class="line">      <span class="attr">simple:</span></span><br><span class="line">        <span class="attr">acknowledge-mode:</span> <span class="string">manual</span> <span class="comment"># 手动应答</span></span><br><span class="line">        <span class="attr">concurrency:</span> <span class="number">5</span> <span class="comment"># 消费端最小并发数</span></span><br><span class="line">        <span class="attr">max-concurrency:</span> <span class="number">10</span> <span class="comment"># 消费端最大并发数</span></span><br><span class="line">        <span class="attr">prefetch:</span> <span class="number">5</span> <span class="comment"># 一次请求中预处理的消息数量</span></span><br><span class="line">        <span class="attr">missing-queues-fatal:</span> <span class="literal">false</span> <span class="comment">#将missingQueuesFatal改成false也是一种解决消费者不消费的解决办法。</span></span><br><span class="line">    <span class="attr">cache:</span></span><br><span class="line">      <span class="attr">channel:</span></span><br><span class="line">        <span class="attr">size:</span> <span class="number">50</span> <span class="comment"># 缓存的channel数量</span></span><br><span class="line">    <span class="attr">properties:</span></span><br><span class="line">      <span class="attr">first:</span></span><br><span class="line">        <span class="comment">#测试环境</span></span><br><span class="line">        <span class="attr">host:</span> <span class="number">192.168</span><span class="number">.18</span><span class="number">.35</span></span><br><span class="line">        <span class="attr">port:</span> <span class="number">5672</span></span><br><span class="line">        <span class="attr">username:</span> <span class="string">admin</span></span><br><span class="line">        <span class="attr">password:</span> <span class="string">admin123</span></span><br><span class="line">        <span class="comment">#虚拟host 可以不设置,使用server默认host #gx-cloud</span></span><br><span class="line">        <span class="attr">virtual-host:</span> <span class="string">/</span></span><br><span class="line">        <span class="comment">#确认消息已发送到交换机(Exchange)</span></span><br><span class="line">        <span class="attr">publisher-confirms:</span> <span class="literal">true</span></span><br><span class="line">        <span class="comment">#确认消息已发送到队列(Queue)</span></span><br><span class="line">        <span class="attr">publisher-returns:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><p>服务启动不成功，因为我没@Import上mq配置文件（但我没问题呀。。。不解~~）<br>他原话（“问题在于你config注入spring 但是message模块启动的时候应该是找不到config那个文件，只需要启动的时候注入这个类就行”）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.gx.<span class="keyword">module</span>.message;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> cn.gx.tool.cloud.annotation.GxCloudConfig;</span><br><span class="line"><span class="keyword">import</span> com.gx.common.constant.AppConstants;</span><br><span class="line"><span class="keyword">import</span> com.gx.common.mq.FanoutMQConfig;</span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Import;</span><br><span class="line"></span><br><span class="line"><span class="meta">@GxCloudConfig(basePackages = AppConstants.BASE_PACKAGES)</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@Import(&#123;FanoutMQConfig.class&#125;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MessageApplication</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        SpringApplication.run(MessageApplication.class,args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>操作时有参考此博客<br><a href="https://blog.csdn.net/weixin_44404170/article/details/121317297">https://blog.csdn.net/weixin_44404170/article/details/121317297</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Nginx</title>
      <link href="/posts/248b.html"/>
      <url>/posts/248b.html</url>
      
        <content type="html"><![CDATA[<h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>软件层面一般常用Nginx来做反向代理服务器，它的性能非常好，用来做负载均衡。<br>官网：<a href="http://nginx.org/">http://nginx.org</a></p><hr><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>因为他是C语言的，所以下载下来的源码需要编译才能运行</p><ul><li>gcc编译器是否安装<br>  检查是否安装：<code>yum list installed | grep gcc</code><br>  执行安装：<code>yum install gcc -y</code></li><li>openssl库是否安装<br>  检查是否安装：<code>yum list installed | grep openssl</code><br>  执行安装：<code>yum install openssl openssl-devel -y</code></li><li>pcre库是否安装<br>  检查是否安装：<code>yum list installed | grep pcre</code><br>  执行安装：<code>yum install pcre pcre-devel -y</code></li><li>zlib库是否安装<br>  检查是否安装：<code>yum list installed | grep zlib</code><br>  执行安装：<code>yum install zlib zlib-devel -y</code></li><li>一次性安装，执行如下命令<br>  <code>yum install gcc openssl openssl-devel pcre pcre-devel zlib zlib-devel -y</code></li></ul><p>解压下载下来的nginx文件，执行命令：<code>tar -zxvf nginx-1.14.2.tar.gz</code><br>切换至解压后的nginx主目录，执行命令：<code>cd nginx-1.14.2</code><br>在nginx主目录nginx-1.14.2下执行命令：<code>./configure --prefix=/usr/local/nginx </code><br>（其中–prefix是指定nginx安装路径）  <strong>注意:等号左右不要有空格</strong></p><p>执行命令进行编译：<code>make</code><br>执行命令进行安装：<code>make install</code><br>安装成功后，可以切换到/usr/local/nginx目录下，查看内容<br>有 conf html logs sbin 目录</p><h2 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h2><p>切换到nginx安装目录的sbin目录下，执行：</p><ul><li><p>普通启动<br>  <code>./nginx</code></p></li><li><p>通过配置文件启动<br>  <code>./nginx -c /usr/local/nginx/conf/nginx.conf</code></p></li><li><p>查看进程<br>  nginx 体系结构由 master 进程和其 worker 进程组成<br>  master 进程读取配置文件，并维护 worker 进程，而 worker 进程则对请求进行实际处理<br>  Nginx启动后，安装目录下会出现一些_tmp结尾的文件，这些是临时文件，不用管。<br>  <code>ps -ef | grep nginx</code></p></li><li><p>优雅关闭<br>  这种关闭方式会处理完请求后再关闭，所以称之为优雅的关闭,<br>  主pid为master，其他为子进程worker<br>  <code>kill -QUIT 主pid</code></p></li><li><p>快速关闭Nginx：<br>  这种关闭方式不管请求是否处理完成，直接关闭，比较暴力，称之为快速的关闭<br>  <code>kill -TERM 主pid</code></p></li><li><p>重启<br>  <code>./nginx -s reload</code></p></li><li><p>配置检查<br>  <code>./nginx -c /usr/local/nginx/conf/nginx.conf -t</code></p></li></ul><h2 id="静态网站部署"><a href="#静态网站部署" class="headerlink" title="静态网站部署"></a>静态网站部署</h2><p>例子：将静态<strong>ace</strong>网站部署到Nginx服务器上</p><p>把文件上传到<code>/opt/static/</code>下<br>修改nginx配置文件（注意层级在http—&gt;server—&gt;location）<br>注意要以分号结尾</p><h3 id="通过ip直接访问"><a href="#通过ip直接访问" class="headerlink" title="通过ip直接访问"></a>通过ip直接访问</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">location / &#123;</span><br><span class="line">    root   /opt/packages/ace;</span><br><span class="line">    index  index.html index.htm;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>重启nginx，输入<code>IP</code>便能访问<br>例如：<code>http://192.168.235.128:80</code></p><h3 id="通过ip-路径访问"><a href="#通过ip-路径访问" class="headerlink" title="通过ip+路径访问"></a>通过ip+路径访问</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">location /ace &#123;</span><br><span class="line">    root /opt/static/;</span><br><span class="line">    index  index.html index.htm;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>重启nginx，输入<code>IP+/ace</code>便能访问<br>例如：<code>http://192.168.235.128:80/ace</code></p><h2 id="负载均衡"><a href="#负载均衡" class="headerlink" title="负载均衡"></a>负载均衡</h2><p>用户访问nginx，让他自动调度服务（此处是tomcat）</p><p>修改配置文件<br>（注意层级在，http—&gt;upstream）<br>127.0.0.1:9100和127.0.0.1:9200是两台tomcat</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">upstream www.myweb.com &#123; </span><br><span class="line">    server  127.0.0.1:9100; </span><br><span class="line">    server  127.0.0.1:9200;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>再在server模块里添加location，并配置proxy_pass<br>其中 <a href="http://www.myweb.com/">www.myweb.com</a> 字符串要和 upstream 后面的字符串相等</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">location /myweb &#123;</span><br><span class="line">    proxy_pass http://www.myweb.com;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>ip+myweb便能访问<br>例如：<code>http://192.168.235.128:80/myweb</code></p><h2 id="常用负载均衡策略"><a href="#常用负载均衡策略" class="headerlink" title="常用负载均衡策略"></a>常用负载均衡策略</h2><ul><li><p>轮询（默认）<br>  注意：这里的轮询并不是每个请求轮流分配到不同的后端服务器，与ip_hash类似，但是按照访问url的hash结果来分配请求，使得每个url定向到同一个后端服务器，主要应用于后端服务器为缓存时的场景下。如果后端服务器down掉，将自动剔除</p>  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">upstream backserver &#123; </span><br><span class="line">   server 127.0.0.1:8080; </span><br><span class="line">   server 127.0.0.1:9090; </span><br><span class="line">   &#125; </span><br></pre></td></tr></table></figure></li><li><p>权重<br>  每个请求按一定比例分发到不同的后端服务器，weight值越大访问的比例越大，用于后端服务器性能不均的情况</p>  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">upstream backserver &#123; </span><br><span class="line">   server 192.168.0.14 weight=5; </span><br><span class="line">   server 192.168.0.15 weight=2; </span><br><span class="line">   &#125; </span><br></pre></td></tr></table></figure></li><li><p>ip_hash<br>  ip_hash也叫IP绑定，每个请求按访问ip的hash值分配，这样每个访问客户端会固定访问一个后端服务器，可以解决会话Session丢失的问题<br>  算法：hash(“124.207.55.82”) % 2 = 0, 1</p>  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">upstream backserver &#123; </span><br><span class="line">   ip_hash; </span><br><span class="line">   server 127.0.0.1:8080; </span><br><span class="line">   server 127.0.0.1:9090; </span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure></li><li><p>最少连接<br>  web请求会被转发到连接数最少的服务器上</p>  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">upstream backserver &#123; </span><br><span class="line">    least_conn;</span><br><span class="line">    server 127.0.0.1:8080; </span><br><span class="line">    server 127.0.0.1:9090; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="静态代理"><a href="#静态代理" class="headerlink" title="静态代理"></a>静态代理</h2><p>把所有静态资源的访问改为访问nginx，而不是访问tomcat，这种方式叫静态代理。因为nginx更擅长于静态资源的处理，性能更好，效率更高。<br>所以在实际应用中，我们将静态资源比如图片、css、html、js等交给nginx处理，而不是由tomcat处理。</p><h3 id="方式一"><a href="#方式一" class="headerlink" title="方式一"></a>方式一</h3><p>在nginx.conf的location中配置静态资源的后缀</p><p>例如：当访问静态资源，则从linux服务器/opt/static目录下获取（举例）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">location ~ .*\.(js|css|htm|html|gif|jpg|jpeg|png|bmp|swf|ioc|rar|zip|txt|flv|mid|doc|ppt|pdf|xls|mp3|wma)$ &#123;</span><br><span class="line">    root /opt/static;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">说明：</span><br><span class="line">~ 表示正则匹配，也就是说后面的内容可以是正则表达式匹配</span><br><span class="line">第一个点 . 表示任意字符</span><br><span class="line">*表示一个或多个字符</span><br><span class="line">\. 是转移字符，是后面这个点的转移字符</span><br><span class="line">| 表示或者</span><br><span class="line">$ 表示结尾</span><br></pre></td></tr></table></figure><p>整个配置表示以 .后面括号里面的这些后缀结尾的文件都由nginx处理<br>放置静态资源的目录，要注意一下目录权限问题，如果权限不足，给目录赋予权限；<br>否则会出现403错误 chmod 755    </p><h3 id="方式二"><a href="#方式二" class="headerlink" title="方式二"></a>方式二</h3><p>在nginx.conf的location中配置静态资源所在目录实现</p><p>例如：当访问静态资源，则从linux服务器/opt/static目录下获取（举例）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">location ~ .*/(css|js|img|image) &#123;</span><br><span class="line">    root   /opt/static;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们将静态资源放入 /opt/static 目录下，然后用户访问时由nginx返回这些静态资源</p><h2 id="动静分离"><a href="#动静分离" class="headerlink" title="动静分离"></a>动静分离</h2><p>Nginx的负载均衡和静态代理结合在一起，我们可以实现动静分离，这是实际应用中常见的一种场景。<br>动态资源，如jsp由tomcat或其他web服务器完成<br>静态资源，如图片、css、js等由nginx服务器完成<br>它们各司其职，专注于做自己擅长的事情<br>动静分离充分利用了它们各自的优势，从而达到更高效合理的架构</p><h2 id="虚拟主机"><a href="#虚拟主机" class="headerlink" title="虚拟主机"></a>虚拟主机</h2><p>虚拟主机，就是把一台物理服务器划分成多个“虚拟”的服务器，这样我们的一台物理服务器就可以当做多个服务器来使用，从而可以配置多个网站。<br>Nginx提供虚拟主机的功能，就是为了让我们不需要安装多个Nginx，就可以运行多个域名不同的网站。<br>Nginx下，一个server标签就是一个虚拟主机。nginx的虚拟主机就是通过nginx.conf中server节点指定的，想要设置多个虚拟主机，配置多个server节点即可；<br>例如：<a href="http://www.meituan.com/">www.meituan.com</a> 切换城市，可以看到不同的城市地址不一样（二级域名）<br>比如一个公司有多个二级域名，没有必要为每个二级域名都提供一台Nginx服务器，就可以使用虚拟主机技术，在一台nginx服务器上，模拟多个虚拟服务器。</p><h3 id="基于端口的虚拟主机"><a href="#基于端口的虚拟主机" class="headerlink" title="基于端口的虚拟主机"></a>基于端口的虚拟主机</h3><p>基于端口的虚拟主机配置，使用端口来区分<br>浏览器使用 同一个域名+端口 或 同一个ip地址+端口访问；</p><h3 id="基于域名的虚拟主机"><a href="#基于域名的虚拟主机" class="headerlink" title="基于域名的虚拟主机"></a>基于域名的虚拟主机</h3><p>基于域名的虚拟主机是最常见的一种虚拟主机</p><p>域名解析也需要设置，这里不多赘述</p><p><strong>说明：</strong><br>9100、9200、9300端口是tomcat服务<br>nginx一直监听80端口<br>如果用户访问<code>http://beijing.pengyirui.spac</code>时，会转跳到以<code>beijing.myweb.com</code>为名的tomcat服务</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">upstream beijing.myweb.com &#123;</span><br><span class="line">    server  127.0.0.1:9100;</span><br><span class="line">&#125;</span><br><span class="line">upstream nanjing.myweb.com &#123;</span><br><span class="line">    server  127.0.0.1:9200;</span><br><span class="line">&#125;</span><br><span class="line">upstream tianjin.myweb.com &#123;</span><br><span class="line">    server  127.0.0.1:9300;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">server &#123;</span><br><span class="line">    listen       80;</span><br><span class="line">    server_name  beijing.pengyirui.space;</span><br><span class="line">    location / &#123;</span><br><span class="line">        proxy_pass http://beijing.myweb.com;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">server &#123;</span><br><span class="line">    listen       80;</span><br><span class="line">    server_name  nanjing.pengyirui.space;</span><br><span class="line">    location / &#123;</span><br><span class="line">        proxy_pass http://nanjing.myweb.com;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">server &#123;</span><br><span class="line">    listen       80;</span><br><span class="line">    server_name  tianjin.pengyirui.space;</span><br><span class="line">    location / &#123;</span><br><span class="line">        proxy_pass http://tianjin.myweb.com;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="nginx配置中文详解"><a href="#nginx配置中文详解" class="headerlink" title="nginx配置中文详解"></a>nginx配置中文详解</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br></pre></td><td class="code"><pre><span class="line">#配置worker进程运行用户 nobody也是一个linux用户，一般用于启动程序，没有密码</span><br><span class="line">user  nobody;  </span><br><span class="line">#配置工作进程数目，根据硬件调整，通常等于CPU数量或者2倍于CPU数量</span><br><span class="line">worker_processes  1;  </span><br><span class="line"></span><br><span class="line">#配置全局错误日志及类型，[debug | info | notice | warn | error | crit]，默认是error</span><br><span class="line">error_log  logs/error.log;  </span><br><span class="line">#error_log  logs/error.log  notice;</span><br><span class="line">#error_log  logs/error.log  info;</span><br><span class="line"></span><br><span class="line">pid        logs/nginx.pid;  #配置进程pid文件 </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">###====================================================</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#配置工作模式和连接数</span><br><span class="line">events &#123;</span><br><span class="line">    worker_connections  1024;  #配置每个worker进程连接数上限，nginx支持的总连接数就等于worker_processes * worker_connections</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">###===================================================</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#配置http服务器,利用它的反向代理功能提供负载均衡支持</span><br><span class="line">http &#123;</span><br><span class="line">    #配置nginx支持哪些多媒体类型，可以在conf/mime.types查看支持哪些多媒体类型</span><br><span class="line">    include       mime.types;  </span><br><span class="line">    #默认文件类型 流类型，可以理解为支持任意类型</span><br><span class="line">    default_type  application/octet-stream;  </span><br><span class="line">    #配置日志格式 </span><br><span class="line">    #log_format  main  &#x27;$remote_addr - $remote_user [$time_local] &quot;$request&quot; &#x27;</span><br><span class="line">    #                  &#x27;$status $body_bytes_sent &quot;$http_referer&quot; &#x27;</span><br><span class="line">    #                  &#x27;&quot;$http_user_agent&quot; &quot;$http_x_forwarded_for&quot;&#x27;;</span><br><span class="line"></span><br><span class="line">    #配置access.log日志及存放路径，并使用上面定义的main日志格式</span><br><span class="line">    #access_log  logs/access.log  main;</span><br><span class="line"></span><br><span class="line">    sendfile        on;  #开启高效文件传输模式</span><br><span class="line">    #tcp_nopush     on;  #防止网络阻塞</span><br><span class="line"></span><br><span class="line">    #keepalive_timeout  0;</span><br><span class="line">    keepalive_timeout  65;  #长连接超时时间，单位是秒</span><br><span class="line"></span><br><span class="line">    #gzip  on;  #开启gzip压缩输出</span><br><span class="line"></span><br><span class="line">###-----------------------------------------------</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    #配置虚拟主机</span><br><span class="line">    server &#123;</span><br><span class="line">        listen       80;  #配置监听端口</span><br><span class="line">        server_name  localhost;  #配置服务名</span><br><span class="line"></span><br><span class="line">        #charset koi8-r;  #配置字符集</span><br><span class="line"></span><br><span class="line">        #access_log  logs/host.access.log  main;  #配置本虚拟主机的访问日志</span><br><span class="line"></span><br><span class="line">#默认的匹配斜杠/的请求，当访问路径中有斜杠/，会被该location匹配到并进行处理</span><br><span class="line">        location / &#123;</span><br><span class="line">    #root是配置服务器的默认网站根目录位置，默认为nginx安装主目录下的html目录</span><br><span class="line">            root   html;  </span><br><span class="line">    #配置首页文件的名称</span><br><span class="line">            index  index.html index.htm;  </span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        #error_page  404              /404.html;  #配置404页面</span><br><span class="line">        # redirect server error pages to the static page /50x.html</span><br><span class="line">        #error_page   500 502 503 504  /50x.html;  #配置50x错误页面</span><br><span class="line">        </span><br><span class="line">#精确匹配</span><br><span class="line">location = /50x.html &#123;</span><br><span class="line">            root   html;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">#PHP 脚本请求全部转发到Apache处理</span><br><span class="line">        # proxy the PHP scripts to Apache listening on 127.0.0.1:80</span><br><span class="line">        #</span><br><span class="line">        #location ~ \.php$ &#123;</span><br><span class="line">        #    proxy_pass   http://127.0.0.1;</span><br><span class="line">        #&#125;</span><br><span class="line"></span><br><span class="line">#PHP 脚本请求全部转发到FastCGI处理</span><br><span class="line">        # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000</span><br><span class="line">        #</span><br><span class="line">        #location ~ \.php$ &#123;</span><br><span class="line">        #    root           html;</span><br><span class="line">        #    fastcgi_pass   127.0.0.1:9000;</span><br><span class="line">        #    fastcgi_index  index.php;</span><br><span class="line">        #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;</span><br><span class="line">        #    include        fastcgi_params;</span><br><span class="line">        #&#125;</span><br><span class="line"></span><br><span class="line">#禁止访问 .htaccess 文件</span><br><span class="line">        # deny access to .htaccess files, if Apache&#x27;s document root</span><br><span class="line">        # concurs with nginx&#x27;s one</span><br><span class="line">        #</span><br><span class="line">        #location ~ /\.ht &#123;</span><br><span class="line">        #    deny  all;</span><br><span class="line">        #&#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#配置另一个虚拟主机</span><br><span class="line">    # another virtual host using mix of IP-, name-, and port-based configuration</span><br><span class="line">    #</span><br><span class="line">    #server &#123;</span><br><span class="line">    #    listen       8000;</span><br><span class="line">    #    listen       somename:8080;</span><br><span class="line">    #    server_name  somename  alias  another.alias;</span><br><span class="line"></span><br><span class="line">    #    location / &#123;</span><br><span class="line">    #        root   html;</span><br><span class="line">    #        index  index.html index.htm;</span><br><span class="line">    #    &#125;</span><br><span class="line">    #&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#配置https服务，安全的网络传输协议，加密传输，端口443，运维来配置</span><br><span class="line">#</span><br><span class="line">    # HTTPS server</span><br><span class="line">    #</span><br><span class="line">    #server &#123;</span><br><span class="line">    #    listen       443 ssl;</span><br><span class="line">    #    server_name  localhost;</span><br><span class="line"></span><br><span class="line">    #    ssl_certificate      cert.pem;</span><br><span class="line">    #    ssl_certificate_key  cert.key;</span><br><span class="line"></span><br><span class="line">    #    ssl_session_cache    shared:SSL:1m;</span><br><span class="line">    #    ssl_session_timeout  5m;</span><br><span class="line"></span><br><span class="line">    #    ssl_ciphers  HIGH:!aNULL:!MD5;</span><br><span class="line">    #    ssl_prefer_server_ciphers  on;</span><br><span class="line"></span><br><span class="line">    #    location / &#123;</span><br><span class="line">    #        root   html;</span><br><span class="line">    #        index  index.html index.htm;</span><br><span class="line">    #    &#125;</span><br><span class="line">    #&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringBoot</title>
      <link href="/posts/2a19.html"/>
      <url>/posts/2a19.html</url>
      
        <content type="html"><![CDATA[<p>掘金手册：<a href="https://juejin.cn/book/6844733814560784397">https://juejin.cn/book/6844733814560784397</a></p><h2 id="工程热部署"><a href="#工程热部署" class="headerlink" title="工程热部署"></a>工程热部署</h2><p>我们在开发中反复修改类、页面等资源，每次修改后都是需要重新启动才生效，这样每次启动都很麻烦，浪费了大的时间，我们可以在修改代码后不重启就能生效，在 pom.xml 中添加如下配置就可以实现这样的功能，我们称之为热部署。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--热部署配置--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-devtools<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>IDEA设置自动热部署<br>seting —&gt; 搜索compiler —&gt; 勾选Build project automatically</p><p>然后 Shift+Ctrl+Alt+/，选择Registry回车</p><p>勾选compiler.automake.allow.when.app.running</p><h2 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h2><p>SpringBoot是基于约定的，所以很多配置都有默认值，但如果想使用自己的配置替换默认配置的话，就可以使用application.properties或者application.yml（application.yaml）进行配置。（YML文件的扩展名可以使用.yml或者.yaml。）</p><p>yml配置文件的语法</p><p>（1）配置普通数据</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">语法：</span> <span class="attr">key:</span> <span class="string">value</span></span><br><span class="line"><span class="string">示例代码：name:</span> <span class="string">haohao</span></span><br><span class="line"><span class="string">注意：value之前有一个空格</span></span><br></pre></td></tr></table></figure><p>(2) 配置对象数据</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">语法：</span></span><br><span class="line"><span class="attr">key:</span></span><br><span class="line"> <span class="attr">key1:</span> <span class="string">value1</span></span><br><span class="line"> <span class="attr">key2:</span> <span class="string">value2</span></span><br></pre></td></tr></table></figure><p> 示例代码：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">person:</span></span><br><span class="line"> <span class="attr">name:</span> <span class="string">haohao</span></span><br><span class="line"> <span class="attr">age:</span> <span class="number">31</span></span><br><span class="line"> <span class="attr">addr:</span> <span class="string">beijing</span></span><br><span class="line"> <span class="comment">#或者</span></span><br><span class="line"> <span class="attr">person:</span> &#123;<span class="attr">name:</span> <span class="string">haohao</span>,<span class="attr">age:</span> <span class="number">31</span>,<span class="attr">addr:</span> <span class="string">beijing</span>&#125;</span><br><span class="line"> <span class="string">注意：key1前面的空格个数不限定，在yml语法中，相同缩进代表同一个级别</span></span><br></pre></td></tr></table></figure><p>(3) 配置Map数据–同上面的对象写法</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">person:</span></span><br><span class="line"> <span class="attr">name:</span> <span class="string">haohao</span></span><br><span class="line"> <span class="attr">age:</span> <span class="number">31</span></span><br><span class="line"> <span class="attr">addr:</span> <span class="string">beijing</span></span><br><span class="line"> <span class="comment">#或者</span></span><br><span class="line"> <span class="attr">person:</span> &#123;<span class="attr">name:</span> <span class="string">haohao</span>,<span class="attr">age:</span> <span class="number">31</span>,<span class="attr">addr:</span> <span class="string">beijing</span>&#125;</span><br></pre></td></tr></table></figure><p>(4) 配置数组（List、Set）数据</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"> <span class="attr">key:</span></span><br><span class="line"> <span class="bullet">-</span> <span class="string">value1</span></span><br><span class="line"> <span class="bullet">-</span> <span class="string">value2</span></span><br><span class="line"> <span class="string">或者：key:</span> [<span class="string">value1</span>,<span class="string">value2</span>]</span><br><span class="line"><span class="comment">#示例代码：</span></span><br><span class="line"><span class="attr">city:</span></span><br><span class="line"> <span class="bullet">-</span> <span class="string">Beijing</span></span><br><span class="line"> <span class="bullet">-</span> <span class="string">Tianjin</span>  </span><br><span class="line"></span><br><span class="line"><span class="attr">city:</span> [<span class="string">Guangzhou</span>, <span class="string">Shenzhen</span>]</span><br><span class="line"><span class="comment">#数组对象</span></span><br><span class="line"><span class="attr">person:</span></span><br><span class="line"> <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">accp</span></span><br><span class="line">   <span class="attr">age:</span>  <span class="number">20</span></span><br><span class="line"> <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">zhangsan</span></span><br><span class="line">   <span class="attr">age:</span> <span class="number">21</span></span><br><span class="line"><span class="attr">person:</span> [&#123;<span class="string">name:accp</span>, <span class="string">age:20</span>&#125;, &#123;<span class="string">name:zhangsan</span>, <span class="string">age:21</span>&#125;]</span><br></pre></td></tr></table></figure><h3 id="多环境配置"><a href="#多环境配置" class="headerlink" title="多环境配置"></a>多环境配置</h3><p>为每个环境创建一个配置文件，命名必须以 application-环境 标识.properties|yml</p><p>SpringBoot 总配置文件： application.yml application.properties</p><p>开发环境配置文件： application-dev.yml application-dev.properties</p><p>测试环境配置文件： application-test.yml application-test.properties</p><p>生产环境配置文件： application-product.yml application-product.properties</p><p>在总配置文件 application.properties /application.ym中进行环境的激活</p><p>等号右边的值和配置文件的环境标识名一致， 可以更改总配置 文件的配置， 重新运行 Application，查看启动的端口及上下文根。</p><p>在总的配置文件application.properties中激活配置文件</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#SpringBoot 的总配置文件</span></span><br><span class="line"><span class="comment">#激活开发环境</span></span><br><span class="line"><span class="comment">#spring.profiles.active=dev</span></span><br><span class="line"><span class="comment">#激活测试环境</span></span><br><span class="line"><span class="comment">#spring.profiles.active=test</span></span><br><span class="line"><span class="comment">#激活生产环境</span></span><br><span class="line"><span class="attr">spring.profiles.active</span>=<span class="string">product</span></span><br></pre></td></tr></table></figure><h2 id="配置文件与配置类的属性映射方式"><a href="#配置文件与配置类的属性映射方式" class="headerlink" title="配置文件与配置类的属性映射方式"></a>配置文件与配置类的属性映射方式</h2><p>Spring Boot 自定义配置 在 SpringBoot 的核心配置文件中，除了使用内置的配置项之外， 我们还可以在自定义配置，然后采用如下注解去读取配置的属性值 </p><ol><li><strong>使用注解@Value映射</strong><br>我们可以通过@Value注解将配置文件中的值映射到一个Spring管理的Bean的字段上例如：<br>application.yml配置如下：</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">person:</span><br><span class="line"> name: zhangsan</span><br><span class="line"> age: 18</span><br></pre></td></tr></table></figure><p> 实体Bean代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">QuickStartController</span> &#123;</span><br><span class="line"><span class="meta">@Value(&quot;$&#123;person.name&#125;&quot;)</span></span><br><span class="line"><span class="keyword">private</span> String name;</span><br><span class="line"><span class="meta">@Value(&quot;$&#123;person.age&#125;&quot;)</span></span><br><span class="line"><span class="keyword">private</span> Integer age;</span><br><span class="line"><span class="meta">@RequestMapping(&quot;/quick&quot;)</span></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">quick</span><span class="params">()</span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">&quot;springboot 访问成功! name=&quot;</span>+name+<span class="string">&quot;,age=&quot;</span>+age; &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p> （2） @ConfigurationProperties  将整个文件映射成一个对象，用于自定义配置项比较多的情况 </p><p>通过注解@ConfigurationProperties(prefix=”配置文件中的key的前缀”)可以将配置文件中的配置自动与实体进行映射,需要定义get/set方法  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="meta">@ConfigurationProperties(prefix = &quot;person&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">QuickStartController</span> &#123;</span><br><span class="line"><span class="keyword">private</span> String name;</span><br><span class="line"><span class="keyword">private</span> Integer age;</span><br><span class="line"><span class="meta">@RequestMapping(&quot;/quick&quot;)</span></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">quick</span><span class="params">()</span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">&quot;springboot 访问成功! name=&quot;</span>+name+<span class="string">&quot;,age=&quot;</span>+age;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line"><span class="built_in">this</span>.name = name;</span><br><span class="line">&#125; </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setAge</span><span class="params">(Integer age)</span> &#123;</span><br><span class="line"><span class="built_in">this</span>.age = age;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> （3）解决警告问题</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--解决使用@ConfigurationProperties 注解出现警告问题--&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;spring-boot-configuration-processor&lt;/artifactId&gt;</span><br><span class="line">&lt;optional&gt;true&lt;/optional&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><h2 id="前端使用-JSP（不推荐）"><a href="#前端使用-JSP（不推荐）" class="headerlink" title="前端使用 JSP（不推荐）"></a>前端使用 JSP（不推荐）</h2><p>springboot官方推荐使用<code>Thymeleaf</code><br>笔记：<a href="https://pengyirui.gitee.io/posts/2d22.html">https://pengyirui.gitee.io/posts/2d22.html</a></p><h3 id="在pom-xml文件中配置以下依赖项"><a href="#在pom-xml文件中配置以下依赖项" class="headerlink" title="在pom.xml文件中配置以下依赖项"></a>在pom.xml文件中配置以下依赖项</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--引入 Spring Boot 内嵌的 Tomcat 对 JSP 的解析包，不加解析不了 jsp 页面--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--如果只是使用 JSP 页面，可以只添加该依赖--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.tomcat.embed<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>tomcat-embed-jasper<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--如果要使用 servlet 必须添加该以下两个依赖--&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- servlet 依赖的 jar 包--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>javax.servlet-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet.jsp<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>javax.servlet.jsp-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>2.3.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--如果使用 JSTL 必须添加该依赖--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--jstl 标签依赖的 jar 包 start--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jstl<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="在-pom-xml-的-build-标签中要配置编译信息。"><a href="#在-pom-xml-的-build-标签中要配置编译信息。" class="headerlink" title="在 pom.xml 的 build 标签中要配置编译信息。"></a>在 pom.xml 的 build 标签中要配置编译信息。</h3><p>SpringBoot 要求 jsp 文件必须编译到指定的 META-INF/resources 目 录下才能访问，否则访问不到。因为Spring Boot默认是使用“Thymeleaf”视图模板的，而非“JSP”视图模板，因此JSP的支持并不在刚才加入的starter组件中。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">SpringBoot 要求 jsp 文件必须编译到指定的 META-INF/resources 目录下才能访问，否则访问</span></span><br><span class="line"><span class="comment">不到。其它官方已经建议使用模版技术（后面会课程会单独讲解模版技术）</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">resources</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">resource</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--源文件位置--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">directory</span>&gt;</span>src/main/webapp<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--指定编译到 META-INF/resources，该目录不能随便写--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">targetPath</span>&gt;</span>META-INF/resources<span class="tag">&lt;/<span class="name">targetPath</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--指定要把哪些文件编译进去， **表示 webapp 目录及子目录， *.*表示所有文件--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">includes</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.*<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">includes</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resources</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="配置-Spring-MVC-的视图-展示为-jsp"><a href="#配置-Spring-MVC-的视图-展示为-jsp" class="headerlink" title="配置 Spring MVC 的视图 展示为 jsp"></a>配置 Spring MVC 的视图 展示为 jsp</h3><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#SpringBoot 核心配置文件</span></span><br><span class="line"><span class="comment">#指定内嵌 Tomcat 端口号</span></span><br><span class="line"><span class="attr">server.port</span>=<span class="string">8090</span></span><br><span class="line"><span class="comment">#配置 SpringMVC 视图解析器</span></span><br><span class="line"><span class="comment">#其中： / 表示目录为 src/main/webapp</span></span><br><span class="line"><span class="attr">spring.mvc.view.prefix</span>=<span class="string">/</span></span><br><span class="line"><span class="attr">spring.mvc.view.suffix</span>=<span class="string">.jsp</span></span><br></pre></td></tr></table></figure><p>application.yml 格式的配置文件    </p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">mvc:</span></span><br><span class="line">    <span class="attr">view:</span></span><br><span class="line">      <span class="attr">prefix:</span> <span class="string">/WEB-INF/jsp/</span></span><br><span class="line">      <span class="attr">suffix:</span> <span class="string">.jsp</span></span><br></pre></td></tr></table></figure><h3 id="5-4在-src-main-下创建一个-webapp-目录"><a href="#5-4在-src-main-下创建一个-webapp-目录" class="headerlink" title="5.4在 src/main 下创建一个 webapp 目录"></a>5.4在 src/main 下创建一个 webapp 目录</h3><p>然后在该目录 下新建 index.jsp 页面 如果在 webapp 目录下右键，如果没有创建 jsp 的选项，可以在 Project Structure 中指定 webapp 为 Web Resource Directory    </p><p><img src="%5CSpringBoot.assets%5C20210603155541.png"></p><h3 id="5-5添加静态资源"><a href="#5-5添加静态资源" class="headerlink" title="5.5添加静态资源"></a>5.5添加静态资源</h3><p>客户端资源的默认路径为resources-static,本项目中添加如下静态资源</p><p><img src="%5CSpringBoot.assets%5C20210603165430.png"></p><h2 id="集成mybatis"><a href="#集成mybatis" class="headerlink" title="集成mybatis"></a>集成mybatis</h2><h3 id="添加起步依赖和驱动包"><a href="#添加起步依赖和驱动包" class="headerlink" title="添加起步依赖和驱动包"></a>添加起步依赖和驱动包</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--MyBatis 整合 SpringBoot 的起步依赖--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis.spring.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>2.0.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--MySQL 的驱动依赖--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="添加数据源配置信息"><a href="#添加数据源配置信息" class="headerlink" title="添加数据源配置信息"></a>添加数据源配置信息</h3><p>在 Springboot 的核心配置文件 application.properties 中配 置数据源  </p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#数据库连接信息</span></span><br><span class="line"><span class="attr">spring.datasource.driverClassName</span>=<span class="string">com.mysql.jdbc.Driver</span></span><br><span class="line"><span class="attr">spring.datasource.url</span>=<span class="string">jdbc:mysql://127.0.0.1:3306/myCinema?useUnicode=true&amp;characterEncoding=utf8</span></span><br><span class="line"><span class="attr">spring.datasource.username</span>=<span class="string">root</span></span><br><span class="line"><span class="attr">spring.datasource.password</span>=<span class="string"></span></span><br><span class="line"><span class="comment">#spring集成Mybatis环境</span></span><br><span class="line"><span class="comment">#实体别名扫描包</span></span><br><span class="line"><span class="attr">mybatis.type-aliases-package</span>=<span class="string">io.peng.model</span></span><br><span class="line"><span class="comment">#加载Mybatis映射文件</span></span><br><span class="line"><span class="attr">mybatis.mapper-locations</span>=<span class="string">classpath:mapper/*Mapper.xml</span></span><br><span class="line"><span class="comment">#配置日志，打印sql</span></span><br><span class="line"><span class="attr">mybatis.configuration.log-impl</span>=<span class="string">org.apache.ibatis.logging.stdout.StdOutImpl</span></span><br></pre></td></tr></table></figure><p>在 Mybatis 反向工程生成的 StudentMapper 接口上加一个 Mapper 注解 @Mapper </p><p>作用： mybatis 自动扫描数据持久层的映射文件及 DAO 接口的关系    </p><p>在 Mybatis 反向工程生成的 StudentMapper 接口上加一个 Mapper 注解 @Mapper 作用： mybatis 自动扫描数据持久层的映射文件及 DAO 接口的关系 </p><p>在 运 行 的 主 类 上 添 加 注 解 包 扫 描 @MapperScan(“com.abc.springboot.mapper”) 注释掉 Mapper 接口上的@Mapper 注解   </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="comment">//Mybatis 提供的注解：扫描数据持久层的 mapper 映谢配置文件,DAO 接口上就不用加@Mapper</span></span><br><span class="line"><span class="comment">//basePackages 通常指定到数据持久层包即可</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@MapperScan(&quot;io.peng.mycinema.mapper&quot;)</span><span class="comment">//批量设置扫描包</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MycinemaApplication</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        SpringApplication.run(MycinemaApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在application.properties文件设置mapper文件的路径</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mybatis.mapper-locations=classpath:/mapper/*Mapper.xml</span><br></pre></td></tr></table></figure><h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// @SpringBootTest(classes = BookUserApplication.class)</span></span><br><span class="line"><span class="comment">// 旧版本需要指定启动类 springframework 2.25</span></span><br><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="comment">// @RunWith(SpringRunner.class)</span></span><br><span class="line"><span class="comment">// 旧版本需要指定启动方法 springframework 2.25</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BookUserApplicationTest</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span>  UsersMapper usersMapper;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span>  <span class="keyword">void</span> <span class="title function_">aaa</span><span class="params">()</span>&#123;</span><br><span class="line">        usersMapper.selectByCode(<span class="string">&quot;sam&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="事务支持"><a href="#事务支持" class="headerlink" title="事务支持"></a>事务支持</h2><p> Spring Boot 使用事务非常简单，底层依然采用的是 Spring 本身提 供的事务管理</p><p> ➢ 在入口类中使用注解 @EnableTransactionManagement 开启 事务支持</p><p> ➢ 在访问数据库的 Service 方法上添加注解 @Transactional 即可    </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//启动类开启事务支持</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@MapperScan(basePackages = &quot;com.powernode.mapper&quot;)</span></span><br><span class="line"><span class="meta">@EnableTransactionManagement</span> <span class="comment">//开启事务支持(可选项，但@Transactional 必须添加)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Application</span> &#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Spring-MVC-注解"><a href="#Spring-MVC-注解" class="headerlink" title="Spring MVC 注解"></a>Spring MVC 注解</h2><table><thead><tr><th>注解</th><th>作用</th></tr></thead><tbody><tr><td>@Controller</td><td>控制器</td></tr><tr><td>@RestController</td><td>@Controller 与@ResponseBody 的组合注解 如果一个 Controller 类添加了@RestController，那么该 Controller 类下的所有方法都相当于添加了@ResponseBody 注解 用于返回字符串或 json 数据</td></tr><tr><td>@RequestMapping</td><td>支持Get请求和Post请求</td></tr><tr><td>@GetMapping</td><td>支持Get请求，用于查询数据</td></tr><tr><td>@PostMapping</td><td>只支持Post请求，用于增加数据</td></tr><tr><td>@PutMapping</td><td>只支持Put请求，用于修改数据</td></tr><tr><td>@DeleteMapping</td><td>只支持Delete请求，删除数据</td></tr></tbody></table><h2 id="RESTful"><a href="#RESTful" class="headerlink" title="RESTful"></a>RESTful</h2><p>REST（英文： Representational 表述性State Transfer，简称 REST）一种互联网软件架构设计的风格，但它并不是标准，它只是提出了一组客户端和服务器交互时的架构理念和设计原则，基于这种理念和原则设计的接口可以更简洁，更有层次， REST这个词，是Roy ThomasFielding 在他 2000 年的博士论文中提出的。任何的技术都可以实现这种理念，如果一个架构符合 REST 原则，</p><h3 id="Spring-Boot-开发-RESTFul-Spring-boot"><a href="#Spring-Boot-开发-RESTFul-Spring-boot" class="headerlink" title="Spring Boot 开发 RESTFul Spring boot"></a>Spring Boot 开发 RESTFul Spring boot</h3><p>开发 RESTFul 主要是几个注解实现 </p><ul><li><p>@PathVariable 获取 url 中的数据 该注解是实现 RESTFul 最主要的一个注解    </p></li><li><p> @PostMapping 接收和处理 Post 方式的请求 </p></li><li><p> @DeleteMapping 接收 delete 方式的请求，可以使用 GetMapping 代替 </p></li><li><p> @PutMapping 接收 put 方式的请求，可以用 PostMapping 代替 </p></li><li><p> @GetMapping 接收 get 方式的请求</p></li></ul><h3 id="RESTful-的优点"><a href="#RESTful-的优点" class="headerlink" title="RESTful 的优点"></a>RESTful 的优点</h3><p>➢ 轻量，直接基于 http，不再需要任何别的诸如消息协议 get/post/put/delete 为 CRUD 操作 </p><p>➢ 面向资源，一目了然，具有自解释性。 </p><p>➢ 数据描述简单，一般以 xml， json 做数据交换。</p><p> ➢ 无状态，在调用一个接口（访问、操作资源）的时候，可以不 用考虑上下文，不用考虑当前状态，极大的降低了复杂度。</p><p> ➢ 简单、低耦合    </p><h3 id="RESTful-原则"><a href="#RESTful-原则" class="headerlink" title="RESTful 原则"></a>RESTful 原则</h3><p>➢ 增 post 请求、删 delete 请求、改 put 请求、查 get 请求</p><p> ➢ 请求路径不要出现动词 </p><p>​     例如：查询订单接口 /boot/order/1021/1（推荐）  /boot/queryOrder/1021/1（不推荐）</p><p> ➢ 分页、排序等操作，不需要使用斜杠传参数 </p><p>​      例如：订单列表接口 /boot/orders?page=1&amp;sort=desc 一般传的参数不是数据库表的字段，可以不采用斜杠  </p><h2 id="拦截器"><a href="#拦截器" class="headerlink" title="拦截器"></a>拦截器</h2><p>直接上例子：地址拦截</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Login.java</span></span><br><span class="line"><span class="comment">// 功能类</span></span><br><span class="line"><span class="comment">// 实现HandlerInterceptor接口</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Login</span> <span class="keyword">implements</span> <span class="title class_">HandlerInterceptor</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">preHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler)</span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 如果user不等于空，就不拦截，否则就跳去XXX地址</span></span><br><span class="line">        <span class="keyword">if</span> (user != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            response.sendRedirect(<span class="string">&quot;XXX&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 实现方法类</span></span><br><span class="line"><span class="comment">// 实现WebMvcConfigurer接口</span></span><br><span class="line"><span class="comment">// Login功能类交给spring创建</span></span><br><span class="line"><span class="comment">// 重写addInterceptors方法</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 应用功能类XXX</span></span><br><span class="line"><span class="comment">// registry.addInterceptor(XXX)</span></span><br><span class="line"><span class="comment">// 需要拦截的地址</span></span><br><span class="line"><span class="comment">// .addPathPatterns(&quot;/loan/loanInfo/**&quot;);</span></span><br><span class="line"><span class="comment">// 需要放开的地址</span></span><br><span class="line"><span class="comment">// .excludePathPatterns(&quot;/money/loan/page/login&quot;);</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">WebConfig</span> <span class="keyword">implements</span> <span class="title class_">WebMvcConfigurer</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> Login login;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addInterceptors</span><span class="params">(InterceptorRegistry registry)</span> &#123;</span><br><span class="line">        registry.addInterceptor(login)</span><br><span class="line">                .addPathPatterns(<span class="string">&quot;/&quot;</span>);</span><br><span class="line">                .excludePathPatterns(<span class="string">&quot;/money/&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="定时任务"><a href="#定时任务" class="headerlink" title="定时任务"></a>定时任务</h2><p>在日常的项目开发中，往往会涉及到一些需要做到定时执行的代码，例如自动将超过24小时的未付款的单改为取消状态，自动将超过14天客户未签收的订单改为已签收状态等等， Java项目中常使用的定时器有<code>JDK Timer、Quartz、Spring Task</code>等三种。Quartz的功能强大，配置也比较复杂，适合大型、多定时任务的项目使用。Spring Task配置较为简单轻量，需要Spring框架支持。JDK自带的定时器Timer使用灵活，配置简单，适合中小型项目。</p><h3 id="Timer"><a href="#Timer" class="headerlink" title="Timer"></a>Timer</h3><p>这是java自带的java.util.Timer类，这个类允许你调度一个java.util.TimerTask任务。使用这种方式可以让你的程序按照某一个频度执行，但不能在指定时间运行。一般用的较少。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">TimerTask task=<span class="keyword">new</span> <span class="title class_">TimerTask</span>() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;hello,world....&quot;</span>+<span class="keyword">new</span> <span class="title class_">Date</span>());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line">Timer timer=<span class="keyword">new</span> <span class="title class_">Timer</span>();</span><br><span class="line">timer.schedule(task,<span class="number">1000</span>,<span class="number">3000</span>);</span><br></pre></td></tr></table></figure><h3 id="ScheduledExecutorService"><a href="#ScheduledExecutorService" class="headerlink" title="ScheduledExecutorService"></a>ScheduledExecutorService</h3><p>jdk自带的一个类；是基于线程池设计的定时任务类,每个调度任务都会分配到线程池中的一个线程去执行,也就是说,任务是并发执行,互不影响 。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">ScheduledExecutorService</span> <span class="variable">service</span> <span class="operator">=</span> Executors.newSingleThreadScheduledExecutor();</span><br><span class="line">       <span class="comment">// 参数：1、任务体 2、首次执行的延时时间</span></span><br><span class="line">       <span class="comment">//  3、任务执行间隔 4、间隔时间单位</span></span><br><span class="line">     service.scheduleAtFixedRate(</span><br><span class="line">   ()-&gt;System.out.println(<span class="string">&quot;ScheduledExecutorService定时任务 &quot;</span>+<span class="keyword">new</span> <span class="title class_">Date</span>()), <span class="number">0</span>, <span class="number">3</span>,                       TimeUnit.SECONDS);</span><br></pre></td></tr></table></figure><h3 id="Spring-Task"><a href="#Spring-Task" class="headerlink" title="Spring Task"></a>Spring Task</h3><p>Spring3.0以后自带的task，可以将它看成一个轻量级的Quartz，而且使用起来比Quartz简单许多 .在SpringBoot中已经内置集成了SpringTask，使用非常的方便快捷。</p><p>在类上<code>@EnableScheduling</code>,在方法<code>@Scheduled</code></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 导包 --&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>代码 </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@EnableScheduling</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpringTaskDemo</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Scheduled(cron = &quot;3/15 * * * * *&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">start</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;----间隔计划任务----&quot;</span>+<span class="keyword">new</span> <span class="title class_">Date</span>());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Scheduled(initialDelay = 2000,fixedDelay = 10000)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">stop</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;----延迟计划任务----&quot;</span>+<span class="keyword">new</span> <span class="title class_">Date</span>());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Scheduled(fixedRate = 10000)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">delay</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;----固定计划任务----&quot;</span>+<span class="keyword">new</span> <span class="title class_">Date</span>());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>@Scheduled有三种定时任务的执行方式，包括fixedDelay、fixedRate、corn表达式，下面就分别讲讲这三种执行方式的不同。 </p><p>fixedDelay：指定两次任务执行的时间间隔(毫秒)，此时间间隔指的是，前一次任务结束与下一个任务开始的间隔。如：@Scheduled(fixedDelay = 5*1000 )，表示第一个任务结束后，过5秒后，开始第二个任务。 </p><p>fixedRate：指定两次任务执行的时间间隔(毫秒)，此时间间隔指的是，前一个任务开始与下一个任务开始的间隔。如：@Scheduled(fixedRate= 5*1000 )，表示第一个任务开始后(第一个任务执行时间小于5秒)，第一个任务开始后的第6秒，开始第二个任务。如果第一个任务执行时间大于5秒，第一个任务结束后，直接开始第二个任务。</p><h3 id="cron表达式（常用）"><a href="#cron表达式（常用）" class="headerlink" title="cron表达式（常用）"></a>cron表达式（常用）</h3><p>使用cron表达式进行任务的执行<br>cron一般是六个或七个字段，分别是： </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line">1. Seconds （秒） </span><br><span class="line">2. Minutes （分） </span><br><span class="line">3. Hours （时） </span><br><span class="line">4. Day (每月的第几天,day-of-month) </span><br><span class="line">5. Month （月） </span><br><span class="line">6. Day （每周的第几天,day-of-week） </span><br><span class="line">7. Year (年 可选字段)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">说明</span><br><span class="line">秒 ：范围:0－59 </span><br><span class="line">分 ：范围:0－59</span><br><span class="line">时 ：范围:0-23</span><br><span class="line">天（月） ：范围:1-31,但要注意一些特别的月份2月份没有只能1-28，有些月份没有31</span><br><span class="line">月 ：用0-11 或用字符串 “JAN, FEB, MAR, APR, MAY, JUN, JUL, AUG, SEP, OCT, NOV and DEC” 表示</span><br><span class="line">天（周）：用1-7表示（1 ＝ 星期日）或用字符口串“SUN, MON, TUE, WED, THU, FRI and SAT”表示</span><br><span class="line">年：范围:1970－2099</span><br><span class="line"> </span><br><span class="line">“/”：表示为“每”，如“0/10”表示每隔10分钟执行一次,“0”表示为从“0”分开始, “3/20”表示表示每隔20分钟执行一次</span><br><span class="line">“?”：只用于月与周，表示不指定值</span><br><span class="line">“L”：只用于月与周，5L用在月表示为每月的最后第五天；1L用在周表示每周的最后一天；</span><br><span class="line">“W”：:表示有效工作日(周一到周五),只能出现在day-of-month，系统将在离指定日期的最近的有效工作日触发事件。例如：在 DayofMonth使用5W，如果5日是星期六，则将在最近的工作日：星期五，即4日触发。如果5日是星期天，则在6日(周一)触发；如果5日在星期一到星期五中的一天，则就在5日触发。另外一点，W的最近寻找不会跨过月份 </span><br><span class="line">“#”：用于确定每个月第几个星期几，只能出现在DayofMonth域。例如在4#2，表示某月的第二个星期三。</span><br><span class="line">“*” 代表整个时间段。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">例子</span><br><span class="line">0 0 10,14,16 * * ? 每天上午10点，下午2点，4点</span><br><span class="line">0 0/30 9-17 * * ?   朝九晚五工作时间内每半小时</span><br><span class="line">0 0 12 ? * WED  表示每个星期三中午12点 </span><br><span class="line">0 0 12 * * ?  每天中午12点 </span><br><span class="line">0 15 10 ? * * ? 每天上午10:15 </span><br><span class="line">0 15 10 * * ?  每天上午10:15 </span><br><span class="line">0 15 10 * * ? * 每天上午10:15 </span><br><span class="line">0 15 10 * * ? 2005  2005年的每天上午10:15 </span><br><span class="line">0 * 14 * * ? 在每天下午2点到下午2:59期间的每1分钟 </span><br><span class="line">0 0/5 14 * * ? 在每天下午2点到下午2:55期间的每5分钟 </span><br><span class="line">0 0/5 14,18 * * ? 在每天下午2点到2:55期间和下午6点到6:55期间的每5分钟 </span><br><span class="line">0 0-5 14 * * ? 在每天下午2点到下午2:05期间的每1分钟 </span><br><span class="line">0 10,44 14 ? 3 WED 每年三月的星期三的下午2:10和2:44 </span><br><span class="line">0 15 10 ? * MON-FRI 周一至周五的上午10:15 </span><br><span class="line">0 15 10 15 * ? 每月15日上午10:15 </span><br><span class="line">0 15 10 L * ? 每月最后一日的上午10:15 </span><br><span class="line">0 15 10 ? * 6L 每月的最后一个星期五上午10:15 </span><br><span class="line">0 15 10 ? * 6L 2002-2005&quot; 2002年至2005年的每月的最后一个星期五上午10:15 </span><br><span class="line">0 15 10 ? * 6#3&quot; 每月的第三个星期五上午10:15</span><br></pre></td></tr></table></figure><h2 id="ConfigurationProperties"><a href="#ConfigurationProperties" class="headerlink" title="@ConfigurationProperties"></a>@ConfigurationProperties</h2><p>根据配置文件自动配置属性</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ConfigurationProperties(prefix = &quot;jwt.config&quot;)</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JwtUtil</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String signKey;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> expireMinutes;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">jwt.config.signKey</span>=<span class="string">peng</span></span><br><span class="line"><span class="attr">jwt.config.expireMinutes</span>=<span class="string">0</span></span><br></pre></td></tr></table></figure><h2 id="配置类"><a href="#配置类" class="headerlink" title="配置类"></a>配置类</h2><p>一般<code>@Configuration</code>注释放在类上，与<code>@Ben</code>搭配使用</p><p>表示启动spring立即加载</p><h2 id="web注释"><a href="#web注释" class="headerlink" title="web注释"></a>web注释</h2><h3 id="路径变量"><a href="#路径变量" class="headerlink" title="路径变量"></a>路径变量</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@DeleteMapping(&quot;/&#123;id&#125;&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">delete</span><span class="params">(<span class="meta">@PathVariable</span> (<span class="string">&quot;id&quot;</span>)</span> Integer id)&#123;</span><br><span class="line">  xxxxx</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="入参是json"><a href="#入参是json" class="headerlink" title="入参是json"></a>入参是json</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@PostMapping(&quot;/login&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">login</span><span class="params">(<span class="meta">@RequestBody</span> User user)</span>&#123;</span><br><span class="line">  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="请求参数"><a href="#请求参数" class="headerlink" title="请求参数"></a>请求参数</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@PostMapping</span></span><br><span class="line">String <span class="title function_">check</span><span class="params">(<span class="meta">@RequestParam(&quot;userCoed&quot;)</span> String userCoed)</span>;</span><br></pre></td></tr></table></figure><h3 id="返回的是json"><a href="#返回的是json" class="headerlink" title="返回的是json"></a>返回的是json</h3><p>ResponseResult<br>自定义ResponseResult在controller响应信息主体和自定义全局及局部异常中的实现</p>]]></content>
      
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Redis</title>
      <link href="/posts/6eb9.html"/>
      <url>/posts/6eb9.html</url>
      
        <content type="html"><![CDATA[<h2 id="NoSQL简介"><a href="#NoSQL简介" class="headerlink" title="NoSQL简介"></a>NoSQL简介</h2><h3 id="数据库应用的演变历程"><a href="#数据库应用的演变历程" class="headerlink" title="数据库应用的演变历程"></a>数据库应用的演变历程</h3><p>单机数据库时代、Memcached时代、读写分离时代、分表分库时代(集群)、nosql时代。</p><h3 id="NoSQL数据库"><a href="#NoSQL数据库" class="headerlink" title="NoSQL数据库"></a>NoSQL数据库</h3><p>NoSQL = Not Only SQL(不仅仅是SQL) ，泛指non-relational(非关系型数据库)。今天随着互联网web2.0网站的兴起，比如谷歌或Facebook每天为他们的用户收集万亿比特的数据，这些类型的数据存储不需要固定的模式，无需多余操作就可以横向扩展，就是一个数据量超大。传统的SQL语句库不再适应这些应用了。NoSQL数据库是为了解决大规模数据集合多重数据种类带来的挑战，特别是超大规模数据的存储。</p><p>NoSQL数据库的一个显著特点就是去掉了关系数据库的关系型特性，数据之间一旦没有关系，使得扩展性、读写性能都大大提高。</p><h3 id="当前NoSQL的使用"><a href="#当前NoSQL的使用" class="headerlink" title="当前NoSQL的使用"></a>当前NoSQL的使用</h3><p>NoSQL和传统的关系型数据库不是排斥和取代的关系，在一个分布式应用中往往是结合使用的。复杂的互联网应用通常都是多数据源、多数据类型，应该根据数据的使用情况和特点，存放在合适的数据库中。</p><h3 id="NoSQL数据模型"><a href="#NoSQL数据模型" class="headerlink" title="NoSQL数据模型"></a>NoSQL数据模型</h3><ul><li><p>传统关系型数据库：表。<br> 学生课程管理系统：Student 表， Classes表，Course表，Score表，关系，约束    </p></li><li><p>NoSQL：聚合结构</p> <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Student</span>:&#123;</span><br><span class="line">   <span class="string">&quot;no&quot;</span>:<span class="string">&quot;001&quot;</span>, <span class="string">&quot;name&quot;</span>:<span class="string">&quot;张三&quot;</span>, <span class="string">&quot;age&quot;</span>:<span class="string">&quot;20&quot;</span>,</span><br><span class="line">   <span class="attr">classes</span>:&#123;</span><br><span class="line">      <span class="string">&quot;id&quot;</span>:<span class="string">&quot;A001&quot;</span>,</span><br><span class="line">      <span class="string">&quot;name&quot;</span>:<span class="string">&quot;java就业班&quot;</span></span><br><span class="line">   &#125;,</span><br><span class="line">   <span class="attr">course</span>:[&#123;</span><br><span class="line">      <span class="string">&quot;id&quot;</span>:<span class="string">&quot;1001&quot;</span>,</span><br><span class="line">      <span class="string">&quot;name&quot;</span>:<span class="string">&quot;java基础&quot;</span>,</span><br><span class="line">      <span class="string">&quot;hour&quot;</span>:<span class="string">&quot;40&quot;</span>,</span><br><span class="line">      <span class="string">&quot;score&quot;</span>:&#123;</span><br><span class="line">         <span class="string">&quot;id&quot;</span>:<span class="string">&quot;1&quot;</span>,</span><br><span class="line">         <span class="string">&quot;grade&quot;</span>:<span class="string">&quot;A&quot;</span>,</span><br><span class="line">         <span class="string">&quot;examDate&quot;</span>:<span class="string">&quot;2020-5-3&quot;</span></span><br><span class="line">         &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">      <span class="string">&quot;id&quot;</span>:<span class="string">&quot;1002&quot;</span>,</span><br><span class="line">      <span class="string">&quot;name&quot;</span>:<span class="string">&quot;HTML网页设计&quot;</span>,</span><br><span class="line">      <span class="string">&quot;hour&quot;</span>:<span class="string">&quot;28&quot;</span>,</span><br><span class="line">      <span class="string">&quot;score&quot;</span>:&#123;</span><br><span class="line">         <span class="string">&quot;id&quot;</span>:<span class="string">&quot;2&quot;</span>,</span><br><span class="line">         <span class="string">&quot;grade&quot;</span>:<span class="string">&quot;B&quot;</span>,</span><br><span class="line">         <span class="string">&quot;examDate&quot;</span>:<span class="string">&quot;2020-7-16&quot;</span></span><br><span class="line">         &#125;</span><br><span class="line">      &#125;</span><br><span class="line">   ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="Redis"><a href="#Redis" class="headerlink" title="Redis"></a>Redis</h2><h3 id="Redis简介"><a href="#Redis简介" class="headerlink" title="Redis简介"></a>Redis简介</h3><p>Remote Dictionary Server(远程字典服务器),是一个用C语言编写的、开源的、基于内存运行并支持持久化的、高性能的NoSQL<a href="https://baike.baidu.com/item/%E6%95%B0%E6%8D%AE%E5%BA%93">数据库</a>.也是当前热门的NoSQL数据库之一。</p><h3 id="Redis的特点"><a href="#Redis的特点" class="headerlink" title="Redis的特点"></a>Redis的特点</h3><ol><li>支持数据持久化<br>​  Redis支持数据的持久化，可以将内存中的数据保持在磁盘中，重启的时候可以再次加载进行使用。</li><li>支持多种数据结构<br>Redis不仅仅支持简单的key-value类型的数据，同时还提供list，set，zset，hash等数据结构的存储。</li><li>支持数据备份<br>​  Redis支持数据的备份，即master-slave模式的数据备份。</li><li>性能极高<br>Redis能读的速度是110000次/s,写的速度是81000次/s 。</li></ol><h3 id="Redis的安装"><a href="#Redis的安装" class="headerlink" title="Redis的安装"></a>Redis的安装</h3><p>Redis即支持windows又支持linux下的安装，本文以windows为例，进行安装。<br>Redis支持windows服务安装版和解压版，本文以解压版为例，解压后即可使用。 </p><h3 id="启动Redis"><a href="#启动Redis" class="headerlink" title="启动Redis"></a>启动Redis</h3><p><strong>启动方式：</strong></p><ol><li><p>前台启动 redis-server </p></li><li><p>后台启动 –将redis安装为windows服务</p></li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">1. 从 Redis 的安装目录进入 cmd</span><br><span class="line">2. 在 cmd 中输入, 将Redis绑定为 Windows 服务, 并设置为后台启动：</span><br><span class="line">redis-server --service-install redis.windows.conf --loglevel verbose    // 安装redis服务</span><br><span class="line">3.启动服务</span><br><span class="line">redis-server --service-start    // 启动服务</span><br><span class="line">4.停止服务</span><br><span class="line">redis-server --service-stop    // 停止服务</span><br></pre></td></tr></table></figure><ol start="3"><li>根据配置文件启动 启动命令 配置文件  </li></ol><p><strong>注意：如果修改了redis的配置文件redis.conf，必须在启动时指定配置文件，否则修改无效！</strong></p><h3 id="关闭Redis服务"><a href="#关闭Redis服务" class="headerlink" title="关闭Redis服务"></a>关闭Redis服务</h3><p>关闭方式：</p><ol><li>使用redis客户端关闭，向服务器发出关闭命令</li></ol><p>任意目录下执行 指令<code>redis-cli shutdown</code></p><p>推荐使用这种方式，redis先完成数据操作，然后再关闭。</p><h3 id="Redis客户端"><a href="#Redis客户端" class="headerlink" title="Redis客户端"></a>Redis客户端</h3><p>Redis客户端是一个程序，通过网络连接到Redis服务器，从而实现跟 Redis服务器的交互。</p><p>Redis客户端发送命令，同时显示Redis服务器的处理结果。</p><p><code>redis-cli</code>（Redis Command Line Interface）是Redis自带的基于命令行的Redis客户端，用于与服务端交互，我们可以使用该客户端来执行redis的各种命令。</p><h3 id="启动Redis客户端"><a href="#启动Redis客户端" class="headerlink" title="启动Redis客户端"></a>启动Redis客户端</h3><ol><li><p>直接连接redis (默认ip127.0.0.1，端口6379)：<code>redis-cli</code><br>在安装目录执行 redis-cli —-此命令是连接本机127.0.0.1，端口6379的redis</p></li><li><p>指定IP和端口连接redis：<code>redis-cli –h 127.0.0.1 -p 6379</code><br>​     <code>-h</code> redis主机IP（可以指定任意的redis服务器）<br>​     <code>-p</code> 端口号（不同的端口表示不同的redis应用）<br>​     在安装目录下执行 <code>redis-cli -h 127.0.0.1 -p 6379</code></p></li><li><p>退出Redis客户端：exit或者quit指令。</p></li></ol><h2 id="Redis基本知识"><a href="#Redis基本知识" class="headerlink" title="Redis基本知识"></a>Redis基本知识</h2><blockquote><p>命令手册:<br>redis英文版命令大全：<a href="https://redis.io/commands">https://redis.io/commands</a><br>redis中文版命令大全：<a href="http://redisdoc.com/">http://redisdoc.com/</a></p></blockquote><ol><li><p>测试Redis性能<br><code>redis-benchmark</code><br>这个命令是不是redis-cli shell的命令。需要再常规的命令下运行。即退出shell执行该命令。</p></li><li><p>Redis沟通命令，查看状态<br><code>ping</code><br>解释：输入ping，redis给我们返回PONG，表示redis服务运行正常 </p></li><li><p>查看redis服务器的统计信息：info<br>语法：<code>info [section]</code><br>作用：以一种易于解释且易于阅读的格式，返回关于 Redis 服务器的各种信息和统计数值。section 用来返回指定部分的统计信息。 section的值：server , clients ，memory等等。不加section 返回全部统计信息<br>返回值：指定section的统计信息或全部信息</p></li><li><p>redis默认使用16个库<br>Redis默认使用16个库，从0到15。 对数据库个数的修改，在redis.conf文件中databases 16，理论上可以配置无限多个。<br>Redis的库和关系型数据库中的数据库实例类似，但又有一些不同，比如redis中各个库不能自定义命名，只能用序号表示，redis中各个库不是完全独立的，使用时最好一个应用使用一个redis实例，不建议一个redis实例中保存多个应用的数据。Redis实例本身所占存储空间其实是非常小的，因此不会造成存储空间的浪费。</p></li><li><p>切换库命令：<code>select db</code><br>例如：切换第三个数据库<code>select 3</code><br>默认使用第0个，如果要使用其他数据库，命令是 <code>select index</code></p></li></ol><ol start="6"><li><p>查看当前数据库中key的数目：dbsize<br>语法：dbsize<br>作用：返回当前数据库的 key 的数量。 返回值：数字，key的数量 </p></li><li><p>查看当前数据库中有哪些key：<code>keys *</code></p></li><li><p>清空当前库：<code>flushdb</code></p></li><li><p>清空所有数据库：<code>flushall</code><br>这也体现出redis中的库并不是完全无关的。</p></li><li><p>获得redis的所有配置值<br><code>config get * </code><br>作用：获取运行中Redis服务器的配置参数， 获取全部配置可以使用*<br>参数信息来自redis.conf 文件的内容。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">例1：获取数据库个数 config get databases</span><br><span class="line"></span><br><span class="line">例2：获取端口号config get port</span><br></pre></td></tr></table></figure></li></ol><h2 id="Redis的5种数据结构"><a href="#Redis的5种数据结构" class="headerlink" title="Redis的5种数据结构"></a>Redis的5种数据结构</h2><h3 id="字符串类型-string"><a href="#字符串类型-string" class="headerlink" title="字符串类型 string"></a>字符串类型 string</h3><p>字符串类型是Redis中最基本的数据结构，它能存储任何类型的数据，包括二进制数</p><p>据，序列化后的数据，JSON化的对象甚至是一张图片。最大512M。 </p><h3 id="列表类型-list"><a href="#列表类型-list" class="headerlink" title="列表类型 list"></a>列表类型 list</h3><p>Redis列表是简单的字符串列表，按照插入顺序排序，元素可以重复。你可以添加一个元素到列表的头部（左边）或者尾部（右边）,底层是个链表结构。</p><h3 id="集合类型-set"><a href="#集合类型-set" class="headerlink" title="集合类型 set"></a>集合类型 set</h3><p>Redis的Set是string类型的无序无重复集合。 </p><h3 id="哈希类型-hash"><a href="#哈希类型-hash" class="headerlink" title="哈希类型 hash"></a>哈希类型 hash</h3><p> Redis hash 是一个string类型的field和value的映射表，hash特别适合用于存储对象。</p><h3 id="有序集合类型-zset-（sorted-set）"><a href="#有序集合类型-zset-（sorted-set）" class="headerlink" title="有序集合类型 zset （sorted set）"></a>有序集合类型 zset （sorted set）</h3><p>Redis 有序集合zset和集合set一样也是string类型元素的集合，且不允许重复的成员。</p><p>不同的是zset的每个元素都会关联一个分数（分数可以重复），redis通过分数来为集合中的成员进行从小到大的排序。 </p><h2 id="Redis的常用操作命令"><a href="#Redis的常用操作命令" class="headerlink" title="Redis的常用操作命令"></a>Redis的常用操作命令</h2><h3 id="Redis的Key的操作命令"><a href="#Redis的Key的操作命令" class="headerlink" title="Redis的Key的操作命令"></a>Redis的Key的操作命令</h3><h4 id="keys"><a href="#keys" class="headerlink" title="keys"></a>keys</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">语法：keys pattern</span><br></pre></td></tr></table></figure><p>作用：查找所有符合模式pattern的key. pattern可以使用通配符。</p><p>通配符：</p><p><code>*</code>：表示0或多个字符，例如：keys * 查询所有的key。</p><p><code>？</code>：表示单个字符，例如：wo?d , 匹配 word , wood</p><p><code>[]</code>：表示选择<code>[]</code>内的一个字符，例如<code>wo[or]d</code>, 匹配word, wood, 不匹配wold、woord </p><h4 id="exists"><a href="#exists" class="headerlink" title="exists"></a>exists</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">语法：exists key [key…]</span><br></pre></td></tr></table></figure><p>作用：判断key是否存在</p><p>返回值：整数，存在key返回1，其他返回0。使用多个key，返回存在的key的数量。</p><h4 id="move"><a href="#move" class="headerlink" title="move"></a>move</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">语法：move key db</span><br></pre></td></tr></table></figure><p>作用：移动key到指定的数据库，移动的key在原库被删除。</p><p>返回值：移动成功返回1，失败返回0. </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">例子：</span><br><span class="line">127.0.0.1:6379&gt; set a accp</span><br><span class="line">127.0.0.1:6379&gt; move a 1</span><br><span class="line">127.0.0.1:6379&gt; select 1</span><br><span class="line">127.0.0.1:6379[1]&gt; get a</span><br></pre></td></tr></table></figure><h4 id="ttl"><a href="#ttl" class="headerlink" title="ttl"></a>ttl</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">语法：ttl key</span><br></pre></td></tr></table></figure><p>作用：查看key的剩余生存时间（ttl: time to live），以秒为单位。</p><p>返回值：</p><p>-1 ：没有设置key的生存时间， key永不过期。</p><p>-2：key不存在 </p><h4 id="expire"><a href="#expire" class="headerlink" title="expire"></a>expire</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">语法：expire key seconds</span><br></pre></td></tr></table></figure><p>作用：设置key的生存时间，超过时间，key自动删除。单位是秒。</p><p>返回值：设置成功返回数字 1，其他情况是 0 。</p><h4 id="type"><a href="#type" class="headerlink" title="type"></a>type</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">语法：type key</span><br></pre></td></tr></table></figure><p>作用：查看key所存储值的数据类型</p><p>返回值：字符串表示的数据类型</p><p>none (key不存在)</p><p>string (字符串)</p><p>list (列表)</p><p>set (集合)</p><p>zset (有序集)</p><p>hash (哈希表) </p><h4 id="rename"><a href="#rename" class="headerlink" title="rename"></a>rename</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">语法：rename key newkey</span><br></pre></td></tr></table></figure><p>作用：将key改为名newkey。当 key 和 newkey 相同，或者 key 不存在时，返回一个错误。</p><p>当 newkey 已经存在时， RENAME 命令将覆盖旧值。 </p><h4 id="del"><a href="#del" class="headerlink" title="del"></a>del</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">语法：del key [key…]</span><br></pre></td></tr></table></figure><p>作用：删除存在的key，不存在的key忽略。</p><p>返回值：数字，删除的key的数量。 </p><h3 id="字符串类型（string）"><a href="#字符串类型（string）" class="headerlink" title="字符串类型（string）"></a>字符串类型（string）</h3><p>字符串类型是Redis中最基本的数据类型，它能存储任何形式的字符串，包括二进制数</p><p>据，序列化后的数据，JSON化的对象甚至是一张图片。</p><p>字符串类型的数据操作总的思想是通过key操作value，key是数据标识，value是我们感</p><p>兴趣的业务数据。</p><h4 id="set"><a href="#set" class="headerlink" title="set"></a>set</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">语法：set key value</span><br></pre></td></tr></table></figure><p>功能：将字符串值 value 设置到 key 中，如果key已存在，后放的值会把前放的值覆盖掉。</p><p>返回值：OK表示成功</p><h4 id="get"><a href="#get" class="headerlink" title="get"></a>get</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">语法：get key</span><br></pre></td></tr></table></figure><p>功能：获取 key 中设置的字符串值</p><p>返回值：key存在，返回key对应的value；</p><p> key不存在，返回nil</p><h4 id="append"><a href="#append" class="headerlink" title="append"></a>append</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">语法：append key value</span><br></pre></td></tr></table></figure><p>功能：如果 key 存在，则将 value 追加到 key 原来旧值的末尾</p><p>​           如果 key 不存在，则将key 设置值为 value</p><p>返回值：追加字符串之后的总长度(字符个数) </p><h4 id="strlen"><a href="#strlen" class="headerlink" title="strlen"></a>strlen</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">语法：strlen key</span><br></pre></td></tr></table></figure><p>功能：返回 key 所储存的字符串值的长度</p><p>返回值：如果key存在，返回字符串值的长度； key不存在，返回0</p><h4 id="incr"><a href="#incr" class="headerlink" title="incr"></a>incr</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">语法：incr key</span><br></pre></td></tr></table></figure><p>功能：将 key 中储存的数字值加1，如果 key 不存在，则 key 的值先被初始化为 0 再执行incr操作。</p><p>返回值：返回加1后的key值</p><h4 id="decr"><a href="#decr" class="headerlink" title="decr"></a>decr</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">语法：decr key</span><br></pre></td></tr></table></figure><p>功能：将 key 中储存的数字值减1，如果 key 不存在，则么 key 的值先被初始化为 0 再执行 decr 操作。</p><p>返回值：返回减1后的key值 </p><h4 id="incrby"><a href="#incrby" class="headerlink" title="incrby"></a>incrby</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">语法：incrby key offset</span><br></pre></td></tr></table></figure><p>offset表示任意数字</p><p>功能：将 key 所储存的值加上增量值，如果 key 不存在，则 key 的值先被初始化为 0 再执行 INCRBY 命令。</p><p>返回值：返回增量之后的key值。 </p><h4 id="decrby"><a href="#decrby" class="headerlink" title="decrby"></a>decrby</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">语法：decrby key offset</span><br></pre></td></tr></table></figure><p>功能：将 key 所储存的值减去减量值，如果 key 不存在，则 key 的值先被初始化为 0 再执行 DECRBY 命令。</p><p>返回值：返回减量之后的key值。</p><h4 id="getrange"><a href="#getrange" class="headerlink" title="getrange"></a>getrange</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">语法：getrange key startIndex endIndex</span><br></pre></td></tr></table></figure><p>功能：获取 key 中字符串值从 startIndex 开始到 endIndex 结束的子字符串,包括startIndex和endIndex, 负数表示从字符串的末尾开始，-1 表示最后一个字符。</p><h4 id="setrange"><a href="#setrange" class="headerlink" title="setrange"></a>setrange</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">语法：setrange key offsetIndex value</span><br></pre></td></tr></table></figure><p>功能：用value覆盖key的存储的值从offset开始。</p><p>返回值：修改后的字符串的长度。</p><h4 id="setex"><a href="#setex" class="headerlink" title="setex"></a>setex</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">语法：setex key seconds value</span><br></pre></td></tr></table></figure><p>功能：设置key的值，并将 key 的生存时间设为 seconds (以秒为单位) ，如果key已经存在，将覆盖旧值。</p><p>返回值：设置成功，返回OK。 </p><h4 id="setnx"><a href="#setnx" class="headerlink" title="setnx"></a>setnx</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">语法：setnx key value</span><br></pre></td></tr></table></figure><p>功能：setnx 是 set if not exists 的简写，如果key不存在，则 set 值，存在则不设置值。</p><p>返回值：设置成功，返回1</p><p>设置失败，返回0</p><h4 id="mset"><a href="#mset" class="headerlink" title="mset"></a>mset</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">语法：mset key value [key value…]</span><br></pre></td></tr></table></figure><p>功能：同时设置一个或多个 key-value 对</p><p>返回值：设置成功，返回OK。</p><h4 id="mget"><a href="#mget" class="headerlink" title="mget"></a>mget</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">语法：mget key [key …]</span><br></pre></td></tr></table></figure><p>功能：获取所有(一个或多个)给定 key 的值</p><p>返回值：包含所有key的列表，如果key不存在，则返回nil。</p><h4 id="msetnx"><a href="#msetnx" class="headerlink" title="msetnx"></a>msetnx</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">语法：msetnx key value[key value…]</span><br></pre></td></tr></table></figure><p>功能：同时设置一个或多个 key-value 对，如果有一个key是存在的，则设置不成功。</p><p>返回值：设置成功，返回1</p><p>设置失败，返回0 </p><h3 id="列表（List）"><a href="#列表（List）" class="headerlink" title="列表（List）"></a>列表（List）</h3><p>Redis列表是简单的字符串列表，按照插入顺序排序，左边（头部）、右边（尾部）或者中间都可以添加元素。链表的操作无论是头或者尾效率都极高，但是如果对中间元素进行操作，那效率会大大降低了。</p><p>列表类型的数据操作总的思想是通过key和下标操作value，key是数据标识，下标是数据在列表中的位置，value是我们感兴趣的业务数据。</p><h4 id="lpush"><a href="#lpush" class="headerlink" title="lpush"></a>lpush</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">语法：lpush key value [value…]</span><br></pre></td></tr></table></figure><p>功能：将一个或多个值 value 插入到列表 key 的最左边（表头），各个value值依次插入到表头位置。</p><p>返回值：插入之后的列表的长度。</p><h4 id="rpush"><a href="#rpush" class="headerlink" title="rpush"></a>rpush</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">语法：rpush key value [value…]</span><br></pre></td></tr></table></figure><p>功能：将一个或多个值 value 插入到列表 key 的最右边（表尾），各个 value 值按依次插入到表尾。</p><p>返回值：插入之后的列表的长度。 </p><h4 id="lrange"><a href="#lrange" class="headerlink" title="lrange"></a>lrange</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">语法：lrange key startIndex endIndex</span><br></pre></td></tr></table></figure><p>功能：获取列表 key 中指定下标区间内的元素，下标从0开始，到列表长度-1；下标也可以是负数，表示列表从后往前取，-1表示倒数第一个元素，-2表示倒数第二个元素，以此类推；startIndex和endIndex超出范围不会报错。</p><p>返回值：获取到的元素列表。 </p><h4 id="lpop"><a href="#lpop" class="headerlink" title="lpop"></a>lpop</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">语法：lpop key</span><br></pre></td></tr></table></figure><p>功能：移除并返回列表key头部第一个元素，即列表左侧的第一个元素。</p><p>返回值：列表左侧第一个元素的值；列表key不存在，返回nil。 </p><h4 id="rpop"><a href="#rpop" class="headerlink" title="rpop"></a>rpop</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">语法：rpop key</span><br></pre></td></tr></table></figure><p>功能：移除并返回列表key尾部第一个元素，即列表右侧的第一个元素。</p><p>返回值：列表右侧第一个元素的值；列表key不存在，返回nil。</p><h4 id="lindex"><a href="#lindex" class="headerlink" title="lindex"></a>lindex</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">语法：lindex key index</span><br></pre></td></tr></table></figure><p>功能：获取列表 key 中下标为指定 index 的元素，列表元素不删除，只是查询。0 表示列表的第一个元素，1 表示列表的第二个元素；index也可以负数的下标， -1 表示列表的最后一个元素， -2 表示列表的倒数第二个元素，以此类推。</p><p>返回值：key存在时，返回指定元素的值；   Key不存在时，返回nil。 </p><h4 id="llen"><a href="#llen" class="headerlink" title="llen"></a>llen</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">语法：llen key</span><br></pre></td></tr></table></figure><p>功能：获取列表 key 的长度</p><p>返回值：数值，列表的长度；key不存在返回0 </p><h4 id="lrem"><a href="#lrem" class="headerlink" title="lrem"></a>lrem</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">语法：lrem key count value</span><br></pre></td></tr></table></figure><p>功能：根据参数 count 的值，移除列表中与参数 value 相等的元素，</p><p>count &gt;0 ，从列表的左侧向右开始移除；</p><p>count &lt; 0 从列表的尾部开始移除；</p><p>count = 0移除表中所有与 value 相等的值。</p><p>返回值：数值，移除的元素个数</p><h4 id="ltrim"><a href="#ltrim" class="headerlink" title="ltrim"></a>ltrim</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">语法：ltrim key startIndex endIndex</span><br></pre></td></tr></table></figure><p>功能：截取key的指定下标区间的元素，并且赋值给key。下标从0开始，一直到列表长度-1；下标也可以是负数，表示列表从后往前取，-1表示倒数第一个元素，-2表示倒数第二个元素，以此类推；startIndex和endIndex超出范围不会报错。</p><p>返回值：执行成功返回ok </p><h4 id="lset"><a href="#lset" class="headerlink" title="lset"></a>lset</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">语法：lset key index value</span><br></pre></td></tr></table></figure><p>功能：将列表 key 下标为 index 的元素的值设置为 value。</p><p>功能：设置成功返回ok ; key不存在或者index超出范围返回错误信息。</p><h4 id="linsert"><a href="#linsert" class="headerlink" title="linsert"></a>linsert</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">语法：linsert key before/after pivot value</span><br><span class="line"></span><br><span class="line">示例:</span><br><span class="line">    rpush mylist Hello</span><br><span class="line">    rpush mylist World</span><br><span class="line">    linsert mylist BEFORE World There</span><br></pre></td></tr></table></figure><p>功能：将值 value 插入到列表 key 当中位于值 pivot 之前或之后的位置。key不存在或者pivot不在列表中，不执行任何操作。</p><p>返回值：命令执行成功，返回新列表的长度。没有找到pivot返回 -1， key不存在返回0。</p><h3 id="集合类型-set-1"><a href="#集合类型-set-1" class="headerlink" title="集合类型(set)"></a>集合类型(set)</h3><p>Redis的Set是string类型的无序不重复集合。</p><p>集合类型的数据操作总的思想是通过key确定集合，key是集合标识，元素没有下标，只有直接操作业务数据和数据的个数。</p><h4 id="sadd"><a href="#sadd" class="headerlink" title="sadd"></a>sadd</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">语法：sadd key member [member…]</span><br></pre></td></tr></table></figure><p>功能：将一个或多个 member 元素加入到集合 key 当中，已经存在于集合的 member 元素将被忽略，不会再加入。</p><p>返回值：加入到集合的新元素的个数(不包括被忽略的元素)。 </p><h4 id="smembers"><a href="#smembers" class="headerlink" title="smembers"></a>smembers</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">语法：smembers key</span><br></pre></td></tr></table></figure><p>功能：获取集合 key 中的所有成员元素，不存在的key视为空集合。</p><p>返回值：返回指定集合的所有元素集合，不存在的key，返回空集合。 </p><h4 id="sismember"><a href="#sismember" class="headerlink" title="sismember"></a>sismember</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">语法：sismember key member</span><br></pre></td></tr></table></figure><p>功能：判断 member 元素是否是集合 key 的元素</p><p>返回值：member是集合成员返回1，其他返回 0 。 </p><h4 id="scard"><a href="#scard" class="headerlink" title="scard"></a>scard</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">语法：scard key</span><br></pre></td></tr></table></figure><p>功能：获取集合里面的元素个数</p><p>返回值：数字，key的元素个数。其他情况返回 0  </p><h4 id="srem"><a href="#srem" class="headerlink" title="srem"></a>srem</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">语法：srem key member [member…]</span><br></pre></td></tr></table></figure><p>功能：移除集合中一个或多个元素，不存在的元素被忽略。</p><p>返回值：数字，成功移除的元素个数，不包括被忽略的元素。</p><h4 id="srandmember"><a href="#srandmember" class="headerlink" title="srandmember"></a>srandmember</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">语法：srandmember key[count]</span><br></pre></td></tr></table></figure><p>功能：只提供key，随机返回集合中一个元素，元素不删除，依然在集合中；</p><p>​      提供了count时，count 正数, 返回包含count个数元素的集合，集合元素各不重复。count是负数，返回一个count绝对值的长度的集合，集合中元素可能会重复多次。</p><p>返回值：一个元素或者多个元素的集合 </p><h4 id="spop"><a href="#spop" class="headerlink" title="spop"></a>spop</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">语法：spop key[count]</span><br></pre></td></tr></table></figure><p>功能：随机从集合中删除一个或count个元素。</p><p>返回值：被删除的元素，key不存在或空集合返回nil。 </p><h4 id="smove"><a href="#smove" class="headerlink" title="smove"></a>smove</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">语法：smove src dest member</span><br></pre></td></tr></table></figure><p>功能：将 member 元素从src集合移动到dest集合，member不存在，smove不执行操作，返回0，如果dest存在member，则仅从src中删除member。</p><p>返回值：成功返回 1 ，其他返回 0 。 </p><h4 id="sdiff"><a href="#sdiff" class="headerlink" title="sdiff"></a>sdiff</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">语法：sdiff key key [key…]</span><br></pre></td></tr></table></figure><p>功能：返回指定集合的差集，以第一个集合为准进行比较，即第一个集合中有但在其它任何集合中都没有的元素组成的集合。</p><p>返回值：返回第一个集合中有而后边集合中都没有的元素组成的集合，如果第一个集合中的元素在后边集合中都有则返回空集合。</p><h4 id="sinter"><a href="#sinter" class="headerlink" title="sinter"></a>sinter</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">语法：sinter key key [key…]</span><br></pre></td></tr></table></figure><p>功能：返回指定集合的交集，即指定的所有集合中都有的元素组成的集合。</p><p>返回值：交集元素组成的集合，如果没有则返回空集合。</p><h4 id="sunion"><a href="#sunion" class="headerlink" title="sunion"></a>sunion</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">语法：sunion key key [key…]</span><br></pre></td></tr></table></figure><p>功能：返回指定集合的并集，即指定的所有集合元素组成的大集合，如果元素有重复，则保留一个。</p><p>返回值：返回所有集合元素组成的大集合，如果所有key都不存在，返回空集合。</p><h3 id="哈希类型-hash-1"><a href="#哈希类型-hash-1" class="headerlink" title="哈希类型(hash)"></a>哈希类型(hash)</h3><p>Redis的hash 是一个string类型的key和value的映射表，这里的value是一系列的键值对，hash特别适合用于存储对象。</p><p>哈希类型的数据操作总的思想是通过key和field操作value，key是数据标识，field是域，value是我们感</p><p>兴趣的业务数据。 </p><h4 id="hset"><a href="#hset" class="headerlink" title="hset"></a>hset</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">语法：hset key field value [field value …]</span><br></pre></td></tr></table></figure><p>功能：将键值对field-value设置到哈希列表key中，如果key不存在，则新建哈希列表，然后执行赋值，如果key下的field已经存在，则value值覆盖。</p><p>返回值：返回设置成功的键值对个数。</p><h4 id="hget"><a href="#hget" class="headerlink" title="hget"></a>hget</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">语法：hget key field</span><br></pre></td></tr></table></figure><p>功能：获取哈希表 key 中给定域 field 的值。</p><p>返回值：field域的值，如果key不存在或者field不存在返回nil。</p><h4 id="hmset"><a href="#hmset" class="headerlink" title="hmset"></a>hmset</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">语法：hmset key field value [field value…]</span><br></pre></td></tr></table></figure><p>功能：同时将多个 field-value (域-值)设置到哈希表 key 中，此命令会覆盖已经存在的field，hash表key不存在，创建空的hash表，再执行hmset.</p><p>返回值：设置成功返回ok，如果失败返回一个错误。</p><h4 id="hmget"><a href="#hmget" class="headerlink" title="hmget"></a>hmget</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">语法：hmget key field [field…]</span><br></pre></td></tr></table></figure><p>功能：获取哈希表 key 中一个或多个给定域的值</p><p>返回值：返回和field顺序对应的值，如果field不存在，返回nil。</p><h4 id="hgetall"><a href="#hgetall" class="headerlink" title="hgetall"></a>hgetall</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">语法：hgetall key</span><br></pre></td></tr></table></figure><p>功能：获取哈希表 key 中所有的域和值</p><p>返回值：以列表形式返回hash中域和域的值，key不存在，返回空hash.</p><h4 id="hdel"><a href="#hdel" class="headerlink" title="hdel"></a>hdel</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">语法：hdel key field [field…]</span><br></pre></td></tr></table></figure><p>功能：删除哈希表 key 中的一个或多个指定域field，不存在field直接忽略。</p><p>返回值：成功删除的field的数量。</p><h4 id="hlen"><a href="#hlen" class="headerlink" title="hlen"></a>hlen</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">语法：hlen key</span><br></pre></td></tr></table></figure><p>功能：获取哈希表 key 中域field的个数</p><p>返回值：数值，field的个数。key不存在返回0.</p><h4 id="hexists"><a href="#hexists" class="headerlink" title="hexists"></a>hexists</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">语法：hexists key field</span><br></pre></td></tr></table></figure><p>功能：查看哈希表 key 中，给定域 field 是否存在</p><p>返回值：如果field存在，返回1，其他返回0。</p><h4 id="hkeys"><a href="#hkeys" class="headerlink" title="hkeys"></a>hkeys</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">语法：hkeys key</span><br></pre></td></tr></table></figure><p>功能：查看哈希表 key 中的所有field域列表</p><p>返回值：包含所有field的列表，key不存在返回空列表</p><h4 id="hvals"><a href="#hvals" class="headerlink" title="hvals"></a>hvals</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">语法：hvals key</span><br></pre></td></tr></table></figure><p>功能：返回哈希表 中所有域的值列表</p><p>返回值：包含哈希表所有域值的列表，key不存在返回空列表。</p><h4 id="hincrby"><a href="#hincrby" class="headerlink" title="hincrby"></a>hincrby</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">语法：hincrby key field int</span><br></pre></td></tr></table></figure><p>功能：给哈希表key中的field域增加int</p><p>返回值：返回增加之后的field域的值</p><h4 id="hincrbyfloat"><a href="#hincrbyfloat" class="headerlink" title="hincrbyfloat"></a>hincrbyfloat</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">语法：hincrbyfloat key field float</span><br></pre></td></tr></table></figure><p>功能：给哈希表key中的field域增加float</p><p>返回值：返回增加之后的field域的值</p><h4 id="hsetnx"><a href="#hsetnx" class="headerlink" title="hsetnx"></a>hsetnx</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">语法：hsetnx key field value</span><br></pre></td></tr></table></figure><p>功能：将哈希表 key 中的域 field 的值设置为 value ，当且仅当域 field 不存在的时候才设置，否则不设置。</p><p>返回值：设值成功返回1，其他返回0.</p><h3 id="有序集合类型-Zset"><a href="#有序集合类型-Zset" class="headerlink" title="有序集合类型(Zset)"></a>有序集合类型(Zset)</h3><p>Redis 有序集合zset和集合set一样也是string类型元素的集合，且不允许重复的成员。</p><p>不同的是zset的每个元素都会关联一个分数（分数可以重复），redis通过分数来为集合中的成员进行从小到大的排序。</p><h4 id="zadd"><a href="#zadd" class="headerlink" title="zadd"></a>zadd</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">语法：zadd key score member [score member…]</span><br></pre></td></tr></table></figure><p>功能：将一个或多个 member 元素及其 score 值加入到有序集合 key 中，如果member存在集合中，则覆盖原来的值；score可以是整数或浮点数.</p><p>返回值：数字，新添加的元素个数.</p><h4 id="zrange"><a href="#zrange" class="headerlink" title="zrange"></a>zrange</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">语法：zrange key startIndex endIndex [WITHSCORES]</span><br></pre></td></tr></table></figure><p>功能：查询有序集合，指定区间的内的元素。集合成员按score值从小到大来排序；startIndex和endIndex都是从0开始表示第一个元素，1表示第二个元素，以此类推； startIndex和endIndex都可以取负数，表示从后往前取，-1表示倒数第一个元素；WITHSCORES选项让score和value一同返回。</p><p>返回值：指定区间的成员组成的集合。</p><h4 id="zrangebyscore"><a href="#zrangebyscore" class="headerlink" title="zrangebyscore"></a>zrangebyscore</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">语法：zrangebyscore key min max [WITHSCORES ] [LIMIT offset count]</span><br></pre></td></tr></table></figure><p>功能：获取有序集 key 中，所有 score 值介于 min 和 max 之间（包括min和max）的成员，有序成员是按递增（从小到大）排序；</p><p>​    使用符号”(“ 表示包括min但不包括max；</p><p>​    withscores 显示score和 value；</p><p>   limit用来限制返回结果的数量和区间，在结果集中从第offset个开始，取count个。</p><p>返回值：指定区间的集合数据</p><h4 id="zrem"><a href="#zrem" class="headerlink" title="zrem"></a>zrem</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">语法：zrem key member [member…]</span><br></pre></td></tr></table></figure><p>功能：删除有序集合 key 中的一个或多个成员，不存在的成员被忽略。</p><p>返回值：被成功删除的成员数量，不包括被忽略的成员。</p><h4 id="zcard"><a href="#zcard" class="headerlink" title="zcard"></a>zcard</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">语法：zcard key</span><br></pre></td></tr></table></figure><p>作用：获取有序集 key 的元素成员的个数。</p><p>返回值：key存在，返回集合元素的个数； key不存在，返回0。</p><h4 id="zcount"><a href="#zcount" class="headerlink" title="zcount"></a>zcount</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">语法：zcount key min max</span><br></pre></td></tr></table></figure><p>功能：返回有序集 key 中， score 值在 min 和 max 之间(包括 score 值等于 min 或 max )的成员的数量。</p><p>返回值：指定有序集合中分数在指定区间内的元素数量。</p><h4 id="zrank"><a href="#zrank" class="headerlink" title="zrank"></a>zrank</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">语法：zrank key member</span><br></pre></td></tr></table></figure><p>功能：获取有序集 key 中成员 member 的排名，有序集成员按 score 值从小到大顺序排列，从0开始排名，score最小的是0 。</p><p>返回值：指定元素在有序集合中的排名；如果指定元素不存在，返回nil。</p><h4 id="zscore"><a href="#zscore" class="headerlink" title="zscore"></a>zscore</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">语法：zscore key member</span><br></pre></td></tr></table></figure><p>功能：获取有序集合key中元素member的分数。</p><p>返回值：返回指定有序集合元素的分数。</p><h4 id="zrevrank"><a href="#zrevrank" class="headerlink" title="zrevrank"></a>zrevrank</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">语法：zrevrank key member</span><br></pre></td></tr></table></figure><p>功能：获取有序集 key 中成员 member 的排名，有序集成员按 score 值从大到小顺序排列，从0开始排名，score最大的是0 。</p><p>返回值：指定元素在有序集合中的排名；如果指定元素不存在，返回nil。</p><h4 id="zrevrange"><a href="#zrevrange" class="headerlink" title="zrevrange"></a>zrevrange</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">语法：zrevrange key startIndex endIndex [WITHSCORES]</span><br></pre></td></tr></table></figure><p>功能：查询有序集合，指定区间的内的元素。集合成员按score值从大到小来排序；startIndex和endIndex都是从0开始表示第一个元素，1表示第二个元素，以此类推； startIndex和endIndex都可以取负数，表示从后往前取，-1表示倒数第一个元素；WITHSCORES选项让score和value一同返回。</p><p>返回值：指定区间的成员组成的集合。</p><h4 id="zrevrangebyscore"><a href="#zrevrangebyscore" class="headerlink" title="zrevrangebyscore"></a>zrevrangebyscore</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">语法：zrevrangebyscore key max min  [WITHSCORES ] [LIMIT offset count]</span><br></pre></td></tr></table></figure><p>功能：获取有序集 key 中，所有 score 值介于 max 和 min 之间（包括max和min）的成员，有序成员是按递减（从大到小）排序；</p><p>使用符号<code>(</code> 表示不包括min和max；</p><p>withscores 显示score和 value；</p><p>limit用来限制返回结果的数量和区间，在结果集中从第offset个开始，取count个。</p><p>返回值：指定区间的集合数据</p><h2 id="Redis的配置文件"><a href="#Redis的配置文件" class="headerlink" title="Redis的配置文件"></a>Redis的配置文件</h2><h3 id="redis-conf存放位置"><a href="#redis-conf存放位置" class="headerlink" title="redis.conf存放位置"></a>redis.conf存放位置</h3><p>Redis的安装根目录下,Redis在启动时会加载这个配置文件，在运行时按照配置进行工作。 这个文件有时候我们会拿出来，单独存放在某一个位置，启动的时候必须明确指定使用哪个配置文件，此文件才会生效。</p><h3 id="Redis-的网络相关配置"><a href="#Redis-的网络相关配置" class="headerlink" title="Redis 的网络相关配置"></a>Redis 的网络相关配置</h3><ol><li><p>bind：<br>绑定IP地址，其它机器可以通过此IP访问Redis，默认绑定127.0.0.1，也可以修改为本机的IP地址。</p></li><li><p>port：<br>配置Redis占用的端口，默认是6379。</p></li><li><p>tcp-keepalive：<br>TCP连接保活策略，可以通过tcp-keepalive配置项来进行设置，单位为秒，假如设置为60秒，则server端会每60秒向连接空闲的客户端发起一次ACK请求，以检查客户端是否已经挂掉，对于无响应的客户端则会关闭其连接。如果设置为0，则不会进行保活检测。</p></li></ol><h3 id="Redis的常规配置"><a href="#Redis的常规配置" class="headerlink" title="Redis的常规配置"></a>Redis的常规配置</h3><ol><li><p>loglevel：<br>日志级别，开发阶段可以设置成debug，生产阶段通常设置为notice或者warning.</p></li><li><p>logfile：<br>指定日志文件名，如果不指定，Redis只进行标准输出。要保证日志文件所在的目录必须存在，文件可以不存在。还要在redis启动时指定所使用的配置文件，否则配置不起作用。</p></li><li><p>databases：<br>配置Redis数据库的个数，默认是16个。</p></li></ol><h3 id="Redis的安全配置"><a href="#Redis的安全配置" class="headerlink" title="Redis的安全配置"></a>Redis的安全配置</h3><ol><li>requirepass：<br>配置Redis的访问密码。默认不配置密码，即访问不需要密码验证。<br>此配置项需要在<code>protected-mode=yes</code>时起作用。使用密码登录客户端：<code>redis-cli -h ip -p 6379 -a pwd</code></li></ol><h3 id="Redis的RDB配置"><a href="#Redis的RDB配置" class="headerlink" title="Redis的RDB配置"></a>Redis的RDB配置</h3><ol><li><p><code>save &lt;seconds&gt; &lt;changes&gt;</code>：<br>配置复合的快照触发条件，即Redis 在seconds秒内key改变changes次，Redis把快照内的数据保存到磁盘中一次。默认的策略是：<br>1分钟内改变了1万次<br>或者5分钟内改变了10次<br>或者15分钟内改变了1次<br>如果要禁用Redis的持久化功能，则把所有的save配置都注释掉。</p></li><li><p>stop-writes-on-bgsave-error：<br>当bgsave快照操作出错时停止写数据到磁盘，这样能保证内存数据和磁盘数据的一致性，但如果不在乎这种一致性，要在bgsave快照操作出错时继续写操作，这里需要配置为no。</p></li><li><p>rdbcompression：<br>设置对于存储到磁盘中的快照是否进行压缩，设置为yes时，Redis会采用LZF算法进行压缩；如果不想消耗CPU进行压缩的话，可以设置为no，关闭此功能。</p></li><li><p>rdbchecksum：<br>在存储快照以后，还可以让Redis使用CRC64算法来进行数据校验，但这样会消耗一定的性能，如果系统比较在意性能的提升，可以设置为no，关闭此功能。</p></li><li><p>dbfilename：<br>Redis持久化数据生成的文件名，默认是dump.rdb，也可以自己配置。</p></li><li><p>dir：<br>Redis持久化数据生成文件保存的目录，默认是./即redis的启动目录，也可以自己配置。</p></li></ol><h3 id="6Redis-AOF配置"><a href="#6Redis-AOF配置" class="headerlink" title="6Redis AOF配置"></a>6Redis AOF配置</h3><ol><li><p>appendonly：<br>配置是否开启AOF，yes表示开启，no表示关闭。默认是no。</p></li><li><p>appendfilename：<br>AOF保存文件名</p></li><li><p>appendfsync：</p><ul><li>AOF异步持久化策略<br> <code>always</code>：同步持久化，每次发生数据变化会立刻写入到磁盘中。性能较差但数据完整性比较好（慢，安全）<br> <code>everysec</code>：出厂默认推荐，每秒异步记录一次（默认值）<br> <code>no</code>：不即时同步，由操作系统决定何时同步。</li></ul></li><li><p>no-appendfsync-on-rewrite：<br>重写时是否可以运用appendsync，默认no，可以保证数据的安全性。</p></li><li><p>auto-aof-rewrite-percentage：<br>设置重写的基准百分比</p></li><li><p>auto-aof-rewrite-min-size：<br>设置重写的基准值</p></li></ol><h2 id="Redis的持久化"><a href="#Redis的持久化" class="headerlink" title="Redis的持久化"></a>Redis的持久化</h2><p>redis是内存数据库，它把数据存储在内存中，这样在加快读取速度的同时也对数据安全性产生了新的问题，即当redis所在服务器发生宕机后，redis数据库里的所有数据将会全部丢失。为了解决这个问题，redis提供了持久化功能——RDB和AOF（Append Only File）。</p><h2 id="RDB"><a href="#RDB" class="headerlink" title="RDB"></a>RDB</h2><p>RDB（Redis DataBase）是 Redis 默认的持久化方案。在指定的时间间隔内，执行指定次数的写操作，则会将内存中的数据写入到磁盘中。即在指定目录下生成一个dump.rdb文件。Redis重启会通过加载dump.rdb文件来恢复数据。</p><h3 id="RDB原理"><a href="#RDB原理" class="headerlink" title="RDB原理"></a>RDB原理</h3><p>Redis会复制一个与当前进程一样的进程。新进程的所有数据（变量、环境变量、程序计数器等）数值都和原进程一致，但是是一个全新的进程，并作为原进程的子进程，来进行持久化。</p><p>整个过程中，主进程是不进行任何IO操作的，这就确保了极高的性能。</p><p>如果需要进行大规模数据的恢复，且对于数据恢复的完整性不是非常敏感，那RDB方式要比AOF方式更加的高效。RDB的缺点是最后一次持久化后的数据可能丢失。</p><h3 id="RDB保存的文件"><a href="#RDB保存的文件" class="headerlink" title="RDB保存的文件"></a>RDB保存的文件</h3><p>RDB保存的文件是dump.rdb文件 ,位置保存在Redis的启动目录。Redis每次同步数据到磁盘都会生成一个dump.rdb文件，新的dump.rdb会覆盖旧的dump.rdb文件。</p><h3 id="配置RDB持久化策略"><a href="#配置RDB持久化策略" class="headerlink" title="配置RDB持久化策略"></a>配置RDB持久化策略</h3><p>在redis.conf的快照配置中，配置RDB保存的策略。</p><p>在客户端执行FLUSHDB或者FLUSHALL或者SHUTDOWN时，也会把快照中的数据保存到dump.rdb，只不过这种操作已经把数据清空了，保存的也是空文件，没有意义。</p><h3 id="手动保存RDB快照"><a href="#手动保存RDB快照" class="headerlink" title="手动保存RDB快照"></a>手动保存RDB快照</h3><p>save命令执行一个同步保存操作，将当前 Redis 实例的所有数据快照(snapshot)以 RDB 文件的形式保存到硬盘。</p><p>由于save指令会阻塞所有客户端，所以保存数据库的任务通常由<code>BGSAVE</code>命令异步地执行，而save作为保存数据的最后手段来使用，当负责保存数据的后台子进程不幸出现问题时使用。</p><h3 id="RDB数据恢复"><a href="#RDB数据恢复" class="headerlink" title="RDB数据恢复"></a>RDB数据恢复</h3><p>通过脚本将Redis产生的dump.rdb文件备份(cp dump.rdb dump_bak.rdb)，每次启动Redis前，把备份的dump.rdb文件替换到Redis相应的目录(在redis.conf中配的的dir目录)下，Redis启动时会加载dump.rdb文件，并且把数据读到内存中。</p><h3 id="RDB小结"><a href="#RDB小结" class="headerlink" title="RDB小结"></a>RDB小结</h3><p>Redis默认开启RDB持久化方式，适合大规模的数据恢复但它的数据一致性和完整性较差。</p><h2 id="AOF"><a href="#AOF" class="headerlink" title="AOF"></a>AOF</h2><p>AOF(Append Only File)，Redis <strong>默认不开启</strong>。它的出现是为了弥补RDB的不足（数据的不一致性），所以它采用日志的形式来记录每个<strong>写操作</strong>，并<strong>追加</strong>到文件中。Redis 重启会根据日志文件的内容将写指令从前到后执行一次以完成数据的恢复工作。</p><h3 id="AOF原理"><a href="#AOF原理" class="headerlink" title="AOF原理"></a>AOF原理</h3><p><strong>Redis以日志的形式来记录每个写操作</strong>，将Redis执行过的所有写指令记录下来(读操作不记录)，</p><p>只许追加文件但不可以改写文件，redis启动之初会读取该文件重新构建数据，换言之，redis重启的话就根据日志文件的内容将写指令从前到后执行一次以完成数据的恢复工作。</p><h3 id="AOF保存的文件"><a href="#AOF保存的文件" class="headerlink" title="AOF保存的文件"></a>AOF保存的文件</h3><p>AOF保存的文件是appendonly.aof文件 ,位置保存在Redis的启动目录。如果开启了AOF，Redis每次记录写操作都会往appendonly.aof文件追加新的日志内容。</p><h3 id="配置AOF持久化策略"><a href="#配置AOF持久化策略" class="headerlink" title="配置AOF持久化策略"></a>配置AOF持久化策略</h3><p>在redis.conf的“APPEND ONLY MODE”配置模块中，配置AOF保存策略。</p><h3 id="AOF数据恢复"><a href="#AOF数据恢复" class="headerlink" title="AOF数据恢复"></a>AOF数据恢复</h3><p>通过脚本将Redis产生的appendonly.aof文件备份(cp appendonly.aof appendonly_bak.aof)，每次启动Redis前，把备份的appendonly.aof文件替换到Redis相应的目录(在redis.conf中配的的dir目录)下，只要开启AOF的功能，Redis每次启动，会根据日志文件的内容将写指令从前到后执行一次以完成数据的恢复工作。</p><p>但在实际开发中，可能因为某些原因导致appendonly.aof 文件格式异常，从而导致数据还原失败，可以通过命令redis-check-aof –fix appendonly.aof 进行修复 。会把出现异常的部分往后所有写操作日志去掉。</p><h3 id="AOF的重写"><a href="#AOF的重写" class="headerlink" title="AOF的重写"></a>AOF的重写</h3><p>AOF采用文件追加方式，文件会越来越大为避免出现此种情况，新增了重写机制,当AOF文件的大小超过所设定的阈值时，Redis就会启动AOF文件的内容压缩，只保留可以恢复数据的最小指令集。</p><p>​    AOF文件持续增长而过大时，会fork出一条新进程来将文件重写(也是先写临时文件最后再rename)，遍历新进程的内存中数据，每条记录有一条的Set语句。重写aof文件的操作，并没有读取旧的aof文件，而是将整个内存中的数据库内容用命令的方式重写了一个新的aof文件，这点和快照有点类似。</p><p>Redis会记录上次重写时的AOF大小，默认配置是当AOF文件大小是上次rewrite后大小的一倍且文件大于64M时触发。当然，也可以在配置文件中进行配置。</p><h3 id="AOF小结"><a href="#AOF小结" class="headerlink" title="AOF小结"></a>AOF小结</h3><p>Redis 需要手动开启AOF持久化方式，AOF 的数据完整性比RDB高，但记录内容多了，会影响数据恢复的效率。</p><p>关于Redis持久化的使用：</p><p>​若只打算用Redis<strong>做缓存，可以关闭持久化。若打算使用Redis</strong>的持久化，建议RDB和AOF都开启。其实RDB更适合做数据的备份，留一后备。AOF出问题了，还有RDB。</p><p>AOF与RDB模式可以同时启用，这并不冲突。如果AOF是可用的，那Redis启动时将自动加载AOF，这个文件能够提供更好的持久性保障。</p><h2 id="Redis的事务"><a href="#Redis的事务" class="headerlink" title="Redis的事务"></a>Redis的事务</h2><p>Redis的事务允许在一次单独的步骤中执行一组命令，并且能够保证将一个事务中的所有命令序列化，然后按顺序执行；在一个Redis事务中，Redis要么执行其中的所有命令，要么什么都不执行。即Redis的事务要能够保证序列化和原子性。</p><blockquote><p>以下是常用命令</p></blockquote><h3 id="multi"><a href="#multi" class="headerlink" title="multi"></a>multi</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">语法：multi</span><br></pre></td></tr></table></figure><p>功能：用于标记事务块的开始。Redis会将后续的命令逐个放入队列中，然后才能使用EXEC命令原子化地执行这个命令序列。</p><p>返回值：开启成功返回OK</p><h3 id="exec"><a href="#exec" class="headerlink" title="exec"></a>exec</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">语法：exec</span><br></pre></td></tr></table></figure><p>功能：在一个事务中执行所有先前放入队列的命令，然后恢复正常的连接状态。</p><p>如果在把命令压入队列的过程中报错，则整个队列中的命令都不会执行，执行结果报错；</p><p>如果在压队列的过程中正常，在执行队列中某一个命令报错，则只会影响本条命令的执行结果，其它命令正常运行；当使用WATCH命令时，只有当受监控的键没有被修改时，EXEC命令才会执行事务中的命令;而一旦执行了exec命令，之前加的所有watch监控全部取消。</p><p>返回值：这个命令的返回值是一个数组，其中的每个元素分别是原子化事务中的每个命令的返回值。 当使用WATCH命令时，如果事务执行中止，那么EXEC命令就会返回一个Null值。 </p><p>示例1：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">reids的一组命令中，有在压入事务对立中发生错误的命令，则事务中所有的命令都不执行,保持了原子性</span><br><span class="line">multi</span><br><span class="line">set k3 v3</span><br><span class="line">seta k4 v4</span><br><span class="line">exec</span><br></pre></td></tr></table></figure><p>示例2:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">如果一组命令中，在压入队列的过程中正常，但是在执行事务队列命令时发生了错误，则其他命令正常执行，不能够保证事务的原子性</span><br><span class="line">multi</span><br><span class="line">set k3 v3</span><br><span class="line">incr k1</span><br><span class="line">set k4 v4</span><br><span class="line">exec</span><br></pre></td></tr></table></figure><h3 id="discard"><a href="#discard" class="headerlink" title="discard"></a>discard</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">语法：discard</span><br></pre></td></tr></table></figure><p>功能：清除所有先前在一个事务中放入队列的命令，并且结束事务。</p><p>如果使用了WATCH命令，那么DISCARD命令就会将当前连接监控的所有键取消监控。</p><p>返回值：清除成功，返回OK。 </p><h3 id="watch"><a href="#watch" class="headerlink" title="watch"></a>watch</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">语法：watch key [key …]</span><br></pre></td></tr></table></figure><p>功能：当某个事务需要按条件执行时，就要使用这个命令将给定的键设置为受监控的。如果被监控的key值在本事务外有修改时，则本事务所有指令都不会被执行。Watch命令相当于关系型数据库中的乐观锁。</p><p>返回值：监控成功，返回OK。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">在一个命令窗口中执行以下命令:</span><br><span class="line">set balance 100</span><br><span class="line">set balance2 1000</span><br><span class="line">set version 1</span><br><span class="line">watch version</span><br><span class="line">multi </span><br><span class="line">decrby balance 50</span><br><span class="line">incrby balance 50</span><br><span class="line">exec</span><br><span class="line">在另一个窗口中执行</span><br><span class="line">set version 2</span><br></pre></td></tr></table></figure><h3 id="unwatch"><a href="#unwatch" class="headerlink" title="unwatch"></a>unwatch</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">语法：unwatch</span><br></pre></td></tr></table></figure><p>功能：清除所有先前为一个事务监控的键。</p><p>如果在watch命令之后你调用了EXEC或DISCARD命令，那么就不需要手动调用UNWATCH命令。</p><p>返回值：清除成功，返回OK。</p><h3 id="Redis事务小结"><a href="#Redis事务小结" class="headerlink" title="Redis事务小结"></a>Redis事务小结</h3><ol><li><p>单独的隔离操作：<br>事务中的所有命令都会序列化、顺序地执行。事务在执行过程中，不会被其它客户端发来的命令请求所打断，除非使用watch命令监控某些键。</p></li><li><p>不保证事务的原子性：<br>redis同一个事务中如果一条命令执行失败，其后的命令仍然可能会被执行，redis的事务没有回滚。Redis已经在系统内部进行功能简化，这样可以确保更快的运行速度，因为Redis不需要事务回滚的能力。</p></li></ol><h2 id="Redis消息的发布与订阅-了解"><a href="#Redis消息的发布与订阅-了解" class="headerlink" title="Redis消息的发布与订阅(了解)"></a>Redis消息的发布与订阅(了解)</h2><p>Redis 发布订阅(pub/sub)是一种消息通信模式：<br><code>发送者(pub)发送消息，订阅者(sub)接收消息</code>。Redis 客户端可以订阅任意数量的频道。</p><blockquote><p>以下是Redis发布订阅的常用命令</p></blockquote><h3 id="subscribe"><a href="#subscribe" class="headerlink" title="subscribe"></a>subscribe</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">语法：subscribe channel [channel…]</span><br></pre></td></tr></table></figure><p>功能：订阅一个或多个频道的信息</p><p>返回值：订阅的消息</p><h3 id="publish"><a href="#publish" class="headerlink" title="publish"></a>publish</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">语法：publish chanel message</span><br></pre></td></tr></table></figure><p>功能：将信息发送到指定的频道。</p><p>返回值：数字。接收到消息订阅者的数量。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">在一个客户端执行</span><br><span class="line">subscribe ch1 ch2 ch3</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">在另外一个客户端执行</span><br><span class="line">publish ch1 hello</span><br></pre></td></tr></table></figure><h3 id="psubscribe"><a href="#psubscribe" class="headerlink" title="psubscribe"></a>psubscribe</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">语法：psubscribe pattern [pattern]</span><br></pre></td></tr></table></figure><p>功能：订阅一个或多个符合给定模式的频道。模式以 * 作为通配符，例如：news.* 匹配所有以 news. 开头的频道。</p><p>返回值：订阅的信息。</p><h2 id="Redis的主从复制"><a href="#Redis的主从复制" class="headerlink" title="Redis的主从复制"></a>Redis的主从复制</h2><p>主机数据更新后根据配置和策略，自动同步到从机的master/slave机制，<code>Master以写为主，Slave以读为主。</code></p><h3 id="一主二从过程"><a href="#一主二从过程" class="headerlink" title="一主二从过程"></a>一主二从过程</h3><ol><li><p>配从(库)不配主(库)</p></li><li><p>配从(库): slaveof 主库IP 主库端口</p></li><li><p>主写从读、读写分离</p></li><li><p>从连前后同</p></li><li><p>主断从待命、从断重新连</p></li></ol><h3 id="主从常用命令"><a href="#主从常用命令" class="headerlink" title="主从常用命令"></a>主从常用命令</h3><p>从设置跟随主<br><code>slaveof 127.0.0.1 6379</code></p><h3 id="一主二从搭建过程"><a href="#一主二从搭建过程" class="headerlink" title="一主二从搭建过程"></a>一主二从搭建过程</h3><ol><li><p>一台服务器模拟三台主机：<br>第一步：将redis.conf 拷贝三份，名字分别是，redis6379.conf，redis6380.conf，redis6381.conf<br>第二步：修改三个文件的port端口，pid文件名，日志文件名，rdb文件名    </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">如：port 6379</span><br><span class="line">pidfile /var/run/redis_6379.pid</span><br><span class="line">logfile &quot;6379.log&quot;</span><br><span class="line">dbfilename dump6379.rdb</span><br></pre></td></tr></table></figure><p>第三步：分别打开三个窗口模拟三台服务器，开启redis服务。 </p></li><li><p>查询主从信息：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">info replication</span><br></pre></td></tr></table></figure></li><li><p>写操作6379：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">set k1 hello</span><br></pre></td></tr></table></figure></li><li><p>设置主从关系：（设从不设主）<br>在6380和6381主机上分别执行命令</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">slaveof 127.0.0.1 6379</span><br></pre></td></tr></table></figure><p>检查主从关系</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">info replication</span><br></pre></td></tr></table></figure><p>另一种方式，就是修改6380和6381的配置文件，在最后加上：<br><strong>注意：如果主redis设置了密码，从库的redis.conf中还需要设置masterauth为主redis的密码。</strong></p></li><li><p>全量复制：在6380和6381分别执行命令</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">get k1</span><br></pre></td></tr></table></figure><p>一旦主从关系确定，会自动把主机上已有的数据复制到从机上 </p></li><li><p>增量复制：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">6379执行命令：</span><br><span class="line">set k2 v2</span><br></pre></td></tr></table></figure><p>然后6380端口和6381端口，分别执行命令：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">get k2</span><br></pre></td></tr></table></figure><p>主库写数据会自动同步到从库 </p></li><li><p>测试主写从读、读写分离：在6380和6381上执行写操作</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">set k3 v3</span><br><span class="line">提示:</span><br><span class="line">(error) READONLY You can&#x27;t write against a read only slave.</span><br></pre></td></tr></table></figure><p>报错因为不能在从机上写数据（只能读 ）</p></li><li><p>模拟主机宕机：6379执行指令shutdown，并查看6380和6381的redis信息</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">redis-cli -h localhost -p 6379 shutdown</span><br></pre></td></tr></table></figure><p>继续查看主从信息 </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">info replication</span><br></pre></td></tr></table></figure><p>从机还是slave，等待主机，可以继续读数据 ,从机原地待命。</p></li><li><p>主机宕机后恢复：重启6379，并且执行写命令</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">set k4 v4；</span><br></pre></td></tr></table></figure><p>6380和6381上分别执行</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">get k4</span><br></pre></td></tr></table></figure><p>主机重启后，一切正常。</p></li><li><p>使从机宕机：6380执行指令</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">shutdown</span><br></pre></td></tr></table></figure><p>并查看6379和6381的redis信息: 从机宕机后主机少一个从机，其他从机不变测试;关闭6380服务</p></li><li><p>从机宕机后恢复：重启6380，并查看6380、6379和6381的redis信息<br>从新设置从属关系</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">slaveof  127.0.0.1 6379</span><br></pre></td></tr></table></figure><p>执行全量复制，主机修改后执行增量复制<br>注意：从机跟master断开联系，必须重新连接，除非写进配置文件。</p></li><li><p>从机恢复连主机<strong>前</strong>，主机写操作：6379执行写命令</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">set k5 v5</span><br></pre></td></tr></table></figure><p>6380和6381分别执行命令</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">get k5</span><br></pre></td></tr></table></figure><p>获取不到</p></li><li><p>从机恢复连接主机<strong>之后</strong>，6380执行命令：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">slaveof 127.0.0.1 6379</span><br></pre></td></tr></table></figure><p>并且执行命令：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">get k5</span><br></pre></td></tr></table></figure><p>获取得到了</p></li><li><p>手动设置从机上位：<br>第一步：主机宕机，6379执行命令：shutdown<br>第二步：6380断开主从关系，执行命令：SLAVEOF no one<br>第三步：重新搭建主从，6381执行命令：info replication，SLAVEOF 127.0.0.1 6380<br>第四步：之前主机恢复，重启6379的Redis服务，并执行命令：info replication</p></li></ol><p>   在6379主机宕机后，6380从机断开主从关系，6381开始还在原地待命；后来6380从机上位，6381投靠6380，6379主机即使回来也是独立的master。</p><ol start="15"><li>主变从：<br>6379执行命令<code>saveof 127.0.0.1 6381</code>，并在6379和6381执行<code>info replication</code><br>一台主机配多台从机，一台从机再配多台从机，从而实现了庞大的集群架构。<br>同时也减轻了一台主机的压力，缺点是增加了服务器间的延迟。</li></ol><h3 id="复制原理"><a href="#复制原理" class="headerlink" title="复制原理"></a>复制原理</h3><ul><li><p>全量复制<br> slave启动成功连接到master后会发送一个sync命令；Master接到命令启动后台的存盘进程，同时收集所有接收到的用于修改数据集命令，在后台进程执行完毕之后，master将传送整个数据文件到slave,以完成一次完全同步；slave服务在接收到数据库文件数据后，将其存盘并加载到内存中。<br> 只要是重新连接master,一次完全同步（全量复制)将被自动执行。</p></li><li><p>增量复制<br> Master将新的所有收集到的修改命令依次传给slave,完成同步。 </p></li></ul><h3 id="哨兵模式"><a href="#哨兵模式" class="headerlink" title="哨兵模式"></a>哨兵模式</h3><p>主机宕机，从机自动上位的自动版</p><h4 id="哨兵模式原理"><a href="#哨兵模式原理" class="headerlink" title="哨兵模式原理"></a>哨兵模式原理</h4><p>从机上位的自动版。Redis提供了哨兵的命令，哨兵命令是一个独立的进程，哨兵通过发送命令，来监控主从服务器的运行状态，如果检测到master故障了根据投票数自动将某一个slave转换master，然后通过消息订阅模式通知其它slave，让它们切换主机。然而，一个哨兵进程对Redis服务器进行监控，可能会出现问题，为此，我们可以使用多哨兵进行监控。</p><h4 id="哨兵模式搭建"><a href="#哨兵模式搭建" class="headerlink" title="哨兵模式搭建"></a>哨兵模式搭建</h4><p>与上面一样一主二从搭建：<br>一台服务器模拟三台主机、查询主从信息、写操作6379、设置主从关系、全量复制、增量复制、主写从读、读写分离。</p><ol start="8"><li><p>创建<code>redis-sentinel.conf</code>文件，修改端口号，<strong>并在端口号后追加内容</strong>：<code>sentinel monitor dc-redis 127.0.0.1 6379 1</code>，表示：指定监控主机的ip地址，port端口，得到哨兵的投票数(当哨兵投票数大于或者等于此数时切换主从关系)。</p></li><li><p>新开窗口，启动哨兵服务</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">#linux命令</span><br><span class="line">redis-sentinel redis-sentinel.conf </span><br><span class="line">#windows下的命令</span><br><span class="line">redis-server redis-sentinel.conf --sentinel</span><br></pre></td></tr></table></figure></li><li><p>主机宕机：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">redis-cli -h localhost -p 6379 shutdown</span><br></pre></td></tr></table></figure></li></ol><p> 关闭主机服务,哨兵程序自动选择从机上位</p><ol start="11"><li><p>等待从机投票，在sentinel窗口中能查看打印信息。 </p></li><li><p>查看6380和6381的redis信息：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">info  replication </span><br></pre></td></tr></table></figure></li><li><p>原主机恢复，启动6379：<br>源主机回复自动从属于新的主机</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">redis-server redis379.conf</span><br><span class="line">info replication</span><br></pre></td></tr></table></figure><h4 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h4><p>Redis的主从复制最大的缺点就是延迟，主机负责写，从机负责备份，这个过程有一定的延迟，当系统很繁忙的时候，延迟问题会更加严重，从机器数量的增加也会使这个问题更加严重。</p></li></ol><h2 id="Jedis操作Redis"><a href="#Jedis操作Redis" class="headerlink" title="Jedis操作Redis"></a>Jedis操作Redis</h2><p>使用Redis官方推荐的Jedis，在java应用中操作Redis。<br>Jedis几乎涵盖了Redis的所有命令。操作Redis的命令在Jedis中以方法的形式出现。</p><h3 id="在java中使用redis"><a href="#在java中使用redis" class="headerlink" title="在java中使用redis"></a>在java中使用redis</h3><p>1.导包—导入redis的java客户端实现包jedis</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>redis.clients<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jedis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.0.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>2.示例代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span>  <span class="keyword">void</span> <span class="title function_">connect</span><span class="params">()</span>&#123;</span><br><span class="line">   <span class="comment">//连接本地的 Redis 服务</span></span><br><span class="line">   <span class="type">Jedis</span> <span class="variable">jedis</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Jedis</span>(<span class="string">&quot;localhost&quot;</span>,<span class="number">6379</span>);         </span><br><span class="line">   System.out.println(<span class="string">&quot;连接成功&quot;</span>);</span><br><span class="line">   <span class="comment">//查看服务是否运行</span></span><br><span class="line">   System.out.println(<span class="string">&quot;服务正在运行: &quot;</span>+jedis.ping());</span><br><span class="line">   <span class="comment">//清空数据库</span></span><br><span class="line">   System.out.println(jedis.flushDB());</span><br><span class="line">   <span class="comment">//存放数据myKey</span></span><br><span class="line">   jedis.set(<span class="string">&quot;myKey&quot;</span>,<span class="string">&quot;hello,redis&quot;</span>);</span><br><span class="line">   <span class="comment">//打印myKey</span></span><br><span class="line">   System.out.println(jedis.get(<span class="string">&quot;myKey&quot;</span>));</span><br><span class="line">   System.out.println(<span class="string">&quot;系统中所有键如下：&quot;</span>);      </span><br><span class="line">   <span class="comment">//存放list集合</span></span><br><span class="line">   jedis.lpush(<span class="string">&quot;numberlists&quot;</span>, <span class="string">&quot;3&quot;</span>);</span><br><span class="line">   jedis.lpush(<span class="string">&quot;numberlists&quot;</span>, <span class="string">&quot;1&quot;</span>);</span><br><span class="line">   jedis.lpush(<span class="string">&quot;numberlists&quot;</span>, <span class="string">&quot;5&quot;</span>);</span><br><span class="line">   jedis.lpush(<span class="string">&quot;numberlists&quot;</span>, <span class="string">&quot;2&quot;</span>);     </span><br><span class="line">   System.out.println(<span class="string">&quot;所有元素-numberlists：&quot;</span>+jedis.lrange(<span class="string">&quot;numberlists&quot;</span>, <span class="number">0</span>, -<span class="number">1</span>));</span><br><span class="line">   Set&lt;String&gt; keys = jedis.keys(<span class="string">&quot;*&quot;</span>); </span><br><span class="line">   Iterator&lt;String&gt; it=keys.iterator() ;   </span><br><span class="line">   <span class="keyword">while</span>(it.hasNext())&#123;   </span><br><span class="line">      <span class="type">String</span> <span class="variable">key</span> <span class="operator">=</span> it.next();   </span><br><span class="line">      System.out.println(key);   </span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="SpringBoot整合Redis"><a href="#SpringBoot整合Redis" class="headerlink" title="SpringBoot整合Redis"></a>SpringBoot整合Redis</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-redis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在SpringBoot2.0之后，spring容器自动的生成了<code>StringRedisTemplate</code>和<code>RedisTemplate&lt;Object,Object&gt;</code>，可以直接注入。<br>但是在实际使用中，我们大多不会直接使用<code>RedisTemplate&lt;Object,Object&gt;</code>，而是会对key,value进行序列化，实现<code>RedisTemplate</code>的配置。</p><p><code>Spring-data-redis</code>提供的<code>RedisTemplate</code>实现了对Reids底层操作的高度抽象，并对五种数据类型的操作进行了归类封装，提供了<code>Operation</code>操作接口，实现对各种数据类型的简化操作。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//如果非要序列化加入加入new StringRedisSerializer()即可</span></span><br><span class="line"><span class="comment">//（注意：写的时候序列化了，读的时候也要序列化）</span></span><br><span class="line"><span class="comment">//例如对key序列化</span></span><br><span class="line">redisTemplate.setKeySerializer(<span class="keyword">new</span> <span class="title class_">StringRedisSerializer</span>());</span><br><span class="line"></span><br><span class="line"><span class="comment">//使用键值对存取对象</span></span><br><span class="line">redisTemplate.opsForValue()...</span><br><span class="line">redisTemplate.opsForList()...</span><br><span class="line">redisTemplate.opsForHash()...</span><br><span class="line">redisTemplate.opsForSet()...</span><br><span class="line">redisTemplate.opsForZSet()...</span><br><span class="line"><span class="comment">//提供了对key的“bound”(绑定)便捷化操作API，可以通过bound封装指定的key，然后进行一系列的操作而无须“显式”的再次指定Key，即</span></span><br><span class="line">redisTemplate.boundListOps()...</span><br><span class="line">redisTemplate.boundHashOps()...</span><br><span class="line">redisTemplate.boundSetOps()...</span><br><span class="line">redisTemplate.boundValueOps()...</span><br><span class="line">redisTemplate.boundZSetOps()...</span><br><span class="line"><span class="comment">//注意：使用该系列接口的方法如果存取的是对象，要将对象实现序列化接口Serializable，否则会抛异常</span></span><br></pre></td></tr></table></figure><p>示例代码1：存储集合</p><p>示例代码：将查询出来的集合放置redis缓存中，考虑到用户可能单独查询每个对象，也可能查询集合，所以可以考虑将整个集合作为一个key放置到redis中，每个value又是一个hashSet（以每个对象的id作为key,对象作为value存放到redis）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Autowried</span></span><br><span class="line"><span class="keyword">private</span> RedisTemplate redisTemplate;</span><br><span class="line">List&lt;Category&gt; list=redisTemplate.boundHashOps(<span class="string">&quot;allcates&quot;</span>).values();</span><br><span class="line"> <span class="keyword">if</span> (list.size() &lt;= <span class="number">0</span>) &#123;</span><br><span class="line"> list = categoryService.getAll();</span><br><span class="line"> <span class="keyword">for</span> (Category category : list  ) &#123;</span><br><span class="line">   redisTemplate.boundHashOps(<span class="string">&quot;allcates&quot;</span>).put(category.getId(), category);</span><br><span class="line">   &#125;</span><br><span class="line">  <span class="comment">//设置过期时间1分钟</span></span><br><span class="line">    redisTemplate.expire(<span class="string">&quot;allCates&quot;</span>,<span class="number">1</span>, TimeUnit.MINUTES);</span><br><span class="line"> &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>示例代码2：存取对象，并设置过期时间为1分钟</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">redisTemplate.opsForValue().set(<span class="string">&quot;category&quot;</span>,category,<span class="number">1</span>, TimeUnit.MINUTES);</span><br></pre></td></tr></table></figure><h3 id="例子（手机验证码）"><a href="#例子（手机验证码）" class="headerlink" title="例子（手机验证码）"></a>例子（手机验证码）</h3><p>填入手机号，生成四位随机数，30秒过期<br>生成随机数据需要额外导入工具</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.commons<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-lang3<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Teach</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/code&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">code</span><span class="params">(String phone)</span>&#123;</span><br><span class="line">        <span class="comment">//每次生成4位随机数</span></span><br><span class="line">        String  number= RandomStringUtils.randomNumeric(<span class="number">4</span>);</span><br><span class="line">        <span class="comment">//为了更直观，此处key与value都序列化</span></span><br><span class="line">        redisTemplate.setKeySerializer(<span class="keyword">new</span> <span class="title class_">StringRedisSerializer</span>());</span><br><span class="line">        redisTemplate.setValueSerializer(<span class="keyword">new</span> <span class="title class_">StringRedisSerializer</span>());</span><br><span class="line">        <span class="comment">//绑定手机号与随机数，设置30秒过期</span></span><br><span class="line">        redisTemplate.opsForValue().set(phone,number,<span class="number">30</span>, TimeUnit.SECONDS);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;success&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="有序排列set"><a href="#有序排列set" class="headerlink" title="有序排列set"></a>有序排列set</h2><p>常用于排行榜</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// INVEST_TOP：redis中排行榜库的名字</span></span><br><span class="line"><span class="comment">//更新排行榜 (追加数值)</span></span><br><span class="line">redisTemplate.opsForZSet().incrementScore(INVEST_TOP,key,val);</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 读取排行版</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> List&lt;TopRank&gt; <span class="title function_">queryTopRankRedis</span><span class="params">(<span class="type">int</span> num)</span> &#123;</span><br><span class="line">   <span class="comment">// 新建list</span></span><br><span class="line">   List&lt;TopRank&gt; list=<span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">   <span class="comment">//从redis中获取zset投资数据</span></span><br><span class="line">   <span class="comment">//注意这里的reverseRangeWithScores方法，</span></span><br><span class="line">   <span class="comment">// INVEST_TOP：redis中排行榜库的名字</span></span><br><span class="line">   <span class="comment">// 0,num：获取从0到num的数据</span></span><br><span class="line">   Set&lt;ZSetOperations.TypedTuple&lt;Object&gt;&gt; set=redisTemplate.opsForZSet().reverseRangeWithScores(INVEST_TOP,<span class="number">0</span>,num);</span><br><span class="line"></span><br><span class="line">   <span class="comment">//获取迭代器</span></span><br><span class="line">   Iterator&lt;ZSetOperations.TypedTuple&lt;Object&gt;&gt; iterator=set.iterator();</span><br><span class="line">   <span class="comment">// 开始迭代</span></span><br><span class="line">   <span class="keyword">while</span>(iterator.hasNext())&#123;</span><br><span class="line">      ZSetOperations.TypedTuple&lt;Object&gt; object=iterator.next();</span><br><span class="line">      <span class="comment">//获取key</span></span><br><span class="line">      String key=(String)object.getValue();</span><br><span class="line">      <span class="comment">//获取分值--投资额</span></span><br><span class="line">      Double value=object.getScore();</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 把数据塞进实体类</span></span><br><span class="line">      TopRank rank=<span class="keyword">new</span> <span class="title class_">TopRank</span>();</span><br><span class="line">      rank.setPhone(key);</span><br><span class="line">      rank.setValue(value);</span><br><span class="line">      list.add(rank);</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">return</span> list;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> SQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>零碎知识点</title>
      <link href="/posts/ffb4.html"/>
      <url>/posts/ffb4.html</url>
      
        <content type="html"><![CDATA[<h2 id="WEB-INF-web-xml繁琐的配置"><a href="#WEB-INF-web-xml繁琐的配置" class="headerlink" title="WEB-INF/web.xml繁琐的配置"></a><code>WEB-INF/web.xml</code>繁琐的配置</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">web-app</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--加载前需要读取spring配置文件--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">context-param</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath:beans.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">context-param</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--编码过滤器--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>encodingFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>org.springframework.web.filter.CharacterEncodingFilter<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>encoding<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>utf-8<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 过滤器作用范围 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>encodingFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--上下文监听器：tomcat开始时加载--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">listener</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">listener-class</span>&gt;</span>org.springframework.web.context.ContextLoaderListener<span class="tag">&lt;/<span class="name">listener-class</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">listener</span>&gt;</span></span><br><span class="line"></span><br><span class="line"> <span class="comment">&lt;!--mvc核心控制器--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>DispatcherServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--视图文件路径要告诉他--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath:springmvc.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--加载的顺序--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">load-on-startup</span>&gt;</span>1<span class="tag">&lt;/<span class="name">load-on-startup</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line"></span><br><span class="line"> <span class="comment">&lt;!--映射路径--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>DispatcherServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="特殊字符、转义字符"><a href="#特殊字符、转义字符" class="headerlink" title="特殊字符、转义字符"></a>特殊字符、转义字符</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;entity&quot;</span> <span class="attr">class</span>=<span class="string">&quot;entity.TestEntity&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 使用&lt;![CDATA[]]&gt;标记处理 XML 特 殊字符 --&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;specialCharacter1&quot;</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">value</span>&gt;</span>&lt;![CDATA[P&amp;G]]&gt;<span class="tag">&lt;/<span class="name">value</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span> </span><br><span class="line"><span class="comment">&lt;!-- 把 XML 特殊字符替换为实体引用 --&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;specialCharacter2&quot;</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">value</span>&gt;</span>P&amp;G<span class="tag">&lt;/<span class="name">value</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><p>XML 中预定义的实体 &lt;(&lt;) &gt;(&gt;) &amp;(&amp;) ‘(‘) “(“) </p><h2 id="分页"><a href="#分页" class="headerlink" title="分页"></a>分页</h2><h3 id="方式一"><a href="#方式一" class="headerlink" title="方式一"></a>方式一</h3><p>thymeleaf局部刷新分页</p><ul><li><p>mapper.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//按条件分页</span></span><br><span class="line">List&lt;XXX&gt; selectXXXByTypeWithPage（约束条件,开始的索引，步长）  <span class="comment">//@param</span></span><br><span class="line"><span class="comment">//记录数</span></span><br><span class="line">Int selectRowsByXXX（约束条件）</span><br></pre></td></tr></table></figure></li><li><p>mapper.xml<br>按条件分页，返回List，关键字limit<br>返回记录数，count（xxx）</p></li></ul><hr><ul><li>Service层<br>导入mapper</li></ul><hr><ul><li><p>Web层</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//视图至少需要传入（model、当前页数、约束、布尔值的是否刷新）</span></span><br><span class="line">(Model model,Integer page,<span class="type">boolean</span> refresh,约束条件)</span><br><span class="line"></span><br><span class="line"><span class="comment">//进来先判断传入的页数是否为空，否则设为1</span></span><br><span class="line">page = page == <span class="literal">null</span>?<span class="number">1</span>:page;</span><br><span class="line"><span class="comment">//定义固定的每页数</span></span><br><span class="line"><span class="type">int</span> <span class="variable">pageSize</span> <span class="operator">=</span> <span class="number">6</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//每页起始记录号 = （当前页数 - 1）* 每页数 </span></span><br><span class="line"><span class="type">int</span> startIndex=(page-<span class="number">1</span>)*pageSize;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 查出总记录数</span></span><br><span class="line"><span class="type">int</span> <span class="variable">rows</span> <span class="operator">=</span> XXXService.queryRowsByXXX(约束);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 查出页面内容</span></span><br><span class="line">List&lt;XXX&gt; XXXs = XXXService.queryXXXByTypeWithPage(约束, startIndex, pageSize);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 总页数 = 总记录数 / 每页数   （通常这么表达）</span></span><br><span class="line"><span class="type">int</span> pageCount=(<span class="type">int</span>)Math.ceil((<span class="type">double</span>)rows/pageSize);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 保存返回,（页面内容、总页数、总记录数、当前页）</span></span><br><span class="line">model.addAttribute(<span class="string">&#x27;&#x27;</span>,xxx);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 判断前端传来的布尔值是否刷新，否则正常加载</span></span><br><span class="line"><span class="comment">// refresh:前端传来的自定义值</span></span><br><span class="line"><span class="comment">// myIncome:自定义视图</span></span><br><span class="line"><span class="keyword">if</span> (refresh)&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="string">&quot;myIncome::refresh&quot;</span>;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="string">&quot;myIncome&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>前端</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 翻页功能，定义函数 refresh  和 id的refresh</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">refresh</span>(<span class="params">page</span>)&#123;</span><br><span class="line">    $(<span class="string">&quot;#refresh&quot;</span>).<span class="title function_">load</span>(<span class="string">&quot;myIncome&quot;</span>,&#123;<span class="attr">page</span>:page,<span class="attr">refresh</span>:<span class="literal">true</span>&#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- html页面需要加入th --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">xmlns:th</span>=<span class="string">&quot;http://www.thymeleaf.org&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 需要翻页的地方加入 fragment 属性 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">th:fragment</span>=<span class="string">&quot;refresh&quot;</span> <span class="attr">id</span>=<span class="string">&quot;refresh&quot;</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 需要刷新的内容。。。。 --&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!-- th的特殊语法 --&gt;</span></span><br><span class="line">  共[[$&#123;rows&#125;]]条[[$&#123;pageCount&#125;]]页　当前为第[[$&#123;page&#125;]]页</span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!-- 链接 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">a</span> <span class="attr">th:onclick</span>=<span class="string">&quot;refresh(1)&quot;</span>&gt;</span>首页<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">a</span> <span class="attr">th:onclick</span>=<span class="string">&quot;refresh([[$&#123;page&#125;-1]])&quot;</span>&gt;</span>上一页<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">a</span> <span class="attr">th:onclick</span>=<span class="string">&quot;refresh([[$&#123;page&#125;+1]])&quot;</span>&gt;</span>下一页 <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">a</span> <span class="attr">th:onclick</span>=<span class="string">&quot;refresh([[$&#123;pageCount&#125;]])&quot;</span>&gt;</span>尾页<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="方式二"><a href="#方式二" class="headerlink" title="方式二"></a>方式二</h3><p>bootstrap的插件</p><h2 id="上传文件"><a href="#上传文件" class="headerlink" title="上传文件"></a>上传文件</h2><p>1.文件解析器 commons-fileupload<br>2.<code>&lt;form method=&quot;post&quot; encype=&quot;multipart/form-data&quot;&gt;</code><br>3.参数MulitparFile<br>4.物理路劲<br>5.写文件</p><h2 id="搜索自动补全"><a href="#搜索自动补全" class="headerlink" title="搜索自动补全"></a>搜索自动补全</h2><p>bootstrap的typeahead插件<br>afterSelect参数:作用回显</p><h2 id="画图插件"><a href="#画图插件" class="headerlink" title="画图插件"></a>画图插件</h2><p><a href="https://echarts.apache.org/zh/index.html">https://echarts.apache.org/zh/index.html</a></p><h2 id="excel文件上传与下载"><a href="#excel文件上传与下载" class="headerlink" title="excel文件上传与下载"></a>excel文件上传与下载</h2><p>此处以<code>org.apache.poi</code>为例子,仅演示后端内容</p><p>日后学习视频：<a href="https://www.bilibili.com/video/BV1Ua4y1x7BK">https://www.bilibili.com/video/BV1Ua4y1x7BK</a></p><ul><li>基本概念：<br>  工作簿—workbook<br>  工作表—sheet<br>  行—row<br>  列—column<br>  单元格—cell<br>  区域/范围—rangel</li></ul><h3 id="导包"><a href="#导包" class="headerlink" title="导包"></a>导包</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--poi依赖(xls)HSSFWorkbook--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.poi<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>poi<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.15<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--poi新版本需要导入的包(xlsx)XSSFWorkbook--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.poi<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>poi-ooxml<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.15<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="导出"><a href="#导出" class="headerlink" title="导出"></a>导出</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//导出excel文件</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/exportFile&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">exportExcel</span><span class="params">(HttpServletResponse response,String[] ids)</span><span class="keyword">throws</span> UnsupportedEncodingException &#123;</span><br><span class="line">    List&lt;Activity&gt; list=<span class="literal">null</span>;</span><br><span class="line">    SimpleDateFormat sdf=<span class="keyword">new</span> <span class="title class_">SimpleDateFormat</span>(<span class="string">&quot;yyyyMMddhhmmss&quot;</span>);</span><br><span class="line">    <span class="comment">//文件命名</span></span><br><span class="line">    String filename= URLEncoder.encode(<span class="string">&quot;市场活动-&quot;</span>+sdf.format(<span class="keyword">new</span> <span class="title class_">Date</span>())+<span class="string">&quot;.xlsx&quot;</span>,<span class="string">&quot;utf-8&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//设置响应头</span></span><br><span class="line">    response.setHeader(<span class="string">&quot;content-disposition&quot;</span>,<span class="string">&quot;attachment;filename=&quot;</span>+filename);</span><br><span class="line">    <span class="comment">//查询活动数据（这里判断是否全部导出还是部分导出）</span></span><br><span class="line">    <span class="keyword">if</span>(ids==<span class="literal">null</span>)</span><br><span class="line">        list=activityService.queryAll(<span class="literal">null</span>);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        list=activityService.queryByIds(ids);</span><br><span class="line">    <span class="comment">//导入到excel</span></span><br><span class="line">    <span class="comment">//1.创建工作簿</span></span><br><span class="line">    XSSFWorkbook workbook=<span class="keyword">new</span> <span class="title class_">XSSFWorkbook</span>();</span><br><span class="line">    <span class="comment">//2.创建工作表</span></span><br><span class="line">    Sheet sheet=workbook.createSheet(<span class="string">&quot;市场活动&quot;</span>);</span><br><span class="line">    <span class="comment">//3.创建表头</span></span><br><span class="line">    Row rowHeader=sheet.createRow(<span class="number">0</span>);</span><br><span class="line">    <span class="comment">//4.创建单元格</span></span><br><span class="line">    Cell cellHeader=rowHeader.createCell(<span class="number">0</span>);</span><br><span class="line">    cellHeader.setCellValue(<span class="string">&quot;活动名称&quot;</span>);</span><br><span class="line">    cellHeader=rowHeader.createCell(<span class="number">1</span>);</span><br><span class="line">    cellHeader.setCellValue(<span class="string">&quot;开始时间&quot;</span>)     ;</span><br><span class="line">    cellHeader=rowHeader.createCell(<span class="number">2</span>);</span><br><span class="line">    cellHeader.setCellValue(<span class="string">&quot;结束时间&quot;</span>);</span><br><span class="line">    cellHeader=rowHeader.createCell(<span class="number">3</span>);</span><br><span class="line">    cellHeader.setCellValue(<span class="string">&quot;活动经费&quot;</span>);</span><br><span class="line">    cellHeader=rowHeader.createCell(<span class="number">4</span>);</span><br><span class="line">    cellHeader.setCellValue(<span class="string">&quot;活动组织者&quot;</span>);</span><br><span class="line">    cellHeader=rowHeader.createCell(<span class="number">5</span>);</span><br><span class="line">    cellHeader.setCellValue(<span class="string">&quot;活动备注&quot;</span>);</span><br><span class="line">    <span class="comment">//5.循环根据集合产生行，并将数据写入单元格</span></span><br><span class="line">    <span class="type">int</span> i=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(Activity activity:list)&#123;</span><br><span class="line">        Row row=sheet.createRow(i);</span><br><span class="line">        Cell cell=row.createCell(<span class="number">0</span>);</span><br><span class="line">        cell.setCellValue(activity.getName());</span><br><span class="line">        cell=row.createCell(<span class="number">1</span>);</span><br><span class="line">        cell.setCellValue(activity.getStartDate());</span><br><span class="line">        cell=row.createCell(<span class="number">2</span>);</span><br><span class="line">        cell.setCellValue(activity.getEndDate());</span><br><span class="line">        cell=row.createCell(<span class="number">3</span>);</span><br><span class="line">        cell.setCellValue(activity.getCost());</span><br><span class="line">        cell=row.createCell(<span class="number">4</span>);</span><br><span class="line">        cell.setCellValue(activity.getOwner());</span><br><span class="line">        cell=row.createCell(<span class="number">5</span>);</span><br><span class="line">        cell.setCellValue(activity.getDescription());</span><br><span class="line">        i++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//将workbook的内容输出到response的二进制流</span></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="type">OutputStream</span> <span class="variable">outputStream</span> <span class="operator">=</span> response.getOutputStream();</span><br><span class="line">        workbook.write(outputStream);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">catch</span> (Exception ex)&#123;</span><br><span class="line">        ex.getMessage();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="导入"><a href="#导入" class="headerlink" title="导入"></a>导入</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//导入excel文件</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/importFile&quot;)</span></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="keyword">public</span> ResponseResult <span class="title function_">importFile</span><span class="params">(MultipartFile activityFile,HttpSession session)</span>&#123;</span><br><span class="line">    User user=(User)session.getAttribute(Constants.SESSION_USER);</span><br><span class="line">    ResponseResult result=<span class="keyword">new</span> <span class="title class_">ResponseResult</span>();</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        List&lt;Activity&gt; list=<span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        <span class="comment">//将客户端上传的文件流读入excel工作簿</span></span><br><span class="line">        <span class="type">XSSFWorkbook</span> <span class="variable">workbook</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">XSSFWorkbook</span>(activityFile.getInputStream());</span><br><span class="line">        <span class="comment">//获取活动列表---工作表</span></span><br><span class="line">        Sheet sheet=workbook.getSheet(<span class="string">&quot;市场活动&quot;</span>);</span><br><span class="line">        <span class="comment">//读取记录，第一行是标题行忽略</span></span><br><span class="line">        <span class="comment">//获取最大的行号</span></span><br><span class="line">        <span class="type">int</span> lastRowNum=sheet.getLastRowNum();</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=lastRowNum;i++)&#123;</span><br><span class="line">            Row row=sheet.getRow(i);</span><br><span class="line">            <span class="comment">//每一行对应一个活动对象</span></span><br><span class="line">            Activity activity=<span class="keyword">new</span> <span class="title class_">Activity</span>();</span><br><span class="line">            <span class="comment">//获取列</span></span><br><span class="line">            Cell cell=row.getCell(<span class="number">0</span>);<span class="comment">//活动名称</span></span><br><span class="line">            activity.setName(cell.getStringCellValue());</span><br><span class="line">            cell=row.getCell(<span class="number">1</span>); <span class="comment">//开始日期</span></span><br><span class="line">            activity.setStartDate(cell.getStringCellValue());</span><br><span class="line">            cell=row.getCell(<span class="number">2</span>);<span class="comment">//结束日期</span></span><br><span class="line">            activity.setEndDate(cell.getStringCellValue());</span><br><span class="line">            cell=row.getCell(<span class="number">3</span>); <span class="comment">//经费</span></span><br><span class="line">            activity.setCost(String.valueOf(cell.getNumericCellValue()));</span><br><span class="line">            cell=row.getCell(<span class="number">4</span>);</span><br><span class="line">            activity.setDescription(cell.getStringCellValue());</span><br><span class="line">            activity.setId(UUIDUtils.getUUID());</span><br><span class="line">            activity.setCreateTime(DateUtils.formatDateTime(<span class="keyword">new</span> <span class="title class_">Date</span>()));</span><br><span class="line">            activity.setOwner(user.getId());</span><br><span class="line">            activity.setCreateBy(user.getId());</span><br><span class="line">            list.add(activity);</span><br><span class="line">        &#125;</span><br><span class="line">        workbook.close();</span><br><span class="line">        <span class="comment">//插入数据库</span></span><br><span class="line">        <span class="type">int</span> count=activityService.bulkInsert(list);</span><br><span class="line">        <span class="keyword">if</span>(count&gt;<span class="number">0</span>)&#123;</span><br><span class="line">            result.setCode(Constants.STATUS_OK);</span><br><span class="line">            result.setMsg(<span class="string">&quot;导入了&quot;</span>+count+<span class="string">&quot;条记录&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            result.setMsg(<span class="string">&quot;导入失败&quot;</span>);</span><br><span class="line">            result.setCode(Constants.STATUS_ERROR);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">catch</span> (Exception ex)&#123;</span><br><span class="line">        ex.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="图形验证码"><a href="#图形验证码" class="headerlink" title="图形验证码"></a>图形验证码</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//图形验证码</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;page/drawImg&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">drawImg</span><span class="params">(HttpSession session, HttpServletResponse response)</span>&#123;</span><br><span class="line">    <span class="comment">//产生随机字符串</span></span><br><span class="line">    <span class="comment">// 这里用到了工具commons-lang3，需要导包，也可以自己写个方法</span></span><br><span class="line">    String code= RandomStringUtils.randomNumeric(<span class="number">4</span>);</span><br><span class="line">    <span class="comment">//保存到session</span></span><br><span class="line">    session.setAttribute(<span class="string">&quot;code&quot;</span>,code);</span><br><span class="line">    <span class="comment">//图像二进制</span></span><br><span class="line">    BufferedImage image=<span class="keyword">new</span> <span class="title class_">BufferedImage</span>(<span class="number">80</span>,<span class="number">50</span>,BufferedImage.TYPE_INT_RGB);</span><br><span class="line">    <span class="comment">//画布</span></span><br><span class="line">    Graphics graphics=image.createGraphics();</span><br><span class="line">    <span class="comment">//绘制矩形区域（底色白色)</span></span><br><span class="line">    graphics.fillRect(<span class="number">1</span>,<span class="number">1</span>,image.getWidth()-<span class="number">2</span>,image.getHeight()-<span class="number">2</span>);</span><br><span class="line">    <span class="comment">//绘制字符串</span></span><br><span class="line">    graphics.setColor(Color.green);</span><br><span class="line">    graphics.setFont(<span class="keyword">new</span> <span class="title class_">Font</span>(<span class="string">&quot;宋体&quot;</span>,Font.BOLD,<span class="number">24</span>));</span><br><span class="line">    graphics.drawString(code,<span class="number">10</span>,<span class="number">30</span>);</span><br><span class="line">    <span class="comment">//绘制干扰线（噪音线）</span></span><br><span class="line">    graphics.setColor(Color.gray);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">15</span>;i++) &#123;</span><br><span class="line">        Random random=<span class="keyword">new</span> <span class="title class_">Random</span>();</span><br><span class="line">        graphics.drawLine(random.nextInt(<span class="number">40</span>),random.nextInt(<span class="number">25</span>),(<span class="number">40</span>+random.nextInt(<span class="number">40</span>)),(<span class="number">25</span>+random.nextInt(<span class="number">25</span>)));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//获取输出的二进制流</span></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="type">ServletOutputStream</span> <span class="variable">outputStream</span> <span class="operator">=</span> response.getOutputStream();</span><br><span class="line">        <span class="comment">//将内存中的图像输出到流中</span></span><br><span class="line">        ImageIO.write(image,<span class="string">&quot;jpg&quot;</span>,outputStream);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">catch</span> (Exception ex)&#123;</span><br><span class="line">        ex.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 发送验证码</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">codePrint</span>(<span class="params"></span>) &#123;</span><br><span class="line"><span class="keyword">var</span> url = $(<span class="string">&quot;#1&quot;</span>).<span class="title function_">attr</span>(<span class="string">&quot;src&quot;</span>)+<span class="string">&quot;?time=&quot;</span>+<span class="keyword">new</span> <span class="title class_">Date</span>();</span><br><span class="line">$(<span class="string">&quot;#1&quot;</span>).<span class="title function_">attr</span>(<span class="string">&quot;src&quot;</span>,url);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">th:src</span>=<span class="string">&quot;@&#123;page/drawImg&#125;&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span> <span class="attr">id</span>=<span class="string">&quot;1&quot;</span> <span class="attr">onclick</span>=<span class="string">&quot;codePrint()&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure><h2 id="调用第三方解析"><a href="#调用第三方解析" class="headerlink" title="调用第三方解析"></a>调用第三方解析</h2><p>具体需要的参数看调用的接口</p><h3 id="导包-1"><a href="#导包-1" class="headerlink" title="导包"></a>导包</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.httpcomponents<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>httpclient<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.5.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="发送请求—工具类"><a href="#发送请求—工具类" class="headerlink" title="发送请求—工具类"></a>发送请求—工具类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br><span class="line">434</span><br><span class="line">435</span><br><span class="line">436</span><br><span class="line">437</span><br><span class="line">438</span><br><span class="line">439</span><br><span class="line">440</span><br><span class="line">441</span><br><span class="line">442</span><br><span class="line">443</span><br><span class="line">444</span><br><span class="line">445</span><br><span class="line">446</span><br><span class="line">447</span><br><span class="line">448</span><br><span class="line">449</span><br><span class="line">450</span><br><span class="line">451</span><br><span class="line">452</span><br><span class="line">453</span><br><span class="line">454</span><br><span class="line">455</span><br><span class="line">456</span><br><span class="line">457</span><br><span class="line">458</span><br><span class="line">459</span><br><span class="line">460</span><br><span class="line">461</span><br><span class="line">462</span><br><span class="line">463</span><br><span class="line">464</span><br><span class="line">465</span><br><span class="line">466</span><br><span class="line">467</span><br><span class="line">468</span><br><span class="line">469</span><br><span class="line">470</span><br><span class="line">471</span><br><span class="line">472</span><br><span class="line">473</span><br><span class="line">474</span><br><span class="line">475</span><br><span class="line">476</span><br><span class="line">477</span><br><span class="line">478</span><br><span class="line">479</span><br><span class="line">480</span><br><span class="line">481</span><br><span class="line">482</span><br><span class="line">483</span><br><span class="line">484</span><br><span class="line">485</span><br><span class="line">486</span><br><span class="line">487</span><br><span class="line">488</span><br><span class="line">489</span><br><span class="line">490</span><br><span class="line">491</span><br><span class="line">492</span><br><span class="line">493</span><br><span class="line">494</span><br><span class="line">495</span><br><span class="line">496</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> io.peng.money.utils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.JSON;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.JSONObject;</span><br><span class="line"><span class="keyword">import</span> org.apache.http.HttpEntity;</span><br><span class="line"><span class="keyword">import</span> org.apache.http.HttpStatus;</span><br><span class="line"><span class="keyword">import</span> org.apache.http.NameValuePair;</span><br><span class="line"><span class="keyword">import</span> org.apache.http.client.config.RequestConfig;</span><br><span class="line"><span class="keyword">import</span> org.apache.http.client.entity.UrlEncodedFormEntity;</span><br><span class="line"><span class="keyword">import</span> org.apache.http.client.methods.*;</span><br><span class="line"><span class="keyword">import</span> org.apache.http.client.utils.URIBuilder;</span><br><span class="line"><span class="keyword">import</span> org.apache.http.entity.StringEntity;</span><br><span class="line"><span class="keyword">import</span> org.apache.http.impl.client.CloseableHttpClient;</span><br><span class="line"><span class="keyword">import</span> org.apache.http.impl.client.HttpClients;</span><br><span class="line"><span class="keyword">import</span> org.apache.http.message.BasicNameValuePair;</span><br><span class="line"><span class="keyword">import</span> org.apache.http.util.EntityUtils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.UnsupportedEncodingException;</span><br><span class="line"><span class="keyword">import</span> java.net.URI;</span><br><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HttpClientUtils</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 编码格式。发送编码格式统一用UTF-8</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">ENCODING</span> <span class="operator">=</span> <span class="string">&quot;UTF-8&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 设置连接超时时间，单位毫秒。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Integer</span> <span class="variable">CONNECT_TIMEOUT</span> <span class="operator">=</span> <span class="number">6000</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 请求获取数据的超时时间(即响应时间)，单位毫秒。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Integer</span> <span class="variable">SOCKET_TIMEOUT</span> <span class="operator">=</span> <span class="number">6000</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 发送get请求；不带请求头和请求参数</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> url 请求地址</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">doGet</span><span class="params">(String url)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="keyword">return</span> doGet(url, <span class="literal">null</span>, <span class="literal">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 发送get请求；带请求参数</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> url    请求地址</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> params 请求参数集合</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">doGet</span><span class="params">(String url, Map&lt;String, String&gt; params)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="keyword">return</span> doGet(url, <span class="literal">null</span>, params);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 发送get请求；带请求头和请求参数</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> url     请求地址</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> headers 请求头集合</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> params  请求参数集合</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">doGet</span><span class="params">(String url, Map&lt;String, String&gt; headers, Map&lt;String, String&gt; params)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">// 创建httpClient对象</span></span><br><span class="line">        <span class="type">CloseableHttpClient</span> <span class="variable">httpClient</span> <span class="operator">=</span> HttpClients.createDefault();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建访问的地址</span></span><br><span class="line">        <span class="type">URIBuilder</span> <span class="variable">uriBuilder</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">URIBuilder</span>(url);</span><br><span class="line">        <span class="keyword">if</span> (params != <span class="literal">null</span>) &#123;</span><br><span class="line">            Set&lt;Map.Entry&lt;String, String&gt;&gt; entrySet = params.entrySet();</span><br><span class="line">            <span class="keyword">for</span> (Map.Entry&lt;String, String&gt; entry : entrySet) &#123;</span><br><span class="line">                uriBuilder.setParameter(entry.getKey(), entry.getValue());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建http对象</span></span><br><span class="line">        <span class="type">HttpGet</span> <span class="variable">httpGet</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HttpGet</span>(uriBuilder.build());</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * setConnectTimeout：设置连接超时时间，单位毫秒。</span></span><br><span class="line"><span class="comment">         * setConnectionRequestTimeout：设置从connect Manager(连接池)获取Connection</span></span><br><span class="line"><span class="comment">         * 超时时间，单位毫秒。这个属性是新加的属性，因为目前版本是可以共享连接池的。</span></span><br><span class="line"><span class="comment">         * setSocketTimeout：请求获取数据的超时时间(即响应时间)，单位毫秒。</span></span><br><span class="line"><span class="comment">         * 如果访问一个接口，多少时间内无法返回数据，就直接放弃此次调用。</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="type">RequestConfig</span> <span class="variable">requestConfig</span> <span class="operator">=</span> RequestConfig.custom().setConnectTimeout(CONNECT_TIMEOUT).setSocketTimeout(SOCKET_TIMEOUT).build();</span><br><span class="line">        httpGet.setConfig(requestConfig);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 设置请求头</span></span><br><span class="line">        packageHeader(headers, httpGet);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建httpResponse对象</span></span><br><span class="line">        <span class="type">CloseableHttpResponse</span> <span class="variable">httpResponse</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//响应结果</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">result</span> <span class="operator">=</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 执行请求</span></span><br><span class="line">            httpResponse = httpClient.execute(httpGet);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 获取返回结果</span></span><br><span class="line">            <span class="keyword">if</span> (httpResponse != <span class="literal">null</span> &amp;&amp; httpResponse.getStatusLine() != <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (httpResponse.getEntity() != <span class="literal">null</span>) &#123;</span><br><span class="line">                    result = EntityUtils.toString(httpResponse.getEntity(), ENCODING);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="comment">// 释放资源</span></span><br><span class="line">            release(httpResponse, httpClient);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 发送post请求；不带请求头和请求参数</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> url 请求地址</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">doPost</span><span class="params">(String url)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="keyword">return</span> doPost(url, <span class="literal">null</span>, <span class="literal">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 发送post请求；带请求参数</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> url    请求地址</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> params 参数集合</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">doPost</span><span class="params">(String url, Map&lt;String, Object&gt; params)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="keyword">return</span> doPost(url, <span class="literal">null</span>, params);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 发送post请求；带请求头和请求参数</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> url     请求地址</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> headers 请求头集合</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> params  请求参数集合</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">doPost</span><span class="params">(String url, Map&lt;String, String&gt; headers, Map&lt;String, Object&gt; params)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">// 创建httpClient对象</span></span><br><span class="line">        <span class="type">CloseableHttpClient</span> <span class="variable">httpClient</span> <span class="operator">=</span> HttpClients.createDefault();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建http对象</span></span><br><span class="line">        <span class="type">HttpPost</span> <span class="variable">httpPost</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HttpPost</span>(url);</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * setConnectTimeout：设置连接超时时间，单位毫秒。</span></span><br><span class="line"><span class="comment">         * setConnectionRequestTimeout：设置从connect Manager(连接池)获取Connection</span></span><br><span class="line"><span class="comment">         * 超时时间，单位毫秒。这个属性是新加的属性，因为目前版本是可以共享连接池的。</span></span><br><span class="line"><span class="comment">         * setSocketTimeout：请求获取数据的超时时间(即响应时间)，单位毫秒。 如果访问一个接口，多少时间内无法返回数据，就直接放弃此次调用。</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="type">RequestConfig</span> <span class="variable">requestConfig</span> <span class="operator">=</span> RequestConfig.custom().setConnectTimeout(CONNECT_TIMEOUT).setSocketTimeout(SOCKET_TIMEOUT).build();</span><br><span class="line">        httpPost.setConfig(requestConfig);</span><br><span class="line">        <span class="comment">// 设置请求头</span></span><br><span class="line">        <span class="comment">/*httpPost.setHeader(&quot;Cookie&quot;, &quot;&quot;);</span></span><br><span class="line"><span class="comment">        httpPost.setHeader(&quot;Connection&quot;, &quot;keep-alive&quot;);</span></span><br><span class="line"><span class="comment">        httpPost.setHeader(&quot;Accept&quot;, &quot;application/json&quot;);</span></span><br><span class="line"><span class="comment">        httpPost.setHeader(&quot;Accept-Language&quot;, &quot;zh-CN,zh;q=0.9&quot;);</span></span><br><span class="line"><span class="comment">        httpPost.setHeader(&quot;Accept-Encoding&quot;, &quot;gzip, deflate, br&quot;);</span></span><br><span class="line"><span class="comment">        httpPost.setHeader(&quot;User-Agent&quot;, &quot;Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/65.0.3325.181 Safari/537.36&quot;);*/</span></span><br><span class="line">        packageHeader(headers, httpPost);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 封装请求参数</span></span><br><span class="line">        packageParam(params, httpPost);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建httpResponse对象</span></span><br><span class="line">        <span class="type">CloseableHttpResponse</span> <span class="variable">httpResponse</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">        <span class="type">String</span> <span class="variable">result</span> <span class="operator">=</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 执行请求</span></span><br><span class="line">            httpResponse = httpClient.execute(httpPost);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 获取返回结果</span></span><br><span class="line">            <span class="keyword">if</span> (httpResponse != <span class="literal">null</span> &amp;&amp; httpResponse.getStatusLine() != <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (httpResponse.getEntity() != <span class="literal">null</span>) &#123;</span><br><span class="line">                    result = EntityUtils.toString(httpResponse.getEntity(), ENCODING);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="comment">// 释放资源</span></span><br><span class="line">            release(httpResponse, httpClient);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@Title</span>:POST请求</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@Decription</span>:发送POST请求，data参数只支持JSON对象（com.alibaba.fastjson.JSONObject）</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> url  请求地址</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> data 只支持JSON对象（com.alibaba.fastjson.JSONObject）</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> String</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">sendPost</span><span class="params">(String url, JSONObject data)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="comment">// 设置默认请求头</span></span><br><span class="line">        Map&lt;String, String&gt; headers = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        headers.put(<span class="string">&quot;content-type&quot;</span>, <span class="string">&quot;application/json&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> doPostByJSON(url, headers, data, ENCODING);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@Title</span>:POST请求</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> url    请求地址</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> params Map集合(输入参数要求为JSON对象)</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> String</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">sendPost</span><span class="params">(String url, Map&lt;String, Object&gt; params)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="comment">// 设置默认请求头</span></span><br><span class="line">        Map&lt;String, String&gt; headers = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        headers.put(<span class="string">&quot;Content-Type&quot;</span>, <span class="string">&quot;application/json&quot;</span>);</span><br><span class="line">        <span class="comment">// 将map转成json</span></span><br><span class="line">        <span class="type">JSONObject</span> <span class="variable">data</span> <span class="operator">=</span> JSONObject.parseObject(JSON.toJSONString(params));</span><br><span class="line">        <span class="keyword">return</span> doPostByJSON(url, headers, data, ENCODING);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@Title</span> POST请求</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> url     请求地址</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> headers Map集合的请求头信息</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> data    只支持JSON对象（com.alibaba.fastjson.JSONObject）</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> String</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">sendPost</span><span class="params">(String url, Map&lt;String, String&gt; headers, JSONObject data)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="keyword">return</span> doPostByJSON(url, headers, data, ENCODING);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@Title</span> POST请求（默认编码：UTF-8）</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> url     请求地址</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> headers Map集合的请求头参数</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> params  Map集合(输入参数为JSON对象)</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> String</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">sendPost</span><span class="params">(String url, Map&lt;String, String&gt; headers, Map&lt;String, String&gt; params)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="comment">// 将map转成json</span></span><br><span class="line">        <span class="type">JSONObject</span> <span class="variable">data</span> <span class="operator">=</span> JSONObject.parseObject(JSON.toJSONString(params));</span><br><span class="line">        <span class="keyword">return</span> doPostByJSON(url, headers, data, ENCODING);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@Title</span>: sendPost</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@Description</span>: 发送post请求</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> url      请求地址</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> headers  请求头</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> data     请求实体</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> encoding 字符集</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> String</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> IOException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String <span class="title function_">doPostByJSON</span><span class="params">(String url, Map&lt;String, String&gt; headers, JSONObject data, String encoding)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="comment">// 请求返回结果</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">resultJson</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="comment">// 创建Client</span></span><br><span class="line">        <span class="type">CloseableHttpClient</span> <span class="variable">client</span> <span class="operator">=</span> HttpClients.createDefault();</span><br><span class="line">        <span class="comment">// 发送请求,返回响应对象</span></span><br><span class="line">        <span class="type">CloseableHttpResponse</span> <span class="variable">response</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="comment">// 创建HttpPost对象</span></span><br><span class="line">        <span class="type">HttpPost</span> <span class="variable">httpPost</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HttpPost</span>();</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * setConnectTimeout：设置连接超时时间，单位毫秒。</span></span><br><span class="line"><span class="comment">         * setConnectionRequestTimeout：设置从connect Manager(连接池)获取Connection</span></span><br><span class="line"><span class="comment">         * 超时时间，单位毫秒。这个属性是新加的属性，因为目前版本是可以共享连接池的。</span></span><br><span class="line"><span class="comment">         * setSocketTimeout：请求获取数据的超时时间(即响应时间)，单位毫秒。</span></span><br><span class="line"><span class="comment">         * 如果访问一个接口，多少时间内无法返回数据，就直接放弃此次调用。</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="type">RequestConfig</span> <span class="variable">requestConfig</span> <span class="operator">=</span> RequestConfig.custom().setConnectTimeout(CONNECT_TIMEOUT).setSocketTimeout(SOCKET_TIMEOUT).build();</span><br><span class="line">        httpPost.setConfig(requestConfig);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 设置请求地址</span></span><br><span class="line">            httpPost.setURI(<span class="keyword">new</span> <span class="title class_">URI</span>(url));</span><br><span class="line">            <span class="comment">// 设置请求头</span></span><br><span class="line">            packageHeader(headers, httpPost);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 设置实体</span></span><br><span class="line">            httpPost.setEntity(<span class="keyword">new</span> <span class="title class_">StringEntity</span>(JSON.toJSONString(data)));</span><br><span class="line">            <span class="comment">// 发送请求,返回响应对象</span></span><br><span class="line">            response = client.execute(httpPost);</span><br><span class="line">            <span class="comment">// 获取响应状态</span></span><br><span class="line">            <span class="type">int</span> <span class="variable">status</span> <span class="operator">=</span> response.getStatusLine().getStatusCode();</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (status != HttpStatus.SC_OK) &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;响应失败，状态码：&quot;</span> + status);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 获取响应结果</span></span><br><span class="line">            resultJson = EntityUtils.toString(response.getEntity(), encoding);</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            release(response, client);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> resultJson;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * POST请求xml参数</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> url</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> requestDataXml</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> String</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">doPostByXml</span><span class="params">(String url, String requestDataXml)</span> &#123;</span><br><span class="line">        <span class="type">CloseableHttpClient</span> <span class="variable">httpClient</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">CloseableHttpResponse</span> <span class="variable">response</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">result</span> <span class="operator">=</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//创建httpClient实例</span></span><br><span class="line">            httpClient = HttpClients.createDefault();</span><br><span class="line">            <span class="comment">//创建httpPost远程连接实例</span></span><br><span class="line">            <span class="type">HttpPost</span> <span class="variable">httpPost</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HttpPost</span>(url);</span><br><span class="line">            <span class="comment">//配置请求参数实例</span></span><br><span class="line">            <span class="type">RequestConfig</span> <span class="variable">requestConfig</span> <span class="operator">=</span> RequestConfig.custom()</span><br><span class="line">                    .setConnectTimeout(<span class="number">35000</span>)<span class="comment">//设置连接主机服务超时时间</span></span><br><span class="line">                    .setConnectionRequestTimeout(<span class="number">35000</span>)<span class="comment">//设置连接请求超时时间</span></span><br><span class="line">                    .setSocketTimeout(<span class="number">60000</span>)<span class="comment">//设置读取数据连接超时时间</span></span><br><span class="line">                    .build();</span><br><span class="line">            <span class="comment">//为httpPost实例设置配置</span></span><br><span class="line">            httpPost.setConfig(requestConfig);</span><br><span class="line">            <span class="comment">//设置请求参数</span></span><br><span class="line">            httpPost.setEntity(<span class="keyword">new</span> <span class="title class_">StringEntity</span>(requestDataXml,<span class="string">&quot;UTF-8&quot;</span>));</span><br><span class="line">            <span class="comment">//设置请求头内容</span></span><br><span class="line">            httpPost.addHeader(<span class="string">&quot;Content-Type&quot;</span>,<span class="string">&quot;text/xml&quot;</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//执行post请求得到返回对象</span></span><br><span class="line">            response = httpClient.execute(httpPost);</span><br><span class="line">            <span class="comment">//通过返回对象获取数据</span></span><br><span class="line">            <span class="type">HttpEntity</span> <span class="variable">entity</span> <span class="operator">=</span> response.getEntity();</span><br><span class="line">            <span class="comment">//将返回的数据转换为字符串</span></span><br><span class="line">            result = EntityUtils.toString(entity);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="comment">//关闭资源</span></span><br><span class="line">            <span class="keyword">if</span> (<span class="literal">null</span> != response) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    response.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (<span class="literal">null</span> != httpClient) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    httpClient.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Description: 封装请求头</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> params</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> httpMethod</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">packageHeader</span><span class="params">(Map&lt;String, String&gt; params, HttpRequestBase httpMethod)</span> &#123;</span><br><span class="line">        <span class="comment">// 封装请求头</span></span><br><span class="line">        <span class="keyword">if</span> (params != <span class="literal">null</span>) &#123;</span><br><span class="line">            Set&lt;Map.Entry&lt;String, String&gt;&gt; entrySet = params.entrySet();</span><br><span class="line">            <span class="keyword">for</span> (Map.Entry&lt;String, String&gt; entry : entrySet) &#123;</span><br><span class="line">                <span class="comment">// 设置到请求头到HttpRequestBase对象中</span></span><br><span class="line">                httpMethod.setHeader(entry.getKey(), entry.getValue());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Description: 封装请求参数</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> params</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> httpMethod</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> UnsupportedEncodingException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">packageParam</span><span class="params">(Map&lt;String, Object&gt; params, HttpEntityEnclosingRequestBase httpMethod)</span></span><br><span class="line">            <span class="keyword">throws</span> UnsupportedEncodingException &#123;</span><br><span class="line">        <span class="comment">// 封装请求参数</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="literal">null</span> != params &amp;&amp; params.size() &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            List&lt;NameValuePair&gt; nvps = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;NameValuePair&gt;();</span><br><span class="line">            Set&lt;Map.Entry&lt;String, Object&gt;&gt; entrySet = params.entrySet();</span><br><span class="line">            <span class="keyword">for</span> (Map.Entry&lt;String, Object&gt; entry : entrySet) &#123;</span><br><span class="line">                nvps.add(<span class="keyword">new</span> <span class="title class_">BasicNameValuePair</span>(entry.getKey(), entry.getValue().toString()));</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 设置到请求的http对象中</span></span><br><span class="line">            httpMethod.setEntity(<span class="keyword">new</span> <span class="title class_">UrlEncodedFormEntity</span>(nvps, ENCODING));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@Title</span>: sendGet</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@Description</span>: 发送get请求</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> url      请求地址</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> params   请求参数</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> encoding 编码</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> String</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> IOException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String <span class="title function_">sendGet</span><span class="params">(String url, Map&lt;String, Object&gt; params, String encoding)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="comment">// 请求结果</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">resultJson</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="comment">// 创建client</span></span><br><span class="line">        <span class="type">CloseableHttpClient</span> <span class="variable">client</span> <span class="operator">=</span> HttpClients.createDefault();</span><br><span class="line">        <span class="comment">//响应对象</span></span><br><span class="line">        <span class="type">CloseableHttpResponse</span> <span class="variable">response</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="comment">// 创建HttpGet</span></span><br><span class="line">        <span class="type">HttpGet</span> <span class="variable">httpGet</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HttpGet</span>();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 创建uri</span></span><br><span class="line">            <span class="type">URIBuilder</span> <span class="variable">builder</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">URIBuilder</span>(url);</span><br><span class="line">            <span class="comment">// 封装参数</span></span><br><span class="line">            <span class="keyword">if</span> (params != <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="keyword">for</span> (String key : params.keySet()) &#123;</span><br><span class="line">                    builder.addParameter(key, params.get(key).toString());</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="type">URI</span> <span class="variable">uri</span> <span class="operator">=</span> builder.build();</span><br><span class="line">            <span class="comment">// 设置请求地址</span></span><br><span class="line">            httpGet.setURI(uri);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//设置配置请求参数</span></span><br><span class="line">            <span class="type">RequestConfig</span> <span class="variable">requestConfig</span> <span class="operator">=</span> RequestConfig.custom()</span><br><span class="line">                    .setConnectTimeout(<span class="number">35000</span>)<span class="comment">//连接主机服务超时时间</span></span><br><span class="line">                    .setConnectionRequestTimeout(<span class="number">35000</span>)<span class="comment">//请求超时时间</span></span><br><span class="line">                    .setSocketTimeout(<span class="number">60000</span>)<span class="comment">//数据读取超时时间</span></span><br><span class="line">                    .build();</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 发送请求，返回响应对象</span></span><br><span class="line">            response = client.execute(httpGet);</span><br><span class="line">            <span class="comment">// 获取响应状态</span></span><br><span class="line">            <span class="type">int</span> <span class="variable">status</span> <span class="operator">=</span> response.getStatusLine().getStatusCode();</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (status != HttpStatus.SC_OK) &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;响应失败，状态码：&quot;</span> + status);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 获取响应数据</span></span><br><span class="line">            resultJson = EntityUtils.toString(response.getEntity(), encoding);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            release(response, client);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> resultJson;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Description: 释放资源</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> httpResponse</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> httpClient</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> IOException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">release</span><span class="params">(CloseableHttpResponse httpResponse, CloseableHttpClient httpClient)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="comment">// 释放资源</span></span><br><span class="line">        <span class="keyword">if</span> (httpResponse != <span class="literal">null</span>) &#123;</span><br><span class="line">            httpResponse.close();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (httpClient != <span class="literal">null</span>) &#123;</span><br><span class="line">            httpClient.close();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="发送请求—执行方法"><a href="#发送请求—执行方法" class="headerlink" title="发送请求—执行方法"></a>发送请求—执行方法</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//使用HttpClientUtil工具类，向远程接口api发送http请求</span></span><br><span class="line">Map&lt;String, String&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">map.put(<span class="string">&quot;参数1&quot;</span>, xxx);</span><br><span class="line">map.put(<span class="string">&quot;参数2&quot;</span>, xxx);</span><br><span class="line"><span class="type">String</span> <span class="variable">url</span> <span class="operator">=</span> <span class="string">&quot;https:/xxxx/xxx&quot;</span>;</span><br><span class="line"><span class="type">String</span> <span class="variable">result</span> <span class="operator">=</span> HttpClientUtils.doGet(url, map);</span><br><span class="line"></span><br><span class="line"><span class="comment">//得到result就是返回的值，按需解析</span></span><br></pre></td></tr></table></figure><h3 id="解析—xml"><a href="#解析—xml" class="headerlink" title="解析—xml"></a>解析—xml</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 解析xml需要导包导包 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!--解析xml文档--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.dom4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>dom4j<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.1.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>jaxen<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jaxen<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 验证码=8179</span></span><br><span class="line"><span class="comment">// &#123;</span></span><br><span class="line"><span class="comment">//   &quot;code&quot;:&quot;10000&quot;,</span></span><br><span class="line"><span class="comment">//   &quot;charge&quot;:false,</span></span><br><span class="line"><span class="comment">//   &quot;remain&quot;:0,</span></span><br><span class="line"><span class="comment">//   &quot;msg&quot;:&quot;查询成功&quot;,</span></span><br><span class="line"><span class="comment">//   &quot;result&quot;:</span></span><br><span class="line"><span class="comment">//       &quot;&lt;?xml version=\&quot;1.0\&quot; encoding=\&quot;utf-8\&quot; ?&gt;</span></span><br><span class="line"><span class="comment">//       &lt;returnsms&gt;\n </span></span><br><span class="line"><span class="comment">//           &lt;returnstatus&gt;Success&lt;/returnstatus&gt;\n </span></span><br><span class="line"><span class="comment">//           &lt;message&gt;ok&lt;/message&gt;\n </span></span><br><span class="line"><span class="comment">//           &lt;remainpoint&gt;-7858793&lt;/remainpoint&gt;\n </span></span><br><span class="line"><span class="comment">//           &lt;taskID&gt;202355604&lt;/taskID&gt;\n </span></span><br><span class="line"><span class="comment">//           &lt;successCounts&gt;1&lt;/successCounts&gt;</span></span><br><span class="line"><span class="comment">//       &lt;/returnsms&gt;&quot;,</span></span><br><span class="line"><span class="comment">//   &quot;requestId&quot;:&quot;77cf3aca8621440c94f9de9efd1450b5&quot;</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 例如要解析以上json中的xml字段，需要获取result中的&lt;returnstatus&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 返回的是resultObject变量为例子</span></span><br><span class="line"><span class="type">String</span> <span class="variable">innerResult</span> <span class="operator">=</span> resultObject.getString(<span class="string">&quot;result&quot;</span>);</span><br><span class="line"><span class="comment">//将xml字符串转换为xml文档对象（导包）</span></span><br><span class="line"><span class="type">Document</span> <span class="variable">document</span> <span class="operator">=</span> DocumentHelper.parseText(innerResult);</span><br><span class="line"><span class="comment">//获取根元素returnsms</span></span><br><span class="line"><span class="type">Element</span> <span class="variable">root</span> <span class="operator">=</span> document.getRootElement();</span><br><span class="line"><span class="comment">//获取元素returnstatus</span></span><br><span class="line"><span class="type">Node</span> <span class="variable">status</span> <span class="operator">=</span> root.selectSingleNode(<span class="string">&quot;returnstatus&quot;</span>);</span><br><span class="line"><span class="comment">//输出节点文本</span></span><br><span class="line"><span class="type">String</span> <span class="variable">sendStatus</span> <span class="operator">=</span> status.getText();</span><br><span class="line"><span class="comment">//Success</span></span><br></pre></td></tr></table></figure><h3 id="解析—json"><a href="#解析—json" class="headerlink" title="解析—json"></a>解析—json</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// &#123;</span></span><br><span class="line"><span class="comment">//     &quot;code&quot;: &quot;10000&quot;,</span></span><br><span class="line"><span class="comment">//     &quot;charge&quot;: false,</span></span><br><span class="line"><span class="comment">//     &quot;remain&quot;: 0,</span></span><br><span class="line"><span class="comment">//     &quot;msg&quot;: &quot;查询成功&quot;,</span></span><br><span class="line"><span class="comment">//     &quot;result&quot;: &#123;</span></span><br><span class="line"><span class="comment">//         &quot;chargeStatus&quot;: 1,</span></span><br><span class="line"><span class="comment">//         &quot;message&quot;: &quot;成功&quot;,</span></span><br><span class="line"><span class="comment">//         &quot;data&quot;: &#123;</span></span><br><span class="line"><span class="comment">//             &quot;orderNo&quot;: &quot;01xxxx92524xxxx933&quot;,</span></span><br><span class="line"><span class="comment">//             &quot;handleTime&quot;: &quot;2021-xx-xx 19:14:08&quot;,</span></span><br><span class="line"><span class="comment">//             &quot;result&quot;: &quot;01&quot;,</span></span><br><span class="line"><span class="comment">//             &quot;remark&quot;: &quot;一致&quot;,</span></span><br><span class="line"><span class="comment">//             &quot;province&quot;: &quot;广东省&quot;,</span></span><br><span class="line"><span class="comment">//             &quot;city&quot;: &quot;广州市&quot;,</span></span><br><span class="line"><span class="comment">//             &quot;country&quot;: &quot;越秀区&quot;,</span></span><br><span class="line"><span class="comment">//             &quot;birthday&quot;: &quot;19xxxx0x&quot;,</span></span><br><span class="line"><span class="comment">//             &quot;age&quot;: &quot;xx&quot;,</span></span><br><span class="line"><span class="comment">//             &quot;gender&quot;: &quot;1&quot;</span></span><br><span class="line"><span class="comment">//         &#125;,</span></span><br><span class="line"><span class="comment">//         &quot;code&quot;: &quot;200000&quot;</span></span><br><span class="line"><span class="comment">//     &#125;</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 例如返回的是resultObject变量，需要解析，获取result中的message值</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// string ---&gt; json 类型转换</span></span><br><span class="line"><span class="comment">// JSONObject resultObject = (JSONObject) JSON.parse(result);</span></span><br><span class="line"></span><br><span class="line"><span class="type">String</span> <span class="variable">message</span> <span class="operator">=</span> resultObject.getJSONObject(<span class="string">&quot;result&quot;</span>).getString(<span class="string">&quot;message&quot;</span>);</span><br><span class="line"><span class="comment">//&quot;成功&quot;</span></span><br></pre></td></tr></table></figure><h2 id="注解"><a href="#注解" class="headerlink" title="注解"></a>注解</h2><p>Spring + SpringMVC + SpringBoot </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line">创建对象的：</span><br><span class="line"><span class="meta">@Controller</span>: 放在类的上面，创建控制器对象，注入到容器中</span><br><span class="line"><span class="meta">@RestController</span>: 放在类的上面，创建控制器对象，注入到容器中。</span><br><span class="line">             作用：复合注解是<span class="meta">@Controller</span> , <span class="meta">@ResponseBody</span>, 使用这个注解类的，里面的控制器方法的返回值都是数据</span><br><span class="line"></span><br><span class="line"><span class="meta">@Service</span> ： 放在业务层的实现类上面，创建service对象，注入到容器</span><br><span class="line"><span class="meta">@Repository</span> : 放在dao层的实现类上面，创建dao对象，放入到容器。 没有使用这个注解，是因为现在使用MyBatis框架，</span><br><span class="line">dao对象是MyBatis通过代理生成的。 不需要使用<span class="meta">@Repository</span>、 所以没有使用。</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span>:  放在类的上面，创建此类的对象，放入到容器中。 </span><br><span class="line"></span><br><span class="line">赋值的：</span><br><span class="line"><span class="meta">@Value</span> ： 简单类型的赋值， 例如 在属性的上面使用<span class="meta">@Value(&quot;李四&quot;)</span> <span class="keyword">private</span> String name</span><br><span class="line">          还可以使用<span class="meta">@Value</span>,获取配置文件者的数据（properties或yml）。 </span><br><span class="line">          <span class="meta">@Value(&quot;$&#123;server.port&#125;&quot;)</span> <span class="keyword">private</span> Integer port</span><br><span class="line"></span><br><span class="line"><span class="meta">@Autowired</span>: 引用类型赋值自动注入的，支持byName, byType. 默认是byType 。 放在属性的上面，也可以放在构造             方法的上面。 推荐是放在构造方法的上面</span><br><span class="line"><span class="meta">@Qualifer</span>:  给引用类型赋值，使用byName方式。   </span><br><span class="line">            <span class="meta">@Autowird</span>, <span class="meta">@Qualifer</span>都是Spring框架提供的。</span><br><span class="line"></span><br><span class="line"><span class="meta">@Resource</span> ： 来自jdk中的定义， javax.annotation。 实现引用类型的自动注入， 支持byName, byType.</span><br><span class="line">             默认是byName, 如果byName失败， 再使用byType注入。 在属性上面使用</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">其他：</span><br><span class="line"><span class="meta">@Configuration</span> ： 放在类的上面，表示这是个配置类，相当于xml配置文件</span><br><span class="line"></span><br><span class="line"><span class="meta">@Bean</span>：放在方法的上面， 把方法的返回值对象，注入到spring容器中。</span><br><span class="line"></span><br><span class="line"><span class="meta">@ImportResource</span> ： 加载其他的xml配置文件， 把文件中的对象注入到spring容器中</span><br><span class="line"></span><br><span class="line"><span class="meta">@PropertySource</span> ： 读取其他的properties属性配置文件</span><br><span class="line"></span><br><span class="line"><span class="meta">@ComponentScan</span>： 扫描器 ，指定包名，扫描注解的</span><br><span class="line"></span><br><span class="line"><span class="meta">@ResponseBody</span>: 放在方法的上面，表示方法的返回值是数据， 不是视图</span><br><span class="line"><span class="meta">@RequestBody</span> : 把请求体中的数据，读取出来， 转为java对象使用。</span><br><span class="line"></span><br><span class="line"><span class="meta">@ControllerAdvice</span>:  控制器增强， 放在类的上面， 表示此类提供了方法，可以对controller增强功能。</span><br><span class="line"></span><br><span class="line"><span class="meta">@ExceptionHandler</span> : 处理异常的，放在方法的上面</span><br><span class="line"></span><br><span class="line"><span class="meta">@Transcational</span> :  处理事务的， 放在service实现类的<span class="keyword">public</span>方法上面， 表示此方法有事务</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">SpringBoot中使用的注解</span><br><span class="line">    </span><br><span class="line"><span class="meta">@SpringBootApplication</span> ： 放在启动类上面， 包含了<span class="meta">@SpringBootConfiguration</span></span><br><span class="line">                          <span class="meta">@EnableAutoConfiguration</span>， <span class="meta">@ComponentScan</span></span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">MyBatis相关的注解</span><br><span class="line"></span><br><span class="line"><span class="meta">@Mapper</span> ： 放在类的上面 ， 让MyBatis找到接口， 创建他的代理对象    </span><br><span class="line"><span class="meta">@MapperScan</span> :放在主类的上面 ， 指定扫描的包， 把这个包中的所有接口都创建代理对象。 对象注入到容器中</span><br><span class="line"><span class="meta">@Param</span> ： 放在dao接口的方法的形参前面， 作为命名参数使用的。</span><br><span class="line">    </span><br><span class="line">Dubbo注解</span><br><span class="line"><span class="meta">@DubboService</span>: 在提供者端使用的，暴露服务的， 放在接口的实现类上面</span><br><span class="line"><span class="meta">@DubboReference</span>:  在消费者端使用的， 引用远程服务， 放在属性上面使用。</span><br><span class="line"><span class="meta">@EnableDubbo</span> : 放在主类上面， 表示当前引用启用Dubbo功能。</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="github搜索"><a href="#github搜索" class="headerlink" title="github搜索"></a>github搜索</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">in:name 内容关键字</span><br><span class="line">stars 点赞数</span><br><span class="line">pushed 更新时间</span><br><span class="line">forks 复制数量</span><br><span class="line"></span><br><span class="line">例子：关键字包含springboot，stars数量大于1k，更新时间大于2021-10-02的，forks大于1k的，搜索条件是一层层递进的</span><br><span class="line">in:name springboot stars:&gt;1000 pushed:&gt;2021-10-02 forks:&gt;1000</span><br></pre></td></tr></table></figure><h2 id="支付"><a href="#支付" class="headerlink" title="支付"></a>支付</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- jsp需要导入的包 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>javax.servlet-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.0.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jstl<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 表单自动提交</span></span><br><span class="line">&lt;script&gt;<span class="variable language_">document</span>.<span class="property">forms</span>[<span class="number">0</span>].<span class="title function_">submit</span>();&lt;/script&gt;</span><br></pre></td></tr></table></figure><h3 id="支付宝支付接口"><a href="#支付宝支付接口" class="headerlink" title="支付宝支付接口"></a>支付宝支付接口</h3><p>支付宝开发平台<br><a href="https://openhome.alipay.com/platform/home.htm">https://openhome.alipay.com/platform/home.htm</a></p><p>进入文档中心<br><a href="https://openhome.alipay.com/docCenter/docCenter.htm?from=openhomemenu">https://openhome.alipay.com/docCenter/docCenter.htm?from=openhomemenu</a></p><p>搜索电脑网站产品支付<br><a href="https://opendocs.alipay.com/open/270/105898">https://opendocs.alipay.com/open/270/105898</a></p><p>进入开发助手，下载开发助手工具生成密钥，apikey等<br>保存应用公钥，应用私钥，在沙箱中生成支付宝公钥，appid等<br><a href="https://opendocs.alipay.com/open/291/introduce">https://opendocs.alipay.com/open/291/introduce</a></p><h3 id="快钱"><a href="#快钱" class="headerlink" title="快钱"></a>快钱</h3><p>pc端支付，开发者平台：<a href="https://open.99bill.com/menu!access.do?menuClass=1&amp;mid=1&amp;pid=1">https://open.99bill.com/menu!access.do?menuClass=1&amp;mid=1&amp;pid=1</a></p><h2 id="Web认证"><a href="#Web认证" class="headerlink" title="Web认证"></a>Web认证</h2><h3 id="Cookie-Session"><a href="#Cookie-Session" class="headerlink" title="Cookie-Session"></a>Cookie-Session</h3><p>Cookie认证机制就是客户端发送请求时会在服务端创建一个Session对象，同时在客户端的浏览器端创建了一个Cookie对象；通过客户端带上来Cookie对象来与服务器端的session对象匹配来实现状态管理的。默认的，当我们关闭浏览器的时候，cookie会被删除。</p><h3 id="Token-Auth"><a href="#Token-Auth" class="headerlink" title="Token-Auth"></a>Token-Auth</h3><ul><li><strong>支持跨域访问</strong>: Cookie是不允许垮域访问的，Token传输的用户认证信息通过HTTP头传输,不存在跨域</li><li><strong>无状态</strong>:Token机制在服务端不需要存储session信息，因为Token 自身包含了所有登录用户的信息，只需要在客户端的cookie或本地介质存储状态信息.</li><li><strong>解耦特性</strong>: 不需要绑定到一个特定的身份验证方案。Token可以在任何地方生成，只要在你的API被调用的时候，你可以进行Token生成调用即可.</li><li><strong>更适用于移动应用</strong>: 当你的客户端是一个原生平台（iOS, Android，Windows 8等）时，Cookie是不被支持的（你需要通过Cookie容器进行处理），这时采用Token认证机制就会简单得多。</li><li><strong>CSRF</strong>:因为不再依赖于Cookie，所以你就不需要考虑对CSRF（跨站请求伪造）的防范。</li><li><strong>基于标准化</strong>:你的API可以采用标准化的 JSON Web Token (JWT). 这个标准已经存在多个后端库（.NET, Ruby, Java,Python, PHP）</li></ul><h4 id="基于JWT的Token认证机制"><a href="#基于JWT的Token认证机制" class="headerlink" title="基于JWT的Token认证机制"></a>基于JWT的Token认证机制</h4><p>JSON Web Token（JWT）是一个非常轻巧的规范。这个规范允许我们使用JWT在用户和服务器之间传递安全可靠的信息。</p><h4 id="组成"><a href="#组成" class="headerlink" title="组成"></a>组成</h4><p>一个JWT实际上就是一个字符串，它由三部分组成，<code>头部</code>、<code>载荷</code>与<code>签名</code>。</p><ul><li><p>头部（Header）<br>  JWT需要一个头部，头部用于描述关于该JWT的最基本的信息，例如其类型以及签名所用的算法等。这也可以被表示成一个JSON对象。</p>  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123; &quot;type&quot;: &quot;JWT&quot;, &quot;alg&quot;: &quot;HS256&quot; &#125;</span><br></pre></td></tr></table></figure></li><li><p>载荷(Palyload)</p>  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&quot;sub&quot;:&quot;accp&quot;,&quot;name&quot;:&quot;gdglcadmin&quot;,&quot;roles&quot;:&quot;admin&quot;  &#125;</span><br></pre></td></tr></table></figure></li><li><p>签名（Signature）<br>  这个部分需要base64加密后的header和base64加密后的payload使用.连接组成的字符串，然后通过header中声明的加密方式进行加盐secret组合加密，然后就构成了jwt的第三部分。</p>  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 生成了如下的结果： --&gt;</span><br><span class="line">eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJmcm9tX3VzZXIiOiJCIiwidGFyZ2V0X3VzZXIiOiJBIn0.rSWamyAYwuHCo7IFAgd1oRpSP7nzL7BF5t7ItqpKViM</span><br></pre></td></tr></table></figure></li></ul><h4 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h4><p>官方文档：<a href="https://github.com/jwtk/jjwt">https://github.com/jwtk/jjwt</a><br>Java中使用JJWT开源库；JJWT实现了JWT, JWS, JWE 和 JWA RFC规范；</p><ol><li><p>导包</p> <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.jsonwebtoken<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jjwt<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.9.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>调用类库实现token</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">createJwtToken</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">long</span> start=System.currentTimeMillis();</span><br><span class="line">    <span class="type">long</span> exp=start+<span class="number">1000</span>*<span class="number">60</span>;  <span class="comment">//1分钟过期</span></span><br><span class="line"></span><br><span class="line">    <span class="type">JwtBuilder</span> <span class="variable">password</span> <span class="operator">=</span> Jwts.builder().setId(<span class="string">&quot;999&quot;</span>)<span class="comment">//id</span></span><br><span class="line">            .setSubject(<span class="string">&quot;peng&quot;</span>)<span class="comment">//主体</span></span><br><span class="line">            .setIssuedAt(<span class="keyword">new</span> <span class="title class_">Date</span>())<span class="comment">//开始时间</span></span><br><span class="line">            .setExpiration(<span class="keyword">new</span> <span class="title class_">Date</span>(exp))<span class="comment">//结束时间</span></span><br><span class="line">            .claim(<span class="string">&quot;city&quot;</span>, <span class="string">&quot;guangzhou&quot;</span>)<span class="comment">//自定义cliam添加角色信息,可多个</span></span><br><span class="line">            .claim(<span class="string">&quot;gender&quot;</span>, <span class="string">&quot;male&quot;</span>)</span><br><span class="line">            .signWith(SignatureAlgorithm.HS256, <span class="string">&quot;io.peng&quot;</span>);<span class="comment">//签名密钥</span></span><br><span class="line"></span><br><span class="line">    System.out.println(password.compact());</span><br><span class="line">    <span class="comment">// eyJhbGciOiJIUzI1NiJ9.eyJqdGkiOiI5OTkiLCJzdWIiOiJwZW5nIiwiaWF0IjoxNjM5MzA2OTE4LCJleHAiOjE2MzkzMDY5NzcsImNpdHkiOiJndWFuZ3pob3UiLCJnZW5kZXIiOiJtYWxlIn0.1aPl7iLj0Gu4F1Sw3xkSMTdmTCOKY9VuA_0fWRRZn2I</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>解析token，获取用户信息</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">parseToken</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">token</span> <span class="operator">=</span> <span class="string">&quot;eyJhbGciOiJIUzI1NiJ9.eyJqdGkiOiI5OTkiLCJzdWIiOiJwZW5nIiwiaWF0IjoxNjM5MzA2OTE4LCJleHAiOjE2MzkzMDY5NzcsImNpdHkiOiJndWFuZ3pob3UiLCJnZW5kZXIiOiJtYWxlIn0.1aPl7iLj0Gu4F1Sw3xkSMTdmTCOKY9VuA_0fWRRZn2I&quot;</span>;</span><br><span class="line">    <span class="type">Claims</span> <span class="variable">body</span> <span class="operator">=</span> Jwts.parser().setSigningKey(<span class="string">&quot;io.peng&quot;</span>)<span class="comment">//使用创建时的密钥</span></span><br><span class="line">            .parseClaimsJws(token).getBody();</span><br><span class="line"></span><br><span class="line">    System.out.println(body.getId());</span><br><span class="line">    System.out.println(body.getSubject());</span><br><span class="line">    System.out.println(body.getIssuedAt());</span><br><span class="line">    System.out.println(body);</span><br><span class="line">    <span class="comment">//解析载荷</span></span><br><span class="line">    String city=(String)body.get(<span class="string">&quot;city&quot;</span>);</span><br><span class="line">    System.out.println(city);</span><br><span class="line">    <span class="comment">//999</span></span><br><span class="line">    <span class="comment">//peng</span></span><br><span class="line">    <span class="comment">//Sun Dec 12 19:03:20 CST 2021</span></span><br><span class="line">    <span class="comment">//&#123;jti=999, sub=peng, iat=1639307000, exp=1639307059, city=guangzhou, gender=male&#125;</span></span><br><span class="line">    <span class="comment">//guangzhou</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h2 id="request属性"><a href="#request属性" class="headerlink" title="request属性"></a>request属性</h2><h3 id="getParameter-和getAttribute"><a href="#getParameter-和getAttribute" class="headerlink" title="getParameter()和getAttribute()"></a>getParameter()和getAttribute()</h3><p>（1）request.getParameter()取得是通过容器的实现来取得通过类似post，get等方式传入的数据，request.setAttribute()和getAttribute()只是在web容器内部流转，仅仅是请求处理阶段。</p><p>（2）request.getParameter()方法传递的数据，会从Web客户端传到Web服务器端，代表HTTP请求数据。request.getParameter()方法返回String类型的数据。</p><p>request.setAttribute()和getAttribute()方法传递的数据只会存在于Web容器内部</p><p>还有一点就是，HttpServletRequest类有setAttribute()方法，而没有setParameter()方法。</p><p>例子1：假如两个WEB页面间为链接关系时，就是说要从1.jsp链接到2.jsp时，被链接的是2.jsp可以通过getParameter()方法来获得请求参数.<code>getParameter()</code></p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- jsp1 --&gt;</span><br><span class="line">&lt;form name=<span class="string">&quot;form1&quot;</span> method=<span class="string">&quot;post&quot;</span> action=<span class="string">&quot;2.jsp&quot;</span>&gt;</span><br><span class="line">请输入用户姓名：&lt;input type=<span class="string">&quot;text&quot;</span> name=<span class="string">&quot;username&quot;</span>&gt;</span><br><span class="line">&lt;input type=<span class="string">&quot;submit&quot;</span> name=<span class="string">&quot;Submit&quot;</span> value=<span class="string">&quot;提交&quot;</span>&gt;</span><br><span class="line">&lt;/form&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- <span class="number">2.</span>jsp中通过request.getParameter(<span class="string">&quot;username&quot;</span>)方法来获得请求参数username: --&gt;</span><br><span class="line"></span><br><span class="line">&lt; % String username=request.getParameter(<span class="string">&quot;username&quot;</span>); %&gt;</span><br></pre></td></tr></table></figure><hr><p>例子2：但是如果两个WEB间为转发关系时，转发目的WEB可以用getAttribute()方法来和转发源WEB共享request范围内的数据，<code>getAttribute()</code></p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;%</span><br><span class="line">String username=request.getParameter(<span class="string">&quot;username&quot;</span>);</span><br><span class="line">request.setAttribute(<span class="string">&quot;username&quot;</span>，username);</span><br><span class="line">%&gt;</span><br><span class="line">&lt;jsp:forward page=<span class="string">&quot;2.jsp&quot;</span> /&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- 在<span class="number">2.</span>jsp中通过getAttribute()方法获得用户名字: --&gt;</span><br><span class="line">&lt;% String username=(String)request.getAttribute(<span class="string">&quot;username&quot;</span>); %&gt;</span><br></pre></td></tr></table></figure><h3 id="getHeader"><a href="#getHeader" class="headerlink" title="getHeader()"></a>getHeader()</h3><h2 id="sql怎么根据字段找表"><a href="#sql怎么根据字段找表" class="headerlink" title="sql怎么根据字段找表"></a>sql怎么根据字段找表</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">table_NAME</span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">INFORMATION_SCHEMA.COLUMNS</span><br><span class="line"><span class="keyword">where</span></span><br><span class="line">COLUMN_NAME <span class="operator">=</span> <span class="string">&#x27;carid&#x27;</span></span><br><span class="line"><span class="keyword">AND</span></span><br><span class="line">TABLE_SCHEMA <span class="operator">=</span> <span class="string">&#x27;zcglxt&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- carid：字段名</span></span><br><span class="line"><span class="comment">-- zcglxt：数据库名</span></span><br></pre></td></tr></table></figure><h2 id="mysql三元表达式"><a href="#mysql三元表达式" class="headerlink" title="mysql三元表达式"></a>mysql三元表达式</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> </span><br><span class="line">    if(<span class="number">3</span> <span class="operator">&lt;</span> <span class="number">5</span>,<span class="string">&#x27;Condition is true&#x27;</span>,<span class="string">&#x27;Condition is not true&#x27;</span>)</span><br><span class="line"><span class="keyword">as</span></span><br><span class="line">    ConditionalResult;</span><br></pre></td></tr></table></figure><h2 id="mybatis-plus"><a href="#mybatis-plus" class="headerlink" title="mybatis-plus"></a>mybatis-plus</h2><p>UpdateWrapper语句</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">billsService.update(<span class="keyword">new</span> <span class="title class_">UpdateWrapper</span>&lt;Bills&gt;().lambda()</span><br><span class="line">.eq(Bills::getContractNo, id)</span><br><span class="line">.set(Bills::getStatus, State.Delete.getCode()));</span><br><span class="line"><span class="comment">// 等同于sql</span></span><br><span class="line">UPDATE assets_bills SET STATUS=? WHERE (CONTRACT_NO = ?)</span><br><span class="line">-------------------------------------------------------------------------------------------</span><br><span class="line"><span class="type">boolean</span> <span class="variable">result</span> <span class="operator">=</span> <span class="built_in">this</span>.update(<span class="keyword">new</span> <span class="title class_">UpdateWrapper</span>&lt;Contract&gt;().lambda()</span><br><span class="line">.set(Contract::getState, State.Delete.getCode()+<span class="string">&quot;&quot;</span>)</span><br><span class="line">.eq(Contract::getId, id));</span><br><span class="line"><span class="comment">// 等同于sql</span></span><br><span class="line">UPDATE assets_contract SET STATE=? WHERE (ID = ?) </span><br></pre></td></tr></table></figure><h2 id="shell-自启动"><a href="#shell-自启动" class="headerlink" title="shell + 自启动"></a>shell + 自启动</h2><p>每5分钟自适应监听443端口，不存在则执行java -jar命令</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"><span class="keyword">while</span> <span class="literal">true</span></span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">    procnum=`netstat -tulpn | grep :443`</span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$procnum</span>&quot;</span></span><br><span class="line">    <span class="comment">#Port not exist</span></span><br><span class="line">    <span class="keyword">if</span> [ -z <span class="string">&quot;<span class="variable">$procnum</span>&quot;</span> ]; <span class="keyword">then</span></span><br><span class="line">        <span class="built_in">echo</span> <span class="string">&quot;itlaoqi restarting....&quot;</span></span><br><span class="line">        <span class="built_in">nohup</span> java -jar xxxxxx.jar $</span><br><span class="line">    <span class="keyword">fi</span></span><br><span class="line">    <span class="built_in">sleep</span> 300</span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure><h2 id="项目新版本发布脚本"><a href="#项目新版本发布脚本" class="headerlink" title="项目新版本发布脚本"></a>项目新版本发布脚本</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> [ `netstat -nap|grep 20195 | grep -v grep |<span class="built_in">wc</span> -l`  -gt 0 ];<span class="keyword">then</span></span><br><span class="line">      <span class="built_in">kill</span> -9 $(netstat -lnp | grep 20195|awk <span class="string">&#x27;&#123;print $7&#125;&#x27;</span>|<span class="built_in">cut</span> -d/ -f1)</span><br><span class="line">      <span class="built_in">source</span> /etc/profile</span><br><span class="line">      <span class="built_in">echo</span> <span class="string">&#x27;正在启动项目。。。&#x27;</span></span><br><span class="line">      <span class="built_in">cd</span> /opt/jar</span><br><span class="line">      <span class="built_in">nohup</span> java -Xmx1024m -Xms300m -Dfile.encoding=UTF-8 -jar /opt/jar/gxkj-admin-2.0.0-SNAPSHOT.jar &gt; data.log 2&gt;&amp;1 &amp;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="built_in">source</span> /etc/profile</span><br><span class="line">      <span class="built_in">echo</span> <span class="string">&#x27;正在启动项目。。。&#x27;</span></span><br><span class="line">      <span class="built_in">cd</span> /opt/jar</span><br><span class="line">      <span class="built_in">nohup</span> java -Xmx1024m -Xms300m -Dfile.encoding=UTF-8 -jar /opt/jar/gxkj-admin-2.0.0-SNAPSHOT.jar &gt; data.log 2&gt;&amp;1 &amp;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Thymeleaf</title>
      <link href="/posts/2d22.html"/>
      <url>/posts/2d22.html</url>
      
        <content type="html"><![CDATA[<h3 id="Thymeleaf-简介"><a href="#Thymeleaf-简介" class="headerlink" title="Thymeleaf 简介"></a>Thymeleaf 简介</h3><p>Thymeleaf 是一个流行的模板引擎，该模板引擎采用 Java 语言开发 模板引擎是一个技术名词，是跨领域跨平台的概念，在 Java 语言体系下有模板引擎， 在 C#、 PHP 语言体系下也有模板引擎，甚至在 JavaScript 中也会用到模板引擎技术， Java 生 态下的模板引擎有 Thymeleaf 、 Freemaker、 Velocity、 Beetl（国产） 等。 Thymeleaf 对网络环境不存在严格的要求，既能用于 Web 环境下，也能用于非 Web 环 境下。在非 Web 环境下，他能直接显示模板上的静态数据；在 Web 环境下，它能像 Jsp 一 样从后台接收数据并替换掉模板上的静态数据。它是基于 HTML 的，以 HTML 标签为载体， Thymeleaf 要寄托在 HTML 标签下实现。 SpringBoot 集成了 Thymeleaf 模板技术，并且 Spring Boot 官方也推荐使用 Thymeleaf 来 替代 JSP 技术， Thymeleaf 是另外的一种模板技术，它本身并不属于 Spring Boot， Spring Boot 只是很好地集成这种模板技术，作为前端页面的数据展示， 在过去的 Java Web 开发中，我 们往往会选择使用 Jsp 去完成页面的动态渲染， 但是 jsp 需要翻译编译运行，效率低 。</p><p>Thymeleaf 的官方网站： <a href="http://www.thymeleaf.org/">http://www.thymeleaf.org</a> </p><p>Thymeleaf 官方手册： <a href="https://www.thymeleaf.org/doc/tutorials/3.0/usingthymeleaf.html">https://www.thymeleaf.org/doc/tutorials/3.0/usingthymeleaf.html</a>       </p><h3 id="SpringBoot集成Thymeleaf"><a href="#SpringBoot集成Thymeleaf" class="headerlink" title="SpringBoot集成Thymeleaf"></a>SpringBoot集成Thymeleaf</h3><p>在pom文件添加Thymeleaf的依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--SpringBoot 集成 Thymeleaf 的起步依赖--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-thymeleaf<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--SpringBoot 开发 web 项目的起步依赖--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="添加Thymeleaf的配置"><a href="#添加Thymeleaf的配置" class="headerlink" title="添加Thymeleaf的配置"></a>添加Thymeleaf的配置</h3><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#thymeleaf 页面的缓存开关，默认 true 开启缓存</span></span><br><span class="line"><span class="comment">#建议在开发阶段关闭 thymeleaf 页面缓存，目的实时看到页面</span></span><br><span class="line"><span class="attr">spring.thymeleaf.cache</span>=<span class="string">false</span></span><br><span class="line"><span class="comment">#thymeleaf 模版前缀,默认可以不写</span></span><br><span class="line"><span class="attr">spring.thymeleaf.prefix</span>=<span class="string">classpath:/templates/</span></span><br><span class="line"><span class="comment">#thymeleaf 模版后缀,默认可以不写</span></span><br><span class="line"><span class="attr">spring.thymeleaf.suffix</span>=<span class="string">.html</span></span><br></pre></td></tr></table></figure><h3 id="创建控制器，返回html视图的名称"><a href="#创建控制器，返回html视图的名称" class="headerlink" title="创建控制器，返回html视图的名称"></a>创建控制器，返回html视图的名称</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ThymeleafController</span> &#123;</span><br><span class="line">  <span class="meta">@RequestMapping(value = &quot;/index&quot;)</span></span><br><span class="line">  <span class="keyword">public</span> String <span class="title function_">index</span><span class="params">(Model model)</span> &#123;</span><br><span class="line">    model.addAttribute(<span class="string">&quot;data&quot;</span>,<span class="string">&quot;SpringBoot 成功集成 Thymeleaf 模版！ &quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;index&quot;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="展示数据"><a href="#展示数据" class="headerlink" title="展示数据"></a>展示数据</h3><p>在 src/main/resources 的 templates 下建一个 index.html 页面用于</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span> <span class="attr">xmlns:th</span>=<span class="string">&quot;http://www.thymeleaf.org&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>SpringBoot 集成 Thymeleaf<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span> &gt;</span></span><br><span class="line"><span class="comment">&lt;!--Thymeleaf 前端框架以 Html 为载体--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;data&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;data&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;data&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br><span class="line">注 意 ：Springboot使用thymeleaf作为视图展示,</span><br><span class="line">约定将模板文件放置在src/main/resource/templates 目录下，</span><br><span class="line">静态资源放置在 src/main/resource/static 目录下</span><br></pre></td></tr></table></figure><h3 id="Thymeleaf的基本内容"><a href="#Thymeleaf的基本内容" class="headerlink" title="Thymeleaf的基本内容"></a>Thymeleaf的基本内容</h3><h4 id="标准变量表达式"><a href="#标准变量表达式" class="headerlink" title="标准变量表达式"></a>标准变量表达式</h4><p>注意： th:text=”” 是 Thymeleaf 的一个属性，用于文本的显示   </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">语法 $&#123;&#125;</span><br><span class="line">说明 标准变量表达式用于访问容器（ tomcat）上下文环境中的变量，功能和 EL 中的 $&#123;&#125; 相 同。 Thymeleaf 中的变量表达式使用 &#123;变量名&#125; 的方式获取 Controller 中 model 其中的数据</span><br></pre></td></tr></table></figure><h4 id="选择变量表达式"><a href="#选择变量表达式" class="headerlink" title="选择变量表达式"></a>选择变量表达式</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">语法： *&#123;...&#125;</span><br><span class="line">说明</span><br><span class="line">选择变量表达式，也叫星号变量表达式，使用 th:object 属性来绑定对象</span><br><span class="line">选择表达式首先使用 th:object 来绑定后台传来的 User 对象，然后使用 * 来代表这个对象，后面 &#123;&#125; 中的值是此对象中的属性。</span><br><span class="line">选择变量表达式 *&#123;...&#125; 是另一种类似于标准变量表达式 $&#123;...&#125; 表示变量的方法</span><br><span class="line">选择变量表达式在执行时是在选择的对象上求解，而$&#123;...&#125;是在上下文的变量 Model 上求解，这种写法比标准变量表达式繁琐，了解即可</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>展示 User 用户信息（星号表达式,仅在 div 范围内有效）： <span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">th:object</span>=<span class="string">&quot;$&#123;user&#125;&quot;</span>&gt;</span></span><br><span class="line">用户编号： <span class="tag">&lt;<span class="name">span</span> <span class="attr">th:text</span>=<span class="string">&quot;*&#123;id&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">用户姓名： <span class="tag">&lt;<span class="name">span</span> <span class="attr">th:text</span>=<span class="string">&quot;*&#123;name&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">用户手机号： <span class="tag">&lt;<span class="name">span</span> <span class="attr">th:text</span>=<span class="string">&quot;*&#123;phone&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">用户地址： <span class="tag">&lt;<span class="name">span</span> <span class="attr">th:text</span>=<span class="string">&quot;*&#123;address&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>标准变量表达式和选择变量表达式混用<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h3</span>&gt;</span>=======标准变量表达式=======<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">用户编号： <span class="tag">&lt;<span class="name">span</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;user.id&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">用户姓名： <span class="tag">&lt;<span class="name">span</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;user.name&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">用户手机号： <span class="tag">&lt;<span class="name">span</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;user.phone&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">用户地址： <span class="tag">&lt;<span class="name">span</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;user.address&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">h3</span>&gt;</span>=======选择变量表达式=======<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">用户编号： *&#123;user.id&#125; ==&gt; <span class="tag">&lt;<span class="name">span</span> <span class="attr">th:text</span>=<span class="string">&quot;*&#123;user.id&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">用户姓名： *｛ user.name｝ ==&gt; <span class="tag">&lt;<span class="name">span</span> <span class="attr">th:text</span>=<span class="string">&quot;*&#123;user.name&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">用户手机号： *&#123;user.phone&#125; ==&gt; <span class="tag">&lt;<span class="name">span</span> <span class="attr">th:text</span>=<span class="string">&quot;*&#123;user.phone&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">用户地址： *&#123;user.address&#125; ==&gt; <span class="tag">&lt;<span class="name">span</span></span></span><br><span class="line"><span class="tag"><span class="attr">th:text</span>=<span class="string">&quot;*&#123;user.address&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br></pre></td></tr></table></figure><h4 id="内嵌表达式"><a href="#内嵌表达式" class="headerlink" title="内嵌表达式"></a>内嵌表达式</h4><ul><li>文本内联<br><code>[[…]]</code>之间的表达式在Thymeleaf被认为是内联表达式,在其中您可以使用任何类型的表达式,也会有效<code>th:text</code>属性。<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>Hello, [[$&#123;session.user.name&#125;]]!<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 等同于 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>Hello, <span class="tag">&lt;<span class="name">span</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;session.user.name&#125;&quot;</span>&gt;</span>Sebastian<span class="tag">&lt;/<span class="name">span</span>&gt;</span>!<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><ul><li>脚本内联<br>Thymeleaf提供一系列的“脚本”的内联模式功能,这样你就可以将你的数据在脚本中创建一些脚本语言。<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">th:inline</span>=<span class="string">&quot;javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> user = [[$&#123;user.<span class="property">username</span>&#125;]];</span></span><br><span class="line"><span class="language-javascript">      <span class="title function_">alert</span>(user);</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">th:inline</span>=<span class="string">&quot;javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">var</span> msg  = <span class="string">&#x27;Hello, &#x27;</span> + [[$&#123;user.<span class="property">username</span>&#125;]];</span></span><br><span class="line"><span class="language-javascript">      <span class="title function_">alert</span>(msg);</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><h4 id="th-inline"><a href="#th-inline" class="headerlink" title="th:inline"></a><code>th:inline</code></h4><ol><li><p>内联text：  在html标签外，获取表达式的值</p><p>语法： </p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>显示姓名是：[[$&#123;key&#125;]]<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line"> <span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&quot;margin-left: 400px&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h3</span>&gt;</span>内联 text, 使用内联表达式显示变量的值<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">th:inline</span>=<span class="string">&quot;text&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">p</span>&gt;</span>我是[[$&#123;name&#125;]]，年龄是[[$&#123;age&#125;]]<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">            我是<span class="tag">&lt;<span class="name">span</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;name&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span>,年龄是<span class="tag">&lt;<span class="name">span</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;age&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">p</span>&gt;</span>使用内联text<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">p</span>&gt;</span>我是[[$&#123;name&#125;]],性别是[[$&#123;sex&#125;]]<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>内联javascript</p></li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">例子：</span><br><span class="line"> <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">th:inline</span>=<span class="string">&quot;javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">         <span class="keyword">var</span> myname = [[$&#123;name&#125;]];</span></span><br><span class="line"><span class="language-javascript">         <span class="keyword">var</span> myage = [[$&#123;age&#125;]];</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">         <span class="comment">//alert(&quot;获取的模板中数据 &quot;+ myname + &quot;,&quot;+myage)</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">function</span> <span class="title function_">fun</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="title function_">alert</span>(<span class="string">&quot;单击事件，获取数据 &quot;</span>+ myname + <span class="string">&quot;,&quot;</span>+ [[$&#123;sex&#125;]])</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="URL表达式"><a href="#URL表达式" class="headerlink" title="URL表达式"></a>URL表达式</h4><blockquote><p>语法:<code>@&#123;&#125;</code></p></blockquote><blockquote><p>主要用于链接、地址的展示， 可用于 <code>&lt;script src=&quot;...&quot;&gt;</code>、 <code>&lt;link href=&quot;...&quot;&gt;</code>、 <code>&lt;a href=&quot;...&quot;&gt;</code>、 <code>&lt;form action=&quot;...&quot;&gt;</code>、<code>&lt;img src=&quot;&quot;&gt;</code>等，可以 在 URL 路径中动态获取数据    </p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h1</span>&gt;</span>URL 路径表达式： @&#123;...&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h2</span>&gt;</span>绝对路径（没有参数） <span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">a</span> <span class="attr">th:href</span>=<span class="string">&quot;@&#123;http://localhost:8080/thymeleaf/info&#125;&quot;</span>&gt;</span>查看：绝对路径<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">h2</span>&gt;</span>绝对路径（路径中有参数） <span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">a</span> <span class="attr">th:href</span>=<span class="string">&quot;@&#123;&#x27;http://localhost:8080/thymeleaf/user/info?id=&#x27; +</span></span></span><br><span class="line"><span class="string"><span class="tag">  $&#123;user.id&#125;&#125;&quot;</span>&gt;</span>查看用户信息：绝对路径(带参数)<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">h2</span> <span class="attr">style</span>=<span class="string">&quot;color: red&quot;</span>&gt;</span>实际开发推荐使用：相对路径（没有参数） <span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">a</span> <span class="attr">th:href</span>=<span class="string">&quot;@&#123;/thymeleaf/info&#125;&quot;</span>&gt;</span>查看：相对路径<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">h2</span> <span class="attr">style</span>=<span class="string">&quot;color: red&quot;</span>&gt;</span>实际开发推荐使用：相对路径（路径中有参数） <span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">a</span> <span class="attr">th:href</span>=<span class="string">&quot;@&#123;&#x27;/thymeleaf/user/info?id=&#x27; + $&#123;user.id&#125;&#125;&quot;</span>&gt;</span>查看用户信息：相</span><br><span class="line">  对路径（带参数） <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">a</span> <span class="attr">th:href</span>=<span class="string">&quot;@&#123;/thymeleaf/info(id=$&#123;user.id&#125;)&#125;&quot;</span>&gt;</span>推荐使用：优雅的带参数路径</span><br><span class="line">  写法<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="th-action"><a href="#th-action" class="headerlink" title="th:action "></a><code>th:action </code></h4><blockquote><p>th:action 定义后台控制器的路径，类似<form>标签的 action 属性，主要结合 URL 表达式,获 取动态变量    </p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>th:action 属性的使用<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>请求路径中需要动态获取变量数据时，必须添加 th 前缀<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">th:action</span>=<span class="string">&quot;@&#123;&#x27;/user/login?id=&#x27;+$&#123;user.id&#125;&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>以下两种方式获取不到用户 id<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;&#x27;/user/login?id=&#x27;+$&#123;user.id&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;/user/login&quot;</span>+$&#123;<span class="attr">user.id</span>&#125;&gt;</span><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">思考：为什么后两个中$&#123;user.id&#125; 获取不到数据？</span><br><span class="line">因为我们 Thymeleaf 是以 html 为载体的，所以 html 不会认识$&#123;&#125;语法。</span><br><span class="line">我们请求的流程是，发送请求给服务器，服务器接收请求后，处理请求，跳转到指定的静</span><br><span class="line">态 html 页面，在服务器端， Thymeleaf 模板引擎会按照它的语法，对动态数据进行处理，</span><br><span class="line">所以如果要是 th 开头，模板引擎能够识别，会在服务器端进行处理，获取数据；如果没有</span><br><span class="line">以 th 开头，那么 Thymeleaf 模板引擎不会处理，直接返回给客户端了。</span><br></pre></td></tr></table></figure><h4 id="th-method"><a href="#th-method" class="headerlink" title="th:method"></a><code>th:method</code></h4><blockquote><p>设置请求方法 </p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">id</span>=<span class="string">&quot;login&quot;</span> <span class="attr">th:action</span>=<span class="string">&quot;@&#123;/login&#125;&quot;</span> <span class="attr">th:method</span>=<span class="string">&quot;post&quot;</span>&gt;</span>......<span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>th:method 属性的使用<span class="tag">&lt;/<span class="name">h1</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">th:action</span>=<span class="string">&quot;@&#123;/user/login&#125;&quot;</span> <span class="attr">th:method</span>=<span class="string">&quot;post&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">form</span>&gt;</span>    </span><br></pre></td></tr></table></figure><h4 id="th-src"><a href="#th-src" class="headerlink" title="th:src"></a><code>th:src</code></h4><blockquote><p>th:src 用于外部资源引入</p></blockquote><p>比如<code>&lt;script&gt;</code>标签的 src 属性， <code>&lt;img&gt;</code>标签的 src 属性，常与<code>@&#123;&#125;</code>表达式结 合使用，在 SpringBoot 项目的静态资源都放到 resources 的 static 目录下。 放到 static 路径下的内容，写路径时不需要写上 static    </p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>th:src 属性的使用<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--以下方式无法引入 js--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;/static/js/jquery-1.7.2.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--该方法是常用方法--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">th:src</span>=<span class="string">&quot;@&#123;/jquery-1.7.2.min.js&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  $(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">alert</span>(<span class="string">&quot;引入 js 文件&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">  &#125;);</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>这种方式比传统方式的好处是，在 URL 表达式前加/，会自动加上上下文根，避免 404 找不 到资源的情况    </p><h4 id="th-id"><a href="#th-id" class="headerlink" title="th:id"></a><code>th:id</code></h4><p>th:id 类似 html 标签中的 id 属性 </p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">th:id</span>=<span class="string">&quot;$&#123;hello&#125;&quot;</span>&gt;</span>aaa<span class="tag">&lt;/<span class="name">span</span>&gt;</span>    </span><br></pre></td></tr></table></figure><h4 id="th-name"><a href="#th-name" class="headerlink" title="th:name"></a><code>th:name</code></h4><p>th:name 设置名称 </p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">th:type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">th:id</span>=<span class="string">&quot;userName&quot;</span> <span class="attr">th:name</span>=<span class="string">&quot;userName&quot;</span>&gt;</span>    </span><br></pre></td></tr></table></figure><h4 id="th-value"><a href="#th-value" class="headerlink" title="th:value"></a><code>th:value</code></h4><p>th:value 类似 html 标签中的 value 属性，能对某元素的 value 属性进行赋值 </p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;hidden&quot;</span> <span class="attr">id</span>=<span class="string">&quot;userId&quot;</span> <span class="attr">name</span>=<span class="string">&quot;userId&quot;</span> <span class="attr">th:value</span>=<span class="string">&quot;$&#123;userId&#125;&quot;</span>&gt;</span>    </span><br></pre></td></tr></table></figure><h4 id="th-attr"><a href="#th-attr" class="headerlink" title="th:attr"></a><code>th:attr</code></h4><p>th:attr 该属性也是用于给 HTML 中某元素的某属性赋值，好处是可以给 html 中没有定义的属性动 态的赋值    </p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>th:attr 属性的使用<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">zhangsan</span>=<span class="string">&quot;$&#123;user.name&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--通过 th:attr 对自定义的属性赋值--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">th:attr</span>=<span class="string">&quot;zhangsan=$&#123;user.name&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="th-text"><a href="#th-text" class="headerlink" title="th:text"></a><code>th:text</code></h4><p>th:text 用于文本的显示，该属性显示的文本在标签体中，如果是文本框，数据会在文本框外显示， 要想显示在文本框内，使用th:value</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">id</span>=<span class="string">&quot;realName&quot;</span> <span class="attr">name</span>=<span class="string">&quot;reaName&quot;</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;realName&#125;&quot;</span>&gt;</span>    </span><br></pre></td></tr></table></figure><h4 id="th-object"><a href="#th-object" class="headerlink" title="th:object"></a><code>th:object</code></h4><p>th:object 用于数据对象绑定 通常用于选择变量表达式（星号表达式）    </p><h4 id="th-onclick"><a href="#th-onclick" class="headerlink" title="th:onclick"></a><code>th:onclick</code></h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>th:onclick 的使用<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--目前 thymeleaf 版本要求只能传递数字和布尔值--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">th:onclick</span>=<span class="string">&quot;&#x27;show(&#x27;+$&#123;user.id&#125;+&#x27;)&#x27;&quot;</span>&gt;</span>点击：显示学生编号<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">function</span> <span class="title function_">show</span>(<span class="params">id</span>) &#123;</span></span><br><span class="line"><span class="language-javascript"><span class="title function_">alert</span>(<span class="string">&quot;用户编号为： &quot;</span> + id);</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="th-style"><a href="#th-style" class="headerlink" title="th:style"></a><code>th:style</code></h4><p>th:style    设置样式</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">th:onclick</span>=<span class="string">&quot;&#x27;show(&#x27;+$&#123;user.id&#125;+&#x27;)&#x27;&quot;</span></span></span><br><span class="line"><span class="tag"><span class="attr">th:style</span>=<span class="string">&quot;&#x27;font-size:40px;color:red;&#x27;&quot;</span>&gt;</span>点击：显示学生编号<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="th-each"><a href="#th-each" class="headerlink" title="th:each"></a><code>th:each</code></h4><p>比如从后台传来一个对象集合那么就可以使用此属性遍历输出，它与 JSTL 中的&lt;c: forEach&gt;类似，此属性既可以循环遍历集合，也可以循环遍历数组及 Map    </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">th:each</span><br><span class="line">这个属性非常常用，比如从后台传来一个对象集合那么就可以使用此属性遍历输出，它与</span><br><span class="line">JSTL 中的&lt;c: forEach&gt;类似，此属性既可以循环遍历集合，也可以循环遍历数组及 Map</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h1</span>&gt;</span>th:each 循环遍历 List 集合<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&quot;color: red&quot;</span>&gt;</span></span><br><span class="line">    1.user:当前对象的变量名<span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">    2.userStat:当前对象的状态变量名<span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">    3.$&#123;userList&#125;:循环遍历的集合<span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">    4.变量名自定义</span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">th:each</span>=<span class="string">&quot;user,userStat:$&#123;userList&#125;&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;userStat.index&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;user.id&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;user.name&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;user.phone&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;user.address&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">th:each=&quot;user, iterStat : $&#123;userlist&#125;&quot;中的 $&#123;userList&#125; 是后台传过来的集合</span><br><span class="line">◼ user</span><br><span class="line">定义变量，去接收遍历$&#123;userList&#125;集合中的一个数据</span><br><span class="line">◼ iterStat</span><br><span class="line">$&#123;userList&#125; 循环体的信息</span><br><span class="line">◼ 其中 user 及 iterStat 自己可以随便取名</span><br><span class="line">◼ interStat 是循环体的信息，通过该变量可以获取如下信息</span><br><span class="line">index: 当前迭代对象的 index（从 0 开始计算）</span><br><span class="line">count: 当前迭代对象的个数（从 1 开始计算） 这两个用的较多</span><br><span class="line">size: 被迭代对象的大小</span><br><span class="line">current: 当前迭代变量</span><br><span class="line">even/odd: 布尔值，当前循环是否是偶数/奇数（从 0 开始计算）</span><br><span class="line">first: 布尔值，当前循环是否是第一个</span><br><span class="line">last: 布尔值，当前循环是否是最后一个</span><br><span class="line">注意：循环体信息 interStat 也可以不定义，则默认采用迭代变量加上 Stat 后缀，即 userStat</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>循环遍历 Map 集合<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>th:each 循环遍历 Map 集合<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">th:each</span>=<span class="string">&quot;userMap,userMapStat:$&#123;userMaps&#125;&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;userMapStat.count&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;userMap.key&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;userMap.value.id&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;userMap.value.name&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;userMap.value.phone&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;userMap.value.address&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;userMap.value.id&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;userMap.value.name&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;userMap.value.phone&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;userMap.value.address&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>遍历 Array 数组， 在 ThymeleafController 中的 eachArray 方法中准备数组数据    </p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>循环遍历 Array 数组<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">th:each</span>=<span class="string">&quot;user,userStat:$&#123;userArray&#125;&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;userStat.count&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;user.id&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;user.name&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;user.phone&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;user.address&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="th-if-与-th-unless"><a href="#th-if-与-th-unless" class="headerlink" title="th:if 与 th:unless"></a><code>th:if 与 th:unless</code></h4><p>条件判断</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>th:if 用法:如果满足条件显示，否则相反<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">th:if</span>=<span class="string">&quot;$&#123;sex eq 1&#125;&quot;</span>&gt;</span></span><br><span class="line">男： <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">name</span>=<span class="string">&quot;sex&quot;</span> <span class="attr">th:value</span>=<span class="string">&quot;1&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">th:if</span>=<span class="string">&quot;$&#123;sex eq 0&#125;&quot;</span>&gt;</span></span><br><span class="line">女： <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">name</span>=<span class="string">&quot;sex&quot;</span> <span class="attr">th:value</span>=<span class="string">&quot;0&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>th:unless 用法：与 th:if 用法相反，即对条件判断条件取反<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">th:unless</span>=<span class="string">&quot;$&#123;sex == 1&#125;&quot;</span>&gt;</span></span><br><span class="line">男： <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">name</span>=<span class="string">&quot;sex&quot;</span> <span class="attr">th:value</span>=<span class="string">&quot;1&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">th:unless</span>=<span class="string">&quot;$&#123;sex eq 0&#125;&quot;</span>&gt;</span></span><br><span class="line">女： <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">name</span>=<span class="string">&quot;sex&quot;</span> <span class="attr">th:value</span>=<span class="string">&quot;0&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">th:if</span>=<span class="string">&quot;$&#123;user1 eq null&#125;&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h3</span> <span class="attr">style</span>=<span class="string">&quot;color: red&quot;</span>&gt;</span>用户未登录<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">th:unless</span>=<span class="string">&quot;$&#123;user2 == null&#125;&quot;</span>&gt;</span></span><br><span class="line">用户姓名： <span class="tag">&lt;<span class="name">span</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;user2.name&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>从 session 中获取值<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">th:if</span>=<span class="string">&quot;$&#123;user3 != null&#125;&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;user3.name&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="th-switch-与-th-case"><a href="#th-switch-与-th-case" class="headerlink" title="th:switch 与 th:case"></a><code>th:switch 与 th:case</code></h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>th:switch/th:case 用法<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">th:switch</span>=<span class="string">&quot;$&#123;sex&#125;&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">th:case</span>=<span class="string">&quot;1&quot;</span>&gt;</span>性别：男<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">th:case</span>=<span class="string">&quot;2&quot;</span>&gt;</span>性别：女<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">th:case</span>=<span class="string">&quot;*&quot;</span>&gt;</span>性别：保密<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>一旦某个 case 判断值为 true，剩余的 case 默认不执行，<code>&quot;*&quot;</code>表示默 认的 case，前面的 case 都不匹配时候，执行默认的 case    </p><h4 id="文本字面量"><a href="#文本字面量" class="headerlink" title="文本字面量"></a>文本字面量</h4><p>用单引号’…’包围的字符串为文本字面量    </p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>文本字面量：用单引号&#x27;...&#x27;包围的字符串<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">th:href</span>=<span class="string">&quot;@&#123;&#x27;/user/info?id=&#x27; + $&#123;user.id&#125;&#125;&quot;</span>&gt;</span>查看用户：文本字面的路径使用<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">th:text</span>=<span class="string">&quot;您好&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="数字字面量"><a href="#数字字面量" class="headerlink" title="数字字面量"></a>数字字面量</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>数字字面量<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">今年是<span class="tag">&lt;<span class="name">span</span> <span class="attr">th:text</span>=<span class="string">&quot;2019&quot;</span>&gt;</span>1949<span class="tag">&lt;/<span class="name">span</span>&gt;</span>年<span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">20 年后，将是<span class="tag">&lt;<span class="name">span</span> <span class="attr">th:text</span>=<span class="string">&quot;2019 + 20&quot;</span>&gt;</span>1969<span class="tag">&lt;/<span class="name">span</span>&gt;</span>年<span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br></pre></td></tr></table></figure><h4 id="boolean-字面量"><a href="#boolean-字面量" class="headerlink" title="boolean 字面量"></a>boolean 字面量</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>boolean 字面量<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">th:if</span>=<span class="string">&quot;$&#123;success&#125;&quot;</span>&gt;</span>执行成功<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">th:unless</span>=<span class="string">&quot;$&#123;flag&#125;&quot;</span>&gt;</span>执行不成功<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="null-字面量"><a href="#null-字面量" class="headerlink" title="null 字面量"></a>null 字面量</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>null 字面量<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">th:if</span>=<span class="string">&quot;$&#123;user ne null&#125;&quot;</span>&gt;</span>用户不为空<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">th:unless</span>=<span class="string">&quot;$&#123;user eq null&#125;&quot;</span>&gt;</span>用户不为空（使用 th:unless 取反） <span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br></pre></td></tr></table></figure><h4 id="Thymeleaf-字符串拼接"><a href="#Thymeleaf-字符串拼接" class="headerlink" title="Thymeleaf 字符串拼接"></a>Thymeleaf 字符串拼接</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;h1&gt;文本字面量使用&quot;+&quot;拼接字符串&lt;/h1&gt;</span><br><span class="line">&lt;span th:text=&quot;&#x27;共&#x27;+$&#123;totalRows&#125;+&#x27;条&#x27;+$&#123;totalPage&#125;+&#x27;页，当前第&#x27;+$&#123;currentPage&#125;+&#x27;</span><br><span class="line">页&#x27;&quot;&gt;&lt;/span&gt;</span><br><span class="line">&lt;h1&gt;另一种更优雅的方式：使用&quot;|要拼接的内容|&quot;减少字符串拼接的加号&lt;/h1&gt;</span><br><span class="line">&lt;span th:text=&quot;|共$&#123;totalRows&#125;条$&#123;totalPage&#125;页,当前第$&#123;currentPage&#125;页|&quot;&gt;&lt;/span&gt;</span><br></pre></td></tr></table></figure><h4 id="Thymeleaf-运算符"><a href="#Thymeleaf-运算符" class="headerlink" title="Thymeleaf 运算符"></a>Thymeleaf 运算符</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">三元运算：表达式?”正确结果”:”错误结果”</span><br><span class="line">算术运算： + , - , * , / , %</span><br><span class="line">关系比较:： &gt; , &lt; , &gt;= , &lt;= ( gt , lt , ge , le )</span><br><span class="line">相等判断： == , != ( eq , ne )</span><br></pre></td></tr></table></figure><h4 id="Thymaleaf-表达式基本对象"><a href="#Thymaleaf-表达式基本对象" class="headerlink" title="Thymaleaf 表达式基本对象"></a>Thymaleaf 表达式基本对象</h4><p>模板引擎提供了一组内置的对象，这些内置的对象可以直接在模板中使用，这些对象由 #号开始引用，我们比较常用的内置对象    </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">#request</span><br><span class="line">#request 相 当 于 httpServletRequest 对 象 ， 这 是 3.x 版 本 ， 若 是 2.x 版 本 使 用</span><br><span class="line">#httpServletRequest，在页面获取应用的上下文根，一般在 js 中请求路径中加上可以避免 404</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span> <span class="attr">xmlns:th</span>=<span class="string">&quot;http://www.thymeleaf.org&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>Thymeleaf 表达式基本对象<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">th:inline</span>=<span class="string">&quot;javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">var</span> basePath = [[$&#123;#httpServletRequest.<span class="title function_">getScheme</span>() + <span class="string">&quot;://&quot;</span> +</span></span><br><span class="line"><span class="language-javascript">#httpServletRequest.<span class="title function_">getServerName</span>() + <span class="string">&quot;:&quot;</span> +</span></span><br><span class="line"><span class="language-javascript">#httpServletRequest.<span class="title function_">getServerPort</span>() +</span></span><br><span class="line"><span class="language-javascript">#httpServletRequest.<span class="title function_">getContextPath</span>()&#125;]];</span></span><br><span class="line"><span class="language-javascript"><span class="comment">//http://localhost:8080/springboot/user/login</span></span></span><br><span class="line"><span class="language-javascript"><span class="comment">//获取协议名称</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">var</span> scheme = [[$&#123;#request.<span class="title function_">getScheme</span>()&#125;]];</span></span><br><span class="line"><span class="language-javascript"><span class="comment">//获取服务 IP 地址</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">var</span> serverName = [[$&#123;#request.<span class="title function_">getServerName</span>()&#125;]];</span></span><br><span class="line"><span class="language-javascript"><span class="comment">//获取服务端口号</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">var</span> serverPort = [[$&#123;#request.<span class="title function_">getServerPort</span>()&#125;]];</span></span><br><span class="line"><span class="language-javascript"><span class="comment">//获取上下文根</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">var</span> contextPath = [[$&#123;#request.<span class="title function_">getContextPath</span>()&#125;]];</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">var</span> allPath = scheme+<span class="string">&quot;://&quot;</span>+serverName+<span class="string">&quot;:&quot;</span>+serverPort+contextPath;</span></span><br><span class="line"><span class="language-javascript"><span class="title function_">alert</span>(allPath)</span></span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">#session</span><br><span class="line">相当于 HttpSession 对象，这是 3.x 版本，若是 2.x 版本使用#httpSession</span><br><span class="line">在后台方法中向 session 中放数据</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>从 SESSION 中获取用户名称<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;#session.getAttribute(&#x27;username&#x27;)&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;#httpSession.getAttribute(&#x27;username&#x27;)&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="Thymeleaf-表达式功能对象"><a href="#Thymeleaf-表达式功能对象" class="headerlink" title="Thymeleaf 表达式功能对象"></a>Thymeleaf 表达式功能对象</h4><p>模板引擎提供的一组功能性内置对象，可以在模板中直接使用这些对象提供的功能方法 工作中常使用的数据类型，如集合，时间，数值，可以使用 Thymeleaf 的提供的功能性对象 来处理它们    </p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">内置功能对象前都需要加#号，内置对象一般都以 s 结尾</span><br><span class="line">官方手册： http://www.thymeleaf.org/doc/tutorials/3.0/usingthymeleaf.html</span><br><span class="line">#dates: java.util.Date 对象的实用方法：</span><br><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;#dates.format(curDate, &#x27;yyyy-MM-dd HH:mm:ss&#x27;)&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">#calendars: 和 dates 类似, 但是 java.util.Calendar 对象；</span><br><span class="line">#numbers: 格式化数字对象的实用方法；</span><br><span class="line">#strings: 字符串对象的实用方法： contains, startsWith, prepending/appending 等；</span><br><span class="line">#objects: 对 objects 操作的实用方法；</span><br><span class="line">#bools: 对布尔值求值的实用方法；</span><br><span class="line">#arrays: 数组的实用方法；</span><br><span class="line">#lists: list 的实用方法，比如<span class="tag">&lt;<span class="name">span</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;#lists.size(datas)&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">#sets: set 的实用方法；</span><br><span class="line">#maps: map 的实用方法；</span><br><span class="line">#aggregates: 对数组或集合创建聚合的实用方法；</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> 前端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Dubbo</title>
      <link href="/posts/d973.html"/>
      <url>/posts/d973.html</url>
      
        <content type="html"><![CDATA[<h2 id="小总结"><a href="#小总结" class="headerlink" title="小总结"></a>小总结</h2><p>springboot，mybatis，dubbo+zookeep，三层架构开发</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">大概思路布局</span><br><span class="line"></span><br><span class="line">接口</span><br><span class="line">    实体类</span><br><span class="line">    service接口</span><br><span class="line"></span><br><span class="line">提供者</span><br><span class="line">    mapper.java（接口）</span><br><span class="line">    mapper.xml（mybatisSQL语句）</span><br><span class="line">    service实现类</span><br><span class="line">    </span><br><span class="line">消费者</span><br><span class="line">    webController.java</span><br><span class="line">    index.html</span><br></pre></td></tr></table></figure><blockquote><p>service层</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">Application启动文件执行以下添加以下</span><br><span class="line"></span><br><span class="line">@SpringBootApplication  //springboot标签</span><br><span class="line">@MapperScan(&quot;io.peng.mapper&quot;)   //扫描mapper文件夹</span><br><span class="line">@EnableDubboConfiguration   //启动dubbo注解</span><br><span class="line"></span><br><span class="line">---</span><br><span class="line">application.properties配置文件文件添加以下</span><br><span class="line"></span><br><span class="line">#设置服务端口号</span><br><span class="line">server.port=8081</span><br><span class="line">#设置上下文根</span><br><span class="line">server.servlet.context-path=/</span><br><span class="line"></span><br><span class="line">#链接数据库</span><br><span class="line">spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver</span><br><span class="line">spring.datasource.url=jdbc:mysql://127.0.0.1:3306/air</span><br><span class="line">spring.datasource.username=root</span><br><span class="line">spring.datasource.password=123456</span><br><span class="line"></span><br><span class="line">#扫描xml文件路径</span><br><span class="line">mybatis.mapper-locations=classpath:/mapper/*Mapper.xml</span><br><span class="line">#mapper别名</span><br><span class="line">mybatis.type-aliases-package=io.peng.money.model</span><br><span class="line"></span><br><span class="line">#配置 Dubbo 的服务提供者名称</span><br><span class="line">spring.application.name=airservice</span><br><span class="line">#设置工程为服务提供者</span><br><span class="line">spring.dubbo.server=true</span><br><span class="line">#设置 dubbo 注册中心</span><br><span class="line">spring.dubbo.registry=zookeeper://localhost:2181</span><br><span class="line"></span><br><span class="line">#redis</span><br><span class="line">spring.redis.host=localhost</span><br><span class="line">spring.redis.port=6379</span><br><span class="line"></span><br><span class="line">---</span><br><span class="line">实现接口添加以下</span><br><span class="line">@Component  //让spring实例化</span><br><span class="line">// 使用dubbo的service，让他托管</span><br><span class="line">@Service(interfaceClass = xxxxxService.class,version = &quot;1.0.0&quot;,timeout = 15000)</span><br><span class="line">public class XXXXXXXX</span><br></pre></td></tr></table></figure><blockquote><p>Controller层</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">Application启动文件执行以下添加以下</span><br><span class="line"></span><br><span class="line">@SpringBootApplication  //springboot标签</span><br><span class="line">@EnableDubboConfiguration   //启动dubbo注解</span><br><span class="line"></span><br><span class="line">---</span><br><span class="line">application.properties配置文件添加以下</span><br><span class="line">server.port=8080    //端口</span><br><span class="line">spring.application.name=web //名字</span><br><span class="line">// 注册中心</span><br><span class="line">spring.dubbo.registry=zookeeper://localhost:2181</span><br><span class="line"></span><br><span class="line">---</span><br><span class="line">web需要加这些</span><br><span class="line">@RestController</span><br><span class="line">public class xxxxxxController &#123;</span><br><span class="line">    @Reference(interfaceClass=AirQualityIndexServer.class,version=&quot;1.0.0&quot;)</span><br><span class="line">    private XXXXService XXXXService;</span><br><span class="line"></span><br><span class="line">    xxxx</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="开源地址"><a href="#开源地址" class="headerlink" title="开源地址"></a>开源地址</h2><p><a href="https://github.com/apache/dubbo">https://github.com/apache/dubbo</a></p><h2 id="接口工程"><a href="#接口工程" class="headerlink" title="接口工程"></a>接口工程</h2><p>使用SpringBoot搭建基于SSM的分布式框架。按照dubbo官方的推荐，一个基于dubbo的微服务项目至少包含三个模块。接口模块，生产者模块，消费者模块。</p><h3 id="搭建Maven的java工程——dubbo接口"><a href="#搭建Maven的java工程——dubbo接口" class="headerlink" title="搭建Maven的java工程——dubbo接口"></a>搭建Maven的java工程——dubbo接口</h3><p>一.导入工程的核心包</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.11<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">pluginManagement</span>&gt;</span><span class="comment">&lt;!-- lock down plugins versions to avoid using Maven defaults (may be moved to parent pom) --&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-compiler-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.8.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">target</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">target</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">source</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">source</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">pluginManagement</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="搭建提供者项目"><a href="#搭建提供者项目" class="headerlink" title="搭建提供者项目"></a>搭建提供者项目</h2><h3 id="创建基于SpringBoot的提供者web项目，提供数据服务"><a href="#创建基于SpringBoot的提供者web项目，提供数据服务" class="headerlink" title="创建基于SpringBoot的提供者web项目，提供数据服务"></a>创建基于SpringBoot的提供者web项目，提供数据服务</h3><h3 id="导入MyBatis，dubbo-以及zookeeper等核心依赖"><a href="#导入MyBatis，dubbo-以及zookeeper等核心依赖" class="headerlink" title="导入MyBatis，dubbo,以及zookeeper等核心依赖"></a>导入MyBatis，dubbo,以及zookeeper等核心依赖</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis.spring.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.1.4<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">       <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">       <span class="comment">&lt;!--springboot集成dubbo--&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.spring.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>dubbo-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.0.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--zookeeper客户端依赖--&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.101tec<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>zkclient<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.10<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">       <span class="comment">&lt;!--myincema服务接口依赖--&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.powernode<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mycinema-interface<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="配置application-properties-yml，设置数据库连接，dubbo服务等信息"><a href="#配置application-properties-yml，设置数据库连接，dubbo服务等信息" class="headerlink" title="配置application.properties/yml，设置数据库连接，dubbo服务等信息"></a>配置application.properties/yml，设置数据库连接，dubbo服务等信息</h3><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#数据库信息</span></span><br><span class="line"><span class="attr">spring.datasource.driver-class-name</span>=<span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line"><span class="attr">spring.datasource.url</span>=<span class="string">jdbc:mysql://localhost:3306/mycinema?serverTimezone=UTC</span></span><br><span class="line"><span class="attr">spring.datasource.username</span>=<span class="string">root</span></span><br><span class="line"><span class="attr">spring.datasource.password</span>=<span class="string"></span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">#设置内嵌 Tomcat 端口号</span></span><br><span class="line"><span class="attr">server.port</span>=<span class="string">8090</span></span><br><span class="line"><span class="comment">#设置上下文根</span></span><br><span class="line"><span class="attr">server.servlet.context-path</span>=<span class="string">/</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">#配置 dubbo 的服务提供者信息</span></span><br><span class="line"><span class="comment">#服务提供者应用名称(必须写，且不能重复)</span></span><br><span class="line"><span class="attr">spring.application.name</span>=<span class="string">mycinema-provider</span></span><br><span class="line"><span class="comment">#设置当前工程为服务提供者</span></span><br><span class="line"><span class="attr">spring.dubbo.server</span>=<span class="string">true</span></span><br><span class="line"><span class="comment">#设置注册中心</span></span><br><span class="line"><span class="attr">spring.dubbo.registry</span>=<span class="string">zookeeper://localhost:2181</span></span><br></pre></td></tr></table></figure><h3 id="使用逆向工程生成实体类"><a href="#使用逆向工程生成实体类" class="headerlink" title="使用逆向工程生成实体类"></a>使用逆向工程生成实体类</h3><p>数据访问接口，以及sql-mapper映射文件</p><ul><li><p>在pom的<plugins>中添加MyBatis逆向工程的插件</p>  <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--mybatis代码自动生成插件--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis.generator<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-generator-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.3.7<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--配置文件的位置--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">configurationFile</span>&gt;</span>GeneratorMapper.xml<span class="tag">&lt;/<span class="name">configurationFile</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">verbose</span>&gt;</span>true<span class="tag">&lt;/<span class="name">verbose</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">overwrite</span>&gt;</span>true<span class="tag">&lt;/<span class="name">overwrite</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>在项目的根目录下面添加插件的配置文件GeneratorMapper.xml，内容如下:</p>  <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">generatorConfiguration</span></span></span><br><span class="line"><span class="meta">        <span class="keyword">PUBLIC</span> <span class="string">&quot;-//mybatis.org//DTD MyBatis Generator Configuration 1.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="string">&quot;http://mybatis.org/dtd/mybatis-generator-config_1_0.dtd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">generatorConfiguration</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 指定连接数据库的JDBC驱动包所在位置，指定到你本机的完整路径 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">classPathEntry</span> <span class="attr">location</span>=<span class="string">&quot;C:\repository\mysql\mysql-connector-java\5.1.6\mysql-connector-java-5.1.6.jar&quot;</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 配置table表信息内容体，targetRuntime指定采用MyBatis3的版本 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context</span> <span class="attr">id</span>=<span class="string">&quot;tables&quot;</span> <span class="attr">targetRuntime</span>=<span class="string">&quot;MyBatis3&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- 抑制生成注释，由于生成的注释都是英文的，可以不让它生成 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">commentGenerator</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;suppressAllComments&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">commentGenerator</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- 配置数据库连接信息 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">jdbcConnection</span> <span class="attr">driverClass</span>=<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span></span></span><br><span class="line"><span class="tag">                        <span class="attr">connectionURL</span>=<span class="string">&quot;jdbc:mysql://127.0.0.1:3306/mycinema&quot;</span></span></span><br><span class="line"><span class="tag">                        <span class="attr">userId</span>=<span class="string">&quot;root&quot;</span></span></span><br><span class="line"><span class="tag">                        <span class="attr">password</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">jdbcConnection</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- 生成model类，targetPackage指定model类的包名， </span></span><br><span class="line"><span class="comment">            targetProject指定生成的model放在接口工程下面--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">javaModelGenerator</span> <span class="attr">targetPackage</span>=<span class="string">&quot;com.powernode.model&quot;</span></span></span><br><span class="line"><span class="tag">                            <span class="attr">targetProject</span>=<span class="string">&quot;E:\mycinema-interface\src\main\java&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;enableSubPackages&quot;</span> <span class="attr">value</span>=<span class="string">&quot;false&quot;</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;trimStrings&quot;</span> <span class="attr">value</span>=<span class="string">&quot;false&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">javaModelGenerator</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- 生成MyBatis的Mapper.xml文件，targetPackage指定mapper.xml文件的包名， </span></span><br><span class="line"><span class="comment">        targetProject指定生成的mapper.xml放在当前工程src --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">sqlMapGenerator</span> <span class="attr">targetPackage</span>=<span class="string">&quot;com.powernode.mapper&quot;</span>                <span class="attr">targetProject</span>=<span class="string">&quot;src/main/java&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;enableSubPackages&quot;</span> <span class="attr">value</span>=<span class="string">&quot;false&quot;</span> /&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;/<span class="name">sqlMapGenerator</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- 生成MyBatis的Mapper接口类文件,targetPackage指定Mapper接口类的包名， </span></span><br><span class="line"><span class="comment">        targetProject指定生成的Mapper接口放当前工程src目录 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">javaClientGenerator</span> <span class="attr">type</span>=<span class="string">&quot;XMLMAPPER&quot;</span> <span class="attr">targetPackage</span>=<span class="string">&quot;com.powernode.mapper&quot;</span>    <span class="attr">targetProject</span>=<span class="string">&quot;src/main/java&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;enableSubPackages&quot;</span> <span class="attr">value</span>=<span class="string">&quot;false&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">javaClientGenerator</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- 数据库表名及对应的Java模型类名 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">table</span> <span class="attr">tableName</span>=<span class="string">&quot;category&quot;</span> <span class="attr">domainObjectName</span>=<span class="string">&quot;Category&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">enableCountByExample</span>=<span class="string">&quot;false&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">enableUpdateByExample</span>=<span class="string">&quot;false&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">enableDeleteByExample</span>=<span class="string">&quot;false&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">enableSelectByExample</span>=<span class="string">&quot;false&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">selectByExampleQueryId</span>=<span class="string">&quot;false&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">table</span> <span class="attr">tableName</span>=<span class="string">&quot;movie&quot;</span> <span class="attr">domainObjectName</span>=<span class="string">&quot;Movie&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">enableCountByExample</span>=<span class="string">&quot;false&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">enableUpdateByExample</span>=<span class="string">&quot;false&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">enableDeleteByExample</span>=<span class="string">&quot;false&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">enableSelectByExample</span>=<span class="string">&quot;false&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">selectByExampleQueryId</span>=<span class="string">&quot;false&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">table</span> <span class="attr">tableName</span>=<span class="string">&quot;user&quot;</span> <span class="attr">domainObjectName</span>=<span class="string">&quot;User&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">enableCountByExample</span>=<span class="string">&quot;false&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">enableUpdateByExample</span>=<span class="string">&quot;false&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">enableDeleteByExample</span>=<span class="string">&quot;false&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">enableSelectByExample</span>=<span class="string">&quot;false&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">selectByExampleQueryId</span>=<span class="string">&quot;false&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">context</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">generatorConfiguration</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>在maven窗口中执行插件，生成代码<br>  注意：执行插件时，会解析pom文件中的所有依赖，已经导入了<mycinema-interface>的依赖，所以会去本地仓库查找这个包，找不到就会报错。解决方法如下:<br>  1.可以先注释这个包依赖，等生成代码之后再添加<br>  2.将mycinema-interface项目打包安装到本地仓库mvn install<br>  3.将生成的实体类都实现序列化接口,用于远程传输数据</p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Movie</span> <span class="keyword">implements</span> <span class="title class_">Serializable</span> &#123;</span><br></pre></td></tr></table></figure></li><li><p>插件生成的Mapper.xml文件和Mapper接口在同一个包下，但是idea不会编译，需要手动指定资源文件，修改</p></li></ul><p>提供者mycinema-provider的pom.xml文件，手动指定资源路径</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">resources</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">resource</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">directory</span>&gt;</span>src/main/java<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">includes</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.xml<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">includes</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resources</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li><p>在服务接口工程mycinema-interface工程中添加接口内容</p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">CategoryService</span> &#123;</span><br><span class="line">    List&lt;Category&gt; <span class="title function_">getAll</span><span class="params">()</span>;</span><br><span class="line">    Category <span class="title function_">getById</span><span class="params">(Integer id)</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">MovieService</span> &#123;</span><br><span class="line">    List&lt;Movie&gt; <span class="title function_">getAll</span><span class="params">()</span>;</span><br><span class="line">    Movie <span class="title function_">getById</span><span class="params">(Integer id)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>在提供者工程mycinema-provider中创建业务的实现包service.impl实现业务接口，并添加业务注解</p></li></ul><p>@Component,dubbo服务注解@Service</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Service(interfaceClass = MovieService.class,version = &quot;1.0.0&quot;,timeout = 15000)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MovieServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">MovieService</span> &#123;  </span><br><span class="line">    <span class="meta">@Autowired</span>    <span class="keyword">private</span> MovieMapper movieMapper;  </span><br><span class="line">    <span class="meta">@Override</span>    <span class="keyword">public</span> List&lt;Movie&gt; <span class="title function_">getAll</span><span class="params">()</span> &#123;   </span><br><span class="line">        <span class="keyword">return</span> movieMapper.selectAll();   </span><br><span class="line">    &#125;   </span><br><span class="line">    <span class="meta">@Override</span>    <span class="keyword">public</span> Movie <span class="title function_">getById</span><span class="params">(Integer id)</span> &#123; </span><br><span class="line">        <span class="keyword">return</span> movieMapper.selectByPrimaryKey(id);   </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Service(interfaceClass = CategoryService.class,timeout = 15000,version = &quot;1.0.0&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CategoryServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">CategoryService</span> &#123; </span><br><span class="line">    <span class="meta">@Autowired</span>    <span class="keyword">private</span> CategoryMapper categoryMapper; </span><br><span class="line">    <span class="meta">@Override</span>    <span class="keyword">public</span> List&lt;Category&gt; <span class="title function_">getAll</span><span class="params">()</span> &#123;  </span><br><span class="line">        <span class="keyword">return</span> categoryMapper.selectAll();   </span><br><span class="line">    &#125; </span><br><span class="line">    <span class="meta">@Override</span>    <span class="keyword">public</span> Category <span class="title function_">getById</span><span class="params">(Integer id)</span> &#123;  </span><br><span class="line">        <span class="keyword">return</span> categoryMapper.selectByPrimaryKey(id);   </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>在启动类上开启dubbo配置支持注解</p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@MapperScan(&quot;com.powernode.mapper&quot;)</span> </span><br><span class="line"><span class="comment">//扫描数据访问接口</span></span><br><span class="line"><span class="meta">@EnableDubboConfiguration</span> <span class="comment">//开启dubbo注解支持</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MycinemaProviderApplication</span> &#123;  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;   </span><br><span class="line">        SpringApplication.run(MycinemaProviderApplication.class, args);    </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>开启zooker服务，启动提供者项目</p></li></ul><h2 id="创建服务消费者项目"><a href="#创建服务消费者项目" class="headerlink" title="创建服务消费者项目"></a>创建服务消费者项目</h2><p>mycinema-consumer</p><h3 id="创建基于SpringBoot的web项目，添加以下必要的依赖"><a href="#创建基于SpringBoot的web项目，添加以下必要的依赖" class="headerlink" title="创建基于SpringBoot的web项目，添加以下必要的依赖"></a>创建基于SpringBoot的web项目，添加以下必要的依赖</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="comment">&lt;!--dubbo依赖--&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.spring.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>dubbo-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.0.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="comment">&lt;!--zookeeper客户端依赖--&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.101tec<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>zkclient<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.10<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="comment">&lt;!--服务接口依赖--&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.powernode<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mycinema-interface<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="修改application-properties添加配置信息"><a href="#修改application-properties添加配置信息" class="headerlink" title="修改application.properties添加配置信息"></a>修改application.properties添加配置信息</h3><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#设置内嵌 Tomcat 端口号</span></span><br><span class="line"><span class="attr">server.port</span>=<span class="string">8080</span></span><br><span class="line"><span class="comment">#设置上下文根</span></span><br><span class="line"><span class="attr">server.servlet.context-path</span>=<span class="string">/</span></span><br><span class="line"><span class="comment">#设置 dubbo 配置</span></span><br><span class="line"><span class="comment">#设置服务消费者名称</span></span><br><span class="line"><span class="attr">spring.application.name</span>=<span class="string">mycinema-consumer</span></span><br><span class="line"><span class="comment">#配置 dubbo 注册中心</span></span><br><span class="line"><span class="attr">spring.dubbo.registry</span>=<span class="string">zookeeper://localhost:2181</span></span><br></pre></td></tr></table></figure><h3 id="添加Controller，依赖服务提供者提供的服务信息"><a href="#添加Controller，依赖服务提供者提供的服务信息" class="headerlink" title="添加Controller，依赖服务提供者提供的服务信息"></a>添加Controller，依赖服务提供者提供的服务信息</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">IndexController</span> &#123;</span><br><span class="line">    <span class="comment">//组件由dubbo提供，使用@Reference注解</span></span><br><span class="line">    <span class="meta">@Reference(interfaceClass = MovieService.class,version = &quot;1.0.0&quot;,check = false)</span></span><br><span class="line">    <span class="keyword">private</span> MovieService movieService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/findAll&quot;)</span></span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;Movie&gt; <span class="title function_">findAll</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> movieService.getAll();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><h3 id="集成Thymeleaf实现同步请求"><a href="#集成Thymeleaf实现同步请求" class="headerlink" title="集成Thymeleaf实现同步请求"></a>集成Thymeleaf实现同步请求</h3><p>一.添加Thymeleaf坐标</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-thymeleaf<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>二.添加视图配置</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring.thymeleaf.suffix</span>=<span class="string">.html</span></span><br><span class="line"><span class="attr">spring.thymeleaf.prefix</span>=<span class="string">classpath:/templates/</span></span><br></pre></td></tr></table></figure><p>三.编写控制器</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/index&quot;)</span></span><br><span class="line">  <span class="keyword">public</span> String <span class="title function_">index</span><span class="params">(Model model)</span>&#123;</span><br><span class="line">      model.addAttribute(<span class="string">&quot;movies&quot;</span>,movieService.getAll());</span><br><span class="line">      <span class="keyword">return</span> <span class="string">&quot;index&quot;</span>;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>四.在templates下面添加index.html</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span> <span class="attr">xmlns:th</span>=<span class="string">&quot;http://www.thymeleaf.org&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">table</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span>编号<span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span>名称<span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span>导演<span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span>日期<span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span> <span class="attr">th:each</span>=<span class="string">&quot;movie:$&#123;movies&#125;&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;movie.id&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;movie.title&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;movie.director&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;movie.datereleased&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="Dubbo监控中心"><a href="#Dubbo监控中心" class="headerlink" title="Dubbo监控中心"></a>Dubbo监控中心</h2><p>开源地址：<a href="https://github.com/apache/dubbo-admin">https://github.com/apache/dubbo-admin</a></p><p>Dubbo是一个分布式服务框架，能避免单点故障和支持服务的横向扩容。一个服务通常会部署多个实例。<br>如何从多个服务 Provider 组成的集群中挑选出一个进行调用，就涉及到一个负载均衡的策略。</p><p>新版控制中心前后端分离了！！！<br>1.下载源代码<br>2.进入dubbo-admin-server，打包<br>  mvn clean package<br>3.启动zookeeper<br>4.启动dubbo-admin-server,端口http:8080<br>  java -jar dubbo-admin-server…jar<br>5.进入dubbo-admin-ui<br>  下载js包<br>  npm install<br>6.编译执行 npm run dev<br>7.<a href="http://localhost:8082/">http://localhost:8082</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringMVC</title>
      <link href="/posts/94f7.html"/>
      <url>/posts/94f7.html</url>
      
        <content type="html"><![CDATA[<h2 id="SpringMVC的设计模式"><a href="#SpringMVC的设计模式" class="headerlink" title="SpringMVC的设计模式"></a>SpringMVC的设计模式</h2><h3 id="单例模式"><a href="#单例模式" class="headerlink" title="单例模式"></a>单例模式</h3><p>单例模式是常见的一种设计模式，确保某个类只有一个实例，而且自行实例化并向整个系统提供这个实例。单例模式满足如下条件：</p><ol><li><p>只能有一个实例；</p></li><li><p>它必须自行创建这个实例；</p></li><li><p>它须自行向整个系统提供这个实例。</p></li></ol><p>单例模式根据创建实例的时机分为懒汉模式和饿汉模式。</p><h4 id="懒汉模式"><a href="#懒汉模式" class="headerlink" title="懒汉模式"></a>懒汉模式</h4><p>​        所谓懒汉模式是指在类加载的时候不需要创建实例，采用延迟加载的方式。在运行时调用时才创建实例。使用“时间换空间”.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Singleton</span> &#123;</span><br><span class="line"><span class="comment">//用一个null值的变量来存放实例，在类加载的时候没有创建实例</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">Singleton</span> <span class="variable">instance</span> <span class="operator">=</span> <span class="literal">null</span>;    </span><br><span class="line">    <span class="comment">//私有的构造方法</span></span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">Singleton</span><span class="params">()</span> &#123;</span><br><span class="line">        </span><br><span class="line">    &#125;    </span><br><span class="line">    <span class="comment">//调用这个方法的时候首先看看是不是第一次调用</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title function_">getInstance</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(instance == <span class="literal">null</span>)</span><br><span class="line">            instance = <span class="keyword">new</span> <span class="title class_">Singleton</span>();</span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这种方式保证了延迟加载的特性，从线程安全的角度上来说，懒汉式是不安全的，在多线程下无法正常工作。，假设，现在有线程A和线程B同时去调用getInstance方法，就可能出现线程并发的情况。解决方法就是线程同步，使用synchronized关键字解决。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">synchronized</span> Singleton <span class="title function_">getInstance</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(instance == <span class="literal">null</span>)</span><br><span class="line">            instance = <span class="keyword">new</span> <span class="title class_">Singleton</span>();</span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h4 id="饿汉模式"><a href="#饿汉模式" class="headerlink" title="饿汉模式"></a>饿汉模式</h4><p>所谓饿汉模式是指在类加载的时候就完成了初始化操作，所以类加载的速度较慢。但是获取速度很快，使用“空间换时间”。由于饿汉模式在初始化已经自行实例化，因此不存在线程安全问题。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Singleton</span> &#123;</span><br><span class="line"><span class="comment">//用static修饰是为了在类加载的时候就创建实例</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">Singleton</span> <span class="variable">instance</span> <span class="operator">=</span>    </span><br><span class="line">    <span class="comment">//私有的构造方法</span></span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">Singleton</span><span class="params">()</span> &#123;        </span><br><span class="line">    &#125;    </span><br><span class="line">  <span class="comment">//static修饰可以通过类直接调用这个方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span>  Singleton <span class="title function_">getInstance</span><span class="params">()</span> &#123;      </span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>在实际应用中可能需要使用单例模式创建对象，又需要延迟加载提高性能，并且还要解决线程安全的问题。可以使用静态内部类的方式实现。</p><h4 id="静态内部类"><a href="#静态内部类" class="headerlink" title="静态内部类"></a>静态内部类</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Singleton</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">Singleton</span> <span class="variable">instance</span> <span class="operator">=</span> <span class="literal">null</span>;    </span><br><span class="line">    <span class="comment">//私有的构造方法</span></span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">Singleton</span><span class="params">()</span> &#123;</span><br><span class="line">        </span><br><span class="line">    &#125;   </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">SingletonHelper</span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Singleton INSTANCE=<span class="keyword">new</span> <span class="title class_">Singleton</span>();</span><br><span class="line">    &#125;</span><br><span class="line">  <span class="comment">//static修饰可以通过类直接调用这个方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span>  Singleton <span class="title function_">getInstance</span><span class="params">()</span> &#123;      </span><br><span class="line">        instance=SingletonHelper.INSTANCE;</span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>Singleton类被加载后不一定被初始化，只有当getInstance方法被主调用时，SingletonHelper类才被加载。既满足了延迟加载的特性，又满足了线程安全。 </p><h4 id="SpringMVC-Controller的单例管理"><a href="#SpringMVC-Controller的单例管理" class="headerlink" title="SpringMVC-Controller的单例管理"></a>SpringMVC-Controller的单例管理</h4><p>​     SpringMVC的Contoller类是设计为单例模式的，不需要每次都创建实例。主要是基于性能的考虑。所以，一般不要在Controller中定义成员变量，否则会导致严重的线程安全以及性能问题。可能出现多次请求看到相同的数据。因为属性在内存只有一份数据。可以使用@Scope(“prototype”)将Controller变成多例的来解决，但是这种方式效率低，也违背了SpringMVC设计的初衷。通常情况下，在Contoller中只有业务类作为成员变量，但是业务类通常是接口，只有方法，没有属性，所以不存在线程安全的问题。</p><h2 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h2><p>在工程的类路径即<code>resources</code>目录下创建 SpringMVC 的配置文件 <code>springmvc.xml</code>。该文件名可以任意命名。推荐使用<code>springmvc.xml</code>.</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--扫描包--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mvc:annotation-driven</span>/&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 静态配置文件 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mvc:default-servlet-handler</span>/&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 包含Controller的文件 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;io.peng&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--jsp视图解析器--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;viewResolver&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.web.servlet.view.InternalResourceViewResolver&quot;</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 前缀 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;prefix&quot;</span> <span class="attr">value</span>=<span class="string">&quot;/WEB-INF/jsp/&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 后缀 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;suffix&quot;</span> <span class="attr">value</span>=<span class="string">&quot;.jsp&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="请求规则"><a href="#请求规则" class="headerlink" title="请求规则"></a>请求规则</h2><p>指定post提交,<code>method</code>属性</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(value = &quot;/main&quot;,method = RequestMethod.POST)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">one</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;main&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><table><thead><tr><th>序号</th><th>请求方式</th><th>提交方式</th></tr></thead><tbody><tr><td>1</td><td>表单请求</td><td>默认get，可以指定post</td></tr><tr><td>2</td><td>ajax请求</td><td>默认get，可以指定post</td></tr><tr><td>3</td><td>地址栏请求</td><td>get请求</td></tr><tr><td>4</td><td>超链接</td><td>get请求</td></tr><tr><td>5</td><td>src资源路劲请求</td><td>get请求</td></tr></tbody></table><h2 id="四种跳转方式"><a href="#四种跳转方式" class="headerlink" title="四种跳转方式"></a>四种跳转方式</h2><p>默认的跳转是请求转发，直接跳转到jsp页面展示，还可以使用框架提供的关键字redirect，进行一个重定向操作，包括重定向页面和重定向action，使用框架提供的关键字forward，进行服务器内部转发操作，包括转发页面和转发action。当使用redirect和forward关键字时，视图解析器就无效了。</p><p>Controller</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/one&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">One</span> &#123;</span><br><span class="line">    <span class="comment">//默认的请求转发跳页面</span></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/requestpage&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">jump1</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="comment">//默认就是请求转发跳页面</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;main&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//请求转发跳controller</span></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/requestController&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">requestController</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;one.........&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;forward:/two/demo.action&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//重定向跳页面redirect</span></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/redirectpage&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">redirectpage</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="comment">//默认就是请求转发跳页面</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;redirect:/main.jsp&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//重定向跳controller</span></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/redirectcontroller&quot;)</span></span><br><span class="line">        <span class="keyword">public</span> String <span class="title function_">redirectcontroller</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="comment">//默认就是请求转发跳页面</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;redirect:/two/demo.action&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="支持的默认参数类型"><a href="#支持的默认参数类型" class="headerlink" title="支持的默认参数类型"></a>支持的默认参数类型</h2><p>这些类型只要写在方法参数中就可以使用了。<br>1）<code>HttpServletRequest</code> 对象<br>2）<code>HttpServletResponse</code> 对象<br>3）<code>HttpSession</code> 对象<br>4）<code>Model/ModelMap</code> 对象　<br>5）Map<code>&lt;String,Object&gt;</code>对象</p><p><strong>注意</strong>Model,Map,ModelMap都使用的是request请求作用域,意味着只能是请求转发后,页面才可以得到值</p><h2 id="拦截器"><a href="#拦截器" class="headerlink" title="拦截器"></a>拦截器</h2><p>使用场景<br>1、日志记录：记录请求信息的日志<br>2、权限检查，如登录检查<br>3、性能检测：检测方法的执行时间</p><h3 id="实现的两种方式"><a href="#实现的两种方式" class="headerlink" title="实现的两种方式"></a>实现的两种方式</h3><p>继承HandlerInterceptorAdapter的父类<br>实现HandlerInterceptor接口</p><p>而HandlerInterceptor接口中含有三个方法</p><ul><li>preHandle<br>  该方法在处理器方法执行之前执行。其返回值为 boolean，若为 true，则紧接着会执行处理器方法，且会将 afterCompletion()方法放入到一个专门的方法栈中等待执行。</li><li>postHandle<br>  该方法在处理器方法执行之后执行。处理器方法若最终未被执行，则该方法不会执行。由于该方法是在处理器方法执行完后执行，且该方法参数中包含 ModelAndView，所以该方法可以修改处理器方法的处理结果数据，且可以修改跳转方向。</li><li>afterCompletion<br>  当preHandle()方法返回 true 时，会将该方法放到专门的方法栈中，等到对请求进行响应的所有工作完成之后才执行该方法。即该方法是在中央调度器渲染（数据填充）了响应页面之后执行的，此时对 ModelAndView 再操作也对响应无济于事。afterCompletion 最后执行的方法，清除资源，例如在 Controller 方法中加入数据等。</li></ul><p>以下示例重写HandlerInterceptorAdapter的preHandle方法，实现网站访问权限的过滤功能。</p><p>（1）编写拦截器功能类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SecurityInterceptor</span> <span class="keyword">extends</span> <span class="title class_">HandlerInterceptorAdapter</span> &#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">preHandle</span><span class="params">(HttpServletRequest request,</span></span><br><span class="line"><span class="params">HttpServletResponse response, Object handler)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line"></span><br><span class="line">User user=(User) request.getSession().getAttribute(<span class="string">&quot;user&quot;</span>);</span><br><span class="line"><span class="keyword">if</span>(user==<span class="literal">null</span>)&#123;</span><br><span class="line">String logintUrl=request.getContextPath()+<span class="string">&quot;/&quot;</span>+<span class="string">&quot;login&quot;</span>;</span><br><span class="line">String returnUrl=request.getServletPath();</span><br><span class="line">response.sendRedirect(logintUrl+<span class="string">&quot;?returnUrl=&quot;</span>+returnUrl);</span><br><span class="line">     <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line">｝</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>只有登录用户才能进入后台管理，并且记录下用户请求的当期路径，然后登录成功时自动进入之前请求的代码</p><h3 id="自动跳转到之前请求的URL"><a href="#自动跳转到之前请求的URL" class="headerlink" title="自动跳转到之前请求的URL"></a>自动跳转到之前请求的URL</h3><p>UserController的核心代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">@RequestMapping(value=&quot;/login&quot;,method=RequestMethod.GET)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">login</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;login&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@RequestMapping(value=&quot;/login&quot;,method=RequestMethod.POST)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">login</span><span class="params">(String username, String password, HttpSession session,String returnUrl, Model model)</span></span><br><span class="line">&#123;</span><br><span class="line">    User user=userBiz.checkLogin(username, password);</span><br><span class="line">    <span class="keyword">if</span>(user!=<span class="literal">null</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        session.setAttribute(<span class="string">&quot;user&quot;</span>,user);</span><br><span class="line">        <span class="keyword">if</span>(returnUrl!=<span class="literal">null</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;redirect:&quot;</span>+returnUrl;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> </span><br><span class="line">        &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;redirect:/movie/list&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        model.addAttribute(<span class="string">&quot;error&quot;</span>,<span class="string">&quot;用户名或者密码错误&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;login&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="配置拦截器类"><a href="#配置拦截器类" class="headerlink" title="配置拦截器类"></a>配置拦截器类</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mvc:interceptors</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:interceptor</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mvc:mapping</span> <span class="attr">path</span>=<span class="string">&quot;/movie/**&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;com.mycinema.web.interceptor.SecurityInterceptor&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mvc:interceptor</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mvc:interceptors</span>&gt;</span></span><br></pre></td></tr></table></figure><p>​根据配置，当请求路径为/movie/下任意目录（<code>**</code>代表目录，而<code>*</code>代表文件）路径时，会应用<code>SecurityInterceptor</code>拦截器。</p>]]></content>
      
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring</title>
      <link href="/posts/16e7.html"/>
      <url>/posts/16e7.html</url>
      
        <content type="html"><![CDATA[<h2 id="Spring-框架简介"><a href="#Spring-框架简介" class="headerlink" title="Spring 框架简介"></a>Spring 框架简介</h2><h3 id="什么是-Spring"><a href="#什么是-Spring" class="headerlink" title="什么是 Spring"></a>什么是 Spring</h3><p>Spring 框架是一个开源的轻量级的 DI 和 AOP 容器框架，致力于简化企业级应用开 发，让开发者使用简单的 Java Bean 来实现从前只有 EJB 才能实现的功能。 </p><h3 id="为什么要使用-Spring"><a href="#为什么要使用-Spring" class="headerlink" title="为什么要使用 Spring"></a>为什么要使用 Spring</h3><p>Spring 堪称 Java 世界中最强大的框架，其亮点非常的多，主要体现在以下几个方 面。 </p><p>（1）使用 Spring 可以实现 DI（依赖注入）。实现面向接口编程，以解决项目开发中 组件间 的解耦问题，让项目模块得以独立测试、灵活扩展和替换。 </p><p>（2）使用 Spring 可以实现 AOP（面向切面）。AOP 可以在无需修改原有类源代码 的情况下为它们切入增强功能 </p><p>（3）使用 Spring 可以实现声明式事务管理，无需在项目中写死事务处理边界，具有 更高灵活性。 </p><p>（4）Spring 可与大部分的 Java 开源框架（如 Hibernate、MyBatis、Struts2 等）进行 整合，并进一步简化这些框架的编码。 </p><p>（5）Spring 可以实现分布式远程调用、消息队列、安全验证等诸多大型应用所需的复杂功能，可以大大简化企业级系统的开发。在 Spring 出现之前，这些功能一般开发者都难以解决，只能依赖于大型厂商（如 IBM、Oracle、SAP 等）提供的昂贵的 EJB 容器；但现在，开源世界的 Spring 都可以做到，而且更为灵活和轻盈。 </p><h2 id="面向接口编程与容器框架"><a href="#面向接口编程与容器框架" class="headerlink" title="面向接口编程与容器框架"></a>面向接口编程与容器框架</h2><h3 id="面向接口编程"><a href="#面向接口编程" class="headerlink" title="面向接口编程"></a>面向接口编程</h3><p>Spring 首先是一个容器框架，用于管理系统中的 JavaBean。那么我们为何需要一个容器框架呢，这是由 Java 世界推崇的面向接口编程所决定的。JavaEE 平台的其中一个特点是倡导面向接口编程，JavaEE 本身就是由 SUN 提出的各种规范和接口构成的。 例如，JSP 技术中的 Servlet、Filter、Listener、ServletRequest，ServletResponse、 HttpSession 等对象统统都是接口。为什么要面向接口编程呢，面向接口，可以降低组件与组件之间的依赖，实现弱耦合，被依赖组件随时可以被替代。例如 Tomcat 服务器，不过是一组 JSP/Servlet 接口的实现容器，我们完全可以用其它实现同样接口的容器（如 Jetty）来替代它。此外，面向接口编程也使得组件的独立开发与测试提供了可能，否则开发上层模块的开发者就需要等待下层模块完成才能开工，各个模块无法并行开发。虽然面向接口编程的想法不错，但使用时却要解决一个核心问题——具体对象从何而来？ </p><p>参考如下代码：“CategoryDao”是一个接口，而“CategoryDaoImpl”是它的实现类， 获取对象的常规方式是使用“new”调用实现类的构造方法。如果我们用这种方式来构 建具体使用对象，就谈不上面向接口编程了，因为具体实现类已被写死在调用代码中 了。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">CategoryDao</span> <span class="variable">categoryDao</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CategoryDaoImpl</span>(); </span><br><span class="line">categoryDao.save(categoryName); </span><br></pre></td></tr></table></figure><h3 id="工厂模式"><a href="#工厂模式" class="headerlink" title="工厂模式"></a>工厂模式</h3><p>在传统的面向对象编程中，对象是调用者创建（new）出来的，调用者和被调用者产生了强耦合，而工厂模式在可以在调用者中隐藏具体类型，解决这一问题。 参考如下代码：“ObjectFactory”是对象工厂，可以根据不同的 DAO 名称获取对应 的 DAO 实现类对象。具体可以使用 Java 反射技术与 XML 配置来实现。 </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">CategoryDao</span> <span class="variable">categoryDao</span> <span class="operator">=</span> (CategoryDao)ObjectFactory.getInstance(<span class="string">&quot;categoryDao&quot;</span>);</span><br><span class="line">categoryDao.save(categoryName); </span><br></pre></td></tr></table></figure><h2 id="IOC-控制反转"><a href="#IOC-控制反转" class="headerlink" title="IOC  控制反转"></a>IOC  控制反转</h2><p>所谓依赖注入 DI（Dependency Injection），一些文献也称之控制反转 IOC（Inversionof Control）：是一种松耦合的开发模式，指对象是被动地接收它的依赖类对象，而非 自己主动去查找或创建。在开发中 A 类依赖于 B 类（如业务对象依赖于数据访问对 象），往往是 A 类中直接代码创建 B 类对象使用（或使用 JNDI 查找 B 类对象)。在依赖注入中，A 类中的 B 对象不由 A 自身创建，而是由容器 C 在实例 化 A 类对象时主动将 A 所依赖的 B 对象注入给它。 </p><p>通过 bean 元素的 property 子元素，可以通过 bean 对象的属性实现依赖注入。property 子元素中，name 属性用于声明属性名，ref 属性用于引用已声明的复杂类型 bean 对象，value 属性用于指定普通类型常量值。 </p><h2 id="导包"><a href="#导包" class="headerlink" title="导包"></a>导包</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- Spring DI 容器 --&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-context<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>4.3.6.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span> </span><br></pre></td></tr></table></figure><p>（2）在“类路径”下加 Spring 的 bean 配置文件“applicationContext.xml”，并配置 需要 Spring 管理的类对象。 </p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag"><span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span> </span></span><br><span class="line"><span class="tag"><span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="string"><span class="tag">http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;categoryDao&quot;</span> <span class="attr">class</span>=<span class="string">&quot;demo.dao.impl.CategoryDaoImpl&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span> </span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="Bean-的作用域。"><a href="#Bean-的作用域。" class="headerlink" title="Bean 的作用域。"></a>Bean 的作用域。</h2><p>Spring 默认使用单例模式管理 bean 对象，也就是说对于同一个类 Spring 中只保留一个实例，我们多次通过 Spring 的<code>getBean()</code>获取的是相同的一个实例。而一些实际的场合（单例模式，适用于无状态 Bean，不适用于有状态 Bean），单例模式不适 用，这时我们可以通过 bean 的 scope 属性来改变 Bean 的作用域。通过 bean 元素的 scope 属性，可以指定 Bean 对象在 Spring 容器中的作用域。其 取值如 下表所示。</p><table><thead><tr><th>scope 属性取值</th><th>含义</th></tr></thead><tbody><tr><td>singleton</td><td>默认值，Spring 容器中对该 bean 做单例模式处理</td></tr><tr><td>prototype</td><td>每一次请求都会产生一个新的 bean 实例，相当与一个 new 的操作，对 于 prototype 作用域的 bean，有一点非常重要，那就是 Spring 不能对一个 prototype bean 的整个生命周期负责，容器在初始化、配置、装饰或者是装配完一个 prototype 实例后，将它交给客户端，随后就对该prototype 实例不闻不问了</td></tr><tr><td>request</td><td>request 表示该针对每一次 HTTP 请求都会产生一个新的 bean，同 时该bean 仅在当前 HTTP request 内有效。</td></tr><tr><td>session</td><td>session 作用域表示该针对每一次 HTTP 请求都会产生一个新的bean，同时该 bean 仅在当前 HTTP session 内有效</td></tr><tr><td>global session</td><td>global session 作用域类似于标准的 HTTP Session 作用域，不过它仅仅在基于 portlet 的 web 应用中才有意义</td></tr></tbody></table><p>示例： </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;bean id=<span class="string">&quot;userDao&quot;</span> class=<span class="string">&quot;com.demo.dao.impl.UserDaoImpl&quot;</span> scope=<span class="string">&quot;prototype&quot;</span> /&gt; </span><br></pre></td></tr></table></figure><p>注意：若配置为 request、session、global session 时，若使用的是 Servlet 2.4 及以上的web 容器，那么需要在 web 应用的 XML 声明文件 web.xml 中增加下述 ContextListener  </p><p>声明: </p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">listener</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">listener-class</span>&gt;</span></span><br><span class="line">org.springframework.web.context.request.RequestContextListener </span><br><span class="line"><span class="tag">&lt;/<span class="name">listener-class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">listener</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="在-Web-环境中启动-Spring-容器"><a href="#在-Web-环境中启动-Spring-容器" class="headerlink" title="在 Web 环境中启动 Spring 容器"></a>在 Web 环境中启动 Spring 容器</h2><p>在 Web 环境中，应用程序是由 Web 服务器启动的，Spring 要作为对象容器（对象工厂）为各层提供依赖注入功能，就必须在 Web 服务器启动时创建 Spring 实例，并在整个应用程序生命周期中保持唯一。这时，我们就不能在 main 函数中随便创建ApplicationContext()对象了，因为 Web 应用程序并不是由 main 函数启动的。 </p><p>针对这个问题，Spring 提供了 Web 服务器的监听程序，使用监听器监听 Web 应用程序的启动事件，并在事件处理函数中创建 Spring 实例并使用单例模式（放到 Web 应用程序上下文中）缓存起来。这样在 Web 程序的任意地方，就可以获取到唯一的 Spring实例并实现依赖注入了。 </p><p>在 Web 环境下配置 Spring 容器的创建，要在 web.xml 中配置监听器，具体代码如下： </p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">context-param</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath:applicationContext.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">context-param</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">listener</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">listener-class</span>&gt;</span>org.springframework.web.context.ContextLoaderListener<span class="tag">&lt;/<span class="name">listener-class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">listener</span>&gt;</span> </span><br></pre></td></tr></table></figure><h2 id="注入分类"><a href="#注入分类" class="headerlink" title="注入分类"></a>注入分类</h2><p>bean 实例在调用无参构造器创建对象后，就要对 bean 对象的属性进行初始化。初始化是由容器自动完成的，称为注入。根据注入方式的不同，常用的有两类：set 注入、构造注入。</p><h3 id="set-注入-掌握"><a href="#set-注入-掌握" class="headerlink" title="set 注入(掌握)"></a>set 注入(掌握)</h3><p>set 注入也叫设值注入是指，通过 setter 方法传入被调用者的实例。这种注入方式简单、直观，因而在 Spring 的依赖注入中大量使用。</p><h4 id="简单注入"><a href="#简单注入" class="headerlink" title="简单注入"></a>简单注入</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">student</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> string name;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> age;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;io.peng.student&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;张三&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;age&quot;</span> <span class="attr">value</span>=<span class="string">&quot;22&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><p>还可以对系统类进行赋值</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;myDate&quot;</span><span class="attr">class</span>=<span class="string">&quot;java.util.Date&quot;</span>&gt;</span></span><br><span class="line">    &lt;！--设置时间是2019-01-16 21：51：40--&gt;</span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;time&quot;</span> <span class="attr">value</span>=<span class="string">&quot;1547646700353&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="引用类型"><a href="#引用类型" class="headerlink" title="引用类型"></a>引用类型</h4><p>当指定 bean 的某属性值为另一 bean 的实例时，通过 ref 指定它们间的引用关系。ref 的值必须为某 bean 的 id 值</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">student</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> string name;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> age;</span><br><span class="line">    <span class="comment">// School 类型</span></span><br><span class="line">    <span class="keyword">private</span> School school;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 声明School对象 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;myschool&quot;</span> <span class="attr">class</span>=<span class="string">&quot;io.peng.School&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;北京大学&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;address&quot;</span> <span class="attr">value</span>=<span class="string">&quot;海定区&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;io.peng.student&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;张三&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;age&quot;</span> <span class="attr">value</span>=<span class="string">&quot;22&quot;</span> /&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 应用school的id --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;school&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;myschool&quot;</span> /&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="构造方法注入"><a href="#构造方法注入" class="headerlink" title="构造方法注入"></a>构造方法注入</h3><p>构造注入是指，在构造调用者实例的同时，完成被调用者的实例化。即，使用构造器设置依赖关系。在实体类中必须提供相应参数的构造方法。<br><code>&lt;constructor-arg /&gt;</code>标签中用于指定参数的属性有：<br><code>name</code>：指定参数名称。<br><code>index</code>：指明该参数对应着构造器的第几个参数，从 0 开始。不过，该属性不要也行， 但要注意，若参数类型相同，或之间有包含关系，则需要保证赋值顺序要与构造器中的参数顺序一致。</p><h4 id="使用构造方法的参数名称注入值"><a href="#使用构造方法的参数名称注入值" class="headerlink" title="使用构造方法的参数名称注入值"></a>使用构造方法的参数名称注入值</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//提供有参的构造方法为进行注入值</span></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">Student</span><span class="params">(String myname, <span class="type">int</span> myage)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.name = myname;</span><br><span class="line">    <span class="built_in">this</span>.age = myage;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="title function_">Student</span><span class="params">(String name, <span class="type">int</span> age, School school)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.name = name;</span><br><span class="line">    <span class="built_in">this</span>.age = age;</span><br><span class="line">    <span class="built_in">this</span>.school = school;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--    创建学校对象,并赋值--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;school&quot;</span> <span class="attr">class</span>=<span class="string">&quot;io.peng.School&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;清华大学&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">&quot;address&quot;</span> <span class="attr">value</span>=<span class="string">&quot;北京海淀区&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--    创建学生对象,通过构造方法参数名称注入值--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;stu&quot;</span> <span class="attr">class</span>=<span class="string">&quot;io.peng.Student&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">&quot;age&quot;</span> <span class="attr">value</span>=<span class="string">&quot;22&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;张三&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">&quot;school&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;school&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="使用构造方法的参数索引下标注入值"><a href="#使用构造方法的参数索引下标注入值" class="headerlink" title="使用构造方法的参数索引下标注入值"></a>使用构造方法的参数索引下标注入值</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--    通过构造方法参数下标索引进入注入--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;stuindex&quot;</span> <span class="attr">class</span>=<span class="string">&quot;io.peng.Student&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">index</span>=<span class="string">&quot;1&quot;</span> <span class="attr">value</span>=<span class="string">&quot;22&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">index</span>=<span class="string">&quot;0&quot;</span> <span class="attr">value</span>=<span class="string">&quot;李四&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">index</span>=<span class="string">&quot;2&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;school&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="不指定名称和下标索引的注入"><a href="#不指定名称和下标索引的注入" class="headerlink" title="不指定名称和下标索引的注入"></a>不指定名称和下标索引的注入</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--    通过构造方法参数进入注入,不指定参数名称和索引下标--&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 注意：此种方式的注入一定要按类中构造方法的参数的顺序来进行注入。 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;stuno&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.bjpowernode.pojo.s03.Student&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span>  <span class="attr">value</span>=<span class="string">&quot;李四&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span>  <span class="attr">value</span>=<span class="string">&quot;22&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span>  <span class="attr">ref</span>=<span class="string">&quot;school&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="byName-方式自动注入-autowire"><a href="#byName-方式自动注入-autowire" class="headerlink" title="byName 方式自动注入 autowire"></a>byName 方式自动注入 autowire</h3><p>当配置文件中被调用者 bean 的 id 值与代码中调用者 bean 类的属性名相同时，可使用byName 方式，让容器自动将被调用者 bean 注入给调用者 bean。容器是通过调用者的 bean类的属性名与配置文件的被调用者 bean 的 id 进行比较而实现自动注入的。</p><h3 id="byType-方式自动注入-autowire"><a href="#byType-方式自动注入-autowire" class="headerlink" title="byType 方式自动注入 autowire"></a>byType 方式自动注入 autowire</h3><p>使用 byType 方式自动注入，要求：配置文件中被调用者 bean 的 class 属性指定的类， 要与代码中调用者 bean 类的某引用类型属性类型同源。即要么相同，要么有 is-a 关系（子类，或是实现类）。但这样的同源的被调用 bean 只能有一个。多于一个，容器就不知该匹配哪一个了。</p><h2 id="注解DI"><a href="#注解DI" class="headerlink" title="注解DI"></a>注解DI</h2><p>依赖注入：DI(Dependency Injection)，对于 DI 使用注解，将不再需要在 Spring 配置文件中声明bean 实例。Spring 中使用注解， 需要在原有 Spring 运行环境基础上再做一些改变。需要在 <strong>Spring 配置文件中</strong>配置组件扫描器，用于在指定的基本包中扫描注解。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;io.peng.service.impl&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure><p>指定 base-package 的值使用分隔符<br>分隔符可以使用逗号（，）或分号（;），还可以使用空格，不建议使用空格。</p><h3 id="创建对象的注解"><a href="#创建对象的注解" class="headerlink" title="创建对象的注解"></a>创建对象的注解</h3><table><thead><tr><th>注解</th><th>描述</th></tr></thead><tbody><tr><td>@Component</td><td>标记一个普通的 bean 被 Spring 管理，没有特定的语义</td></tr><tr><td>@Repository</td><td>标注一个 DAO 组件 bean</td></tr><tr><td>@Service</td><td>标注一个业务逻辑组件 bean</td></tr><tr><td>@Controller</td><td>标注一个控制器组件 bean</td></tr></tbody></table><h3 id="给对象赋值的注解"><a href="#给对象赋值的注解" class="headerlink" title="给对象赋值的注解"></a>给对象赋值的注解</h3><table><thead><tr><th>注解</th><th>描述</th></tr></thead><tbody><tr><td>@Value</td><td>给简单类型赋值</td></tr><tr><td>@Autowired</td><td>按属性类型装配依赖对象（Spring 特有的注解）</td></tr><tr><td>@Qualifier</td><td>给引用类型按名称注入</td></tr><tr><td>@Resource</td><td>先按名称（bean id）装配依赖对象，没有匹配则按类型装配（Java EE 官方注解）</td></tr></tbody></table><h3 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h3><p>需要在类上使用注解@Component，该注解的 value 属性用于指定该 bean 的 id 值。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span>（<span class="string">&quot;myStudent&quot;</span>）</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">student</span>&#123;</span><br><span class="line">    <span class="meta">@Value</span>（<span class="string">&quot;张三&quot;</span>）</span><br><span class="line">    <span class="keyword">private</span> String name；</span><br><span class="line">    <span class="meta">@Value</span>（<span class="string">&quot;21&quot;</span>）</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> age;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>需要在引用属性上使用注解@Autowired，该注解默认使用按类型自动装配 Bean 的方式。使用该注解完成属性注入时，类中无需 setter。当然，若属性有 setter，则也可将其加<br>到 setter 上。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span>（<span class="string">&quot;mystudent&quot;</span>）</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">student</span>&#123;</span><br><span class="line">    <span class="meta">@Value</span>（<span class="string">&quot;张三&quot;</span>）</span><br><span class="line">    <span class="keyword">private</span> string name；</span><br><span class="line">    <span class="meta">@Value</span>（<span class="string">&quot;21&quot;</span>）</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> age；</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> School school；</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@Component(&quot;myschool&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">School</span>&#123;</span><br><span class="line">    <span class="meta">@Value</span>（<span class="string">&quot;清华大学&quot;</span>）</span><br><span class="line">    <span class="keyword">private</span> string name;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="为应用指定多个-Spring-配置文件"><a href="#为应用指定多个-Spring-配置文件" class="headerlink" title="为应用指定多个 Spring 配置文件"></a>为应用指定多个 Spring 配置文件</h2><p>拆分策略:<br>按模块拆分，例如用户模块applicationContext_user.xml，applicationContext_book.xml,每个xml文件中都包含相应的xxxController,xxxService,xxxDao的对象的创建。<br>按层拆分，例如拆分成applicationContext_controller.xml, applicationContext_service.xml,<br>applicationContext_dao.xml等，每个xml文件中有相关对象的创建，例如：applicationContext_controller.xml文件中包含userController,bookController等对象的创建。</p><p>拆分后整合<br>使用一个总的配置文件整合（专门导入配置文件的）<br>多个配置文件中有一个总文件，总配置文件将各其它子文件通过<code>&lt;import/&gt;</code>引入。在 Java<br>代码中只需要使用总配置文件对容器进行初始化即可。注意：可以使用通配符*进行批量整合。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;！--单个导入--&gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">import</span> <span class="attr">resource</span>=<span class="string">&quot;application_school.xml&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">import</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">import</span> <span class="attr">resource</span>=<span class="string">&quot;application_student.xml&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">import</span>&gt;</span></span><br><span class="line">&lt;！--</span><br><span class="line">使用通配符批量导入--&gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">import</span> <span class="attr">resource</span>=<span class="string">&quot;application_*.xmL&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">import</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="Bean-的生命周期管理"><a href="#Bean-的生命周期管理" class="headerlink" title="Bean 的生命周期管理"></a>Bean 的生命周期管理</h2><p>在实例化 bean 时，有时有必要执行一些初始化代码来使它处于可用状态，或者在丢弃 bean 时需要执行一些清理工作。Spring 为这种需求提供了初始化方法 init-method 和 销毁方法 destory-method 配置，使得 bean 对象的生命周期管理更为细致。 </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserDaoImpl</span> <span class="keyword">implements</span> <span class="title class_">UserDao</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">init</span><span class="params">()</span>&#123; </span><br><span class="line">System.out.println(<span class="string">&quot;执行了 UserDao 的初始化方法&quot;</span>); </span><br><span class="line">&#125; </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">save</span><span class="params">()</span> &#123; </span><br><span class="line">System.out.println(<span class="string">&quot;执行 UserDao，用户信息保存成功。&quot;</span>); </span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">destory</span><span class="params">()</span>&#123; </span><br><span class="line">System.out.println(<span class="string">&quot;执行了 UserDao 的销毁化方法&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><p>通过配置即可在适当时机调用初始化和销毁方法。 </p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;userDao&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.demo.dao.impl.UserDaoImpl&quot;</span> <span class="attr">init-method</span>=<span class="string">&quot;init&quot;</span> </span></span><br><span class="line"><span class="tag"><span class="attr">destroy-method</span>=<span class="string">&quot;destory&quot;</span> /&gt;</span> </span><br></pre></td></tr></table></figure><h2 id="AOP-编程术语"><a href="#AOP-编程术语" class="headerlink" title="AOP 编程术语"></a>AOP 编程术语</h2><p>（1）    切面（Aspect）<br>切面泛指交叉业务逻辑,或是公共的，通用的业务。上例中的事务处理、日志处理就可以理解为切面。常用的切面是通知（Advice）。实际就是对主业务逻辑的一种增强。</p><p>（2）    连接点（JoinPoint）<br>连接点指可以被切面织入的具体方法。通常业务接口中的方法均为连接点。</p><p>（3）    切入点（Pointcut）<br>切入点指声明的一个或多个连接点的集合。通过切入点指定一组方法。<br>被标记为 final 的方法是不能作为连接点与切入点的。因为最终的是不能被修改的，不能被增强的。</p><p>（4）    目标对象（Target）<br>目标对象指 将要被增强 的对象。 即包含主业 务逻辑的 类的对象。 上例中 的<br>BookServiceImpl 的对象若被增强，则该类称为目标类，该类对象称为目标对象。当然， 不被增强，也就无所谓目标不目标了。</p><p>（5）    通知（Advice）<br>通知表示切面的执行时间，Advice 也叫增强。上例中的 MyInvocationHandler 就可以理解为是一种通知。换个角度来说，通知定义了增强代码切入到目标代码的时间点，是目标方法执行之前执行，还是之后执行等。通知类型不同，切入时间不同。<br>切入点定义切入的位置，通知定义切入的时间。</p><h2 id="Spring的切面AOP注解配置"><a href="#Spring的切面AOP注解配置" class="headerlink" title="Spring的切面AOP注解配置"></a><strong>Spring的切面AOP注解配置</strong></h2><p>1）在Spring配置文件（applicationContext.xml）中加入context声明和AOP声明</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:aop</span>=<span class="string">&quot;http://www.springframework.org/schema/aop&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans </span></span></span><br><span class="line"><span class="string"><span class="tag">           http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">           http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="string"><span class="tag">           http://www.springframework.org/schema/context/spring-context.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">           http://www.springframework.org/schema/aop</span></span></span><br><span class="line"><span class="string"><span class="tag">           http://www.springframework.org/schema/aop/spring-aop.xsd&quot;</span>&gt;</span></span><br><span class="line">……</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><p>（2）在Spring配置文件中配置注解标识业务类的扫描范围，配置切面类的扫描范围，开启Spring切面自动代理。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;com.demo.aspact&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;com.demo.biz.impl&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">aop:aspectj-autoproxy</span> /&gt;</span></span><br></pre></td></tr></table></figure><p>（3）定义切面类并使用注解标识切入点、通知类型。</p><p>​    普通通知：可以事先写一个切点表达式然后重用，也可以在每个通知前直接写切点表达式。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Aspect</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">NormalAdvice</span> &#123;</span><br><span class="line"><span class="meta">@Pointcut(&quot;execution(* *.save(..))&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">pc1</span><span class="params">()</span>&#123;&#125;<span class="comment">//该方法无实际作用，仅作为切入点的名称被通知引用而已</span></span><br><span class="line"><span class="meta">@Before(&quot;pc1()&quot;)</span><span class="comment">//前置通知</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">doBefore</span><span class="params">()</span> &#123; … &#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@After(&quot;pc1()&quot;)</span><span class="comment">//后置通知</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">doAfter</span><span class="params">()</span> &#123; … &#125;</span><br><span class="line"><span class="meta">@AfterReturning(&quot;pc1()&quot;)</span><span class="comment">//返回后通知</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">doAfterReturn</span><span class="params">()</span> &#123; … &#125;</span><br><span class="line"><span class="meta">@AfterThrowing(&quot;pc1()&quot;)</span><span class="comment">//抛出异常通知</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">doException</span><span class="params">()</span> &#123; … &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">环绕通知：</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Aspect</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AroundAdvice</span> &#123;</span><br><span class="line"><span class="meta">@Pointcut(&quot;execution(* *.save(..))&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">pc2</span><span class="params">()</span>&#123;&#125;</span><br><span class="line"><span class="meta">@Around(&quot;pc2()&quot;)</span></span><br><span class="line"><span class="keyword">public</span> Object <span class="title function_">doAround</span><span class="params">(ProceedingJoinPoint jp)</span> <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;环绕通知开始...&quot;</span>);</span><br><span class="line"><span class="type">Object</span> <span class="variable">result</span> <span class="operator">=</span> jp.proceed();</span><br><span class="line">System.out.println(<span class="string">&quot;环绕通知结束...&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> result;</span><br><span class="line">       &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="事务注解"><a href="#事务注解" class="headerlink" title="事务注解"></a>事务注解</h2><p>在spring的配置文件中，配置事务管理器，名称为transactionManager</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 事务管理器 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;transactionManager&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.jdbc.datasource.DataSourceTransactionManager&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;dataSource&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在spring的配置文件中,配置使用事务注解</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--事务启用注解--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tx:annotation-driven</span>/&gt;</span></span><br></pre></td></tr></table></figure><p>在业务方法上或者类上面添加@Transactional注解，默认的事务管理器名字为transactionManager，事务传播机制默认为propagation = Propagation.REQUIRED</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Transactional</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">remove</span><span class="params">(Integer id)</span>  &#123;</span><br><span class="line">    <span class="keyword">return</span> categoryDao.delete(id);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="导包-1"><a href="#导包-1" class="headerlink" title="导包"></a>导包</h3><p>（1）MyBatis：mybatis、mybatis-springMyBatis与Spring整合包）<br>（2）数据库驱动包：<br>（3）Spring相关包：Core（Bean管理）、persistJdbc（数据源）、persistCore（事务）、aop（切面）</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- mybatis --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.2.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- MyBatis与Spring整合包 ，整合Spring的关键 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- dbcp 数据源（连接池），必须 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>commons-dbcp<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-dbcp<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- Spring 容器 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-context<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- Spring ORM --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-orm<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="核心类"><a href="#核心类" class="headerlink" title="核心类"></a>核心类</h3><p>SqlSessionFactoryBean：在MyBatis中，SqlSessionFactory是由SqlSessionFactoryBuilder创建的，在MyBatis-Spring中，使用SqlSessionFactoryBean来完成。</p><p>MapperFactoryBean:   该类实现了Spring的FactoryBean接口，通过MapperInterface属性注入接口。（使用Mapper接口调用数据访问）</p><p>SqlSessionTemplate:  模版，负责管理SqlSession。会保证SqlSession和当前Spring事务相关联的，它会管理会话的生命周期，包括必要的关闭，提交和回滚操作。</p><h3 id="构建实体类"><a href="#构建实体类" class="headerlink" title="构建实体类"></a>构建实体类</h3><h3 id="构建数据访问接口"><a href="#构建数据访问接口" class="headerlink" title="构建数据访问接口"></a>构建数据访问接口</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">CategoryDao</span> &#123;</span><br><span class="line">List&lt;Category&gt; <span class="title function_">getAll</span><span class="params">()</span>;</span><br><span class="line"><span class="keyword">void</span> <span class="title function_">add</span><span class="params">(Category category)</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">MovieDao</span> &#123;</span><br><span class="line"><span class="keyword">public</span> List&lt;Movie&gt;   <span class="title function_">getMovies</span><span class="params">(<span class="meta">@Param(&quot;cid&quot;)</span><span class="type">int</span> cid,<span class="meta">@Param(&quot;title&quot;)</span>String title)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="创建SQL映射文件mybatis-xml"><a href="#创建SQL映射文件mybatis-xml" class="headerlink" title="创建SQL映射文件mybatis.xml"></a>创建SQL映射文件mybatis.xml</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">configuration</span>  <span class="keyword">PUBLIC</span> <span class="string">&quot;-//mybatis.org//DTD Config 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta"><span class="string">&quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span> </span><br><span class="line">    <span class="comment">&lt;!-- 用于为（实体类的）完全限定类名设置简化的别名 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">typeAliases</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">typeAlias</span> <span class="attr">type</span>=<span class="string">&quot;com.myCinema.entity.Category&quot;</span> <span class="attr">alias</span>=<span class="string">&quot;Category&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">typeAlias</span> <span class="attr">type</span>=<span class="string">&quot;com.myCinema.entity.Movie&quot;</span> <span class="attr">alias</span>=<span class="string">&quot;Movie&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">typeAliases</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="配置applicationContext-xml文件"><a href="#配置applicationContext-xml文件" class="headerlink" title="配置applicationContext.xml文件"></a>配置applicationContext.xml文件</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 配置数据源 (dbcp数据源,需要添加&quot;commons-dbcp.jar&quot;包) --&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.apache.commons.dbcp.BasicDataSource&quot;</span> <span class="attr">destroy-method</span>=<span class="string">&quot;close&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driverClassName&quot;</span> <span class="attr">value</span>=<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span> <span class="attr">value</span>=<span class="string">&quot;jdbc:mysql://localhost:3306/MyCinema&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;root&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot; &quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 配置SqlSessionFactory，由Spring的 SqlSessionFactoryBean 提供--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;sqlSessionFactory&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.mybatis.spring.SqlSessionFactoryBean&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;dataSource&quot;</span> /&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 保留mybatis.xml主配置文件，配置实体类别名 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;configLocation&quot;</span> <span class="attr">value</span>=<span class="string">&quot;classpath:mybatis.xml&quot;</span> /&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 配置sqlMapper配置文件位置 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;mapperLocations&quot;</span> <span class="attr">value</span>=<span class="string">&quot;classpath:mapper/*Mapper.xml&quot;</span> /&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="如果使用Mapper接口访问，无需提供数据访问实现类。"><a href="#如果使用Mapper接口访问，无需提供数据访问实现类。" class="headerlink" title="如果使用Mapper接口访问，无需提供数据访问实现类。"></a>如果使用Mapper接口访问，无需提供数据访问实现类。</h3><p>MyBatis的一大亮点就是不用Dao的实现类。MyBatis-Spring提供了一个MapperFactoryBean可以将数据映射接口转化为SpringBean.    </p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;categoryDao&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.mybatis.spring.mapper.MapperFactoryBean&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;sqlSessionFactory&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;sqlSessionFactory&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;mapperInterface&quot;</span> <span class="attr">value</span>=<span class="string">&quot;com.myCinema.dao.CategoryDao&quot;</span>/&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="使用MapperScannerConfigurer简化配置"><a href="#使用MapperScannerConfigurer简化配置" class="headerlink" title="使用MapperScannerConfigurer简化配置"></a>使用MapperScannerConfigurer简化配置</h3><p>如果数据访问映射接口很多，需要在Spring的配置文件对数据映射接口做配置。为了简化配置，MyBatis-Spring提供了一个转换器MapperScannerConfigurer，它可以将接口直接转换为Spring容器中的Bean(无需配置数据访问接口类)配置如下:</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.mybatis.spring.mapper.MapperScannerConfigurer&quot;</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;sqlSessionFactory&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;sqlSessionFactory&quot;</span>/&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;basePackage&quot;</span> <span class="attr">value</span>=<span class="string">&quot;com.mycinema.dao&quot;</span>/&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="声明式事务管理"><a href="#声明式事务管理" class="headerlink" title="声明式事务管理"></a>声明式事务管理</h2><p>在实际的数据访问开发中，在增删改中引入事务管理是非常必要的，只有在事务管理下，相关的数据才能保持一致性，否则有可能产生重大业务错误。但在 DAO 模式下，增删改数据往往是单表操作，而事务则常常包含多个 DAO 对象和方法，需要确保多个 DAO 方法在同一 Connection 和 Transaction 下执行变得非常复杂。<br>Spring 利用 AOP 切面技术，为数据访问提供了基于业务层（一个业务方法往往代表一个事务，可以包含多个 DAO 方法）的声明式事务管理，完全透明地解决了事务难题。所谓声明式的事务管理：即只需配置，无须编程，利用 AOP 技术，把事务代码横切织入到数据访问代码中。<br>Spring 针对不同的数据访问方式，提供了不同的事务管理器，如下所示：</p><h3 id="使用-DataSource-的事务管理器"><a href="#使用-DataSource-的事务管理器" class="headerlink" title="使用 DataSource 的事务管理器"></a>使用 DataSource 的事务管理器</h3><p>这里讨论的是 DataSource的事务管理器：org.springframework.jdbc.datasource.DataSourceTransactionManager</p><p>（1）导入所需要依赖。<br>这里需要用到 AOP 和切面描述，因此需要在原来基础上添加 Spring 的切面依赖。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- Spring 切面，可用于配置事务切面 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-aspects<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;springframework.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>（2）在 Spring 配置文件的文档声明中加入 aop 和 tx（事务）配置声明。<br>在Spring配置文件的文档声明中加入aop和tx（事务）配置声明。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag"><span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag"><span class="attr">xmlns:aop</span>=<span class="string">&quot;http://www.springframework.org/schema/aop&quot;</span></span></span><br><span class="line"><span class="tag"><span class="attr">xmlns:tx</span>=<span class="string">&quot;http://www.springframework.org/schema/tx&quot;</span></span></span><br><span class="line"><span class="tag"><span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;</span></span></span><br><span class="line"><span class="string"><span class="tag">     http://www.springframework.org/schema/beans </span></span></span><br><span class="line"><span class="string"><span class="tag">     http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">     http://www.springframework.org/schema/tx</span></span></span><br><span class="line"><span class="string"><span class="tag">     http://www.springframework.org/schema/tx/spring-tx.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">     http://www.springframework.org/schema/aop </span></span></span><br><span class="line"><span class="string"><span class="tag">     http://www.springframework.org/schema/aop/spring-aop.xsd&quot;</span>&gt;</span></span><br><span class="line">……</span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><p>（3）配置DataSource事务管理器。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;txManager&quot;</span>  <span class="attr">class</span>=<span class="string">&quot;org.springframework.jdbc.datasource.DataSourceTransactionManager&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;dataSource&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><p>（4）配置AOP事务通知。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">tx:advice</span> <span class="attr">id</span>=<span class="string">&quot;txAdvice&quot;</span> <span class="attr">transaction-manager</span>=<span class="string">&quot;txManager&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tx:attributes</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">&quot;add*&quot;</span> <span class="attr">propagation</span>=<span class="string">&quot;REQUIRED&quot;</span>  /&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">&quot;update*&quot;</span> <span class="attr">propagation</span>=<span class="string">&quot;REQUIRED&quot;</span>  /&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">&quot;delete*&quot;</span> <span class="attr">propagation</span>=<span class="string">&quot;REQUIRED&quot;</span>  /&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">&quot;get*&quot;</span> <span class="attr">read-only</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">&quot;fetch*&quot;</span> <span class="attr">read-only</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tx:attributes</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tx:advice</span>&gt;</span></span><br></pre></td></tr></table></figure><p>5）配置 AOP 切面（通知+切入点）</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">aop:config</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">aop:advisor</span>  <span class="attr">pointcut</span>=<span class="string">&quot;execution(* mycinema.biz...(..))&quot;</span>  <span class="attr">advice-ref</span>=<span class="string">&quot;txAdvice&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">aop:config</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="理解事务参数。"><a href="#理解事务参数。" class="headerlink" title="理解事务参数。"></a>理解事务参数。</h3><p>​    配置Spring声明式事务管理时，<a href="tx:method">tx:method</a>配置元素除用于声明业务方法名外，还提供了若干属性用于控制事务细节：propagation、isolaction、read-only、timeout等等。</p><h3 id="（1）propagation（传播行为）。"><a href="#（1）propagation（传播行为）。" class="headerlink" title="（1）propagation（传播行为）。"></a>（1）propagation（传播行为）。</h3><p>​    用于声明执行该业务方法时是否启用当前事务，还是启动一个新的事务。</p><table><thead><tr><th>取值</th><th>意义</th></tr></thead><tbody><tr><td>Propagation.REQUIRED</td><td>如果当前存在事务，则加入该事务，如果当前不存在事务，则创建一个新的事务。**(** 也就是说如果A方法和B方法都添加了注解，在默认传播模式下，A方法内部调用B方法，会把两个方法的事务合并为一个事务 <strong>）</strong></td></tr><tr><td>Propagation.SUPPORTS</td><td>如果当前存在事务，则加入该事务；如果当前不存在事务，则以非事务的方式继续运行</td></tr><tr><td>Propagation.MANDATORY</td><td>如果当前存在事务，则加入该事务；如果当前不存在事务，则抛出异常。</td></tr><tr><td>Propagation.REQUIRES_NEW</td><td>重新创建一个新的事务，如果当前存在事务，暂停当前的事务。**(** 当类A中的 a 方法用默认Propagation.REQUIRED模式，类B中的 b方法加上采用 Propagation.REQUIRES_NEW模式，然后在 a 方法中调用 b方法操作数据库，然而 a方法抛出异常后，b方法并没有进行回滚，因为Propagation.REQUIRES_NEW会暂停 a方法的事务 <strong>)</strong></td></tr><tr><td>Propagation.NESTED</td><td>和 Propagation.REQUIRED 效果一样</td></tr><tr><td>Propagation.NOT_SUPPORTED</td><td>以非事务的方式运行，如果当前存在事务，暂停当前的事务。</td></tr><tr><td>Propagation.NEVER</td><td>以非事务的方式运行，如果当前存在事务，则抛出异常</td></tr></tbody></table><h3 id="（2）isolaction（隔离级别）。"><a href="#（2）isolaction（隔离级别）。" class="headerlink" title="（2）isolaction（隔离级别）。"></a>（2）isolaction（隔离级别）。</h3><table><thead><tr><th>TransactionDefinition取值</th><th>意义</th></tr></thead><tbody><tr><td>ISOLATION_DEFAULT</td><td>使用后端数据库默认的隔离级别，Mysql 默认采用的 REPEATABLE_READ隔离级别 Oracle 默认采用的 READ_COMMITTED隔离级别</td></tr><tr><td>ISOLATION_READ_UNCOMMITTED</td><td>最低的隔离级别，允许读取尚未提交的数据变更，可能会导致脏读、幻读或不可重复读</td></tr><tr><td>ISOLATION_READ_COMMITTED</td><td>允许读取并发事务已经提交的数据，可以阻止脏读，但是幻读或不可重复读仍有可能发生</td></tr><tr><td>ISOLATION_REPEATABLE_READ</td><td>对同一字段的多次读取结果都是一致的，除非数据是被本身事务自己所修改，可以阻止脏读和不可重复读，但幻读仍有可能发生</td></tr><tr><td>ISOLATION_SERIALIZABLE</td><td>最高的隔离级别，完全服从ACID的隔离级别。所有的事务依次逐个执行，这样事务之间就完全不可能产生干扰，也就是说，该级别可以防止脏读、不可重复读以及幻读。但是这将严重影响程序的性能。通常情况下也不会用到该级别</td></tr><tr><td></td><td></td></tr></tbody></table><p>​    多个事务同时运行操作同一批数据会导致并发，有可能会导致以下问题：</p><p>A． 脏读（Dirty Reads）：一个事务开始读取了某行数据，但是另外一个事务已经更新了此数据但没有能够及时提交。这是相当危险的，因为很可能所有的操作都被回滚。</p><p>学生A的原始成绩为50分，老师读取之后修改为60但未提交，学生A读取到60分，老师发现修改错了，回滚，学生A的成绩恢复为50分。</p><p>B． 幻读（Phantom Reads）：事务在操作过程中进行两次查询，第二次查询的结果包含了第一次查询中未出现的数据或者缺少了第一次查询中出现的数据（这里并不要求两次查询的SQL语句相同）。这是因为在两次查询过程中有另外一个事务插入数据造成的。</p><p>A改后还未提交，B改其他的，A再查</p><p>老师A将60分以下的成绩改为60分但未提交</p><p>老师B将70分-60分的成绩改为50分</p><p>老师A再查询60分以下学生成绩还有一批数据</p><p>C． 不可重复读（Non-repeatable Reads）：一个事务对同一行数据重复读取两次，但是却得到了不同的结果。</p><p>A先读，B再改，A再读</p><p>1.在事务A中，学生读取了自己的成绩为50分<br>2.在事务B中，老师修改了学生的成绩为60,并提交了事务.<br>3.在事务A中，学生 再次读取自己的成绩为60分</p><p>​    理想状态下，事务之间应该是完全相互隔离的，但完全隔离会影响性能，因为隔离需要锁定数据库中的记。在实际中，并非所有应用都要求事务完全隔离，因此Spring提供了若干个隔离级别，以提高事务管理的灵活度。</p><h3 id="（3）read-only（只读）"><a href="#（3）read-only（只读）" class="headerlink" title="（3）read-only（只读）"></a>（3）read-only（只读）</h3><p>​    若一个事务只需要对数据库执行读操作，那就应该把事务声明为只读，让Spring对该事务的执行实行优化策略。</p><h3 id="4-timeout（超时）"><a href="#4-timeout（超时）" class="headerlink" title="(4)  timeout（超时）"></a>(4)  timeout（超时）</h3><p>​    为了确保不会造成死锁或长期等待过分增加数据库负担，可以为事务提供一个超时时间，让事务在超过设定的秒数后自动回滚事务。</p><h3 id="5-rollbackfor属性"><a href="#5-rollbackfor属性" class="headerlink" title="(5)  rollbackfor属性"></a>(5)  rollbackfor属性</h3><p>rollbackFor属性配置当发生何种异常的时候会回滚。一般是配置的Exception异常大类。</p><h3 id="6-noRollbackFor属性"><a href="#6-noRollbackFor属性" class="headerlink" title="(6) noRollbackFor属性"></a>(6) noRollbackFor属性</h3><p> 抛出指定的异常类型，不回滚事务，也可以指定多个异常类型</p><h3 id="7-事务注解-Transactional失效场景"><a href="#7-事务注解-Transactional失效场景" class="headerlink" title="(7) 事务注解:Transactional失效场景"></a>(7) 事务注解:Transactional失效场景</h3><h4 id="1-Transactional应用在非public方法上"><a href="#1-Transactional应用在非public方法上" class="headerlink" title="1.@Transactional应用在非public方法上"></a>1.@Transactional应用在非public方法上</h4><p>该注解只能应用于public方法。只要public方法回滚了，那么public方法内部的调用的方法也就都回滚了，只要一个回滚的入口就好了。</p><h4 id="2-Transactional注解属性propagation设置错误"><a href="#2-Transactional注解属性propagation设置错误" class="headerlink" title="2.@Transactional注解属性propagation设置错误"></a>2.@Transactional注解属性propagation设置错误</h4><p>  这种失效是由于配置错导致的，若是错误的配置一下三种，事务将不会发生回滚。</p><p>TransactionDefinition.PROPAGATION_SUPPORTS：如果当前存在事务，则加入该事务；如果当前没有事务，则以非事务的方式继续运行。</p><p>TransactionDefinition.PROPAGATION_NOT_SUPPORTED：以非事务方式运行，如果当前存在事务，则把当前事务挂起。</p><p>TransactionDefinition.PROPAGATION_NEVER：以非事务方式运行，如果当前存在事务，则抛出异常</p><h4 id="3-Transactional注解属性rollbackFor错误"><a href="#3-Transactional注解属性rollbackFor错误" class="headerlink" title="3.@Transactional注解属性rollbackFor错误"></a>3.@Transactional注解属性rollbackFor错误</h4><p>rollbackFor属性配置当发生何种异常的时候会回滚。一般我们都是配置的Exception异常大类。Spring默认抛出未检查异常，继承自RuntimeException或者Error时才回滚事务；其他异常不会回滚。所以当我们希望发生我们指定的异常时回滚，那么就需要配置这个属性了</p><p><img src="Spring%E6%95%B4%E5%90%88MyBatis.assets/2021-06-13_083729.jpg"></p><h4 id="4-Transactional在同一个方法中调用，导致-Transactional失效"><a href="#4-Transactional在同一个方法中调用，导致-Transactional失效" class="headerlink" title="4.@Transactional在同一个方法中调用，导致@Transactional失效"></a>4.@Transactional在同一个方法中调用，导致@Transactional失效</h4><p>  开发中避免不了类中方法的调用，比如有一个A类，内有B、C两个public方法。B声明事务，C未声明事务。当B调用C，那么B失败则事务回滚；但是当C调用B的时候，C失败，那么事务不会回滚</p><h4 id="5-异常被catch，导致回滚失败"><a href="#5-异常被catch，导致回滚失败" class="headerlink" title="5.异常被catch，导致回滚失败"></a>5.异常被catch，导致回滚失败</h4><p>  当你对方法使用@Transactional的时候，但是你方法内部try-catch了异常。</p><p> A、B两个方法，A声明事务；A方法调用B方法并且try-catch了B方法，当B方法执行报错的时候，A不能回滚。</p><h2 id="用到了哪些设计模式"><a href="#用到了哪些设计模式" class="headerlink" title="用到了哪些设计模式"></a>用到了哪些设计模式</h2><ul><li>代理模式：在 AOP 和 Remoting 中被用的比较多。</li><li>单例模式：在 Spring 配置文件中定义的 Bean 默认为单例模式。</li><li>模板方法：用来解决代码重复的问题。比如. RestTemplate, JmsTemplate, JpaTemplate。</li><li>前端控制器：Spring 提供了 DispatcherServlet 来对请求进行分发。</li><li>视图帮助(View Helper )：Spring 提供了一系列的 JSP 标签，高效宏来辅助将分散的代码整合在视图里。</li><li>依赖注入：贯穿于 BeanFactory / ApplicationContext 接口的核心理念。</li><li>工厂模式：BeanFactory 用来创建对象的实例。</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MyBatis</title>
      <link href="/posts/f1de.html"/>
      <url>/posts/f1de.html</url>
      
        <content type="html"><![CDATA[<h2 id="MyBatis简介"><a href="#MyBatis简介" class="headerlink" title="MyBatis简介"></a>MyBatis简介</h2><p>MyBatis是一个持久化框架（ORM），它原本是apache的一个开源项目iBatis，2010年这个项目由apache software foundation迁移到了google code，并且改名为MyBatis。相对于同样实现持久化功能的Hibernate 而言，它更轻量级、学习成本更低、可控性更高。尤其是改名为MyBatis后，框架整体做了较大的改进，渐渐成为能与Hibernate比肩的持久化框架。</p><p>与Hibernate不同MyBatis的核心思想不是“对象关系映射”，而是“对象查询映射”。程序员需要自己编写SQL语句来实现Java对象与数据库的转换，因此在编码量上较Hibernate大，但在性能、可控性和易用性上却比Hibernate更好。</p><p><strong>ORM(Object Relational Mapping):对象关系映射</strong><br><strong>编写程序的时候，以面向对象的方式处理数据，保存数据的时候，却以关系型数据库的方式存储。</strong><br><strong>持久化的操作：将对象保存到关系型数据库中 ,将关系型数据库中的数据读取出来以对象的形式封装</strong></p><h2 id="学习文档"><a href="#学习文档" class="headerlink" title="学习文档"></a>学习文档</h2><p>相对与其它框架，MyBatis的使用相对比较简单，MyBatis框架和工具可以在google code上下载：<a href="https://code.google.com/p/mybatis">https://code.google.com/p/mybatis</a></p><p>MyBatis官方配有中文翻译的使用文档：<a href="http://mybatis.github.io/mybatis-3/zh/index.html">http://mybatis.github.io/mybatis-3/zh/index.html</a></p><p>后续学习<code>MyBatis-Plus</code>：<a href="https://baomidou.com/">https://baomidou.com/</a></p><p>书籍下载：<a href="https://pengyirui.lanzoui.com/iF6c1wcdl7a">https://pengyirui.lanzoui.com/iF6c1wcdl7a</a></p><h2 id="导包"><a href="#导包" class="headerlink" title="导包"></a>导包</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line">  <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span>   </span><br><span class="line">    <span class="comment">&lt;!--mysql驱动--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--mybatis--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.5.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--log4j--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.17<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">build</span>&gt;</span>    </span><br><span class="line">    <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--指定编译的jdk版本--&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-compiler-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">source</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">source</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">target</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">target</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">      <span class="comment">&lt;!--在idea中要求将mapper文件存放在resources目录，【如果是】其他目录则需要手动设置编译路径--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">resources</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">resource</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">directory</span>&gt;</span>src/main/java<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">includes</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.xml<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">includes</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">resource</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">directory</span>&gt;</span>src/main/resources<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">includes</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.xml<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.properties<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">includes</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">resources</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="创建MyBatis主配置文件（配置SqlSession工厂）"><a href="#创建MyBatis主配置文件（配置SqlSession工厂）" class="headerlink" title="创建MyBatis主配置文件（配置SqlSession工厂）"></a>创建MyBatis主配置文件（配置SqlSession工厂）</h2><p>在<code>src</code>目录下创建名为<code>mybatis-config.xml</code>（文件名自定）的文件，配置内容如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span> ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">configuration</span> <span class="keyword">PUBLIC</span> <span class="string">&quot;-//mybatis.org//DTD Config 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="string">&quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">   <span class="comment">&lt;!--读取jdbc.properties属性文件</span></span><br><span class="line"><span class="comment">     properties:用来读取属性文件</span></span><br><span class="line"><span class="comment">        参数:</span></span><br><span class="line"><span class="comment">           resource:是从resources目录下找指定名称的jdbc.properties文件进行读取</span></span><br><span class="line"><span class="comment">           url:是从绝对路径中获取属性文件D:/course\19.MyBatis\04_project\mybatisall\mybatis001_student\src\main\resources</span></span><br><span class="line"><span class="comment">   --&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">properties</span> <span class="attr">resource</span>=<span class="string">&quot;jdbc.properties&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 简化实体类别名 --&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">typeAliases</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">typeAlias</span> <span class="attr">type</span> = <span class="string">&quot;io.peng.demo.pojo.Users&quot;</span> <span class="attr">alias</span>=<span class="string">&quot;users&quot;</span>/&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">typeAliases</span>&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">&lt;!--创建环境变量(指明数据库的连接信息,指明事务管理器)</span></span><br><span class="line"><span class="comment">     environments:总的环境变量的配置,其default属性指定多套配置中使用哪套配置,根据id名称来选择.</span></span><br><span class="line"><span class="comment">   --&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">environments</span> <span class="attr">default</span>=<span class="string">&quot;development&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">      <span class="comment">&lt;!--在公司开发时使用的配置</span></span><br><span class="line"><span class="comment">        environment:具体连接信息的配置.</span></span><br><span class="line"><span class="comment">           属性:</span></span><br><span class="line"><span class="comment">           id:为当前的配置起个名称,供environments的default属性使用.</span></span><br><span class="line"><span class="comment">      --&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">environment</span> <span class="attr">id</span>=<span class="string">&quot;development&quot;</span>&gt;</span></span><br><span class="line">         <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">           transactionManager:指定MyBatis框架的事务处理方式</span></span><br><span class="line"><span class="comment">             属性:</span></span><br><span class="line"><span class="comment">             type:指定事务提交的方式</span></span><br><span class="line"><span class="comment">             参数:</span></span><br><span class="line"><span class="comment">                JDBC:程序员自己手工提交事务,每个增删改后要手工commit();</span></span><br><span class="line"><span class="comment">                MANAGED:由容器负责事务的提交.例如:spring容器</span></span><br><span class="line"><span class="comment">         --&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">transactionManager</span> <span class="attr">type</span>=<span class="string">&quot;JDBC&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">transactionManager</span>&gt;</span></span><br><span class="line"></span><br><span class="line">         <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">           dataSource:进行数据源的配置,配置驱动的名称,url,访问数据库的用户名和密码</span></span><br><span class="line"><span class="comment">             属性:</span></span><br><span class="line"><span class="comment">             type:数据源的类型</span></span><br><span class="line"><span class="comment">             参数:</span></span><br><span class="line"><span class="comment">               JNDI:Java命名目录接口,在服务器端维护数据库连接池</span></span><br><span class="line"><span class="comment">               POOLED:使用数据库连接池,由MyBatis提供的数据库连接池.并且提供最优配置,无须程序员手工配置.</span></span><br><span class="line"><span class="comment">               UNPOOLED:不使用数据库连接池</span></span><br><span class="line"><span class="comment">         --&gt;</span></span><br><span class="line"></span><br><span class="line">         <span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">type</span>=<span class="string">&quot;POOLED&quot;</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--进行数据库连接池的配置</span></span><br><span class="line"><span class="comment">                private String driver;</span></span><br><span class="line"><span class="comment">                private String url;</span></span><br><span class="line"><span class="comment">                private String username;</span></span><br><span class="line"><span class="comment">                private String password;</span></span><br><span class="line"><span class="comment">            --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driver&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.driverClassName&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.url&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.username&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.password&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;/<span class="name">dataSource</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">environment</span>&gt;</span></span><br><span class="line"></span><br><span class="line">      <span class="comment">&lt;!--&amp;lt;!&amp;ndash;在家开发时使用的配置&amp;ndash;&amp;gt;--&gt;</span></span><br><span class="line">      <span class="comment">&lt;!--&lt;environment id=&quot;home&quot;&gt;--&gt;</span></span><br><span class="line">         <span class="comment">&lt;!--&lt;transactionManager type=&quot;&quot;&gt;&lt;/transactionManager&gt;--&gt;</span></span><br><span class="line">         <span class="comment">&lt;!--&lt;dataSource type=&quot;&quot;&gt;&lt;/dataSource&gt;--&gt;</span></span><br><span class="line">      <span class="comment">&lt;!--&lt;/environment&gt;--&gt;</span></span><br><span class="line"></span><br><span class="line">      <span class="comment">&lt;!--&amp;lt;!&amp;ndash;上线时使用的配置&amp;ndash;&amp;gt;--&gt;</span></span><br><span class="line">      <span class="comment">&lt;!--&lt;environment id=&quot;online&quot;&gt;--&gt;</span></span><br><span class="line">         <span class="comment">&lt;!--&lt;transactionManager type=&quot;&quot;&gt;&lt;/transactionManager&gt;--&gt;</span></span><br><span class="line">         <span class="comment">&lt;!--&lt;dataSource type=&quot;&quot;&gt;&lt;/dataSource&gt;--&gt;</span></span><br><span class="line">      <span class="comment">&lt;!--&lt;/environment&gt;--&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="tag">&lt;/<span class="name">environments</span>&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">&lt;!--注册mapper.xml文件</span></span><br><span class="line"><span class="comment">     mappers:用来注册所有的mapper.xml文件</span></span><br><span class="line"><span class="comment">   --&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">      <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">        mapper:单独一个一个的完成mapper.xml文件的注册</span></span><br><span class="line"><span class="comment">        </span></span><br><span class="line"><span class="comment">        属性:</span></span><br><span class="line"><span class="comment">        resource:是指从当前工程的resources目录下找指定名称的mapper.xml文件</span></span><br><span class="line"><span class="comment">        url:同properties用法,使用绝对路径定位文件</span></span><br><span class="line"><span class="comment">        class:使用动态代理的方式注册mapper.xml文件</span></span><br><span class="line"><span class="comment">      --&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">resource</span>=<span class="string">&quot;StudentMapper.xml&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="创建实体类及实体映射文件-Mapper-Dao"><a href="#创建实体类及实体映射文件-Mapper-Dao" class="headerlink" title="创建实体类及实体映射文件(Mapper/Dao)"></a>创建实体类及实体映射文件(Mapper/Dao)</h2><p>例子：<br>创建数据实体类<code>Category.java</code>和实体映射文件<code>Category.xml</code>。</p><p>每添加一个实体配置文件，就应该在主配置文件（mybatis-config.xml）中加入一个<mapper>元素，以告知框架要把该实体加入到映射中。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span> ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">mapper</span></span></span><br><span class="line"><span class="meta">        <span class="keyword">PUBLIC</span> <span class="string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;com.powernode.dao.CategoryDao&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getAll&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.powernode.model.Category&quot;</span>&gt;</span></span><br><span class="line">    select * from category</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="测试，创建MyBatis会话（SqlSession）并执行查询"><a href="#测试，创建MyBatis会话（SqlSession）并执行查询" class="headerlink" title="测试，创建MyBatis会话（SqlSession）并执行查询"></a>测试，创建MyBatis会话（SqlSession）并执行查询</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">getAll</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="type">InputStream</span> <span class="variable">inputStream</span> <span class="operator">=</span> Resources.getResourceAsStream(<span class="string">&quot;mybatis-config.xml&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">SqlSessionFactory</span> <span class="variable">factory</span> <span class="operator">=</span><span class="keyword">new</span> <span class="title class_">SqlSessionFactoryBuilder</span>().build(inputStream);</span><br><span class="line"></span><br><span class="line">        SqlSession sqlSession=factory.openSession();</span><br><span class="line"></span><br><span class="line">        List&lt;Category&gt; list=sqlSession.selectList(<span class="string">&quot;getAll&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (Category category : list) &#123;</span><br><span class="line">            System.out.println(category.getName());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;<span class="keyword">catch</span> (Exception ex)&#123;</span><br><span class="line">        System.out.println(ex.getMessage());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上述代码中：</p><p>​<code>SqlSessionFactoryBuilder</code>：用于构建SqlSessionFactory，此后这个类就不需要存在了。因此SqlSessionFactoryBuilder实例的最佳范围是方法范围 (也就是本地方法变量)。</p><p><code>SqlSessionFactory</code>：一旦被创建，应该在你的应用执行期间都存在。没有理由来处理或重 新创建它。使用SqlSessionFactory的最佳实践是在应用运行期间不要重复创建多次，因此 SqlSessionFactory 的最佳范围是应用范围，最简单的就是使用单例模式或者静态单例模式。</p><p><code>SqlSession</code>：每个线程都应该有它自己的SqlSession实例。SqlSession 的实例不能被共享，它是线程不安全的。因此最佳的范围是请求或方法范围。绝对不能将 SqlSession 实例的引用放在一个类的静态字段甚至是实例字段中。如果你在使用Web框架，则要考虑把SqlSession 放在一个和HTTP请求对象相似的范围内（Open Session In View）。关闭 Session 很重要，你应该确保使 用 finally 块来关闭它。</p><h2 id="配置日志功能"><a href="#配置日志功能" class="headerlink" title="配置日志功能"></a>配置日志功能</h2><p><code>mybatis.xml</code> 文件加入日志配置，可以在控制台输出执行的 sql 语句和参数 </p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">settings</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;logImpl&quot;</span> <span class="attr">value</span>=<span class="string">&quot;STDOUT_LOGGING&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">settings</span>&gt;</span> </span><br></pre></td></tr></table></figure><p>log4j配置</p><p>导入log4j的包</p><p>修改配置</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">settings</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;logImpl&quot;</span> <span class="attr">value</span>=<span class="string">&quot;LOG4J&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">settings</span>&gt;</span>  </span><br></pre></td></tr></table></figure><p>在<code>resources</code>目录下添加<code>log4j.properties</code>文件</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">log4j.rootLogger</span>=<span class="string">debug, stdout,logfile</span></span><br><span class="line"><span class="attr">log4j.appender.stdout</span>=<span class="string">org.apache.log4j.ConsoleAppender</span></span><br><span class="line"><span class="attr">log4j.appender.stdout.Target</span>=<span class="string">System.err</span></span><br><span class="line"><span class="attr">log4j.appender.stdout.layout</span>=<span class="string">org.apache.log4j.SimpleLayout</span></span><br><span class="line"><span class="attr">log4j.logger.java.sql.ResultSet</span>=<span class="string">INFO  </span></span><br><span class="line"><span class="attr">log4j.appender.logfile</span>=<span class="string">org.apache.log4j.FileAppender</span></span><br><span class="line"><span class="attr">log4j.appender.logfile.File</span> =<span class="string">d:/mylog.log</span></span><br><span class="line"><span class="attr">log4j.appender.logfile.layout</span>=<span class="string">org.apache.log4j.PatternLayout</span></span><br><span class="line"><span class="attr">log4j.appender.logfile.layout.ConversionPattern</span>=<span class="string">%d&#123;yyyy-MM-dd HH\:mm\:ss&#125; %l %F %p %m%n</span></span><br></pre></td></tr></table></figure><h2 id="封装工具类MyBatisUtil类"><a href="#封装工具类MyBatisUtil类" class="headerlink" title="封装工具类MyBatisUtil类"></a>封装工具类MyBatisUtil类</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyBatisUtil</span> &#123;</span><br><span class="line">    <span class="comment">// 定义 SqlSessionFactory    </span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">SqlSessionFactory</span> <span class="variable">factory</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        <span class="comment">// 使用 静态块 创建一次 SqlSessionFactory        </span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">config</span> <span class="operator">=</span> <span class="string">&quot;mybatis-config.xml&quot;</span>;</span><br><span class="line">            <span class="comment">// 读取配置文件 </span></span><br><span class="line">            <span class="type">InputStream</span> <span class="variable">in</span> <span class="operator">=</span> Resources.getResourceAsStream(config);</span><br><span class="line">            <span class="comment">// 创建 SqlSessionFactory 对象</span></span><br><span class="line">            factory = <span class="keyword">new</span> <span class="title class_">SqlSessionFactoryBuilder</span>().build(in);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            factory = <span class="literal">null</span>;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/* 获取 SqlSession 对象 */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> SqlSession <span class="title function_">getSqlSession</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">SqlSession</span> <span class="variable">session</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">if</span> (factory != <span class="literal">null</span>) &#123;</span><br><span class="line">            session = factory.openSession();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> session;</span><br><span class="line">    &#125;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><h2 id="工具类-接口"><a href="#工具类-接口" class="headerlink" title="工具类+接口"></a>工具类+接口</h2><p>在之前的数据库查询中，使用映射语句<code>com.mycinema.model.Category.getAll</code>指定要执行的SQL，这种做法有些弱点：缺乏编译检查。为此，MyBatis还提供了映射器的执行方法。</p><p>getMapper 获取代理对象 只需调用 SqlSession 的 getMapper()方法，即可获取指定接口的实现类对象。该方法的参数为指定 Dao 接口类的 class 值。 </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">SqlSession</span> <span class="variable">session</span> <span class="operator">=</span> factory.openSession(); </span><br><span class="line">CategoryDao categoryDao= session.getMapper(CategoryDao.class); </span><br></pre></td></tr></table></figure><h2 id="使用Mapper接口实现数据访问"><a href="#使用Mapper接口实现数据访问" class="headerlink" title="使用Mapper接口实现数据访问"></a>使用Mapper接口实现数据访问</h2><p>编写数据访问的接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">CategoryDao</span> &#123;  </span><br><span class="line">          List&lt;Category&gt; <span class="title function_">getAll</span><span class="params">()</span>;              </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>编写数据访问类的映射文件(在目录:<code>resource/mapper/CategoryDao.xml</code>)      </p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span> ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">mapper</span></span></span><br><span class="line"><span class="meta">        <span class="keyword">PUBLIC</span> <span class="string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;com.powernode.dao.CategoryDao&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getAll&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.powernode.model.Category&quot;</span>&gt;</span></span><br><span class="line">    select * from category</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>注意</strong>:其中方法CategoryDao中的（getAll）的签名与配置的select元素相同。</p><p>此后，我们就可以通过CategoryDao接口实现前面的查询了：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">SqlSession sqlSession=factory.openSession();</span><br><span class="line">  CategoryDao categoryDao= sqlSession.getMapper(CategoryDao.class);</span><br><span class="line">  List&lt;Category&gt; list=categoryDao.getAll();</span><br><span class="line">  <span class="keyword">for</span> (Category category : list) &#123;</span><br><span class="line">          System.out.println(category.getName());</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>这种调用方式是强类型的，更为对象化，不容易出错，但是需要编写额外的Mapper接口。</p><h2 id="动态代理"><a href="#动态代理" class="headerlink" title="动态代理"></a>动态代理</h2><h3 id="动态代理开发规范"><a href="#动态代理开发规范" class="headerlink" title="动态代理开发规范"></a>动态代理开发规范</h3><p>MyBatis框架使用动态代理的方式来进行数据库的访问.<br>Mapper接口的开发相当于是过去的Dao接口的开发。由MyBatis框架根据接口定义创建动态代理对象，代理对象的方法体同Dao接口实现类的方法。在设计时要遵守以下规范.</p><ol><li>Mapper接口与Mapper.xml文件在同一个目录下（未必。。）</li><li>Mapper接口的完全限定名与Mapper.xml文件中的namespace的值相同。</li><li>Mapper接口方法名称与Mapper.xml中的标签的statement 的ID完全相同。</li><li>Mapper接口方法的输入参数类型与Mapper.xml的每个sql的parameterType的类型相同</li><li>Mapper接口方法的输出参数与Mapper.xml的每个sql的resultType的类型相同。</li><li>Mapper文件中的namespace的值是接口的完全限定名称.</li><li>在SqlMapConfig.xml文件中注册时,使用class属性=接口的完全限定名.</li></ol><p>一句话：UsersMapper.java接口和UsersMapper.xml文件必须在同一个目录下，且必须同名。<br>在UsersMapper.xml文件中添加namespace属性为接口的完全路径名。</p><h3 id="和"><a href="#和" class="headerlink" title="#{}和${}"></a>#{}和${}</h3><p><code>#&#123;&#125;</code>是对非字符串拼接的参数的<strong>占位符</strong>，如果入参是简单数据类型，#{}里可以任意写，但是如果入参是对象类型，则#{}里必须是对象的成员变量的名称，<strong>可以有效防止sql注入。</strong></p><p><code>$&#123;&#125;</code>主要是针对字符<strong>串拼接替换</strong>，如果入参是基本数据类型，${}里必须是value,但是如果入参是对象类型，则${}里必须是对象的成员变量的名称。<strong>可以替换列名和表名，存在sql注入风险，尽量少用。</strong></p><h3 id="返回主键标签"><a href="#返回主键标签" class="headerlink" title="返回主键标签"></a>返回主键标签</h3><p>在完成插入操作后，将生成的主键信息通过实体类对象返回，在进行后继关联插入操作时，不用再次访问数据库</p><p>方式一</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">&quot;insertUser&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;com.oracle.demo.pojo.Users&quot;</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">Order:指定生成返回主键的时机，</span></span><br><span class="line"><span class="comment">AFTER：先插入再返回主键</span></span><br><span class="line"><span class="comment">BEFORE: 先生成再完成插入</span></span><br><span class="line"><span class="comment">keyProperty: 生成的主键放入到对象的哪个属性中</span></span><br><span class="line"><span class="comment">resultType: 返回的主键的类型</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">selectKey</span> <span class="attr">order</span>=<span class="string">&quot;AFTER&quot;</span> <span class="attr">keyProperty</span>=<span class="string">&quot;uid&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;int&quot;</span>&gt;</span></span><br><span class="line">    select LAST_INSERT_ID()</span><br><span class="line"><span class="tag">&lt;/<span class="name">selectKey</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--  先  生成随机字符串，再返回</span></span><br><span class="line"><span class="comment">&lt;selectKey order=&quot;BEFORE&quot; keyProperty=&quot;uid&quot; resultType=&quot;string&quot;&gt;</span></span><br><span class="line"><span class="comment">    select uuid()</span></span><br><span class="line"><span class="comment">&lt;/selectKey&gt;</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br></pre></td></tr></table></figure><h2 id="动态sql"><a href="#动态sql" class="headerlink" title="动态sql"></a>动态sql</h2><h3 id="lt-sql-gt-标签"><a href="#lt-sql-gt-标签" class="headerlink" title="&lt;sql&gt;标签"></a><code>&lt;sql&gt;标签</code></h3><p>当多种类型的查询语句的查询字段或者查询条件相同时，可以将其定义为常量，方便调用。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">sql</span> <span class="attr">id</span>=<span class="string">&quot;columns&quot;</span>&gt;</span></span><br><span class="line">    id,username,birthday,sex,address</span><br><span class="line"><span class="tag">&lt;/<span class="name">sql</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="lt-include-gt-标签"><a href="#lt-include-gt-标签" class="headerlink" title="&lt;include&gt;标签"></a><code>&lt;include&gt;标签</code></h3><p>以为select为例调用<code>&lt;sql&gt;标签</code></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getByCondiition&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;users&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;users&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">select</span><br><span class="line"><span class="tag">&lt;<span class="name">include</span> <span class="attr">refid</span>=<span class="string">&quot;columns&quot;</span> /&gt;</span></span><br><span class="line">from users</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="lt-choose-gt-标签"><a href="#lt-choose-gt-标签" class="headerlink" title="&lt;choose&gt;标签"></a><code>&lt;choose&gt;标签</code></h3><p>有时候，我们不需要使用到所有的条件，只要满足其中的一个条件即可。<code>&lt;choose&gt;</code>元素为此而生，它类似 Java 的 <code>switch</code> 语句，具有高度的相似性。<code>choose</code>元素就好比 <code>switch</code>在最外层，<code>&lt;choose&gt;</code>元素下还有<code>&lt;when&gt;</code>及<code>&lt;otherwise&gt;</code>两个元素，<code>&lt;when&gt;</code>元素类似于<code>case</code>,而<code>&lt;otherwise&gt;</code>则类似于<code>default</code>。<br>例子：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectCount&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;java.lang.Integer&quot;</span>&gt;</span></span><br><span class="line">    SELECT COUNT(*)</span><br><span class="line">    FROM</span><br><span class="line">    project_development pd</span><br><span class="line">    LEFT JOIN business_customer bc ON bc.id = pd.customer_id</span><br><span class="line">    LEFT JOIN base_project bp ON bp.id = pd.project_id</span><br><span class="line">    WHERE</span><br><span class="line">    pd.WORK = 1</span><br><span class="line">    <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;id != null&quot;</span>&gt;</span></span><br><span class="line">        and pd.id = #&#123;id&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">choose</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">when</span> <span class="attr">test</span>=<span class="string">&quot;sort != null&quot;</span>&gt;</span></span><br><span class="line">            order by pd.sort desc,pd.name</span><br><span class="line">        <span class="tag">&lt;/<span class="name">when</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">otherwise</span>&gt;</span></span><br><span class="line">            order by pd.start_date desc,pd.status desc,pd.progress desc,pd.id desc</span><br><span class="line">        <span class="tag">&lt;/<span class="name">otherwise</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">choose</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><p>当 sort参数不为空时，执行 <when>元素下的排序，<when>元素可以同时存在多个，满足其中一个条件时就执行相应的sql，然后跳出<choose>，当所有<when>都不满足时，则执行<otherwise>下的sql。</p><h3 id="lt-if-gt-标签"><a href="#lt-if-gt-标签" class="headerlink" title="&lt;if&gt;标签"></a><code>&lt;if&gt;标签</code></h3><p>test：判断条件，如果<code>test</code>为true则执行</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;userName != null&quot;</span>&gt;</span></span><br><span class="line">    and username like &#x27;%$&#123;userName&#125;%&#x27;</span><br><span class="line"><span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br></pre></td></tr></table></figure><p>不生效问题：这种情况不生效,原因是mybatis是用OGNL表达式来解析的，在OGNL的表达式中，“0”会被解析成字符(而我传入的type却是string)，java是强类型的，<code>char</code> 和 <code>string</code> 会导致不等，所以if标签中的sql不会被解析。</p><p>解决办法：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--第一种解决方案,加上.toString()--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;type == &#x27;1&#x27;.toString()&quot;</span>&gt;</span></span><br><span class="line"> <span class="comment">&lt;!--内部逻辑--&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--第二种解决方案,将单引号缓冲双引号--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&#x27;type == &quot;1&quot;&#x27;</span>&gt;</span></span><br><span class="line"> <span class="comment">&lt;!--内部逻辑--&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="lt-where-gt-标签-lt-if-gt-标签"><a href="#lt-where-gt-标签-lt-if-gt-标签" class="headerlink" title="&lt;where&gt;标签 + &lt;if&gt;标签"></a><code>&lt;where&gt;标签 + &lt;if&gt;标签</code></h3><p>一般开发复杂业务的查询条件时，如果有多个查询条件，通常会使用<code>&lt;where&gt;</code>标签来进行控制。 标签可以自动的将第一个条件前面的逻辑运算符 (or ,and) 去掉，正如代码中写的，id 查询条件前面是有“and”关键字的，但是在打印出来的 SQL 中却没有，这就是<where> 的作用。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getByCondiition&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;users&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;users&quot;</span>&gt;</span></span><br><span class="line">    select <span class="tag">&lt;<span class="name">include</span> <span class="attr">refid</span>=<span class="string">&quot;columns&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">    from users</span><br><span class="line">   <span class="tag">&lt;<span class="name">where</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;userName != null&quot;</span>&gt;</span></span><br><span class="line">        and username like &#x27;%$&#123;userName&#125;%&#x27;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">where</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="lt-set-gt-标签"><a href="#lt-set-gt-标签" class="headerlink" title="&lt;set&gt;标签"></a><code>&lt;set&gt;标签</code></h3><p>常用于更新<br>使用 <code>if+set</code> 标签修改后，在进行表单更新的操作中，哪个字段中有值才去更新，如果某项为 null 则不进行更新，而是保持数据库原值。<strong>切记：至少更新一列。</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">update</span> <span class="attr">id</span>=<span class="string">&quot;updateSet&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;users&quot;</span> &gt;</span></span><br><span class="line">    update users</span><br><span class="line">    <span class="tag">&lt;<span class="name">set</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;userName != null&quot;</span>&gt;</span></span><br><span class="line">            username=#&#123;userName&#125;,</span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;birthday != null&quot;</span>&gt;</span></span><br><span class="line">            birthday = #&#123;birthday&#125;,</span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;sex != null&quot;</span>&gt;</span></span><br><span class="line">            sex = #&#123;sex&#125;,</span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;address != null&quot;</span>&gt;</span></span><br><span class="line">            address = #&#123;address&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">set</span>&gt;</span></span><br><span class="line">    where id = #&#123;id&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">update</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="lt-foreach-gt-标签"><a href="#lt-foreach-gt-标签" class="headerlink" title="&lt;foreach&gt;标签"></a><code>&lt;foreach&gt;标签</code></h3><p><code>&lt;foreach&gt;</code>主要用来进行集合或数组的遍历，主要有以下参数：<br>collection：<br><code>collection</code> 属性的值有三个分别是 <code>list、array、map</code> 三种，分别对应的参数类型为：List、数组、map 集合。</p><p><code>item</code> ：循环体中的具体对象。支持属性的点路径访问，如<code>item.age,item.info.details</code>，在list和数组中是其中的对象，在map中是value。</p><p><code>index </code>：在list和数组中,index是元素的序号，在map中，index是元素的key，该参数可选。<br><code>open</code> ：表示该语句以什么开始<br><code>close</code> ：表示该语句以什么结束<br><code>separator</code> ：表示元素之间的分隔符，例如在in()的时候</p><h4 id="循环遍历参数集合"><a href="#循环遍历参数集合" class="headerlink" title="循环遍历参数集合"></a>循环遍历参数集合</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getByIds&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;users&quot;</span>&gt;</span></span><br><span class="line">    select <span class="tag">&lt;<span class="name">include</span> <span class="attr">refid</span>=<span class="string">&quot;columns&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">    from users</span><br><span class="line">    where id in</span><br><span class="line">        <span class="tag">&lt;<span class="name">foreach</span> <span class="attr">collection</span>=<span class="string">&quot;list&quot;</span> <span class="attr">item</span>=<span class="string">&quot;id&quot;</span> <span class="attr">separator</span>=<span class="string">&quot;,&quot;</span> <span class="attr">open</span>=<span class="string">&quot;(&quot;</span> <span class="attr">close</span>=<span class="string">&quot;)&quot;</span>&gt;</span></span><br><span class="line">           #&#123;id&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">foreach</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="批量删除"><a href="#批量删除" class="headerlink" title="批量删除"></a>批量删除</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">delete</span> <span class="attr">id</span>=<span class="string">&quot;deleteBatch&quot;</span> &gt;</span></span><br><span class="line">    delete from users where id in</span><br><span class="line">    <span class="tag">&lt;<span class="name">foreach</span> <span class="attr">collection</span>=<span class="string">&quot;array&quot;</span> <span class="attr">item</span>=<span class="string">&quot;id&quot;</span> <span class="attr">close</span>=<span class="string">&quot;)&quot;</span> <span class="attr">open</span>=<span class="string">&quot;(&quot;</span> <span class="attr">separator</span>=<span class="string">&quot;,&quot;</span>&gt;</span></span><br><span class="line">        #&#123;id&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">foreach</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">delete</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="批量增加"><a href="#批量增加" class="headerlink" title="批量增加"></a>批量增加</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">&quot;insertBatch&quot;</span> &gt;</span></span><br><span class="line">    insert into users(username,birthday,sex,address) values</span><br><span class="line">    <span class="tag">&lt;<span class="name">foreach</span> <span class="attr">collection</span>=<span class="string">&quot;list&quot;</span> <span class="attr">separator</span>=<span class="string">&quot;,&quot;</span> <span class="attr">item</span>=<span class="string">&quot;u&quot;</span>&gt;</span></span><br><span class="line">        (#&#123;u.userName&#125;,#&#123;u.birthday&#125;,#&#123;u.sex&#125;,#&#123;u.address&#125;)</span><br><span class="line">    <span class="tag">&lt;/<span class="name">foreach</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="批量更新"><a href="#批量更新" class="headerlink" title="批量更新"></a>批量更新</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--    有选择的批量更新,至少更新一列--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">update</span> <span class="attr">id</span>=<span class="string">&quot;updateSet&quot;</span>  &gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">foreach</span> <span class="attr">collection</span>=<span class="string">&quot;list&quot;</span> <span class="attr">item</span>=<span class="string">&quot;u&quot;</span> <span class="attr">separator</span>=<span class="string">&quot;;&quot;</span>&gt;</span></span><br><span class="line">    update users</span><br><span class="line">    <span class="tag">&lt;<span class="name">set</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;u.userName != null&quot;</span>&gt;</span></span><br><span class="line">            username=#&#123;u.userName&#125;,</span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;u.birthday != null&quot;</span>&gt;</span></span><br><span class="line">            birthday = #&#123;u.birthday&#125;,</span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;u.sex != null&quot;</span>&gt;</span></span><br><span class="line">            sex = #&#123;u.sex&#125;,</span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;u.address != null&quot;</span>&gt;</span></span><br><span class="line">            address = #&#123;u.address&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">set</span>&gt;</span></span><br><span class="line">    where id = #&#123;u.id&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">foreach</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">update</span>&gt;</span></span><br></pre></td></tr></table></figure><p>注意：要使用批量更新，必须在url中添加&amp;allowMultiQueries=true，允许多行操作。</p><h4 id="入参也能循环"><a href="#入参也能循环" class="headerlink" title="入参也能循环"></a>入参也能循环</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//新增用户的角色</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">addUserRoles</span><span class="params">(<span class="meta">@Param(&quot;userId&quot;)</span><span class="type">int</span> userId, <span class="meta">@Param(&quot;roleIds&quot;)</span> <span class="type">int</span>[] roleIds)</span>;</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">&quot;addUserRoles&quot;</span>&gt;</span></span><br><span class="line">    insert into userRole(userId,roleId)</span><br><span class="line">    values</span><br><span class="line">    <span class="tag">&lt;<span class="name">foreach</span> <span class="attr">collection</span>=<span class="string">&quot;roleIds&quot;</span> <span class="attr">separator</span>=<span class="string">&quot;,&quot;</span> <span class="attr">item</span>=<span class="string">&quot;rid&quot;</span>&gt;</span></span><br><span class="line">        (#&#123;userId&#125;, #&#123;rid&#125;)</span><br><span class="line">    <span class="tag">&lt;/<span class="name">foreach</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="指定参数位置"><a href="#指定参数位置" class="headerlink" title="指定参数位置"></a>指定参数位置</h3><p>可以不使用对象的属性名进行参数值绑定，使用下标值。 mybatis-3.3 版本和之前的版本使用<code>#&#123;0&#125;</code>,<code>#&#123;1&#125;</code>方式， 从 mybatis3.4 开始使用<code>#&#123;arg0&#125;</code>方式。</p><p>UsersMapper.java接口中：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//查询指定日期范围内的用户信息,实体类的成员变量无法包含条件了,所以散给条件</span></span><br><span class="line">List&lt;Users&gt; <span class="title function_">getByBirthday</span><span class="params">(Date begin, Date end)</span>;</span><br></pre></td></tr></table></figure><p>UsersMapper.xml文件中：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getByBirthday&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;users&quot;</span>&gt;</span></span><br><span class="line">   select * from users where birthday between #&#123;arg0&#125; and #&#123;arg1&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="Param指定参数名称"><a href="#Param指定参数名称" class="headerlink" title="@Param指定参数名称"></a>@Param指定参数名称</h3><p>UsersMapper.java接口中：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//切换列名进行模糊查询</span></span><br><span class="line"><span class="comment">//@Param(&quot;columnName&quot;):这里定义的columnName的名称是要在xml文件中的$&#123;引用定义的名称&#125;</span></span><br><span class="line">List&lt;Users&gt; <span class="title function_">getByColunm</span><span class="params">(<span class="meta">@Param(&quot;columnName&quot;)</span> String columnName,</span></span><br><span class="line"><span class="params">                        <span class="meta">@Param(&quot;columnValue&quot;)</span> String columnValue)</span>;</span><br></pre></td></tr></table></figure><p>UsersMapper.xml文件中：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getByColunm&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;users&quot;</span>&gt;</span></span><br><span class="line">    select <span class="tag">&lt;<span class="name">include</span> <span class="attr">refid</span>=<span class="string">&quot;columns&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">    from users</span><br><span class="line">    where $&#123;columnName&#125; =#&#123;columnValue&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="入参是map"><a href="#入参是map" class="headerlink" title="入参是map"></a>入参是map</h3><p>入参是map,是因为当传递的数据有多个,不适合使用指定下标或指定名称的方式来进行传参,又加上参数不一定与对象的成员变量一致,考虑使用map集合来进行传递。<br>map使用的是键值对的方式.当在sql语句中使用的时候#{键名},${键名},用的是键的名称。</p><p>UsersMapper.java接口中</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//入参是map</span></span><br><span class="line">List&lt;Users&gt; <span class="title function_">getByMap</span><span class="params">(Map&lt;String,Date&gt; map)</span>;</span><br></pre></td></tr></table></figure><p>UsersMapper.xml文件中：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getByMap&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;map&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;users&quot;</span>&gt;</span></span><br><span class="line">    select <span class="tag">&lt;<span class="name">include</span> <span class="attr">refid</span>=<span class="string">&quot;columns&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">    from users</span><br><span class="line">    where birthday between #&#123;zarbegin&#125; and #&#123;zarend&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><p>测试类中</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testGetByMap</span><span class="params">()</span><span class="keyword">throws</span> Exception&#123;</span><br><span class="line">    <span class="type">Date</span> <span class="variable">begin</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SimpleDateFormat</span>(<span class="string">&quot;yyyy-MM-dd&quot;</span>).parse(<span class="string">&quot;1996-01-01&quot;</span>);</span><br><span class="line">    <span class="type">Date</span> <span class="variable">end</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SimpleDateFormat</span>(<span class="string">&quot;yyyy-MM-dd&quot;</span>).parse(<span class="string">&quot;1998-12-31&quot;</span>);</span><br><span class="line">    Map&lt;String,Date&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">    <span class="comment">//放入map集合中的数据是键值对</span></span><br><span class="line">    map.put(<span class="string">&quot;zarbegin&quot;</span>,begin);</span><br><span class="line">    map.put(<span class="string">&quot;zarend&quot;</span>,end);</span><br><span class="line">    List&lt;Users&gt; list = mapper.getByMap(map);</span><br><span class="line">    list.forEach(u-&gt; System.out.println(u));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="返回值是map"><a href="#返回值是map" class="headerlink" title="返回值是map"></a>返回值是map</h3><p>返回值是map的适用场景,如果的数据不能使用对象来进行封装,可能查询的数据来自多张表中的某些列,这种情况下,使用map,但是map的返回方式破坏了对象的封装,返回来的数据是一个一个单独的数据, 之间不相关.map使用表中的列名或别名做为键名进行返回数据.</p><h4 id="map封装返回值是一行"><a href="#map封装返回值是一行" class="headerlink" title="map封装返回值是一行"></a>map封装返回值是一行</h4><p>UsersMapper.java接口中：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//返回值是一个值,是map类型,根据主键查用户对象</span></span><br><span class="line">Map&lt;String,Object&gt; <span class="title function_">getReturnMapOne</span><span class="params">(<span class="type">int</span> id)</span>;</span><br></pre></td></tr></table></figure><p>UsersMapper.xml文件中：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getReturnMapOne&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;map&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;int&quot;</span>&gt;</span></span><br><span class="line">    select id myid,username myusername,sex mysex,address myaddress,birthday mybirthday</span><br><span class="line">    from users</span><br><span class="line">    where id=#&#123;id&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><p>测试类中：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testGetReturnMapOne</span><span class="params">()</span>&#123;</span><br><span class="line">    Map&lt;String,Object&gt; map = mapper.getReturnMapOne(<span class="number">7</span>);</span><br><span class="line">    System.out.println(map);</span><br><span class="line">    System.out.println(map.get(<span class="string">&quot;username&quot;</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="返回值是map多行"><a href="#返回值是map多行" class="headerlink" title="返回值是map多行"></a>返回值是map多行</h4><p>UsersMapper.java接口中：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//使用map封装返回多个map的集合---&gt;List&lt;Map&lt;String,Object&gt;&gt;</span></span><br><span class="line">List&lt;Map&lt;String,Object&gt;&gt; <span class="title function_">getReturnMap</span><span class="params">()</span>;</span><br></pre></td></tr></table></figure><p>UsersMapper.xml文件中：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getReturnMap&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;map&quot;</span> &gt;</span></span><br><span class="line">    select <span class="tag">&lt;<span class="name">include</span> <span class="attr">refid</span>=<span class="string">&quot;columns&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">    from users</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><p>测试类中：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testGetReturnMap</span><span class="params">()</span>&#123;</span><br><span class="line">    List&lt;Map&lt;String,Object&gt;&gt; list = mapper.getReturnMap();</span><br><span class="line">    list.forEach(map-&gt; System.out.println(map));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="列名与类中成员变量名称不一致"><a href="#列名与类中成员变量名称不一致" class="headerlink" title="列名与类中成员变量名称不一致"></a>列名与类中成员变量名称不一致</h3><p>解决方案一：<br>使用列的别名，别名与类中的成员变量名一样，即可完成注入。</p><p>解决方案二：<br>使用<code>&lt;resultMap&gt;</code>标签进行映射。</p><h2 id="结果集映射"><a href="#结果集映射" class="headerlink" title="结果集映射"></a>结果集映射</h2><p>如果对象和表之间有更复杂的差异，比如Java对象中内嵌其它对象属性（多对一或一对多），就需要在MyBatis的实体配置文件中使用resultMap元素描述映射细节。</p><h3 id="多对一"><a href="#多对一" class="headerlink" title="多对一"></a>多对一</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Movie</span> &#123;</span><br><span class="line"><span class="keyword">private</span> <span class="type">int</span> id;</span><br><span class="line"><span class="keyword">private</span> String title;</span><br><span class="line"><span class="keyword">private</span> String movieCode;</span><br><span class="line"><span class="keyword">private</span> Category category;</span><br><span class="line"><span class="keyword">private</span> String director;</span><br><span class="line"><span class="keyword">private</span> Date dateReleased;</span><br><span class="line">……</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Category</span> &#123;</span><br><span class="line"><span class="keyword">private</span> <span class="type">int</span> id;</span><br><span class="line"><span class="keyword">private</span> String name;</span><br><span class="line">……</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这种情况下，若仅仅配置返回<code>resultType</code>为<code>Movie</code>类型的查询，则<strong>无法</strong>返回外键对象<code>Category</code>的数据： </p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="operator">&lt;</span><span class="keyword">select</span> id<span class="operator">=</span>&quot;fetchById&quot; parameterType<span class="operator">=</span>&quot;int&quot; resultType<span class="operator">=</span>&quot;com.powernode.model.Movie&quot;<span class="operator">&gt;</span></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> Movie <span class="keyword">where</span> id <span class="operator">=</span> #&#123;id&#125;</span><br><span class="line"><span class="operator">&lt;</span><span class="operator">/</span><span class="keyword">select</span><span class="operator">&gt;</span></span><br></pre></td></tr></table></figure><p>这时，可以使用<code>&lt;select&gt;</code>元素中<code>resultMap</code>属性替代<code>resultType</code>属性，配置对象的映射。resultMap元素是MyBatis中最重要最强大的元素，让你远离90%的需要从结果集中取出数据的JDBC代码，通过配置实现Java对象属性和查询结果字段的所有映射。 </p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">type</span>=<span class="string">&quot;Movie&quot;</span> <span class="attr">id</span>=<span class="string">&quot;movieResultMap1&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">&quot;id&quot;</span> <span class="attr">property</span>=<span class="string">&quot;id&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;title&quot;</span> <span class="attr">property</span>=<span class="string">&quot;title&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;movieCode&quot;</span> <span class="attr">property</span>=<span class="string">&quot;movieCode&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;director&quot;</span> <span class="attr">property</span>=<span class="string">&quot;director&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;dateReleased&quot;</span> <span class="attr">property</span>=<span class="string">&quot;dateReleased&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 多对一  --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">association</span> <span class="attr">property</span>=<span class="string">&quot;category&quot;</span> <span class="attr">column</span>=<span class="string">&quot;categoryId&quot;</span>  <span class="attr">javaType</span>=<span class="string">&quot;Category&quot;</span></span></span><br><span class="line"><span class="tag"><span class="attr">select</span>=<span class="string">&quot;io.peng.model.Category.fetchById&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">association</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;fetchById &quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;int&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;movieResultMap1&quot;</span>&gt;</span></span><br><span class="line">select * from Movie where id = #&#123;id&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><p>以下是resultMap中重要子元素的解析：</p><table><thead><tr><th>子元素</th><th>作用</th></tr></thead><tbody><tr><td>id</td><td>一个 ID 结果;标记结果作为 ID 可以帮助提高整体效能。</td></tr><tr><td>result</td><td>注入到字段或 JavaBean 属性的普通结果</td></tr><tr><td>association</td><td>一个复杂的类型关联;许多结果将包成这种类型嵌入结果映射</td></tr><tr><td>collection</td><td>复杂类型的集嵌入结果映射</td></tr><tr><td>column</td><td>sql语句上的 （select语句）</td></tr><tr><td>property</td><td>java对象实体上的</td></tr></tbody></table><p>在这里，association元素实现了Movie和Category对象的多对一关系。<br>其中，select属性指定了另一个映射文件Category.xml中通过Id获取Category对象的查询。</p><p>在实际应用中，这种通过select属性获取关联对象的方式实际上产生了两条SQL语句，<br>第一条SQL查询Movie对象本身，第二条SQL通过外键categoryId查询Category对象。若某Movie查询返回N条Move记</p><p>如果使用SQL连接（Join）的方式，只需要一次查询即可，MyBatis中完全可以使用后者完成Movie数据的加载。<br>在<code>&lt;select&gt;</code>元素中配置一个连接查询SQL语句，并在<code>&lt;resultMap&gt;</code>的<code>&lt;association&gt;</code>中进一步描述Category的映射。 </p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">type</span>=<span class="string">&quot;Movie&quot;</span> <span class="attr">id</span>=<span class="string">&quot;movieResultMap2&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">&quot;mid&quot;</span> <span class="attr">property</span>=<span class="string">&quot;id&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;title&quot;</span> <span class="attr">property</span>=<span class="string">&quot;title&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;movieCode&quot;</span> <span class="attr">property</span>=<span class="string">&quot;movieCode&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;director&quot;</span> <span class="attr">property</span>=<span class="string">&quot;director&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;dateReleased&quot;</span> <span class="attr">property</span>=<span class="string">&quot;dateReleased&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">association</span> <span class="attr">property</span>=<span class="string">&quot;category&quot;</span> <span class="attr">column</span>=<span class="string">&quot;categoryId&quot;</span>  <span class="attr">javaType</span>=<span class="string">&quot;Category&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">&quot;cid&quot;</span> <span class="attr">property</span>=<span class="string">&quot;id&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;name&quot;</span> <span class="attr">property</span>=<span class="string">&quot;name&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">association</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;fetchById &quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;int&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;movieResultMap2&quot;</span>&gt;</span></span><br><span class="line">select m.*, c.*, m.id as mid, c.id as cid from Movie m inner join Category c on</span><br><span class="line">m.categoryId=c.id where m.id=#&#123;id&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>值得注意的是，MyBatis依靠查询结果集中的字段名来加载对象属性，<br>若两个连接的表字段同名（如id）时，需要用声明别名来完成映射（column=mid）。</p><h3 id="一对多"><a href="#一对多" class="headerlink" title="一对多"></a>一对多</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectAll&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;UserType&quot;</span>&gt;</span></span><br><span class="line">    SELECT u.id uid, u.username,u.`Password`,u.status,</span><br><span class="line">    r.id rid, r.name</span><br><span class="line">    FROM USER u INNER JOIN userrole ur</span><br><span class="line">    ON u.`Id`=ur.`UserId`</span><br><span class="line">    INNER JOIN role r</span><br><span class="line">    ON r.`Id`=ur.`RoleId`</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;UserType&quot;</span> <span class="attr">type</span>=<span class="string">&quot;User&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">id</span> <span class="attr">property</span>=<span class="string">&quot;id&quot;</span> <span class="attr">column</span>=<span class="string">&quot;uid&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;username&quot;</span> <span class="attr">column</span>=<span class="string">&quot;username&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;password&quot;</span> <span class="attr">column</span>=<span class="string">&quot;password&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;status&quot;</span> <span class="attr">column</span>=<span class="string">&quot;status&quot;</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--一对多集合映射--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">collection</span>  <span class="attr">property</span>=<span class="string">&quot;roles&quot;</span> <span class="attr">javaType</span>=<span class="string">&quot;Role&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span> <span class="attr">property</span>=<span class="string">&quot;id&quot;</span> <span class="attr">column</span>=<span class="string">&quot;rid&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;name&quot;</span> <span class="attr">column</span>=<span class="string">&quot;name&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">collection</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="缓存"><a href="#缓存" class="headerlink" title="缓存"></a>缓存</h2><p><strong>mybaits提供一级缓存和二级缓存。默认开启一级缓存。</strong></p><ul><li><p>机制<br>在进行数据库访问时，首先去访问缓存，如果缓存中有要访问的数据，则直接返回客户端，如果没有则去访问数据库，在库中得到数据后，先在缓存放一份，再返回客户端。</p></li><li><p>一级缓存<br>第一次发起查询用户id为1的用户信息，先去找缓存中是否有id为1的用户信息，如果没有，从数据库查询用户信息。得到用户信息，将用户信息存储到一级缓存中。如果sqlSession去执行commit操作（执行插入、更新、删除），则清空SqlSession中的一级缓存，这样做的目的为了让缓存中存储的是最新的信息，避免脏读。<br>第二次发起查询用户id为1的用户信息，先去找缓存中是否有id为1的用户信息，缓存中有，直接从缓存中获取用户信息。如果没有重复第一次查询操作。</p></li><li><p>二级缓存<br>mybaits的二级缓存是mapper范围级别，除了在SqlMapConfig.xml设置二级缓存的总开关，还要在具体的mapper.xml中开启二级缓存，并且要让实体类实现serializable接口。</p></li></ul><h2 id="逆向工程插件"><a href="#逆向工程插件" class="headerlink" title="逆向工程插件"></a>逆向工程插件</h2><p>作用：快速生成 <code>与表对照的实体类与XXXmapper.xml文件</code><br><strong>逆向工厂跑第二次时要删除干净第一次生成的文件（XXXXXmapper.xml默认追加）</strong></p><p>在maven文件的<code>&lt;build&gt;</code>标签下添加插件</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">finalName</span>&gt;</span>provider<span class="tag">&lt;/<span class="name">finalName</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">      <span class="comment">&lt;!--mybatis代码自动生成插件--&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis.generator<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-generator-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.3.7<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">          <span class="comment">&lt;!--配置文件的位置--&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">configurationFile</span>&gt;</span>GeneratorMapper.xml<span class="tag">&lt;/<span class="name">configurationFile</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">verbose</span>&gt;</span>true<span class="tag">&lt;/<span class="name">verbose</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">overwrite</span>&gt;</span>true<span class="tag">&lt;/<span class="name">overwrite</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">      </span><br><span class="line">      <span class="comment">&lt;!-- 定义版本用的，可以不添加 --&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-compiler-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.8.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">      </span><br><span class="line">    <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure><p>此文件与maven文件放在同级目录下<br>根据实际情况修改</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">generatorConfiguration</span></span></span><br><span class="line"><span class="meta">        <span class="keyword">PUBLIC</span> <span class="string">&quot;-//mybatis.org//DTD MyBatis Generator Configuration 1.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="string">&quot;http://mybatis.org/dtd/mybatis-generator-config_1_0.dtd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">generatorConfiguration</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 指定连接数据库的JDBC驱动包所在位置，指定到你本机的完整路径 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">classPathEntry</span> <span class="attr">location</span>=<span class="string">&quot;C:\Empolder\mvn-repository\mysql\mysql-connector-java\5.1.6\mysql-connector-java-5.1.6.jar&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 配置table表信息内容体，targetRuntime指定采用MyBatis3的版本 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context</span> <span class="attr">id</span>=<span class="string">&quot;tables&quot;</span> <span class="attr">targetRuntime</span>=<span class="string">&quot;MyBatis3&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- 抑制生成注释，由于生成的注释都是英文的，可以不让它生成 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">commentGenerator</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;suppressAllComments&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">commentGenerator</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- 配置数据库连接信息 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">jdbcConnection</span> <span class="attr">driverClass</span>=<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span></span></span><br><span class="line"><span class="tag">                        <span class="attr">connectionURL</span>=<span class="string">&quot;jdbc:mysql://127.0.0.1:3306/mycinema&quot;</span></span></span><br><span class="line"><span class="tag">                        <span class="attr">userId</span>=<span class="string">&quot;root&quot;</span></span></span><br><span class="line"><span class="tag">                        <span class="attr">password</span>=<span class="string">&quot;123456&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">jdbcConnection</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- 生成model类，targetPackage指定model类的包名， targetProject指定生成的model放在eclipse的哪个工程下面--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">javaModelGenerator</span> <span class="attr">targetPackage</span>=<span class="string">&quot;io.peng.mycinema.pojo&quot;</span></span></span><br><span class="line"><span class="tag">                            <span class="attr">targetProject</span>=<span class="string">&quot;src\main\java&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;enableSubPackages&quot;</span> <span class="attr">value</span>=<span class="string">&quot;false&quot;</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;trimStrings&quot;</span> <span class="attr">value</span>=<span class="string">&quot;false&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">javaModelGenerator</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- 生成MyBatis的Mapper.xml文件，targetPackage指定mapper.xml文件的包名， targetProject指定生成的mapper.xml放在eclipse的哪个工程下面 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">sqlMapGenerator</span> <span class="attr">targetPackage</span>=<span class="string">&quot;/&quot;</span> <span class="attr">targetProject</span>=<span class="string">&quot;src\main\resources\mapper&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;enableSubPackages&quot;</span> <span class="attr">value</span>=<span class="string">&quot;false&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">sqlMapGenerator</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- 生成MyBatis的Mapper接口类文件,targetPackage指定Mapper接口类的包名， targetProject指定生成的Mapper接口放在eclipse的哪个工程下面 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">javaClientGenerator</span> <span class="attr">type</span>=<span class="string">&quot;XMLMAPPER&quot;</span> <span class="attr">targetPackage</span>=<span class="string">&quot;io.peng.mycinema.mapper&quot;</span> <span class="attr">targetProject</span>=<span class="string">&quot;src/main/java&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;enableSubPackages&quot;</span> <span class="attr">value</span>=<span class="string">&quot;false&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;/<span class="name">javaClientGenerator</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- 数据库表名及对应的Java模型类名 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">table</span> <span class="attr">tableName</span>=<span class="string">&quot;category&quot;</span> <span class="attr">domainObjectName</span>=<span class="string">&quot;Category&quot;</span></span></span><br><span class="line"><span class="tag">               <span class="attr">enableCountByExample</span>=<span class="string">&quot;false&quot;</span></span></span><br><span class="line"><span class="tag">               <span class="attr">enableUpdateByExample</span>=<span class="string">&quot;false&quot;</span></span></span><br><span class="line"><span class="tag">               <span class="attr">enableDeleteByExample</span>=<span class="string">&quot;false&quot;</span></span></span><br><span class="line"><span class="tag">               <span class="attr">enableSelectByExample</span>=<span class="string">&quot;false&quot;</span></span></span><br><span class="line"><span class="tag">               <span class="attr">selectByExampleQueryId</span>=<span class="string">&quot;false&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">table</span> <span class="attr">tableName</span>=<span class="string">&quot;movie&quot;</span> <span class="attr">domainObjectName</span>=<span class="string">&quot;Movie&quot;</span></span></span><br><span class="line"><span class="tag">               <span class="attr">enableCountByExample</span>=<span class="string">&quot;false&quot;</span></span></span><br><span class="line"><span class="tag">               <span class="attr">enableUpdateByExample</span>=<span class="string">&quot;false&quot;</span></span></span><br><span class="line"><span class="tag">               <span class="attr">enableDeleteByExample</span>=<span class="string">&quot;false&quot;</span></span></span><br><span class="line"><span class="tag">               <span class="attr">enableSelectByExample</span>=<span class="string">&quot;false&quot;</span></span></span><br><span class="line"><span class="tag">               <span class="attr">selectByExampleQueryId</span>=<span class="string">&quot;false&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">context</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">generatorConfiguration</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="过滤器"><a href="#过滤器" class="headerlink" title="过滤器"></a>过滤器</h2><p>设置编码用</p><p>新建类，实现Filter接口</p>]]></content>
      
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue3</title>
      <link href="/posts/176b.html"/>
      <url>/posts/176b.html</url>
      
        <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>官网：cn.vuejs.org<br>官方文档：<a href="https://v3.cn.vuejs.org/guide/installation.html">https://v3.cn.vuejs.org/guide/installation.html</a><br>菜鸟：<a href="https://www.runoob.com/vue3/vue3-tutorial.html">https://www.runoob.com/vue3/vue3-tutorial.html</a></p><p>可以联网导入，也可以下载下来本地导入。本文章全以本地导入为主<br><code>&lt;script src=&quot;https://unpkg.com/vue@next&quot;&gt;&lt;/script&gt;</code></p><h2 id="Hello-Vue"><a href="#Hello-Vue" class="headerlink" title="Hello Vue"></a>Hello Vue</h2><p>熟悉一下语法</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 第一步 引入vue.js文件 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;./js/v3.2.8/vue.global.prod.js&quot;</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 第二步 创建一个挂载节点 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">        &#123;&#123;message&#125;&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 第三步 创建Vue实例，并且绑定挂载节点 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//声明一个常量</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">const</span> app = &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="title function_">data</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="language-javascript">                    <span class="attr">message</span>: <span class="string">`Hello Vue`</span></span></span><br><span class="line"><span class="language-javascript">                &#125;</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//创建Vue实例,并且绑定挂载节点</span></span></span><br><span class="line"><span class="language-javascript">        <span class="title class_">Vue</span>.<span class="title function_">createApp</span>(app).<span class="title function_">mount</span>(<span class="string">&quot;#app&quot;</span>);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="声明式渲染"><a href="#声明式渲染" class="headerlink" title="声明式渲染"></a>声明式渲染</h2><p>插值表达式<code>&#123; &#123; &#125; &#125;</code><br>Vue.js 的核心是一个允许你采用简洁的模板语法来声明式的将数据渲染进 DOM 的系统：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h4</span>&gt;</span>&#123;&#123;message&#125;&#125;<span class="tag">&lt;/<span class="name">h4</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/vue/dist/vue.js&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">var</span> app = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123; <span class="comment">//创建VM对象</span></span></span><br><span class="line"><span class="language-javascript"><span class="attr">el</span>:<span class="string">&quot;#app&quot;</span>, <span class="comment">//指定锚定DOM根元素</span></span></span><br><span class="line"><span class="language-javascript"><span class="attr">data</span>:&#123;</span></span><br><span class="line"><span class="language-javascript"><span class="attr">message</span>:<span class="string">&quot;Hello Vue.js&quot;</span></span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript">&#125;);</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="参数-event"><a href="#参数-event" class="headerlink" title="参数 $event"></a>参数 <code>$event</code></h2><p>事件对象有<code>$event</code>，如果需要利用必须是最后一个参数<br>如果事件直接绑定函数名称（不带括号），默认会传递事件对象作为事件处理函数的第一个参数</p><p>如果事件是函数调用绑定（带括号），必须显式传递事件参数对象（参数名：$event）</p><p>例子：<br>当你触发input事件时，$event 是当前的事件对象。<br>而$event.target.value指向的是当前的input的值。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> @<span class="attr">keydown.enter</span>=<span class="string">&quot;test($event)&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">test</span>(<span class="params">event</span>)&#123;</span><br><span class="line">    <span class="keyword">let</span> num = event.<span class="property">target</span>.<span class="property">value</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 控制台就会打印出input文本框里面的值</span></span><br></pre></td></tr></table></figure><h2 id="指令"><a href="#指令" class="headerlink" title="指令"></a>指令</h2><p>指令是带有<code>v-</code>开头的特殊属性，其值限定为单个表达式。<br>指令的作用是，当表达式的值发生变化，将其产生的连带影响应用到DOM节点中。</p><h3 id="v-html"><a href="#v-html" class="headerlink" title="v-html"></a>v-html</h3><p>用于更新元素的innerHTML，该根部内容会被当做HTML代码插入。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span> <span class="attr">v-html</span>=<span class="string">&quot;message&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="title class_">Vue</span>.<span class="title function_">createApp</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="title function_">data</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="language-javascript">                    <span class="attr">message</span>: <span class="string">`&lt;h1&gt;Hello Vue.js&lt;/h1&gt;`</span></span></span><br><span class="line"><span class="language-javascript">                &#125;</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;).<span class="title function_">mount</span>(<span class="string">&quot;#app&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="v-text"><a href="#v-text" class="headerlink" title="v-text"></a>v-text</h3><p>将字符串以普通文本的形式输出。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;../js/v3.2.8/vue.global.prod.js&quot;</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span> <span class="attr">v-text</span>=<span class="string">&quot;message&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="title class_">Vue</span>.<span class="title function_">createApp</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="title function_">data</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="language-javascript">                    <span class="attr">message</span>: <span class="string">`&lt;h1&gt;Hello Vue.js&lt;/h1&gt;`</span></span></span><br><span class="line"><span class="language-javascript">                &#125;</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;).<span class="title function_">mount</span>(<span class="string">&quot;#app&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="v-bind"><a href="#v-bind" class="headerlink" title="v-bind"></a>v-bind</h3><p>主要用于响应更新HTML元素属性，将一个或者多个属性动态<code>绑定</code>到表达式。<br><code>v-bind</code>可省略，如<code>v-bind:src</code>可简写为<code>:src</code>。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;../js/v3.2.8/vue.global.prod.js&quot;</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">img</span> <span class="attr">v-bind:src</span>=<span class="string">&quot;imgUrl&quot;</span> <span class="attr">width</span>=<span class="string">&quot;100&quot;</span> <span class="attr">height</span>=<span class="string">&quot;100&quot;</span> /&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- v-bind指令可以省略 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span> <span class="attr">:title</span>=<span class="string">&quot;message&quot;</span>&gt;</span>把鼠标放在这里停留几秒<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="title class_">Vue</span>.<span class="title function_">createApp</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="title function_">data</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="language-javascript">                    <span class="attr">imgUrl</span>: <span class="string">`https://img2.baidu.com/it/u=281572882,1041305488&amp;fm=26&amp;fmt=auto`</span>,</span></span><br><span class="line"><span class="language-javascript">                    <span class="attr">message</span>: <span class="string">&quot;这个是绑定了title属性的p元素&quot;</span></span></span><br><span class="line"><span class="language-javascript">                &#125;</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;).<span class="title function_">mount</span>(<span class="string">&quot;#app&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="v-model"><a href="#v-model" class="headerlink" title="v-model"></a>v-model</h3><p>该指令用于在<code>表单元素</code>中的双向数据绑定。<br>v-model会忽略所有表单元素的value checked、selected特性的初始值。因为它会选择vue实例的数据来作为具体的值。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;../js/v3.2.8/vue.global.prod.js&quot;</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h2</span>&gt;</span>1.文本输入<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123;message&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">v-model</span>=<span class="string">&quot;message&quot;</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">h2</span>&gt;</span>2.单选框<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123;gender&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        性别:</span><br><span class="line">        男:<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">name</span>=<span class="string">&quot;gender&quot;</span> <span class="attr">value</span>=<span class="string">&quot;male&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;gender&quot;</span> /&gt;</span></span><br><span class="line">        女:<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">name</span>=<span class="string">&quot;gender&quot;</span> <span class="attr">value</span>=<span class="string">&quot;female&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;gender&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">h2</span>&gt;</span>3.复选框<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123;hobby&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        爱好:</span><br><span class="line">        健身<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">value</span>=<span class="string">&quot;健身&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;hobby&quot;</span> /&gt;</span></span><br><span class="line">        踢球<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">value</span>=<span class="string">&quot;踢球&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;hobby&quot;</span> /&gt;</span></span><br><span class="line">        游戏<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">value</span>=<span class="string">&quot;游戏&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;hobby&quot;</span> /&gt;</span></span><br><span class="line">        游泳<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">value</span>=<span class="string">&quot;游泳&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;hobby&quot;</span> /&gt;</span></span><br><span class="line">        拳击<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">value</span>=<span class="string">&quot;拳击&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;hobby&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">h2</span>&gt;</span>4.下拉选框<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123;city&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">select</span> <span class="attr">v-model</span>=<span class="string">&quot;city&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;0&quot;</span>&gt;</span>--请选择--<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;gz&quot;</span>&gt;</span>广州<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;nj&quot;</span>&gt;</span>南京<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;bj&quot;</span>&gt;</span>北京<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;sh&quot;</span>&gt;</span>上海<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">hr</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;show&quot;</span>&gt;</span>点击<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="title class_">Vue</span>.<span class="title function_">createApp</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="title function_">data</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="language-javascript">                    <span class="attr">message</span>: <span class="string">&quot;zhangsan&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">                    <span class="attr">gender</span>: <span class="string">&quot;male&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">                    <span class="attr">hobby</span>: [<span class="string">&#x27;拳击&#x27;</span>],</span></span><br><span class="line"><span class="language-javascript">                    <span class="attr">city</span>: <span class="string">&quot;0&quot;</span></span></span><br><span class="line"><span class="language-javascript">                &#125;</span></span><br><span class="line"><span class="language-javascript">            &#125;,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="title function_">show</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                    <span class="comment">//alert(this.message);</span></span></span><br><span class="line"><span class="language-javascript">                    <span class="comment">//alert(this.gender);</span></span></span><br><span class="line"><span class="language-javascript">                    <span class="comment">//alert(this.hobby);</span></span></span><br><span class="line"><span class="language-javascript">                    <span class="title function_">alert</span>(<span class="variable language_">this</span>.<span class="property">city</span>);</span></span><br><span class="line"><span class="language-javascript">                &#125;</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;).<span class="title function_">mount</span>(<span class="string">&quot;#app&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="v-show-与-v-if"><a href="#v-show-与-v-if" class="headerlink" title="v-show 与 v-if"></a>v-show 与 v-if</h3><p>根据表达式的真假，来显示或者隐藏HTML元素。</p><p>区别：<br>v-show会生成节点然后使用dispaly属性进行<code>显示和隐藏</code>。<br>v-if在值是false的时候<code>不生成节点</code></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;../js/v3.2.8/vue.global.prod.js&quot;</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h1</span> <span class="attr">v-show</span>=<span class="string">&quot;yes&quot;</span>&gt;</span>yes<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h1</span> <span class="attr">v-show</span>=<span class="string">&quot;no&quot;</span>&gt;</span>no<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h1</span> <span class="attr">v-show</span>=<span class="string">&quot;age &gt;= 26&quot;</span>&gt;</span>&#123;&#123;age&#125;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h1</span> <span class="attr">v-show</span>=<span class="string">&quot;name.indexOf(&#x27;s&#x27;) &gt;= 0&quot;</span>&gt;</span>&#123;&#123;name&#125;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="title class_">Vue</span>.<span class="title function_">createApp</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="title function_">data</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="language-javascript">                    <span class="attr">yes</span>: <span class="literal">true</span>,</span></span><br><span class="line"><span class="language-javascript">                    <span class="attr">no</span>: <span class="literal">false</span>,</span></span><br><span class="line"><span class="language-javascript">                    <span class="attr">age</span>: <span class="number">26</span>,</span></span><br><span class="line"><span class="language-javascript">                    <span class="attr">name</span>: <span class="string">&quot;smith&quot;</span></span></span><br><span class="line"><span class="language-javascript">                &#125;</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;).<span class="title function_">mount</span>(<span class="string">&quot;#app&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;../js/v3.2.8/vue.global.prod.js&quot;</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h1</span> <span class="attr">v-if</span>=<span class="string">&quot;yes&quot;</span>&gt;</span>yes<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h1</span> <span class="attr">v-if</span>=<span class="string">&quot;no&quot;</span>&gt;</span>no<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h1</span> <span class="attr">v-if</span>=<span class="string">&quot;age &gt;= 26&quot;</span>&gt;</span>&#123;&#123;age&#125;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h1</span> <span class="attr">v-if</span>=<span class="string">&quot;name.indexOf(&#x27;s&#x27;) &gt;= 0&quot;</span>&gt;</span>&#123;&#123;name&#125;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="title class_">Vue</span>.<span class="title function_">createApp</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="title function_">data</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="language-javascript">                    <span class="attr">yes</span>: <span class="literal">true</span>,</span></span><br><span class="line"><span class="language-javascript">                    <span class="attr">no</span>: <span class="literal">false</span>,</span></span><br><span class="line"><span class="language-javascript">                    <span class="attr">age</span>: <span class="number">26</span>,</span></span><br><span class="line"><span class="language-javascript">                    <span class="attr">name</span>: <span class="string">&quot;smith&quot;</span></span></span><br><span class="line"><span class="language-javascript">                &#125;</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;).<span class="title function_">mount</span>(<span class="string">&quot;#app&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="v-else-if-与-v-else"><a href="#v-else-if-与-v-else" class="headerlink" title="v-else-if 与 v-else"></a>v-else-if 与 v-else</h3><p>互斥条件，当一个条件满足时，后续条件都不会再判断。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;../js/v3.2.8/vue.global.prod.js&quot;</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span> <span class="attr">v-if</span>=<span class="string">&quot;score &gt;= 95&quot;</span>&gt;</span>优秀<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span> <span class="attr">v-else-if</span>=<span class="string">&quot;score &gt;= 80&quot;</span>&gt;</span>良好<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span> <span class="attr">v-else-if</span>=<span class="string">&quot;score &gt;= 60&quot;</span>&gt;</span>及格<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span> <span class="attr">v-else</span>&gt;</span>不及格<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="title class_">Vue</span>.<span class="title function_">createApp</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="title function_">data</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="language-javascript">                    <span class="attr">score</span>: <span class="number">79</span></span></span><br><span class="line"><span class="language-javascript">                &#125;</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;).<span class="title function_">mount</span>(<span class="string">&quot;#app&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="v-for"><a href="#v-for" class="headerlink" title="v-for"></a>v-for</h3><p>通过循环的方式来渲染一个列表，循环对象可以是数组，也可以是JS对象。<br>遍历数组语法：<code>item in items</code><br>遍历对象语法：<code>value,key,index in Obj</code></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h1</span>&gt;</span>1.迭代数组<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">&quot;(city,index) in citys&quot;</span>&gt;</span>&#123;&#123;index + 1&#125;&#125;--&#123;&#123;city&#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h1</span>&gt;</span>2.迭代对象<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">&quot;(value,key,index) in book&quot;</span>&gt;</span>&#123;&#123;index&#125;&#125;--&#123;&#123;key&#125;&#125;--&#123;&#123;value&#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="title class_">Vue</span>.<span class="title function_">createApp</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="title function_">data</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="language-javascript">                    <span class="attr">citys</span>: [<span class="string">&#x27;广州&#x27;</span>, <span class="string">&#x27;南京&#x27;</span>, <span class="string">&#x27;上海&#x27;</span>, <span class="string">&#x27;北京&#x27;</span>],</span></span><br><span class="line"><span class="language-javascript">                    <span class="attr">book</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">                        <span class="attr">name</span>: <span class="string">&quot;《从入门到放弃》&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">                        <span class="attr">isbn</span>: <span class="string">&quot;1234567890&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">                        <span class="attr">author</span>: <span class="string">&quot;葫芦&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">                        <span class="attr">price</span>: <span class="number">65.00</span></span></span><br><span class="line"><span class="language-javascript">                    &#125;</span></span><br><span class="line"><span class="language-javascript">                &#125;</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;).<span class="title function_">mount</span>(<span class="string">&quot;#app&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="v-on"><a href="#v-on" class="headerlink" title="v-on"></a>v-on</h3><p>事件绑定指令，而且<code>JS的所有事件都可以用v-on绑定</code></p><p>全写形式：<code>v-on-click</code><br>简写形式：<code>@click</code></p><p>其他常用事件：<a href="https://pengyirui.gitee.io/posts/d3d6.html#%E4%BA%8B%E4%BB%B6">https://pengyirui.gitee.io/posts/d3d6.html#%E4%BA%8B%E4%BB%B6</a></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h1</span>&gt;</span>1.点击事件<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">        &#123;&#123;message&#125;&#125;</span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">h1</span>&gt;</span>2.焦点失去事件<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> @<span class="attr">blur</span>=<span class="string">&quot;print&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">hr</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;changeMessage&quot;</span>&gt;</span>点击改变message的值<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="title class_">Vue</span>.<span class="title function_">createApp</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="title function_">data</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="language-javascript">                    <span class="attr">message</span>: <span class="string">&quot;Hello Vue.js&quot;</span></span></span><br><span class="line"><span class="language-javascript">                &#125;</span></span><br><span class="line"><span class="language-javascript">            &#125;,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="title function_">changeMessage</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                    <span class="variable language_">this</span>.<span class="property">message</span> = <span class="string">&quot;Hello World&quot;</span>;</span></span><br><span class="line"><span class="language-javascript">                &#125;,</span></span><br><span class="line"><span class="language-javascript">                <span class="title function_">print</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                    <span class="title function_">alert</span>(<span class="string">&quot;焦点失去事件被触发...&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">                &#125;</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;).<span class="title function_">mount</span>(<span class="string">&quot;#app&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="绑定HTML-的class"><a href="#绑定HTML-的class" class="headerlink" title="绑定HTML 的class"></a>绑定HTML 的class</h3><p>class是每个HTML元素都有的属性。<br>用vue控制css样式是否生效</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">&quot;text/css&quot;</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.active</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">width</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">height</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background-color</span>: greenyellow;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.border-style</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">border-radius</span>: <span class="number">10px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">cursor</span>: pointer;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;../js/v3.2.8/vue.global.prod.js&quot;</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">:class</span>=<span class="string">&quot;&#123;&#x27;active&#x27;:isActive,&#x27;border-style&#x27;:isBorderStyle&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">:style</span>=<span class="string">&quot;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="title class_">Vue</span>.<span class="title function_">createApp</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="title function_">data</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="language-javascript">                    <span class="attr">isActive</span>: <span class="literal">true</span>,</span></span><br><span class="line"><span class="language-javascript">                    <span class="attr">isBorderStyle</span>: <span class="literal">true</span></span></span><br><span class="line"><span class="language-javascript">                &#125;</span></span><br><span class="line"><span class="language-javascript">            &#125;,</span></span><br><span class="line"><span class="language-javascript">        &#125;).<span class="title function_">mount</span>(<span class="string">&quot;#app&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="组件"><a href="#组件" class="headerlink" title="组件"></a>组件</h2><p>可以 <strong>扩展</strong> HTML 元素 和 <strong>封装</strong> 可重用的代码。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 4.可重复使用组件 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">first-component</span>&gt;</span><span class="tag">&lt;/<span class="name">first-component</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">first-component</span>&gt;</span><span class="tag">&lt;/<span class="name">first-component</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//1.构建一个空的Vue实例</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">const</span> app = <span class="title class_">Vue</span>.<span class="title function_">createApp</span>(&#123;&#125;);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//2.使用 vue实例构建一个组件</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// first-component：自定义标签</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// template：编写模板</span></span></span><br><span class="line"><span class="language-javascript">        app.<span class="title function_">component</span>(<span class="string">&quot;first-component&quot;</span>, &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">template</span>: <span class="string">`</span></span></span><br><span class="line"><span class="string"><span class="language-javascript">&lt;div&gt;</span></span></span><br><span class="line"><span class="string"><span class="language-javascript">&lt;h1&gt;Hello Component&lt;/h1&gt;</span></span></span><br><span class="line"><span class="string"><span class="language-javascript">&lt;h2&gt;这是我的第一个VUE组件...&lt;/h2&gt;</span></span></span><br><span class="line"><span class="string"><span class="language-javascript">&lt;/div&gt;</span></span></span><br><span class="line"><span class="string"><span class="language-javascript">`</span></span></span><br><span class="line"><span class="language-javascript">        &#125;);</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//3.挂载</span></span></span><br><span class="line"><span class="language-javascript">        app.<span class="title function_">mount</span>(<span class="string">&quot;#app&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="局部组件注册"><a href="#局部组件注册" class="headerlink" title="局部组件注册"></a>局部组件注册</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">        &#123;&#123;message&#125;&#125;</span><br><span class="line">        <span class="tag">&lt;<span class="name">login</span>&gt;</span><span class="tag">&lt;/<span class="name">login</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="title class_">Vue</span>.<span class="title function_">createApp</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="title function_">data</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="language-javascript">                    <span class="attr">message</span>: <span class="string">&quot;这是Vue实例的message&quot;</span></span></span><br><span class="line"><span class="language-javascript">                &#125;</span></span><br><span class="line"><span class="language-javascript">            &#125;,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">components</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">login</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">                    <span class="attr">template</span>: <span class="string">`&lt;h1&gt;这是登录的局部组件--&#123;&#123;this.message&#125;&#125;&lt;/h1&gt;`</span>,</span></span><br><span class="line"><span class="language-javascript">                    <span class="title function_">data</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                        <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="language-javascript">                            <span class="attr">message</span>: <span class="string">&quot;这是局部组件的message&quot;</span></span></span><br><span class="line"><span class="language-javascript">                        &#125;</span></span><br><span class="line"><span class="language-javascript">                    &#125;</span></span><br><span class="line"><span class="language-javascript">                &#125;</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;).<span class="title function_">mount</span>(<span class="string">&quot;#app&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="静态值传递-props"><a href="#静态值传递-props" class="headerlink" title="静态值传递 props"></a>静态值传递 props</h3><p>关键字props：用于设定组件中的属性。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">site-name</span> <span class="attr">title</span>=<span class="string">&quot;Google&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">site-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">site-name</span> <span class="attr">title</span>=<span class="string">&quot;Runoob&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">site-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">site-name</span> <span class="attr">title</span>=<span class="string">&quot;Taobao&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">site-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">const</span> app = <span class="title class_">Vue</span>.<span class="title function_">createApp</span>(&#123;&#125;)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        app.<span class="title function_">component</span>(<span class="string">&#x27;site-name&#x27;</span>, &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">props</span>: [<span class="string">&#x27;title&#x27;</span>],</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">template</span>: <span class="string">`&lt;h4&gt;&#123;&#123; title &#125;&#125;&lt;/h4&gt;`</span></span></span><br><span class="line"><span class="language-javascript">        &#125;)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        app.<span class="title function_">mount</span>(<span class="string">&#x27;#app&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="动态值传递"><a href="#动态值传递" class="headerlink" title="动态值传递"></a>动态值传递</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">login</span> <span class="attr">:post</span>=<span class="string">&quot;obj&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">login</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;changeData&quot;</span>&gt;</span>点击<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="title class_">Vue</span>.<span class="title function_">createApp</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="title function_">data</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="language-javascript">                    <span class="attr">obj</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">                        <span class="attr">id</span>: <span class="number">1</span>,</span></span><br><span class="line"><span class="language-javascript">                        <span class="attr">title</span>: <span class="string">&quot;《标题》&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">                        <span class="attr">content</span>: <span class="string">&quot;内容....&quot;</span></span></span><br><span class="line"><span class="language-javascript">                    &#125;</span></span><br><span class="line"><span class="language-javascript">                &#125;</span></span><br><span class="line"><span class="language-javascript">            &#125;,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="title function_">changeData</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                    <span class="title function_">alert</span>(<span class="string">&#x27;点击触发事件执行&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">                    <span class="variable language_">this</span>.<span class="property">obj</span> = &#123; <span class="string">&#x27;id&#x27;</span>: <span class="number">2</span>, <span class="string">&#x27;title&#x27;</span>: <span class="string">&#x27;关于...&#x27;</span>, <span class="string">&#x27;content&#x27;</span>: <span class="string">&#x27;疫情防御....&#x27;</span> &#125;</span></span><br><span class="line"><span class="language-javascript">                &#125;</span></span><br><span class="line"><span class="language-javascript">            &#125;,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">components</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">login</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">                    <span class="attr">template</span>: <span class="string">`</span></span></span><br><span class="line"><span class="string"><span class="language-javascript">                    &lt;div&gt;</span></span></span><br><span class="line"><span class="string"><span class="language-javascript">                        &lt;h1&gt;&#123;&#123;post.id&#125;&#125;&lt;/h1&gt;</span></span></span><br><span class="line"><span class="string"><span class="language-javascript">                        &lt;h1&gt;&#123;&#123;post.title&#125;&#125;&lt;/h1&gt;</span></span></span><br><span class="line"><span class="string"><span class="language-javascript">                        &lt;h1&gt;&#123;&#123;post.content&#125;&#125;&lt;/h1&gt;</span></span></span><br><span class="line"><span class="string"><span class="language-javascript">                    &lt;/div&gt;`</span>,</span></span><br><span class="line"><span class="language-javascript">                    <span class="attr">props</span>: [<span class="string">&#x27;post&#x27;</span>]</span></span><br><span class="line"><span class="language-javascript">                &#125;</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;).<span class="title function_">mount</span>(<span class="string">&quot;#app&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="计算属性-computed"><a href="#计算属性-computed" class="headerlink" title="计算属性 computed"></a>计算属性 computed</h2><p>是用来简化vue页面中 文本插值的js表达式。</p><p>computed 与 methods区别：<br>我们可以使用 methods 来替代 computed，效果上两个都是一样的，<strong>但是</strong> computed 是基于它的依赖缓存，只有相关依赖发生改变时才会重新取值。而使用 methods ，在重新渲染的时候，函数总会重新调用执行。 </p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>未改变之前的数据：&#123;&#123;message&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>改变之后的数据：&#123;&#123;upperCase&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123;msg&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;upperCase1&quot;</span>&gt;</span>点击<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="title class_">Vue</span>.<span class="title function_">createApp</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="title function_">data</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="language-javascript">                    <span class="attr">message</span>: <span class="string">&quot;Hello World&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">                    <span class="attr">msg</span>: <span class="string">&quot;&quot;</span></span></span><br><span class="line"><span class="language-javascript">                &#125;</span></span><br><span class="line"><span class="language-javascript">            &#125;,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">computed</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="title function_">upperCase</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">message</span>.<span class="title function_">toUpperCase</span>();</span></span><br><span class="line"><span class="language-javascript">                &#125;</span></span><br><span class="line"><span class="language-javascript">            &#125;,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="title function_">upperCase1</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                    <span class="variable language_">this</span>.<span class="property">msg</span> = <span class="variable language_">this</span>.<span class="property">message</span>.<span class="title function_">toUpperCase</span>();</span></span><br><span class="line"><span class="language-javascript">                &#125;</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;).<span class="title function_">mount</span>(<span class="string">&quot;#app&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="路由"><a href="#路由" class="headerlink" title="路由"></a>路由</h2><p>在vue的基础上，再导入路由文件<br>下载 或 在线导入路由：<code>&lt;script src=&quot;https://unpkg.com/vue-router@4&quot;&gt;&lt;/script&gt;</code></p><p>路由允许我们<strong>通过不同的url访问不同的内容</strong><br>通过vue可以实现多视图的单页web应用</p><h3 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h3><p>router文件夹下有个index.js文件夹用来修改配置的</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 导入你需要用到的.vue路由文件</span></span><br><span class="line"><span class="comment">// 也可以懒加载</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Vue</span> <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">VueRouter</span> <span class="keyword">from</span> <span class="string">&#x27;vue-router&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Login</span> <span class="keyword">from</span> <span class="string">&#x27;@/components/Login&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">ProductList</span> <span class="keyword">from</span> <span class="string">&#x27;@/components/ProductList&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">use</span>(<span class="title class_">VueRouter</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> routes = [</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 组件的路径</span></span><br><span class="line">        <span class="attr">path</span>: <span class="string">&#x27;/&#x27;</span>,</span><br><span class="line">        <span class="comment">// 组件的名字</span></span><br><span class="line">        <span class="attr">name</span>: <span class="string">&#x27;ProductList&#x27;</span>,</span><br><span class="line">        <span class="comment">// 导入的.vue组件在这里应用</span></span><br><span class="line">        <span class="attr">component</span>: <span class="title class_">ProductList</span></span><br><span class="line">    &#125;, &#123;</span><br><span class="line">        <span class="comment">// 加冒号表示路由的参数（与后端的传参有关）</span></span><br><span class="line">        <span class="attr">path</span>: <span class="string">&#x27;/login/:id&#x27;</span>,</span><br><span class="line">        <span class="attr">name</span>: <span class="string">&#x27;Login&#x27;</span>,</span><br><span class="line">        <span class="attr">component</span>: <span class="title class_">Login</span></span><br><span class="line">    &#125;</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="comment">// 这里的模式修改成这样，历史模式，（有待研究）</span></span><br><span class="line"><span class="keyword">const</span> router = <span class="keyword">new</span> <span class="title class_">VueRouter</span>(&#123;</span><br><span class="line">  <span class="attr">mode</span>: <span class="string">&#x27;history&#x27;</span>,</span><br><span class="line">  <span class="attr">base</span>: process.<span class="property">env</span>.<span class="property">BASE_URL</span>,</span><br><span class="line">  routes</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> router</span><br></pre></td></tr></table></figure><h3 id="点击切换路由"><a href="#点击切换路由" class="headerlink" title="点击切换路由"></a>点击切换路由</h3><p>两种方法</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 切换到 组件路径是/login --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">&quot;/login&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 切换到组件名字是Login --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">router-link</span> <span class="attr">:to</span>=<span class="string">&quot;&#123;name:&#x27;Login&#x27;&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 路由占位视图 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 切换后的位置 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">router-view</span>&gt;</span><span class="tag">&lt;/<span class="name">router-view</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="获取路由的参数"><a href="#获取路由的参数" class="headerlink" title="获取路由的参数"></a>获取路由的参数</h3><p><strong>注意！！！获取路由是$route没有r的！！！</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">this</span>.<span class="property">$route</span>.<span class="property">params</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 例子：</span></span><br><span class="line"><span class="keyword">let</span> id = <span class="variable language_">this</span>.<span class="property">$route</span>.<span class="property">params</span>.<span class="property">id</span>;</span><br></pre></td></tr></table></figure><h3 id="带参切换路由"><a href="#带参切换路由" class="headerlink" title="带参切换路由"></a>带参切换路由</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 解释：</span></span><br><span class="line"><span class="comment">// push(&#123;name:&quot;路由配置文件中，需要跳转到哪个路由的名字&quot;&#125;,query:&#123;参数key：参数value&#125;)</span></span><br><span class="line"><span class="variable language_">this</span>.<span class="property">$router</span>.<span class="title function_">push</span>(&#123;<span class="attr">name</span>:<span class="string">&#x27;name&#x27;</span>,<span class="attr">query</span>:&#123;<span class="attr">name</span>:name&#125;&#125;)</span><br></pre></td></tr></table></figure><h3 id="路由监听"><a href="#路由监听" class="headerlink" title="路由监听"></a>路由监听</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">watch</span>:&#123;</span><br><span class="line">    $route()&#123;</span><br><span class="line">        <span class="comment">// 监听,当路由发生变化的时候执行</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="跨域请求"><a href="#跨域请求" class="headerlink" title="跨域请求"></a>跨域请求</h2><p>当前端端口是8080，后端是9090时，存在跨域问题<br>可以改变前端端口，做跨域请求</p><p>在主目录下新建vue.config.js文件，写入以下内容（/api只是用来更好区分）</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">    <span class="attr">devServer</span>: &#123;</span><br><span class="line">        <span class="attr">port</span>: <span class="number">3000</span>,</span><br><span class="line">        <span class="attr">proxy</span>: &#123;</span><br><span class="line">            <span class="string">&#x27;/api&#x27;</span>: &#123;</span><br><span class="line">                <span class="attr">target</span>: <span class="string">&#x27;http://localhost:9090&#x27;</span>,</span><br><span class="line">                <span class="attr">pathRewrite</span>: &#123;</span><br><span class="line">                    <span class="string">&#x27;^/api&#x27;</span>: <span class="string">&#x27;&#x27;</span> <span class="comment">//如果本身的路径中有api则无需此设置</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">前端将端口改为<span class="number">3000</span>，</span><br><span class="line"></span><br><span class="line">例如：</span><br><span class="line">后端开放的端口是<span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">9090</span>/products</span><br><span class="line">配置完后前端输入<span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">3000</span>/api/products</span><br><span class="line">获得的是相同的数据</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="js对象"><a href="#js对象" class="headerlink" title="js对象"></a>js对象</h2><p>例如构造个UserService.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">class</span> <span class="title class_">UserService</span> &#123;</span><br><span class="line">    <span class="comment">//构造函数</span></span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line"></span><br><span class="line">    &#125;,</span><br><span class="line">    </span><br><span class="line">    <span class="title function_">saveUser</span>(<span class="params">xxx</span>) &#123;</span><br><span class="line">        <span class="comment">// 方法体</span></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>使用对象</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">先导包</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">UserService</span> <span class="keyword">from</span> <span class="string">&quot;@/service/UserService&quot;</span></span><br><span class="line"></span><br><span class="line">实例化对象</span><br><span class="line"><span class="keyword">let</span> userService = <span class="keyword">new</span> <span class="title class_">UserService</span>();</span><br><span class="line"></span><br><span class="line">使用对象中的方法</span><br><span class="line">userService.<span class="title function_">saveUser</span>(xxx);</span><br></pre></td></tr></table></figure><h2 id="axios"><a href="#axios" class="headerlink" title="axios"></a>axios</h2><p>官网：<a href="https://www.npmjs.com/package/axios">https://www.npmjs.com/package/axios</a><br>vue中的ajax技术。可以理解为vue封装的ajax技术。<br>axios是基于vue.js开发的的，所以要先导入vue.js<br>下载 或 在线导入：<code>&lt;script src=&quot;https://unpkg.com/axios/dist/axios.min.js&quot;&gt;&lt;/script&gt;</code></p><p>在vue里面添加<br><code>vue add axios</code><br>npm 安装<br><code>npm install axios</code></p><p>在vue cli 中添加axios<br>命令：npm导入：<code>npm install --save axios</code><br><code>.vue</code>文件中导入axios<br><code>import axios from &#39;axios&#39;</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">语法：</span><br><span class="line">axios(&#123;method,url,params&#125;<span class="keyword">then</span>().catch();</span><br><span class="line"></span><br><span class="line">get语法：</span><br><span class="line">axios.get(<span class="string">&#x27;&#x27;</span>,&#123;params&#125;).<span class="keyword">then</span>(resp=&gt;&#123;&#125;).catch(error=&gt;&#123;&#125;);</span><br><span class="line"></span><br><span class="line">post语法（需要转换）：</span><br><span class="line">axios.post(<span class="string">&#x27;&#x27;</span>,&#123;&#125;);</span><br></pre></td></tr></table></figure><blockquote><p>具体实现：把name与time发送到后台，后台发送json对象到前台</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// method:模式</span></span><br><span class="line"><span class="comment">// url：发送地址</span></span><br><span class="line"><span class="comment">// params：传送的数据</span></span><br><span class="line"><span class="comment">// .then(resp=&gt;&#123;成功后接收到的数据&#125;)</span></span><br><span class="line"><span class="title function_">axios</span>(&#123;</span><br><span class="line"><span class="attr">method</span>:<span class="string">&quot;post&quot;</span>,</span><br><span class="line"><span class="attr">url</span>:<span class="string">&quot;http://localhost:8080/axiosAjax&quot;</span>,</span><br><span class="line"><span class="attr">params</span>:&#123;</span><br><span class="line"><span class="attr">name</span>:<span class="variable language_">this</span>.<span class="property">name</span>,</span><br><span class="line"><span class="attr">time</span>:<span class="string">&quot;2021-10-8 16:52&quot;</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;).<span class="title function_">then</span>(<span class="function"><span class="params">resp</span>=&gt;</span>&#123;</span><br><span class="line"><span class="variable language_">this</span>.<span class="property">info</span> = resp.<span class="property">data</span>;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// get</span></span><br><span class="line">axios.<span class="title function_">get</span>(<span class="string">&#x27;http://localhost:8080/axiosget&#x27;</span>,&#123;</span><br><span class="line"><span class="attr">params</span>:&#123;</span><br><span class="line"><span class="attr">name</span>:<span class="variable language_">this</span>.<span class="property">name</span>,</span><br><span class="line"><span class="attr">time</span>:<span class="string">&quot;2021-10-8 16:52&quot;</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;).<span class="title function_">then</span>(<span class="function"><span class="params">resp</span>=&gt;</span>&#123;</span><br><span class="line"><span class="variable language_">this</span>.<span class="property">users</span> = resp.<span class="property">data</span>;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// post</span></span><br><span class="line"><span class="comment">// 注意！！！！</span></span><br><span class="line"><span class="comment">//处理需要发送的数据</span></span><br><span class="line"><span class="keyword">let</span> params = <span class="keyword">new</span> <span class="title class_">URLSearchParams</span>();</span><br><span class="line">params.<span class="title function_">append</span>(<span class="string">&quot;name&quot;</span>,<span class="variable language_">this</span>.<span class="property">name</span>);</span><br><span class="line">params.<span class="title function_">append</span>(<span class="string">&quot;time&quot;</span>,<span class="string">&quot;2021-10-8 16:52&quot;</span>);</span><br><span class="line"><span class="comment">//将传给服务器后台的数据封装成：name=xxx&amp;time=2021-10-8 16:52</span></span><br><span class="line"><span class="comment">//然后将处理过的参数让浏览器打包发送给服务器</span></span><br><span class="line"><span class="comment">//使用axios发送ajax请求</span></span><br><span class="line">axios.<span class="title function_">post</span>(<span class="string">&#x27;http://localhost:8080/axiospost&#x27;</span>,params).<span class="title function_">then</span>(<span class="function"><span class="params">resp</span> =&gt;</span> &#123;</span><br><span class="line"><span class="variable language_">this</span>.<span class="property">users</span> = resp.<span class="property">data</span>;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p><strong>传的是json对象，并且带头部</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">axios.<span class="title function_">post</span>(<span class="string">&quot;/api/orders&quot;</span>,<span class="title class_">JSON</span>.<span class="title function_">stringify</span>(order),&#123;    <span class="comment">//将对象格式转化为json</span></span><br><span class="line">    <span class="attr">headers</span>:&#123;</span><br><span class="line">        <span class="string">&quot;Content-Type&quot;</span>:<span class="string">&quot;application/json&quot;</span>,  <span class="comment">//跟浏览器说这是头部参数</span></span><br><span class="line">        <span class="string">&quot;key&quot;</span>:<span class="string">&quot;value&quot;</span>   <span class="comment">//头部需要带的参数</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="常用的官方解释"><a href="#常用的官方解释" class="headerlink" title="常用的官方解释"></a>常用的官方解释</h3><table><thead><tr><th>Method</th><th>Api</th></tr></thead><tbody><tr><td>GET</td><td>axios.get(url).then(successCallback).catch(errorHandler)</td></tr><tr><td>POST</td><td>axios.post(url, data).then(successCallback).catch(errorHandler)</td></tr><tr><td>PUT</td><td>axios.put(url, data).then(successCallback).catch(errorHandler)</td></tr><tr><td>DELETE</td><td>axios.delete(url).then(successCallback).catch(errorHandler)</td></tr></tbody></table><p>GET传参:</p><p><code>axios.get(url,&#123;key:value,key:value&#125;).then(function(data)&#123;&#125;);</code></p><p>POST/PUT传参</p><p>(1)使用json对象传参（在服务器端控制器要求@RequestBody)—-默认方式</p><p><code>axios.post(url,&#123;username:&#39;accp&#39;,password:&#39;123&#39;&#125;).then(function(data)&#123;&#125;);</code></p><p>(2)使用URLSearchParams传参—表单传参</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> param = <span class="keyword">new</span> <span class="title class_">URLSearchParams</span>();</span><br><span class="line"></span><br><span class="line">param.<span class="title function_">append</span>(<span class="string">&#x27;username&#x27;</span>, <span class="variable language_">this</span>.<span class="property">username</span>);</span><br><span class="line"></span><br><span class="line">param.<span class="title function_">append</span>(<span class="string">&#x27;password&#x27;</span>, <span class="variable language_">this</span>.<span class="property">password</span>);</span><br><span class="line"></span><br><span class="line">axios.<span class="title function_">post</span>(url,param).<span class="title function_">then</span>(<span class="keyword">function</span>(<span class="params">data</span>)&#123;&#125;);</span><br></pre></td></tr></table></figure><h2 id="vue-cli"><a href="#vue-cli" class="headerlink" title="vue cli"></a>vue cli</h2><p>Vue CLI 是一个基于 Vue.js进行快速开发的一个完整的系统。<br>Vue CLI安装需要使用npm命令，npm命令需要基于node.js，所以要<strong>先安装node.js</strong></p><p>node.js官网：<a href="https://nodejs.org/zh-cn/">https://nodejs.org/zh-cn/</a></p><p>搭建：<code>npm install -g @vue/cli</code></p><p>选一个目录创建项目<br><code>vue create 项目名</code></p><p>进入项目目录，运行服务，用浏览器测试。<br><code>npm run serve</code></p><p>以<code>.vue</code>为后缀的文件，这个文件可以包含，HTML、CSS、JS<br>HTML是写在<code>&lt;template&gt;&lt;/template&gt;</code><br>JS是写在<code>&lt;script&gt;&lt;/script&gt;</code><br>CSS是写在<code>&lt;style&gt;&lt;/style&gt;</code></p><h2 id="todo-list-练习"><a href="#todo-list-练习" class="headerlink" title="todo list 练习"></a>todo list 练习</h2><p>一个小练习,<br>!(图片)[]</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- App.vue --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">Head</span> @<span class="attr">todotitle</span>=<span class="string">&quot;addtodo&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">Head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">Body</span> <span class="attr">:todolist</span>=<span class="string">&quot;todolist&quot;</span> @<span class="attr">delindex</span>=<span class="string">&quot;deltodo&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">Body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">Tail</span> <span class="attr">:todolist</span>=<span class="string">&quot;todolist&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">Tail</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;loadData&quot;</span>&gt;</span>加载数据<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;saveData&quot;</span>&gt;</span>保存数据<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> <span class="title class_">Body</span> <span class="keyword">from</span> <span class="string">&quot;./components/Body.vue&quot;</span>;</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> <span class="title class_">Head</span> <span class="keyword">from</span> <span class="string">&quot;./components/Head.vue&quot;</span>;</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> <span class="title class_">Tail</span> <span class="keyword">from</span> <span class="string">&quot;./components/Tail.vue&quot;</span>;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="language-javascript">  <span class="attr">name</span>: <span class="string">&quot;App&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">  <span class="attr">components</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="title class_">Head</span>,</span></span><br><span class="line"><span class="language-javascript">    <span class="title class_">Body</span>,</span></span><br><span class="line"><span class="language-javascript">    <span class="title class_">Tail</span>,</span></span><br><span class="line"><span class="language-javascript">  &#125;,</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// 创造数据</span></span></span><br><span class="line"><span class="language-javascript">  <span class="title function_">data</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">todolist</span>: [</span></span><br><span class="line"><span class="language-javascript">        &#123;</span></span><br><span class="line"><span class="language-javascript">          <span class="attr">title</span>: <span class="string">&quot;学习ES6新语法&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">          <span class="attr">finished</span>: <span class="literal">false</span>,</span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">        &#123;</span></span><br><span class="line"><span class="language-javascript">          <span class="attr">title</span>: <span class="string">&quot;学习Spring Boot&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">          <span class="attr">finished</span>: <span class="literal">false</span>,</span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">        &#123;</span></span><br><span class="line"><span class="language-javascript">          <span class="attr">title</span>: <span class="string">&quot;背诵单词&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">          <span class="attr">finished</span>: <span class="literal">true</span>,</span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">      ],</span></span><br><span class="line"><span class="language-javascript">    &#125;;</span></span><br><span class="line"><span class="language-javascript">  &#125;,</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// 方法区域</span></span></span><br><span class="line"><span class="language-javascript">  <span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">    </span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">addtodo</span>(<span class="params">title</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">var</span> todo = &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">title</span>: title,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">finished</span>: <span class="literal">false</span>,</span></span><br><span class="line"><span class="language-javascript">      &#125;;</span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">this</span>.<span class="property">todolist</span>.<span class="title function_">push</span>(todo);</span></span><br><span class="line"><span class="language-javascript">    &#125;,</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">deltodo</span>(<span class="params">index</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">this</span>.<span class="property">todolist</span>.<span class="title function_">splice</span>(index, <span class="number">1</span>);</span></span><br><span class="line"><span class="language-javascript">    &#125;,</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//加载数据</span></span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">loadData</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="comment">//从本地存储获取数据</span></span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">var</span> data = <span class="variable language_">localStorage</span>.<span class="title function_">getItem</span>(<span class="string">&quot;todolist&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">if</span> (data) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">this</span>.<span class="property">todolist</span> = <span class="title class_">JSON</span>.<span class="title function_">parse</span>(data);</span></span><br><span class="line"><span class="language-javascript">      &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;,</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//保存数据</span></span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">saveData</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="comment">//将当前items中的数据存储到localStorage中</span></span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">localStorage</span>.<span class="title function_">setItem</span>(<span class="string">&quot;todolist&quot;</span>, <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(<span class="variable language_">this</span>.<span class="property">todolist</span>));</span></span><br><span class="line"><span class="language-javascript">    &#125;,</span></span><br><span class="line"><span class="language-javascript">  &#125;,</span></span><br><span class="line"><span class="language-javascript">&#125;;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- Head.vue --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h2</span>&gt;</span>Todo App<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">  待办事务：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;title&quot;</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;addtodo&quot;</span>&gt;</span>添加<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">hr</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="language-javascript">  <span class="title function_">data</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">title</span>: <span class="string">&quot;&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">    &#125;;</span></span><br><span class="line"><span class="language-javascript">  &#125;,</span></span><br><span class="line"><span class="language-javascript">  <span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">addtodo</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="comment">//触发自定义事件</span></span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">this</span>.$emit(<span class="string">&quot;todotitle&quot;</span>, <span class="variable language_">this</span>.<span class="property">title</span>);</span></span><br><span class="line"><span class="language-javascript">      <span class="comment">//清空title</span></span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">this</span>.<span class="property">title</span> = <span class="string">&quot;&quot;</span>;</span></span><br><span class="line"><span class="language-javascript">    &#125;,</span></span><br><span class="line"><span class="language-javascript">  &#125;,</span></span><br><span class="line"><span class="language-javascript">&#125;;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- Body.vue --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">table</span> <span class="attr">border</span>=<span class="string">&quot;1&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">td</span>&gt;</span>完成<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">td</span>&gt;</span>待办事项<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">td</span>&gt;</span>删除<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 循环 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span> <span class="attr">v-for</span>=<span class="string">&quot;(todo, index) in todolist&quot;</span> <span class="attr">:key</span>=<span class="string">&quot;todo&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;todo.finished&quot;</span> /&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">td</span> <span class="attr">:class</span>=<span class="string">&quot;&#123; text: todo.finished &#125;&quot;</span>&gt;</span>&#123;&#123; todo.title &#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;deltodo(index)&quot;</span>&gt;</span>删除<span class="tag">&lt;/<span class="name">button</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="language-javascript">  <span class="attr">props</span>: [<span class="string">&quot;todolist&quot;</span>],</span></span><br><span class="line"><span class="language-javascript">  <span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">deltodo</span>(<span class="params">index</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">this</span>.$emit(<span class="string">&quot;delindex&quot;</span>, index);</span></span><br><span class="line"><span class="language-javascript">    &#125;,</span></span><br><span class="line"><span class="language-javascript">  &#125;,</span></span><br><span class="line"><span class="language-javascript">&#125;;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="comment">/* 横线样式 */</span></span></span><br><span class="line"><span class="language-css"><span class="selector-class">.text</span> &#123;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">text-decoration</span>: line-through;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- Tail.vue --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">hr</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">spam</span>&gt;</span>共有&#123;&#123; todolist.length &#125;&#125;条，已完成&#123;&#123;finallytodo&#125;&#125;条，未完成&#123;&#123;unfinallytodo&#125;&#125;条<span class="tag">&lt;/<span class="name">spam</span>&gt;</span></span><br><span class="line">  </span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="language-javascript">  <span class="attr">props</span>: [<span class="string">&quot;todolist&quot;</span>],</span></span><br><span class="line"><span class="language-javascript">  <span class="attr">computed</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 计算已完成总数</span></span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">finallytodo</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">var</span> count = <span class="number">0</span>;</span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">this</span>.<span class="property">todolist</span>.<span class="title function_">forEach</span>(<span class="function">(<span class="params">x</span>) =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">if</span> (x.<span class="property">finished</span>) count++;</span></span><br><span class="line"><span class="language-javascript">      &#125;);</span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">return</span> count;</span></span><br><span class="line"><span class="language-javascript">    &#125;,</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 计算未完成总数</span></span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">unfinallytodo</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">var</span> count = <span class="number">0</span>;</span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">this</span>.<span class="property">todolist</span>.<span class="title function_">forEach</span>(<span class="function">(<span class="params">x</span>) =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">if</span> (!x.<span class="property">finished</span>) count++;</span></span><br><span class="line"><span class="language-javascript">      &#125;);</span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">return</span> count;</span></span><br><span class="line"><span class="language-javascript">    &#125;,</span></span><br><span class="line"><span class="language-javascript">  &#125;,</span></span><br><span class="line"><span class="language-javascript">&#125;;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="script标签"><a href="#script标签" class="headerlink" title="script标签"></a>script标签</h2><p>注意：自定义组件命名规则<br>1.短横线 my-component<br>2.驼峰式 MyComponent:在使用组件的时候只能在模板字符串中（组件中嵌套个组件）使用驼峰命名，在普通的标签中使用必须转换为短横线的方式</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    <span class="comment">// 导入的包（@表示工程文件夹默认src）</span></span><br><span class="line">    <span class="keyword">import</span> <span class="title class_">CartService</span> <span class="keyword">from</span> <span class="string">&quot;@/service/CartService&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 自定义使用到的模块</span></span><br><span class="line">    <span class="attr">components</span>: &#123; 子组件, ... &#125;,</span><br><span class="line"></span><br><span class="line">    <span class="attr">props</span>:[ <span class="string">&#x27;属性1&#x27;</span>, <span class="string">&#x27;属性2&#x27;</span>, ... ],</span><br><span class="line"></span><br><span class="line">    <span class="comment">// vue文件名字</span></span><br><span class="line">    <span class="attr">name</span>:<span class="string">&quot;App&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//一般不用。。</span></span><br><span class="line">    <span class="attr">template</span>: <span class="string">&#x27;html字符串模板&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 使用到的数据</span></span><br><span class="line">    <span class="title function_">data</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">            <span class="attr">name</span>: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">            <span class="attr">age</span>: <span class="string">&#x27;&#x27;</span></span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 立即加载的数据</span></span><br><span class="line">    <span class="title function_">mounted</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">name</span> = <span class="string">&quot;葫芦&quot;</span>；</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">age</span> = <span class="number">23</span>;</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 计算属性</span></span><br><span class="line">    <span class="attr">computed</span>: &#123;</span><br><span class="line">        <span class="title function_">allQuantity</span>(<span class="params"></span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">cart</span>.<span class="title function_">totalQuantity</span>();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 方法都放到这里</span></span><br><span class="line">    <span class="attr">methods</span>: &#123;</span><br><span class="line">        <span class="title function_">eat</span>(<span class="params"></span>)&#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;正在吃饭~~&quot;</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;，</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 监听属性，当有xxx有改变就执行（一般放方法多）</span></span><br><span class="line">    <span class="attr">watch</span>:&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h2 id="浏览器存储"><a href="#浏览器存储" class="headerlink" title="浏览器存储"></a>浏览器存储</h2><p><code>localStorage</code>和<code>sessionStorage</code>一样都是用来存储客户端临时信息的对象。<br><code>localStorage</code>生命周期是永久<br><code>sessionStorage</code>生命周期为当前窗口或标签页</p><h3 id="sessionStorage"><a href="#sessionStorage" class="headerlink" title="sessionStorage"></a>sessionStorage</h3><p>将用户数据存入session</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sessionStorage.<span class="title function_">setItem</span>(<span class="string">&quot;user&quot;</span>,<span class="title class_">JSON</span>.<span class="title function_">stringify</span>(user));</span><br></pre></td></tr></table></figure><p>获取session数据</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> user = sessionStorage.<span class="title function_">getItem</span>(<span class="string">&quot;user&quot;</span>);</span><br></pre></td></tr></table></figure><p>json转换为Object类型</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> user = <span class="title class_">JSON</span>.<span class="title function_">parse</span>(json);</span><br></pre></td></tr></table></figure><p>Object类型 转换为json</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> user = <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(<span class="title class_">Object</span>)</span><br></pre></td></tr></table></figure><h3 id="localStorage"><a href="#localStorage" class="headerlink" title="localStorage"></a>localStorage</h3><p>localStorage保存到浏览器</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">localStorage</span>.<span class="title function_">setItem</span>(<span class="string">&quot;cart&quot;</span>, <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(<span class="variable language_">this</span>.<span class="property">items</span>));</span><br></pre></td></tr></table></figure><p>清空指定key的localStorage</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">localStorage</span>.<span class="title function_">removeItem</span>(<span class="string">&quot;cart&quot;</span>);</span><br></pre></td></tr></table></figure><p>加载localStorage</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> cart = <span class="variable language_">localStorage</span>.<span class="title function_">getItem</span>(<span class="string">&quot;cart&quot;</span>);</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 前端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Maven</title>
      <link href="/posts/9478.html"/>
      <url>/posts/9478.html</url>
      
        <content type="html"><![CDATA[<h2 id="简单介绍"><a href="#简单介绍" class="headerlink" title="简单介绍"></a>简单介绍</h2><ul><li><p>介绍<br>  Maven 是 Apache 软件基金会组织维护的一款<strong>自动化构建工具</strong>，专注服务于 Java 平台的项目构建和依赖管理。<br>  需要依赖java的环境</p></li><li><p>特点<br>  可以根据指定版本自动解决 jar 包版本兼容问题，并且把所依赖的其它 jar 包自动下载并引入项目。</p></li><li><p>官网<br>  <a href="http://maven.apache.org/">http://maven.apache.org/</a></p></li><li><p>构建过程的几个主要环节<br>  ①清理：删除以前的编译结果，为重新编译做好准备。<br>  ②编译：将Java源程序编译为字节码文件。<br>  ③测试：针对项目中的关键点进行测试，确保项目在迭代开发过程中关键点的正确性。<br>  ④报告：在每一次测试后以标准的格式记录和展示测试结果。<br>  ⑤打包：将一个包含诸多文件的工程封装为一个压缩文件用于安装或部署。Java 工程对应 jar 包，Web 工程对应war包。<br>  ⑥安装：在Maven环境下特指将打包的结果——jar包或war包安装到本地仓库中。<br>  ⑦部署：将打包的结果部署到远程仓库或将war包部署到服务器上运行</p></li></ul><h2 id="目录结构"><a href="#目录结构" class="headerlink" title="目录结构"></a>目录结构</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">Hello</span><br><span class="line">|---src</span><br><span class="line">|---|---main</span><br><span class="line">|---|---|---java</span><br><span class="line">|---|---|---resources</span><br><span class="line">|---|---<span class="built_in">test</span></span><br><span class="line">|---|---|---java</span><br><span class="line">|---|---|---resources</span><br><span class="line">|---pom.xml</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">说明：Hello:根目录，也就是工程名</span><br><span class="line">src：源代码</span><br><span class="line">main：主程序</span><br><span class="line">java：主程序的 java 源码</span><br><span class="line">resources：主程序的配置文件</span><br><span class="line"><span class="built_in">test</span>：测试程序</span><br><span class="line">java：测试程序的 java 源码</span><br><span class="line">resources：测试程序的配置文件</span><br><span class="line">pom.xml：Maven 工程的核心配置文件。</span><br><span class="line">一般情况下，我们习惯上采取的措施是：约定&gt;配置&gt;编码</span><br><span class="line">maven 的 pom.xml 记录的关于构建项目的各个方面的设置，maven 从 pom.xml 文件开始，按照助约定的工程目录编译，测试，打包，部署，发布项目。</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="POM文件"><a href="#POM文件" class="headerlink" title="POM文件"></a>POM文件</h2><p>即 Project Object Model 项目对象模型。Maven 把一个项目的结构和内容抽象成一个模型，在 xml 文件中进行声明，以方便进行构建和描述，pom.xml 是 Maven 的灵魂。</p><table><thead><tr><th align="left">属性</th><th align="left">表示的信息</th></tr></thead><tbody><tr><td align="left">modelVersion</td><td align="left">Maven 模型的版本，对于 Maven2 和 Maven3 来说，它只能是 4.0.0</td></tr><tr><td align="left">groupId</td><td align="left">组织id，一般是公司域名的倒写。格式可以为：    域名倒写。 例如 com.baidu;    域名倒写+项目名。例如 com.baidu.appolo</td></tr><tr><td align="left">artifactId</td><td align="left">项目名称，也是模块名称，对应 groupId 中 项目中的子项目。</td></tr><tr><td align="left">version</td><td align="left">项目的版本号。如果项目还在开发中，是不稳定版本， 通常在版本后带-SNAPSHOT;    version 使用三位数字标识，例如 1.1.0</td></tr><tr><td align="left">packaging</td><td align="left">项目打包的类型，可以使 jar、war、rar、ear、pom，默认是 jar</td></tr><tr><td align="left">dependencies 和 dependency</td><td align="left">Maven 的一个重要作用就是管理 jar 包，为了一个项目可以构建或运行，项目中不可避免的，会依赖很多其他的 jar 包，在 Maven 中，这些 jar 就被称为依赖，使用标签 dependency 来配置。而这种依赖的配置正是通过坐标来定位的，由此我们也不难看出，maven 把所有的 jar 包也都视为项目存在了。</td></tr><tr><td align="left">properties</td><td align="left">properties    是 用 来 定 义 一 些 配 置 属 性 的 ， 例 如 project.build.sourceEncoding（项目构建源码编码方式），可以设置为 UTF-8，防止中文乱码，也可定义相关构建版本号，便于日后统一升级。</td></tr><tr><td align="left">build</td><td align="left">build 表示与构建相关的配置，例如设置编译插件的 jdk 版本</td></tr><tr><td align="left">parent</td><td align="left">在 Maven  中，如果多个模块都需要声明相同的配置，例如：groupId、version、有相同的依赖、或者相同的组件配置等，也有类似 Java 的继承机制，用 parent 声明要继承的父工程的 pom 配置。</td></tr><tr><td align="left">modules</td><td align="left">在 Maven 的多模块开发中，为了统一构建整个项目的所有模块，可以提供一个额外的模块，该模块打包方式为 pom，并且在其中使用 modules 聚合的其它模块，这样通过本模块就可以一键自动识别模块间的依赖关系来构建所有模块，叫 Maven 的聚合。</td></tr></tbody></table><h2 id="仓库"><a href="#仓库" class="headerlink" title="仓库"></a>仓库</h2><ul><li><p>中央仓库<br>  存放全球市面上所有的主流第三资源包的一个仓库其本质就是一个网站。<br>  网站：<a href="https://mvnrepository.com/">https://mvnrepository.com/</a></p></li><li><p>镜像仓库<br>  jar服务器是在国外，国内下载速度可能受限，因为国内某些IT公司做了一个镜像服务器，将中央仓库的所有jar包全部都镜像到国内服务器。<br>  阿里巴巴的镜像仓库。<br>  网址：maven.aliyun.com</p></li><li><p>本地仓库<br>  从远程仓库下载的jar包的存放位置。<br>  本质就是磁盘上的一个文件夹而已。</p></li></ul><h2 id="修改仓库"><a href="#修改仓库" class="headerlink" title="修改仓库"></a>修改仓库</h2><p>修改配置文件：<code>apache-maven-3.5.4\conf\settings.xml</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">localRepository：本地仓库</span><br><span class="line">如：</span><br><span class="line">&lt;localRepository&gt;C:\Empolder\mvn-repository&lt;/localRepository&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">mirrors中的mirror：镜像仓库</span><br><span class="line">如：</span><br><span class="line">&lt;mirrors&gt;</span><br><span class="line">    &lt;mirror&gt;</span><br><span class="line">        &lt;<span class="built_in">id</span>&gt;aliyunmaven&lt;/id&gt;</span><br><span class="line">        &lt;mirrorOf&gt;*&lt;/mirrorOf&gt;</span><br><span class="line">        &lt;name&gt;阿里云公共仓库&lt;/name&gt;</span><br><span class="line">        &lt;url&gt;https://maven.aliyun.com/repository/public&lt;/url&gt;</span><br><span class="line">    &lt;/mirror&gt;</span><br><span class="line">&lt;/mirrors&gt;</span><br></pre></td></tr></table></figure><h2 id="版本统一"><a href="#版本统一" class="headerlink" title="版本统一"></a>版本统一</h2><p>如多个jar包配合时，要保持同一个版本（如spring）</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">spring.version</span>&gt;</span>4.3.6.RELEASE<span class="tag">&lt;/<span class="name">spring.version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line">  </span><br><span class="line"><span class="comment">&lt;!-- Spring DI 容器 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-context<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- Spring aop --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-aspects<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="继承后排除某个子包"><a href="#继承后排除某个子包" class="headerlink" title="继承后排除某个子包"></a>继承后排除某个子包</h2><blockquote><p>exclusion标签<br>例如：zookeeper排除slf4j日志包</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--zookeeper--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.101tec<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>zkclient<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.10<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">exclusions</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.slf4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>slf4j-log4j12<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="maven项目常用的两个创建方式"><a href="#maven项目常用的两个创建方式" class="headerlink" title="maven项目常用的两个创建方式"></a>maven项目常用的两个创建方式</h2><p><code>org.apache.maven.archetypes:maven-archetype-quickstart</code>普通项目<br><code>org.apache.maven.archetypes:maven-archetype-webapp</code>web项目</p><h2 id="打包"><a href="#打包" class="headerlink" title="打包"></a>打包</h2><p>在maven项目目录下输入命令<br><code>mvn package</code></p>]]></content>
      
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>jQuery</title>
      <link href="/posts/d3d6.html"/>
      <url>/posts/d3d6.html</url>
      
        <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><ol><li>它是JS的前端框架之一。<br> 市场上主流的JS框架很多：vue、Jquery、prototype、Ext.js、node.js、AngularJS….等等。</li><li>Jquery的设计思想，是将原本的dom操作封装成一个Jquery对象，通过调用Jquery函数来操作dom节点。</li><li>Jquery屏蔽了浏览器兼容问题。</li><li>Jquery封装了Ajax技术。</li><li>Jquery拥有非常强大的选择器。</li></ol><ul><li><p>如何使用？<br>在<code>html</code>页面中导入Jquery<br><code>&lt;script src=&quot;../js/jquery-3.4.1.min.js&quot; type=&quot;application/javascript&quot;&gt;&lt;/script&gt;</code><br>src属性：对应是Jquery所在文件地址。</p></li><li><p>Jquery 与 JS 的区别<br>区别在于获取节点的方式与操作节点方式发生了根本的改变。</p></li></ul><p>jquery：中使用$(选择器)获取节点。</p><p>JS：中使用document对象的函数来获取节点。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- jq --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;../js/jquery-3.4.1.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="comment">//Jquery的页面加载即刻执行</span></span></span><br><span class="line"><span class="language-javascript">$(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Jquery的页面加载即刻执行...&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">$(<span class="string">&quot;button:eq(0)&quot;</span>).<span class="title function_">click</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;按钮被点击&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">&#125;)</span></span><br><span class="line"><span class="language-javascript">&#125;);</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- js --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="variable language_">window</span>.<span class="property">onload</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;JS页面加载即执行...&quot;</span>);</span></span><br><span class="line"><span class="language-javascript"><span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;btn&#x27;</span>).<span class="property">onclick</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;按钮被点击...&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="选择器"><a href="#选择器" class="headerlink" title="选择器"></a>选择器</h2><p>用于查找指定的某个节点或者某一些节点。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">1.基本选择器</span><br><span class="line"><span class="built_in">id</span>选择器</span><br><span class="line">类选择器</span><br><span class="line">标签选择器</span><br><span class="line">属性选择器</span><br><span class="line">=：完全匹配</span><br><span class="line">   !=：完全不匹配</span><br><span class="line">   ^=：以某个字符开头</span><br><span class="line">   $=：以某个字符结尾</span><br><span class="line">   *=：包含某个字符</span><br><span class="line"> 比如：$(<span class="string">&#x27;div[title$=v]&#x27;</span>).css(<span class="string">&quot;color&quot;</span>,<span class="string">&quot;red&quot;</span>);//查找 div标签中带有title属性并且title属性的值是以v结尾的</span><br><span class="line">    //多属性选择器。</span><br><span class="line">    //查找input标签，必须包含<span class="built_in">id</span>属性和name属性的值必须以man结尾</span><br><span class="line">    //prop()：设置当前节点的属性和属性值</span><br><span class="line">    $(<span class="string">&#x27;input[id][name$=man]&#x27;</span>).prop(<span class="string">&quot;value&quot;</span>,<span class="string">&quot;张三&quot;</span>); </span><br><span class="line">伪类选择器</span><br><span class="line">li:first-child：//查找第一个子元素</span><br><span class="line">li:last-child：//查找最后一个子元素</span><br><span class="line">li:nth-child(2)：//查找指定位置的元素</span><br><span class="line">li:empty：//查找空元素</span><br></pre></td></tr></table></figure><h3 id="筛选器-过滤选择器-重点"><a href="#筛选器-过滤选择器-重点" class="headerlink" title="筛选器/过滤选择器(重点)"></a>筛选器/过滤选择器(重点)</h3><table><thead><tr><th>大于</th><th>大于等于</th><th>等于</th><th>小于</th><th>小于等于</th><th>不等于</th></tr></thead><tbody><tr><td>gt</td><td>ge</td><td>eq</td><td>lt</td><td>le</td><td>!=</td></tr><tr><td>&gt;</td><td>&gt;=</td><td>=</td><td>&lt;</td><td>&lt;=</td><td>!=</td></tr></tbody></table><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">$(&#x27;li:first&#x27;)：获取第一个元素</span><br><span class="line">$(&#x27;li:last&#x27;)：获取最后一个元素</span><br><span class="line">$(&#x27;li:even&#x27;)：获取奇数</span><br><span class="line">$(&#x27;li:odd&#x27;):：获取偶数</span><br><span class="line">$(&#x27;li:eq(0)&#x27;)：获取下标为0的元素</span><br><span class="line">$(&#x27;li:gt(4)&#x27;)：获取下标大于4的元素</span><br><span class="line">$(&#x27;li:lt(2)&#x27;)：获取下标小于2的元素</span><br><span class="line">$(&#x27;li:not(li:empty)&#x27;)：获取除了空节点的所有元素。</span><br></pre></td></tr></table></figure><h3 id="表单元素选择器"><a href="#表单元素选择器" class="headerlink" title="表单元素选择器"></a>表单元素选择器</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">&quot;:input&quot;</span>)      //匹配所有 input, textarea, select 和 button 元素</span><br><span class="line">$(<span class="string">&quot;:text&quot;</span>)       //所有的单行文本框，$(<span class="string">&quot;:text&quot;</span>) 等价于$(<span class="string">&quot;[type=text]&quot;</span>)，推荐使用$(<span class="string">&quot;input:text&quot;</span>)效率更高，下同</span><br><span class="line">$(<span class="string">&quot;:password&quot;</span>)   //所有密码框</span><br><span class="line">$(<span class="string">&quot;:radio&quot;</span>)      //所有单选按钮</span><br><span class="line">$(<span class="string">&quot;:checkbox&quot;</span>)   //所有复选框</span><br><span class="line">$(<span class="string">&quot;:submit&quot;</span>)     //所有提交按钮</span><br><span class="line">$(<span class="string">&quot;:reset&quot;</span>)      //所有重置按钮</span><br><span class="line">$(<span class="string">&quot;:button&quot;</span>)     //所有button按钮</span><br><span class="line">$(<span class="string">&quot;:file&quot;</span>)       //所有文件域</span><br><span class="line">$(<span class="string">&quot;:disabled&quot;</span>)   //获取所有不可修改的节点</span><br><span class="line">$(<span class="string">&#x27;input:checked&#x27;</span>) //获取所有已选中的多选框</span><br><span class="line">$(<span class="string">&#x27;input:selected&#x27;</span>)//获取选中的下拉选框</span><br><span class="line"> </span><br><span class="line">总结：</span><br><span class="line">表单元素选择器 与 属性过滤选择器 本质上的差别就是少些了一个input</span><br><span class="line">比如：</span><br><span class="line">属性选择器：$(<span class="string">&quot;input[type=text]&quot;</span>).css(<span class="string">&quot;background-color&quot;</span>,<span class="string">&quot;red&quot;</span>);</span><br><span class="line">表单选择器：$(<span class="string">&quot;:password&quot;</span>).css(<span class="string">&quot;background-color&quot;</span>,<span class="string">&quot;red&quot;</span>);    </span><br></pre></td></tr></table></figure><h3 id="层次选择器-筛选、过滤器"><a href="#层次选择器-筛选、过滤器" class="headerlink" title="层次选择器 筛选、过滤器"></a>层次选择器 筛选、过滤器</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">first()：返回第一个节点元素</span><br><span class="line">last()：返回最后一个节点元素</span><br><span class="line">next():返回下一个兄弟元素</span><br><span class="line">nextAll(selector)：默认返回当前节点同级别的下面的所有节点，可以按照selector进行筛选</span><br><span class="line">prev()：返回当前节点同级别的上一个元素</span><br><span class="line">prevAll(selector)：默认返回当前节点同级别的上面的所有节点，可以按照selector进行筛选</span><br><span class="line">parent()：返回的是当前节点的直接父元素</span><br><span class="line">parents(selector)：返回当前节点所有的祖宗元素，可以按照selector进行筛选</span><br><span class="line">eq(1)：匹配指定下标的节点元素</span><br><span class="line">find(selector)：筛选指定selector的元素节点</span><br><span class="line">siblings(selector)：返回当前节点前后所有兄弟元素。可以按照selector进行筛选</span><br><span class="line">children(selector)：返回当前节点的所有子元素，可以按照selector进行筛选，只能查找直接子元素</span><br></pre></td></tr></table></figure><h2 id="事件"><a href="#事件" class="headerlink" title="事件"></a>事件</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">1.鼠标事件</span><br><span class="line">click(<span class="keyword">function</span> callback)：单击事件。</span><br><span class="line">    dblclick(<span class="keyword">function</span> callback)：双击事件。</span><br><span class="line">    </span><br><span class="line">    mouseenter(<span class="keyword">function</span> callback)：鼠标移入</span><br><span class="line">    mouseleave(<span class="keyword">function</span> callback)：鼠标移出</span><br><span class="line">    mouseover(<span class="keyword">function</span> callback)：鼠标移入</span><br><span class="line">    mouseout(<span class="keyword">function</span> callback)：鼠标移出</span><br><span class="line">    </span><br><span class="line">    hover(<span class="keyword">function</span> callback,<span class="keyword">function</span> callback)：鼠标移入移出的整合</span><br><span class="line">    </span><br><span class="line">2.键盘事件</span><br><span class="line">keydown - 键按下的过程</span><br><span class="line">keypress - 键被按下</span><br><span class="line">keyup - 键被松开</span><br><span class="line"></span><br><span class="line">3.表单事件</span><br><span class="line">focus：获取焦点事件</span><br><span class="line">    blur：失去焦点事件</span><br><span class="line">  change：值改变事件</span><br><span class="line">    submit：表单提交事件，在表单提交之前所触发的事件，多用于表单验证。</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">4.事件绑定函数</span><br><span class="line"><span class="built_in">bind</span>(&#123;&#125;)：可以绑定多个事件(已过时)</span><br><span class="line">    on(&#123;&#125;)：可以绑定多个事件</span><br><span class="line">    one(&#123;&#125;)：可以绑定多个事件,事件只能触发一次。</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 事件绑定函数</span></span><br><span class="line">$(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">$(<span class="string">&#x27;li&#x27;</span>).<span class="title function_">on</span>(&#123;</span><br><span class="line"><span class="attr">click</span>: <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;我被点击了...&quot;</span>);</span><br><span class="line">&#125;,</span><br><span class="line"><span class="attr">mouseenter</span>: <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;我进入了...&quot;</span>);</span><br><span class="line">&#125;,</span><br><span class="line"><span class="attr">mouseleave</span>: <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;我出去了...&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="DOM"><a href="#DOM" class="headerlink" title="DOM"></a>DOM</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">1.样式操作</span><br><span class="line">css();方法设置或返回被选元素的一个或多个样式属性。</span><br><span class="line">css(param):获取样式属性值</span><br><span class="line">css(<span class="string">&quot;&quot;</span>,<span class="string">&quot;&quot;</span>)：设置单个样式</span><br><span class="line">css(&#123;&#125;)：设置多个样式</span><br><span class="line">addClass()：添加样式</span><br><span class="line">removeClass()：删除样式</span><br><span class="line">toggleClass()：切换样式</span><br><span class="line"></span><br><span class="line">2.内容操作</span><br><span class="line">text()：只更改文本内容，不会将HTML标签解析。</span><br><span class="line">html()：改文本内容，会将HTML标签解析。</span><br><span class="line">val()：获取或设置input节点的value属性值</span><br><span class="line"></span><br><span class="line">3.属性的操作</span><br><span class="line">attr();获取或设置节点的属性</span><br><span class="line">attr(<span class="string">&quot;&quot;</span>)：获取指定属性的值</span><br><span class="line">attr(<span class="string">&quot;&quot;</span>,<span class="string">&quot;&quot;</span>)：设置属性值</span><br><span class="line">attr(&#123;&#125;)：设置多个属性值</span><br><span class="line"></span><br><span class="line">prop();类似于attr</span><br><span class="line"></span><br><span class="line">4.节点的操作</span><br><span class="line">1.增加节点：</span><br><span class="line">a)创建新的节点</span><br><span class="line">$(<span class="string">&quot;&lt;li&gt;&lt;/li&gt;&quot;</span>)</span><br><span class="line">b)将新节点追到到指定节点中</span><br><span class="line">obj.append($(<span class="string">&quot;&lt;li&gt;&lt;/li&gt;&quot;</span>));</span><br><span class="line">2.删除节点</span><br><span class="line">remove():删除一个节点</span><br><span class="line">empty();不删除节点，只将节点的内容置空</span><br><span class="line"></span><br><span class="line">3.复制节点</span><br><span class="line"><span class="built_in">clone</span>()：只复制节点和内容不复制事件</span><br><span class="line"><span class="built_in">clone</span>(<span class="literal">true</span>)：复制节点的一切</span><br><span class="line"></span><br><span class="line">4.替换节点</span><br><span class="line">replaceWith:替换一个节点</span><br><span class="line">replaceAll：替换一个节点</span><br></pre></td></tr></table></figure><h2 id="动画"><a href="#动画" class="headerlink" title="动画"></a>动画</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">将一个元素显示或者隐藏，或者按照既定的样式进行显示。</span><br><span class="line"></span><br><span class="line">1.隐藏/显示</span><br><span class="line">hide():</span><br><span class="line">show():</span><br><span class="line">2.淡入/淡出</span><br><span class="line">fadeOut:淡出</span><br><span class="line">fadeIn：淡入</span><br><span class="line">fadeToggle：淡入淡入的切换</span><br><span class="line">3.滑动</span><br><span class="line">slideUp：向上滑动</span><br><span class="line">slideDown：向下滑动</span><br><span class="line">slideToggle：滑动切换</span><br><span class="line"></span><br><span class="line">4.自定义动画【了解】</span><br><span class="line">animate()</span><br></pre></td></tr></table></figure><h2 id="循环-each"><a href="#循环-each" class="headerlink" title="循环 each"></a>循环 each</h2><p>语法：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$.each(数组,<span class="keyword">function</span>(下标,每份)&#123;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">选中的数组.each(<span class="keyword">function</span>(下标,每份)&#123;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;./js/jquery-3.4.1.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">$(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">$(<span class="string">&quot;#b1&quot;</span>).<span class="title function_">on</span>(<span class="string">&quot;click&quot;</span>,<span class="keyword">function</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript"><span class="comment">// 遍历dom对象方式一</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">var</span> texts = $(<span class="string">&quot;:text&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">$.<span class="title function_">each</span>(texts,<span class="keyword">function</span>(<span class="params">index,item</span>)&#123;</span></span><br><span class="line"><span class="language-javascript"><span class="variable language_">console</span>.<span class="title function_">log</span>(index,item.<span class="property">value</span>);</span></span><br><span class="line"><span class="language-javascript">&#125;)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="comment">// 遍历dom对象方式二</span></span></span><br><span class="line"><span class="language-javascript">$(<span class="string">&quot;:text&quot;</span>).<span class="title function_">each</span>(<span class="keyword">function</span>(<span class="params">i,iteam</span>)&#123;</span></span><br><span class="line"><span class="language-javascript"><span class="variable language_">console</span>.<span class="title function_">log</span>(i,iteam.<span class="property">value</span>);</span></span><br><span class="line"><span class="language-javascript">&#125;)</span></span><br><span class="line"><span class="language-javascript">&#125;);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="comment">// 遍历json</span></span></span><br><span class="line"><span class="language-javascript">$(<span class="string">&quot;#b2&quot;</span>).<span class="title function_">on</span>(<span class="string">&quot;click&quot;</span>,<span class="keyword">function</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">var</span> jsonArr = [&#123;<span class="string">&quot;name&quot;</span>:<span class="string">&quot;张三&quot;</span>,<span class="string">&quot;age&quot;</span>:<span class="string">&quot;22&quot;</span>&#125;,</span></span><br><span class="line"><span class="language-javascript">&#123;<span class="string">&quot;name&quot;</span>:<span class="string">&quot;li4&quot;</span>,<span class="string">&quot;age&quot;</span>:<span class="string">&quot;22&quot;</span>&#125;,</span></span><br><span class="line"><span class="language-javascript">&#123;<span class="string">&quot;name&quot;</span>:<span class="string">&quot;wang5&quot;</span>,<span class="string">&quot;age&quot;</span>:<span class="string">&quot;22&quot;</span>&#125;,]</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">$.<span class="title function_">each</span>(jsonArr,<span class="keyword">function</span>(<span class="params">index,item</span>)&#123;</span></span><br><span class="line"><span class="language-javascript"><span class="variable language_">console</span>.<span class="title function_">log</span>(item.<span class="property">name</span>+item.<span class="property">age</span>);</span></span><br><span class="line"><span class="language-javascript">&#125;)</span></span><br><span class="line"><span class="language-javascript">&#125;)</span></span><br><span class="line"><span class="language-javascript">&#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>文本框<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">value</span>=<span class="string">&quot;刘备&quot;</span> /&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">value</span>=<span class="string">&quot;关羽&quot;</span> /&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">value</span>=<span class="string">&quot;张飞&quot;</span> /&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">id</span>=<span class="string">&quot;b1&quot;</span> <span class="attr">value</span>=<span class="string">&quot;点击&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">id</span>=<span class="string">&quot;b2&quot;</span> <span class="attr">value</span>=<span class="string">&quot;点击&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="JSON"><a href="#JSON" class="headerlink" title="JSON"></a>JSON</h2><p>JavaScript  Object Notation 简称js对象符号。<br>简单理解：一大堆字符串。用于后端与前端进行数据交互的一种技术。属于中间数据转换的一种语言。</p><p>语法：<code>&#123;&quot;属性&quot;:&quot;属性值&quot;&#125;</code></p><h2 id="ajax"><a href="#ajax" class="headerlink" title="ajax"></a>ajax</h2><p>Asynchronous JavaScript and XML = 异步 JavaScript 和 XML<br>是一种与服务器交换数据的技术，可以在不重新载入整个页面的情况下更新网页的一部分。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">var xhr = new XMLHttpRequest();</span><br><span class="line"></span><br><span class="line">XmlHttpRequest对象常用重要属性:</span><br><span class="line">open(methodType,url)：设定发送请求的方式和请求的地址。</span><br><span class="line">setRequestHeader()：设置请求的消息头</span><br><span class="line">onreadystatechange：注册一个监听器【绑定一个事件处理函数】</span><br><span class="line"></span><br><span class="line">readyState：返回网络协议状态值</span><br><span class="line">    0：未初始化状态【对象已经创建，尚未调用open方法】</span><br><span class="line">    1：初始化状态【xhr调用了open方法】</span><br><span class="line">    2：发送数据【send已经被调用】</span><br><span class="line">    3：数据传输中【已经接受部分数据】</span><br><span class="line">    4：响应结束【接收了所有的数据】</span><br><span class="line"></span><br><span class="line">status：浏览器返回的状态码</span><br><span class="line">    200：浏览器接收完毕，数据正常接收</span><br><span class="line">    </span><br><span class="line">responseText：服务器返回的数据。</span><br><span class="line">send()：发送请求，请求中可以包含请求数据</span><br></pre></td></tr></table></figure><h3 id="原生方式"><a href="#原生方式" class="headerlink" title="原生方式"></a>原生方式</h3><p>用原生方式写 动态监测输入用户名是否被注册</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>获取XmlHttpReuqest对象<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// var xhr = new XMLHttpRequest();</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// console.log(xhr);</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">function</span> <span class="title function_">check_username</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">//1.获取 XMLHttpRequest 对象</span></span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">var</span> xhr = <span class="keyword">new</span> <span class="title class_">XMLHttpRequest</span>();</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">//2.发送请求</span></span></span><br><span class="line"><span class="language-javascript">            xhr.<span class="title function_">open</span>(<span class="string">&quot;post&quot;</span>, <span class="string">&quot;checkusername&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">//3.设置请求消息头</span></span></span><br><span class="line"><span class="language-javascript">            xhr.<span class="title function_">setRequestHeader</span>(<span class="string">&quot;Content-Type&quot;</span>, <span class="string">&quot;application/x-www-form-urlencoded&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">//4.绑定网络传输监听</span></span></span><br><span class="line"><span class="language-javascript">            xhr.<span class="property">onreadystatechange</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="comment">//获取服务器返回的数据，更新页面</span></span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">if</span> (xhr.<span class="property">readyState</span> == <span class="number">4</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                    <span class="keyword">if</span> (xhr.<span class="property">status</span> == <span class="number">200</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                        <span class="comment">//响应接收完毕,获取服务器返回的数据</span></span></span><br><span class="line"><span class="language-javascript">                        <span class="keyword">var</span> txt = xhr.<span class="property">responseText</span>;</span></span><br><span class="line"><span class="language-javascript">                        <span class="variable language_">console</span>.<span class="title function_">log</span>(txt.<span class="property">length</span>);</span></span><br><span class="line"><span class="language-javascript">                        <span class="keyword">if</span> (txt.<span class="title function_">trim</span>() == <span class="string">&quot;用户名被占用&quot;</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                            <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;username_msg&#x27;</span>).<span class="property">innerText</span> = txt;</span></span><br><span class="line"><span class="language-javascript">                            <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;username_msg&#x27;</span>).<span class="property">style</span>.<span class="property">color</span> = <span class="string">&quot;red&quot;</span>;</span></span><br><span class="line"><span class="language-javascript">                        &#125; <span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="language-javascript">                            <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;username_msg&#x27;</span>).<span class="property">innerText</span> = txt;</span></span><br><span class="line"><span class="language-javascript">                            <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;username_msg&#x27;</span>).<span class="property">style</span>.<span class="property">color</span> = <span class="string">&quot;green&quot;</span>;</span></span><br><span class="line"><span class="language-javascript">                        &#125;</span></span><br><span class="line"><span class="language-javascript">                    &#125;</span></span><br><span class="line"><span class="language-javascript">                &#125;</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">            xhr.<span class="title function_">send</span>(<span class="string">&quot;username=&quot;</span> + <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;user-name-label&#x27;</span>).<span class="property">value</span>);</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>判断用户名是否被占用<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;#&quot;</span> <span class="attr">method</span>=<span class="string">&quot;#&quot;</span>&gt;</span></span><br><span class="line">    用户名：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">id</span>=<span class="string">&quot;user-name-label&quot;</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">onblur</span>=<span class="string">&quot;check_username();&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">&quot;username_msg&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.annotation.WebServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="meta">@WebServlet(&quot;/checkusername&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CheckUserNameServlet</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">service</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        request.setCharacterEncoding(<span class="string">&quot;utf-8&quot;</span>);</span><br><span class="line">        response.setContentType(<span class="string">&quot;text/html;charset=utf-8&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">String</span> <span class="variable">username</span> <span class="operator">=</span> request.getParameter(<span class="string">&quot;username&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span>(username.equals(<span class="string">&quot;1224976993@qq.com&quot;</span>))&#123;</span><br><span class="line">            response.getWriter().println(<span class="string">&quot;用户名被占用&quot;</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            response.getWriter().println(<span class="string">&quot;用户名可以使用&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Jquery对Ajax支持"><a href="#Jquery对Ajax支持" class="headerlink" title="Jquery对Ajax支持"></a>Jquery对Ajax支持</h3><p>Jquery对原生的ajax做了很好的封装特性。<br>提供了基于ajax()方法对服务器访问的函数。</p><p>函数以及语法</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">函数：</span><br><span class="line">1.ajax(&#123;&#125;) : jquery提供的最基础的ajax访问函数，如 load,get,post函数都是基于ajax()函数的</span><br><span class="line"></span><br><span class="line">    语法：</span><br><span class="line">    $.ajax(&#123;&#125;);</span><br><span class="line">    ajax()函数的常用属性：</span><br><span class="line">    ajax(&#123;</span><br><span class="line">        url:浏览器请求地址</span><br><span class="line">        async:同步 | 异步  默认是异步，true是异步， false是同步</span><br><span class="line">        type:请求的方式</span><br><span class="line">        dataType:响应的数据类型 text【文本】 html【html内容】 json【后台解析过的对象】</span><br><span class="line">        success:成功后的回调函数</span><br><span class="line">        error:失败后的回调函数</span><br><span class="line">    &#125;):</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">2.load：方法从服务器加载数据，并把返回的数据放入被选元素中。</span><br><span class="line"></span><br><span class="line">   语法：</span><br><span class="line">   load(url,&#123;&#125;,function(data)&#123;&#125;)</span><br><span class="line"> url:浏览器请求地址</span><br><span class="line"> &#123;&#125;:要发送给服务器的数据</span><br><span class="line"> function(data) : 成功后的回调函数,data是服务器返回的数据</span><br><span class="line"> </span><br><span class="line">3.get</span><br><span class="line">语法：</span><br><span class="line">$.get(url,function(data)&#123;&#125;)</span><br><span class="line">$.parseJSON(data)：将指定格式的字符串转换为JSON对象</span><br><span class="line"></span><br><span class="line">4.post</span><br><span class="line">语法：</span><br><span class="line">post(url,&#123;&#125;,function(data)&#123;&#125;)</span><br><span class="line"></span><br><span class="line">5.serialize()</span><br><span class="line">将表单序列化，然后浏览器引擎会将表单的数据转换为form data</span><br><span class="line">发送给服务器。</span><br></pre></td></tr></table></figure><p>例子：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">$.ajax(&#123;</span><br><span class="line">url:&quot;user&quot;,//访问user链接</span><br><span class="line">type:&quot;post&quot;,//post方式访问</span><br><span class="line">data: $(&#x27;#addForm&#x27;).serialize(),//需要发送的数据(可多个 需要大括号包围、自定义key：value)；serialize()表示序列化。</span><br><span class="line">dataType:&quot;text&quot;,//函数返回的值将由jQuery进一步处理</span><br><span class="line">success:function(data)&#123;//成功后，返回的的数据</span><br><span class="line">console.log(data);</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="prop与attr"><a href="#prop与attr" class="headerlink" title="prop与attr"></a>prop与attr</h2><p>获取在匹配的元素集中的第一个元素的属性值。<br><code>$(&quot;#xxxx&quot;).prop(&quot;checked&quot;);</code></p><p>设置或返回被选元素的属性值。<br><code>$(&quot;img&quot;).attr(&quot;src&quot;);</code></p><h2 id="转跳到某个页面"><a href="#转跳到某个页面" class="headerlink" title="转跳到某个页面"></a>转跳到某个页面</h2><p><code>window.location.href=&quot;/index&quot;;</code></p><h2 id="md5加密"><a href="#md5加密" class="headerlink" title="md5加密"></a>md5加密</h2><p><code>var loginPassword = $.md5($(&quot;#loginPassword&quot;).val());</code></p><h2 id="dom对象与jq对象转换"><a href="#dom对象与jq对象转换" class="headerlink" title="dom对象与jq对象转换"></a>dom对象与jq对象转换</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">dom对象---&gt; jq对象</span><br><span class="line">语法：</span><br><span class="line">$(dom对象)</span><br><span class="line">用$包一下即可</span><br><span class="line"></span><br><span class="line">---</span><br><span class="line"></span><br><span class="line">jq对象---&gt;dom对象</span><br><span class="line">语法：</span><br><span class="line">jq对象[0]或者jq对象.get(0)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="下拉列表注意点"><a href="#下拉列表注意点" class="headerlink" title="下拉列表注意点"></a>下拉列表注意点</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;1234567&quot;</span>&gt;</span>文本内容<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">$(&quot;xxx&quot;).text();</span><br><span class="line">&lt;!-- 输出的是整个下拉别表的文本内容 --&gt;</span><br><span class="line"></span><br><span class="line">$(&quot;xxx&quot;).val();</span><br><span class="line">&lt;!-- 输出的是 value值  1234567 --&gt;</span><br><span class="line"></span><br><span class="line">$(&quot;xxx :selected&quot;).text();</span><br><span class="line">&lt;!-- 这个才是输出下拉列表选中的内容，注意：冒号前面要空格 --&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 前端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>servlet</title>
      <link href="/posts/1b82.html"/>
      <url>/posts/1b82.html</url>
      
        <content type="html"><![CDATA[<h2 id="Servlet-介绍"><a href="#Servlet-介绍" class="headerlink" title="Servlet 介绍"></a>Servlet 介绍</h2><p>Servlet规范是SUN公司定义一套规则</p><ul><li><p>作用：<br>  动态资源文件开发规则<br>  Http服务器应该如何调用管理动态资源文件<br>  Servlet规范定义了规则关联的接口，实现类有Http服务器厂商提供<br>  Tomcat中对于Servlet规范中接口实现存放servlet-api.jar</p></li><li><p>web服务器<br>  用于提供相关的服务组件运行的环境。<br>  以及解决用户并发访问和处理业务逻辑的软件。<br>  <code>TomCat</code>：apache组织开源的一个服务器。<br>  使用版本：apache-tomcat-9.0.30<br>  <code>Jboos</code>：处理并发量很大，功能很健全的一个商用服务器。<br>  <code>webLojec</code>：与Jboos相同</p></li><li><p>组件<br>  符合规范，实现部分功能，并且需要部署到相应的服务器中才能运行的软件模块。<br>  servlet就是一个符合规范的组件，需要部署才能运行。</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Servlet请求-响应的过程</span><br><span class="line">浏览器 ---&gt;  服务器【tomcat】  ---&gt; 数据库</span><br><span class="line">                ↓</span><br><span class="line">                处理静态资源请求。</span><br><span class="line">                如果需要计算，调用servlet</span><br></pre></td></tr></table></figure><ul><li><p>Servlet接口实现类开发规则</p><ul><li><p>基于servlet_2.0规范 通过配置文件通知Tomcat哪一个类是Servlet接口实现类<br>  1）创建Servlet接口实现类 继承 HttpServlet<br>  2）重写父类(HttpServlet)中(service)方法<br>  3）web.xml</p></li><li><p>基于servlet_3.0规范 通过注解通知TomcatTomcat哪一个类是Servlet接口实现类（推荐）</p></li></ul></li></ul><h2 id="如何执行"><a href="#如何执行" class="headerlink" title="如何执行"></a>如何执行</h2><p>大致流程</p><ol><li>浏览器会依据ip:端口号来【建立连接】</li><li>浏览器会将请求数据打包</li><li>发送请求数据包</li><li>服务器接收请求</li><li>服务器解析请求数据包</li><li>创建request 和 response对象</li><li>创建servlet对象</li><li>调用service方法，依据请求方式的不同在分别调用doGet 和 doPost方法</li><li>处理业务逻辑</li><li>将处理完的数据放入response对象中</li><li>服务器引擎从response对象中获取数据。</li><li>服务器引擎将响应数据打包</li><li>发送响应给请求的浏览器</li><li>浏览器接收响应数据包并解析数据渲染画面给用户。</li><li>断开连接</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.annotation.WebServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.PrintWriter;</span><br><span class="line"></span><br><span class="line"><span class="comment">// @WebServlet()：浏览器访问该servlet中value的路径（当只有一个值时候，可忽略。如：@WebServlet(&quot;/test&quot;)）</span></span><br><span class="line"><span class="meta">@WebServlet(name = &quot;TestServlet&quot;,value = &quot;/test&quot;)</span></span><br><span class="line"><span class="comment">// 继承HttpServlet，使本类成为Servlet</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestServlet</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="comment">// service重写方法</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">service</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//请求和应答设置编码，以防乱码</span></span><br><span class="line">        req.setCharacterEncoding(<span class="string">&quot;utf-8&quot;</span>);</span><br><span class="line">        resp.setContentType(<span class="string">&quot;text/html;charset=utf-8&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// resp.getWriter可输出到页面</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">result</span> <span class="operator">=</span> <span class="string">&quot;Hello Servlet&quot;</span>;</span><br><span class="line">        <span class="type">PrintWriter</span> <span class="variable">out</span> <span class="operator">=</span>  resp.getWriter();</span><br><span class="line">        out.write(result);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 重定向</span></span><br><span class="line">        resp.sendRedirect(<span class="string">&quot;http://www.baidu.com&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 关闭流</span></span><br><span class="line">        out.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="web-xml"><a href="#web-xml" class="headerlink" title="web.xml"></a>web.xml</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 欢迎页 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">welcome-file-list</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">welcome-file</span>&gt;</span>regist.html<span class="tag">&lt;/<span class="name">welcome-file</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">welcome-file-list</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="获取请求参数"><a href="#获取请求参数" class="headerlink" title="获取请求参数"></a>获取请求参数</h2><p>前台提供name属性。name属性是在浏览器打包时，会将name作为key 用户输入的值作为value</p><p>后台需要使用key才能获取value</p><p>前台：form表单中的属性：<br>action：服务器提交地址，比如(“test”)<br>method：get【默认】或者 post</p><p>后台：调用<br>req.getParameter(String key)<br>req.getParameterValues(String key);</p><ul><li>看代码<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//调用请求对象读取请求行中参数</span></span><br><span class="line"><span class="type">String</span> <span class="variable">deptNo</span> <span class="operator">=</span>  request.getParameter(<span class="string">&quot;deptNo&quot;</span>);</span><br><span class="line"><span class="type">String</span> <span class="variable">dname</span>  <span class="operator">=</span>  request.getParameter(<span class="string">&quot;dname&quot;</span>);</span><br><span class="line"></span><br><span class="line">String array[] = request.getParameterValues(<span class="string">&quot;ck&quot;</span>);</span><br><span class="line"><span class="keyword">for</span>(String value:array)&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;ck = &quot;</span>+value);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">&quot;deptNo = &quot;</span>+deptNo);</span><br><span class="line">System.out.println(<span class="string">&quot;dname = &quot;</span>+dname);</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;/myWeb/four&quot;</span>&gt;</span></span><br><span class="line">    部门编号:<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;deptNo&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">    部门名称:<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;dname&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">    部门业务:<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">name</span>=<span class="string">&quot;ck&quot;</span> <span class="attr">value</span>=<span class="string">&quot;java&quot;</span>&gt;</span>java</span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">name</span>=<span class="string">&quot;ck&quot;</span> <span class="attr">value</span>=<span class="string">&quot;mysql&quot;</span>&gt;</span>mysql</span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">name</span>=<span class="string">&quot;ck&quot;</span> <span class="attr">value</span>=<span class="string">&quot;html&quot;</span>&gt;</span>html<span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;访问FourServlet&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><h2 id="请求方式"><a href="#请求方式" class="headerlink" title="请求方式"></a>请求方式</h2><ol><li><p>get请求</p><ul><li>哪些情况下使用get请求。<br>  在点击某个链接时，使用get请求<br>  表单的默认提交方式。</li><li>特点：<br>  <strong>不安全</strong>，会将请求参数值显示在浏览器地址连中<br>  <strong>请求数据有限</strong>，最大2K左右</li></ul></li><li><p>post请求</p><ul><li>哪些情况下使用post请求<br>  表单提交时一般使用post请求方式<br>  Ajax请求时一般使用post请求</li><li>特点；<br>  <strong>安全</strong>，将请求数据放在from data 中<br>  <strong>相对请求数据会大一些</strong></li></ul></li></ol><h2 id="jsp"><a href="#jsp" class="headerlink" title="jsp"></a>jsp</h2><p>java server page【java 服务端网页】<br>也是一个标准的web组件，用来解决使用servlet编写网页的繁琐。<br>其本质就是一个servlet。但是它是以.jsp结尾的一个开源编写HTML、CSS、JS、JAVA代码的文件。<br>JSP在执行的时候，会被JSP引擎加载，将其中的Java代码转换成.java文件 照搬到其中<br>HTML采用out.writer()的方式输出，变量采用out.print()输出。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">JSP文件运行原理：（面试常考问题）</span><br><span class="line"></span><br><span class="line">1.jsp文件是一种开发模板，不能被编译也不能运行</span><br><span class="line">    类似于预编译SQL命令</span><br><span class="line">    insert into dept values(?,?,?)</span><br><span class="line"></span><br><span class="line">2.运行原理</span><br><span class="line"></span><br><span class="line">    1）Tomcat接收到浏览器对于jsp文件请求时，需要将jsp文件【编辑】为【servlet接口实现类】</span><br><span class="line">    将jsp文件中内容【编辑】到【servlet接口实现类】中一个方法（_jspService）</span><br><span class="line">    对于jsp文件中非java命令内容，统统编辑为 out.write(&quot;jsp文件内容&quot;)</span><br><span class="line">    对于jsp文件中java命令，则直接复制到（_jspService）</span><br><span class="line"></span><br><span class="line">    2）Tomcat通过JVM将【servlet接口实现类】【编译】为可执行文件(.class)</span><br><span class="line"></span><br><span class="line">    3）Tomcat通过反射机制要求JVM创建当前类文件的实例对象</span><br><span class="line"></span><br><span class="line">    4）Tomcat通过实例对象调用_jspService方法，在这个方法运行期间，jsp文件内容</span><br><span class="line">    自动的通过输出流写入到响应体</span><br></pre></td></tr></table></figure><p><code>通俗的理解</code>：.jsp文件会被转换成.java文件 最终执行的是.class文件。</p><p>语法：</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;% </span><br><span class="line">    java 代码片段</span><br><span class="line">%&gt;</span><br><span class="line"></span><br><span class="line">&lt;%= Java表达式 %&gt;    </span><br><span class="line">&lt;!-- Java表达式不能以<span class="string">&quot;;&quot;</span>或者其它符号结尾 --&gt;</span><br><span class="line"></span><br><span class="line">&lt;%@ jsp指令 %&gt;</span><br><span class="line">&lt;!-- 常见指令导入某某包、设置编码 --&gt;</span><br><span class="line">&lt;%@ taglib prefix=<span class="string">&quot;fmt&quot;</span> uri=<span class="string">&quot;http://java.sun.com/jsp/jstl/fmt&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page contentType=<span class="string">&quot;text/html; charset=UTF-8&quot;</span> isELIgnored=<span class="string">&quot;false&quot;</span>%&gt;</span><br></pre></td></tr></table></figure><h2 id="处理请求资源路径-WebServlet"><a href="#处理请求资源路径-WebServlet" class="headerlink" title="处理请求资源路径 @WebServlet"></a>处理请求资源路径 @WebServlet</h2><p>匹配规则：</p><ul><li>精确匹配<br>  要求：@WebServlet(value = “/delete”)中的value值必须一致。【value可以省略】</li><li>通配符匹配<br>  要求：使用 * 代替 ，代表任意字符串<br>  比如：/abc/*</li><li>后缀匹配<br>  要求：不能以 “/“ 开头，要求 <em>.任意字符<br>  比如：</em>.do 或 *.action  *.com</li></ul><p>处理多种请求</p><!-- 获取URI --><p><code>String path = request.getRequestURI();</code></p><!-- 字符串拼接 --><p><code>String path = uri.substring(uri.lastIndexOf(&quot;/&quot;) + 1,uri.lastIndexOf(&quot;.&quot;));</code></p><p>例子：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 只要输入xxx.com的都进入到这个文件</span></span><br><span class="line"><span class="meta">@WebServlet(&quot;*.com&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ActionServlet</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">service</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//获取用户请求的URI</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">uri</span> <span class="operator">=</span> req.getRequestURI();</span><br><span class="line">    <span class="comment">//解析用户的操作</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">path</span> <span class="operator">=</span> uri.substring(uri.lastIndexOf(<span class="string">&quot;/&quot;</span>) + <span class="number">1</span>, uri.lastIndexOf(<span class="string">&quot;.&quot;</span>));</span><br><span class="line"></span><br><span class="line">    <span class="comment">//根据不同的uri，调用不同的业务方法</span></span><br><span class="line">    <span class="keyword">if</span> (path.equals(<span class="string">&quot;add&quot;</span>))&#123;</span><br><span class="line">        <span class="comment">// 业务内容</span></span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(path.equals(<span class="string">&quot;del&quot;</span>))&#123;</span><br><span class="line">        <span class="comment">// 业务内容</span></span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(path.equals(<span class="string">&quot;updata&quot;</span>))&#123;</span><br><span class="line">        <span class="comment">// 业务内容</span></span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(path.equals(<span class="string">&quot;list&quot;</span>))&#123;</span><br><span class="line">        <span class="comment">// 业务内容</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="重定向"><a href="#重定向" class="headerlink" title="重定向"></a>重定向</h2><p>1.什么是重定向？<br>服务器向浏览器响应的时候，会在响应数据包中，添加一个状态码。302状态码，当浏览器解析响应数据包时，如果解析到302状态码，浏览器会立即向302状态所指向的url地址重新发送一个新的请求。</p><p>2.如何进行重定向<br><code>response.sendRedirect(String url);</code></p><p>3.重定向的特点<br>重定向的地址是任意的</p><h2 id="转发"><a href="#转发" class="headerlink" title="转发"></a>转发</h2><p>什么是转发？<br>转发就是一个web组件将一件没有完成的任务<br>转交给另一个web组件继续完成的过程。<br>通俗的理解：一个任务多个组件协同完成。</p><p>转发是各个组件可以共享数据以及 request 和response对象</p><p>转发的特点<br>    1.转发后浏览器地址栏地址不变。因为转发是服务器内部的,浏览器无感知<br>    2.转发必须共享request和response对象<br>    3.转发必须先绑定后获取</p><p>如何转发</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1. 先将处理好的数据绑定到request对象中</span></span><br><span class="line">request.setAttribute(<span class="string">&quot;strs&quot;</span>,strs);<span class="comment">//将处理好的数据先进行绑定。【数据&quot;strs&quot;绑定在request对象里】，</span></span><br><span class="line"><span class="comment">// 2.转发到forword.jsp文件中。</span></span><br><span class="line">request.getRequestDispatcher(<span class="string">&quot;forword.jsp&quot;</span>).forward(request,response);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">解释：</span><br><span class="line">setAttribute()：绑定数据</span><br><span class="line">getRequestDispatcher(String uri)：获取转发器</span><br><span class="line">forward(request,response);转发到转发器所指向的uri地址</span><br></pre></td></tr></table></figure><h2 id="状态管理-Cookie-amp-Session"><a href="#状态管理-Cookie-amp-Session" class="headerlink" title="状态管理 Cookie &amp; Session"></a>状态管理 Cookie &amp; Session</h2><ul><li><p>什么是状态管理？<br>  将浏览器与web服务器之间多次交互当做是一个整体来处理，<br>  并且将多次交互产生的数据【状态】保存下来。<br>  比如：验证码</p></li><li><p>Cookie类<br>  将状态保存在浏览器端</p><p>  浏览器在访问服务器时，服务器会将一些数据以 set-cookie 消息头的形式发送给浏览器。<br>  浏览器将这些数据保存起来。当浏览器在次访问服务器时，会将这些数据以cookie消息头的<br>  形式，发送给服务器，通过这种方式来保存用户状态。</p><p>  <strong>可以理解为，服务器临时保存在浏览器端的少量数据。</strong></p><ul><li><p>设置cookie的路径<br>  浏览器在向服务器发送cookie的时候，会先比较cookie的路径与请求的路径是否匹配，如果匹配会将匹配的cookie发送到服务器，否则不发送<br>  比如：<br>  创建cookie保存的路径是，/day04_war_exploded/cookie<br>  1.访问cookie的路径如果是：/day04_war_exploded/cookie/findCookie.jsp <code>能访问到</code><br>  2.访问cookie的路径如果是：/day04_war_exploded/findCookie.jsp <code>访问不到</code><br>  3.访问cookie的路径如果是：/day04_war_exploded/cookie/cookie2/findCookie.jsp  <code>能访问到</code></p><p>  结论：<br>  <strong>只要是创建路径下的子路径都可以访问。</strong></p><p>  方法：<br>  <code>request.setPath(String path)：设置cookie的路径</code><br>  <code>request.getContextPath()：获取 Application Context【】</code></p></li></ul><p>  例子：</p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">创建cookie并发送到浏览器端</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">@WebServlet(&quot;/cookie&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CreateCookie</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">service</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//创建cookie</span></span><br><span class="line">    <span class="type">Cookie</span> <span class="variable">cookie</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Cookie</span>(<span class="string">&quot;isdn&quot;</span>, UUID.randomUUID().toString());</span><br><span class="line">    <span class="comment">//设置cookie的生命周期</span></span><br><span class="line">    cookie.setMaxAge(<span class="number">60</span>);<span class="comment">//秒</span></span><br><span class="line">    <span class="comment">//发送cookie</span></span><br><span class="line">    response.addCookie(cookie);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>HttpSession接口<br>  将状态保存在服务器端</p><p>  浏览器访问服务器时，服务器会创建一个session对象，session对象中保存一个唯一的ID 称为JSESSIONID，服务器会将JSESSIONID以cookie的形式，发送给浏览器端，浏览器进行保存。<br>  当浏览器第二次访问服务器时，浏览器将JSESSIONID再次发送给服务器，服务器依据JSESSIONID查找对应的session对象，如果找到，则使用，否则创建一个新的session对象。</p><p>  总结：<br>  <strong>session对象的创建是服务器创建的</strong></p><p>  方法：<br>  <code>HttpSession session = request.getSession()：获取服务器创建的session对象。</code><br>  <code>session.setAttribute(Object key,Object value)：绑定数据到session中</code><br>  <code>Object obj = session.getAttribute(Object key)：根据key获取value</code></p><p>  例子：</p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">session对象获取绑定数据</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">@WebServlet(&quot;/session&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SessionObject</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">service</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        <span class="comment">//获取服务器创建的session对象</span></span><br><span class="line">        <span class="type">HttpSession</span> <span class="variable">session</span> <span class="operator">=</span> request.getSession();</span><br><span class="line">        System.out.println(session.getId());</span><br><span class="line"></span><br><span class="line">        <span class="comment">//将数据绑定到session对象中</span></span><br><span class="line">        session.setAttribute(<span class="string">&quot;checkcode&quot;</span>,<span class="string">&quot;123456&quot;</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">验证验证码是否正确</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">@WebServlet(&quot;/sessioncheckcode&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CheckCodeServlet</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">service</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        <span class="comment">//获取服务器创建的session对象</span></span><br><span class="line">        <span class="type">HttpSession</span> <span class="variable">session</span> <span class="operator">=</span> request.getSession();</span><br><span class="line">        System.out.println(session.getId());</span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">code</span> <span class="operator">=</span> (String) session.getAttribute(<span class="string">&quot;checkcode&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//从前台获取name来判断是否相等</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">checkcode</span> <span class="operator">=</span> request.getParameter(<span class="string">&quot;checkcode&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> (code.equals(checkcode)) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;验证码正确&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;验证码错误&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>  <strong>注意：</strong><br>  request也有setAttribute<br>  session也有setAttribute<br>  存在的区别是生命周期的长短<br>  <strong>reuqest：请求到响应-死亡</strong><br>  <strong>session：浏览器关闭、session超时、服务器关闭</strong></p></li></ul><h2 id="ServletContext"><a href="#ServletContext" class="headerlink" title="ServletContext"></a>ServletContext</h2><ul><li>概念<br>  web 服务器在启动时，会为每一个工程都创建一个唯一的 ServletContext 对象。<br>  该实例会一直存在，除非服务器宕机，或者关机。<strong>（生命周期长）</strong></li></ul><p>获取ServletContext实例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">//方式一</span></span><br><span class="line"><span class="type">ServletContext</span> <span class="variable">servletContext</span> <span class="operator">=</span> <span class="built_in">this</span>.getServletContext();</span><br><span class="line"></span><br><span class="line"><span class="comment">//方式二</span></span><br><span class="line"><span class="type">ServletContext</span> <span class="variable">servletContext1</span> <span class="operator">=</span> request.getServletContext();</span><br><span class="line"></span><br><span class="line"><span class="comment">//方式三</span></span><br><span class="line"><span class="type">ServletContext</span> <span class="variable">servletContext2</span> <span class="operator">=</span> request.getSession().getServletContext();</span><br></pre></td></tr></table></figure><p>如何使用ServletContext实例？<br>1.绑定数据<br>2.获取绑定数据</p><p>1.配置全局初始化参数【了解】<br>2.获取全局初始化参数</p><ul><li><p>绑定且获取数据</p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> javax.servlet.ServletContext;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.annotation.WebServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="meta">@WebServlet(&quot;/context&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Test</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;无参构造器运行。。。&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">service</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        <span class="comment">// 获取ServletContext实例</span></span><br><span class="line">        <span class="type">ServletContext</span> <span class="variable">servletContext</span> <span class="operator">=</span> <span class="built_in">this</span>.getServletContext();</span><br><span class="line">        <span class="comment">//绑定数据</span></span><br><span class="line">        servletContext.setAttribute(<span class="string">&quot;name&quot;</span>, <span class="string">&quot;葫芦啊葫芦&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>  <figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">&lt;!-- 获取数据 --&gt;</span><br><span class="line">    &lt;%</span><br><span class="line">    <span class="type">Object</span> <span class="variable">name</span> <span class="operator">=</span> application.getAttribute(<span class="string">&quot;name&quot;</span>);</span><br><span class="line">    %&gt;</span><br><span class="line">    &lt;!-- 输出“葫芦啊葫芦” --&gt;</span><br><span class="line">    &lt;h1&gt;&lt;%=name%&gt;&lt;/h1&gt;</span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></figure></li><li><p>配置全局初始化参数 且 获取全局初始化参数</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">context-param</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>url<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>jdbc:mysql://127.0.0.1:3306/gz2107?useUnicode=true<span class="symbol">&amp;amp;</span>characterEncoding=utf8<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">context-param</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@WebServlet(&quot;/context&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Test</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;无参构造器运行。。。&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">service</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        <span class="type">ServletContext</span> <span class="variable">servletContext</span> <span class="operator">=</span> <span class="built_in">this</span>.getServletContext();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取初始化参数</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">url</span> <span class="operator">=</span> servletContext.getInitParameter(<span class="string">&quot;url&quot;</span>);</span><br><span class="line">        System.out.println(url);</span><br><span class="line">        <span class="comment">// 最后输出  jdbc:mysql://127.0.0.1:3306/gz2107?useUnicode=true&amp;characterEncoding=utf8</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="生命周期"><a href="#生命周期" class="headerlink" title="生命周期"></a>生命周期</h2><ul><li><p>概念<br>  Servlet 容器如何创建 Servlet 实例，分配其资源，调用其方法，并且销毁其 实例 的整个过程。</p></li><li><p>阶段一：<br>  实例化【创建servlet对象，调用其构造器】<br>  1.当请求到达容器时，容器会查找该servlet实例是否存在，如果不存在，则创建新的实例。<br>  2.容器在启动的时候，会查找每个Servlet中是否配置了loadOnStartUp配置，如果有，会立即创建该servlet的实例。<br>  <code>loadOnStartup</code>的值越小优先级越高。最高10</p></li><li><p>阶段二：<br>  初始化<br>  为servlet分配资源，调用init(ServletConfig config)方法<br>  config 对象可以访问到servlet的初始化参数。<br>  ServletConfig：servlet对象一旦创建会自动调用<code>init</code>方法获取初始化参数。</p></li></ul><ul><li>阶段三：<br>  就绪/调用<br>  容器调用servlet实例的service方法根据请求类型的不同<br>  来分别调用不同请求类型所对应的方法。</li></ul><ul><li>阶段四：<br>  销毁<br>  容器依据自身算法，将不再使用的servlet实例删除掉<br>  在删除之前会调用servlet实例的<code>destroy</code>方法来释放资源。</li></ul><p><strong>注意：init方法和destroy方法只会执行一次，而service方法每一个请求都会执行。</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@WebServlet(value = &quot;/context&quot;,loadOnStartup = 7,initParams = &#123;@WebInitParam(name = &quot;admin&quot;,value = &quot;这是amdin的值&quot;)&#125;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Test</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;无参构造器运行。。。&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">service</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">init</span><span class="params">(ServletConfig config)</span> <span class="keyword">throws</span> ServletException &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">admin</span> <span class="operator">=</span> config.getInitParameter(<span class="string">&quot;admin&quot;</span>);</span><br><span class="line">        System.out.println(admin);</span><br><span class="line">        <span class="comment">// 输出以下两句：</span></span><br><span class="line">        <span class="comment">// 无参构造器运行。。。</span></span><br><span class="line">        <span class="comment">// 这是amdin的值</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="监听器-WebListener"><a href="#监听器-WebListener" class="headerlink" title="监听器 @WebListener"></a>监听器 @WebListener</h2><ol><li>什么是监听器？<br> 监视容器中的各种对象的事件。它是一个特殊的接口<br> 一般与servlet的生命周期相关。</li></ol><ol start="2"><li>如何写一个监听器<br> 写一个java类实现特定监听器的接口【依据要监听的事件类型】<br> 在接口中实现回到方法。<br> 配置监听器</li></ol><p>例子：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 监听一</span></span><br><span class="line"><span class="keyword">import</span> javax.servlet.annotation.WebListener;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpSessionEvent;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpSessionListener;</span><br><span class="line"></span><br><span class="line"><span class="meta">@WebListener</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SessionObejctListenter</span> <span class="keyword">implements</span> <span class="title class_">HttpSessionListener</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">sessionCreated</span><span class="params">(HttpSessionEvent se)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;session被创建了……&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">sessionDestroyed</span><span class="params">(HttpSessionEvent se)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;session被销毁了……&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 监听二</span></span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletContextAttributeEvent;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletContextAttributeListener;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletContextEvent;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletContextListener;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.annotation.WebListener;</span><br><span class="line"></span><br><span class="line"><span class="meta">@WebListener</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ServletContextCreateListenter</span> <span class="keyword">implements</span> <span class="title class_">ServletContextListener</span>,ServletContextAttributeListener &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">contextInitialized</span><span class="params">(ServletContextEvent sce)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;ServletContext被初始化……&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">attributeAdded</span><span class="params">(ServletContextAttributeEvent scae)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;ServletContext被初始化的attribute方法被调用...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 监听三</span></span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletRequestEvent;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletRequestListener;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.annotation.WebListener;</span><br><span class="line"></span><br><span class="line"><span class="meta">@WebListener</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RequestObjectListenter</span> <span class="keyword">implements</span> <span class="title class_">ServletRequestListener</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">requestInitialized</span><span class="params">(ServletRequestEvent sre)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;request对象被创建……&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">requestDestroyed</span><span class="params">(ServletRequestEvent sre)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;request对象被销毁……&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="过滤器-WebFilter"><a href="#过滤器-WebFilter" class="headerlink" title="过滤器 @WebFilter"></a>过滤器 @WebFilter</h2><ul><li>概念<br>  请求到达servlet之前，会对请求进行拦截，过滤、筛查到达Servlet实例的请求是否符合标准。（请求时先到达过滤器。）</li></ul><p>写一个过滤器<br>实现Filter接口，并实现其doFilter方法。配置Filter访问路径。</p><p><code>doFilter方法：</code><br>参数介绍：<br>ServletRequest 是 HttpServletRequest的父类<br>ServletResponse 是 HttpServletResponse的父类</p><p><code>FilterChain：过滤器链</code><br>过滤器链有一个方法：doFilter(request,response);<br>//调用后续过滤器，如果没有过滤器则调用servlet</p><p>例子：过滤敏感字</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ page contentType=<span class="string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="string">&quot;java&quot;</span> %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;Title&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;form action=<span class="string">&quot;evaluate&quot;</span> method=<span class="string">&quot;post&quot;</span>&gt;</span><br><span class="line">    评价：&lt;input type=<span class="string">&quot;text&quot;</span> name=<span class="string">&quot;evaluate&quot;</span> /&gt;&lt;br/&gt;</span><br><span class="line">    &lt;input type=<span class="string">&quot;submit&quot;</span> name=<span class="string">&quot;提交&quot;</span> /&gt;</span><br><span class="line">&lt;/form&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> javax.servlet.*;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.annotation.WebFilter;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.PrintWriter;</span><br><span class="line"></span><br><span class="line"><span class="meta">@WebFilter(&quot;/evaluate&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ContentFielter</span> <span class="keyword">implements</span> <span class="title class_">Filter</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">doFilter</span><span class="params">(ServletRequest servletRequest, ServletResponse servletResponse, FilterChain filterChain)</span> <span class="keyword">throws</span> IOException, ServletException &#123;</span><br><span class="line">        <span class="type">HttpServletRequest</span> <span class="variable">request</span> <span class="operator">=</span> (HttpServletRequest) servletRequest;</span><br><span class="line">        <span class="type">HttpServletResponse</span> <span class="variable">response</span> <span class="operator">=</span> (HttpServletResponse) servletResponse;</span><br><span class="line">        request.setCharacterEncoding(<span class="string">&quot;utf-8&quot;</span>);</span><br><span class="line">        response.setContentType(<span class="string">&quot;text/html;charset=utf-8&quot;</span>);</span><br><span class="line">        <span class="type">PrintWriter</span> <span class="variable">out</span> <span class="operator">=</span> response.getWriter();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取用户的评价内容</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">evaluate</span> <span class="operator">=</span> request.getParameter(<span class="string">&quot;evaluate&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span>(evaluate.contains(<span class="string">&quot;伞兵&quot;</span>))&#123;</span><br><span class="line">            out.println(<span class="string">&quot;&lt;h1&gt;不允许出现“伞兵”等文字&lt;/h1&gt;&quot;</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="comment">//调用后续过滤器，如果没有过滤器则调用servlet</span></span><br><span class="line">            out.println(<span class="string">&quot;没用敏感字，可以通过&quot;</span>);</span><br><span class="line">            filterChain.doFilter(request,response);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="跨域-与-同源-请求"><a href="#跨域-与-同源-请求" class="headerlink" title="跨域 与 同源 请求"></a>跨域 与 同源 请求</h3><p>浏览器的同源策略：<br>是浏览器最核心也是最基本的安全功能。出于安全考虑 如果请求的域名、协议、端口有一个不同就不是同源，三者均相同，这两个网站才是同源。</p><p>跨域请求：<br>这里的域指的是这样的一个概念：我们认为如果 “协议 + 域名 + 端口号” 均相同，那么就是同域。<br>当前发起请求的域与该请求指向的资源所在的域不一样。</p><p>解决跨域请求：过滤器添加这三条</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">res.setHeader(<span class="string">&quot;Access-Control-Allow-Origin&quot;</span>, <span class="string">&quot;*&quot;</span>);</span><br><span class="line">res.setHeader(<span class="string">&quot;Access-Control-Allow-Methods&quot;</span>, <span class="string">&quot;POST, GET, OPTIONS&quot;</span>);</span><br><span class="line">res.setHeader(<span class="string">&quot;Access-Control-Allow-Headers&quot;</span>, <span class="string">&quot;Content-Type, Authorization, Accept,X-Requested-With&quot;</span>);</span><br></pre></td></tr></table></figure><h2 id="JSTL"><a href="#JSTL" class="headerlink" title="JSTL"></a>JSTL</h2><p>英文：java stander taglib<br>是java 标准标签库，使用需要导jar包<br>是用来将jsp页面中的java代码采用类似于html标签的形式来输出的一种技术。</p><p>看代码</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span>如何使用JSTL？</span><br><span class="line"></span><br><span class="line">    &lt;%<span class="meta">@taglib</span> prefix=<span class="string">&quot;c&quot;</span> uri=<span class="string">&quot;http://java.sun.com/jsp/jstl/core&quot;</span>%&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!-- uri的值是在.jar包中的c.tld文件中 --&gt;</span><br><span class="line"></span><br><span class="line">    &lt;%@ page contentType=<span class="string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="string">&quot;java&quot;</span> isELIgnored=<span class="string">&quot;false&quot;</span> %&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!-- isELIgnored=<span class="string">&quot;false&quot;</span> 表示不忽略表达式 --&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="number">2.</span>分支判断标签</span><br><span class="line"></span><br><span class="line">    &lt;c:<span class="keyword">if</span> test=<span class="string">&quot;&quot;</span>&gt;</span><br><span class="line">    &lt;/c:<span class="keyword">if</span>&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!-- test属性：用于接收当前值是否是<span class="literal">true</span>，如果是<span class="literal">true</span>执行标签体中的内容 --&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="number">3.</span>分支判断标签</span><br><span class="line"></span><br><span class="line">    &lt;c:choose&gt;</span><br><span class="line">        &lt;c:when test=<span class="string">&quot;$&#123;empty user&#125;&quot;</span>&gt;</span><br><span class="line">            &lt;h1&gt;user是空对象&lt;/h1&gt;</span><br><span class="line">        &lt;/c:when&gt;</span><br><span class="line">        &lt;c:otherwise&gt;</span><br><span class="line">            &lt;h1&gt;$&#123;user.hobbys[<span class="number">0</span>]&#125;&lt;/h1&gt;</span><br><span class="line">        &lt;/c:otherwise&gt;</span><br><span class="line">    &lt;/c:choose&gt;</span><br><span class="line"></span><br><span class="line"><span class="number">4.</span>循环标签</span><br><span class="line"></span><br><span class="line"> &lt;c:forEach items=<span class="string">&quot;$&#123;user.hobbys&#125;&quot;</span> <span class="keyword">var</span>=<span class="string">&quot;hobby&quot;</span> varStatus=<span class="string">&quot;status&quot;</span>&gt;</span><br><span class="line">        &lt;h1&gt;$&#123;hobby&#125;&lt;/h1&gt;</span><br><span class="line">        &lt;h1&gt;$&#123;status.index&#125;&lt;/h1&gt;</span><br><span class="line">        &lt;h1&gt;$&#123;status.count&#125;&lt;/h1&gt;</span><br><span class="line">  &lt;/c:forEach&gt;</span><br></pre></td></tr></table></figure><h2 id="EL表达式"><a href="#EL表达式" class="headerlink" title="EL表达式"></a>EL表达式</h2><p>Expression language 表达式语言<br>是一种可以在JSP页面获取数据的一种方式。<br>完整语法：<code>$&#123;作用域对象别名.共享数据名.属性名&#125;</code><br>简写语法：<code>$&#123;共享数据名&#125;</code></p><ul><li><p>执行原理：<br>  依次查找<code>pageContext、request、session、application</code>所绑定的<strong>key</strong>，<br>  如果查找到，则调用<strong>key</strong>所绑定的<strong>value</strong>值的getXXX方法来获取数据。</p></li><li><p>作用域<br>  <code>requestScope</code>:只在request作用域中查找指定的绑定名<br>  <code>sessionScope</code>:只在session作用域中查找指定的绑定名<br>  <code>applicationScope</code>:只在servletContext作用域中查找指定的绑定名</p></li><li><p>注意：<br>  el表达式只能获取数据，不能设置数据。<br>  el表达式可以进行计算，可以调用方法。<br>  el表达式不能进行字符串的拼接</p></li><li><p>支持运算</p><table><thead><tr><th>大于</th><th>大于等于</th><th>等于</th><th>小于</th><th>小于等于</th><th>不等于</th></tr></thead><tbody><tr><td>gt</td><td>ge</td><td>eq</td><td>lt</td><td>le</td><td>!=</td></tr><tr><td>&gt;</td><td>&gt;=</td><td>=</td><td>&lt;</td><td>&lt;=</td><td>!=</td></tr></tbody></table></li><li><p>时间格式化</p>  <figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;formatDate value=<span class="string">&quot;$&#123;你的时间对象&#125;&quot;</span> pattern=<span class="string">&quot;yyyy-MM-dd&quot;</span> /&gt;</span><br></pre></td></tr></table></figure></li></ul><h2 id="json"><a href="#json" class="headerlink" title="json"></a>json</h2><p>把<strong>java对象</strong>转换成<strong>json对象</strong>传给前台<br>需要导入jar包，（这里我选择jackson）</p><p>例子：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">ObjectMapper</span> <span class="variable">om</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectMapper</span>();           <span class="comment">//新建对象</span></span><br><span class="line"><span class="type">String</span> <span class="variable">suser</span> <span class="operator">=</span> om.writeValueAsString(user);     <span class="comment">//把java对象user转为suser的json对象（json是字符串）</span></span><br><span class="line">resp.getWriter().println(suser);                <span class="comment">//发送给前台</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> 前端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>正则表达式</title>
      <link href="/posts/b5e3.html"/>
      <url>/posts/b5e3.html</url>
      
        <content type="html"><![CDATA[<h1 id="重复"><a href="#重复" class="headerlink" title="重复"></a>重复</h1><table><thead><tr><th align="center">代码</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">*</td><td align="center">重复<strong>零次</strong>或更多次</td></tr><tr><td align="center">+</td><td align="center">重复<strong>一次</strong>或更多次</td></tr><tr><td align="center">?</td><td align="center">重复<strong>零次或一次</strong></td></tr><tr><td align="center">{n}</td><td align="center">重复n次</td></tr><tr><td align="center">{n,}</td><td align="center">重复n次或更多次</td></tr><tr><td align="center">{n,m}</td><td align="center">重复n到m次</td></tr></tbody></table><h1 id="元字符"><a href="#元字符" class="headerlink" title="元字符"></a>元字符</h1><table><thead><tr><th align="center">代码</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">.</td><td align="center">匹配除换行符以外的<strong>任意字符</strong></td></tr><tr><td align="center">\w</td><td align="center">匹配字母、数字、下划线、汉字</td></tr><tr><td align="center">\s</td><td align="center">匹配任意的<strong>空白符</strong></td></tr><tr><td align="center">\d</td><td align="center">匹配<strong>数字</strong></td></tr><tr><td align="center">\b</td><td align="center">匹配单词的开始或结束</td></tr><tr><td align="center">^</td><td align="center">匹配字符串的<strong>开始</strong></td></tr><tr><td align="center">$</td><td align="center">匹配字符串的<strong>结束</strong></td></tr></tbody></table><h1 id="反义元字符"><a href="#反义元字符" class="headerlink" title="反义元字符"></a>反义元字符</h1><table><thead><tr><th align="center">代码</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">\W</td><td align="center">匹配任意不是字母、数字、下划线、汉字的字符</td></tr><tr><td align="center">\S</td><td align="center">匹配任意不是空白符的字符</td></tr><tr><td align="center">\D</td><td align="center">匹配任意非数字的字符</td></tr><tr><td align="center">\B</td><td align="center">匹配不是单词开头或结束的位置</td></tr><tr><td align="center">[^x]</td><td align="center">匹配除了x以外的任意字符</td></tr></tbody></table><p>例子：<code>[^aeiou]</code> 匹配除了aeiou这几个字母以外的任意字符</p><p><code>注意！！！</code><br>分枝条件：<br>指的是有几种规则，如果满足其中任意一种规则都应该当成匹配<br>使用分枝条件时，<strong>要注意各个条件的顺序。因为将会从左到右地测试每个条件</strong>，如果满足了某个分枝的话，就不会去再管其它的条件了。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript</title>
      <link href="/posts/4656.html"/>
      <url>/posts/4656.html</url>
      
        <content type="html"><![CDATA[<h1 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h1><ol><li><p>什么是JavaScript？<br> 一般称为JS。是网景公司开发的一款在浏览器端解释执行的脚本语言。需要嵌入到HTML文件当中才能运行。<br> 其主要作用：</p><ul><li>数据校验【对表单中用户填写的数据，做合法性验证】</li><li>操作网页，实现一些动态效果。【产生事件的交互】</li><li>访问浏览器，获取一些浏览器的数据。【版本、类型…】</li></ul></li><li><p>特点</p><ul><li>JS是弱类型语言—类C语言。【数据的类型不是在编译器确定的，而是在运行期确定。】</li><li>JS可以保存在.js文件中，也可以直接写在.html文件中。（与CSS相同）</li><li>JS是基于对象的，不是纯粹的面向对象。</li></ul></li><li><p>组成</p><ul><li>ECMA规范<br>  一种脚本语言的开发规范，最初的时候命名为Mocha。后来根据版本迭代改名为ECMA。</li><li>DOM<br>  文档对象模型【将元素对象化】<br>  比如：<code>&lt;input type=&quot;text&quot; name=&quot;&quot; value=&quot;&quot; class=&quot;&quot; id=&quot;&quot;/&gt;</code><br>  将input对象化，然后.属性名的方式操作其属性值</li><li>BOM<br>  浏览器对象模型【浏览器中内置的对象】<br>  比如：Java API</li></ul></li></ol><h2 id="变量的命名规范。"><a href="#变量的命名规范。" class="headerlink" title="变量的命名规范。"></a>变量的命名规范。</h2><p>与Java规范相同。<br><code>变量名不能以数字开头，可以以_$以及字母开头。</code><br><code>语句以&quot;;&quot;号结尾。</code></p><h2 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h2><ol><li>基本类型<br> 数字类型【number】<br> 布尔类型【boolean】<br> 空类型【null】<br> 字符串类型【string】<br> 未定义【undifined】</li><li>引用类型<br> Array【数组类型】<br> Function【函数对象类型】<br> Date【日期类型】<br> Math【算术类型】<br> document【文档对象】<br> ….</li><li>查看数据类型<br>Typeof();</li></ol><ul><li>注意：<br>  JS的数据类型是在运行时确定的，并且可以随时改变。</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// typeof()【判断是什么类型】</span></span><br><span class="line"><span class="comment">// Boolean()【强制转换为布尔】</span></span><br><span class="line"><span class="comment">// isNaN()【判断是否是数字，如果不是数字返回true，否则返回false】</span></span><br><span class="line"><span class="comment">// parseInt()【强制转换成number类型】</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 关键字：NaN</span></span><br><span class="line"><span class="comment">//     全名：not a number【不是一个数字】</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> i = <span class="number">100</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">typeof</span>(i));<span class="comment">//number</span></span><br><span class="line">i = <span class="string">&quot;abc&quot;</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">typeof</span>(i));<span class="comment">//string</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// boolean数据类型</span></span><br><span class="line"><span class="keyword">var</span> a;</span><br><span class="line"><span class="comment">//console.log(Boolean(a));//undefiend是false</span></span><br><span class="line"><span class="keyword">var</span> b = <span class="literal">null</span>;</span><br><span class="line"><span class="comment">//console.log(Boolean(b));//null是也false</span></span><br><span class="line"><span class="keyword">var</span> c = <span class="number">0</span>;</span><br><span class="line"><span class="comment">//console.log(Boolean(c));//0是false</span></span><br><span class="line"><span class="keyword">var</span> d = <span class="number">2</span>;</span><br><span class="line"><span class="comment">//console.log(Boolean(d));//非0是true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Boolean</span>(-<span class="number">1</span>));<span class="comment">//负数也是true</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> e = <span class="number">1</span> + <span class="string">&quot;a&quot;</span>;<span class="comment">//NaN;</span></span><br><span class="line"><span class="comment">//console.log(Boolean(e));//非空的字符串是true</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> f = <span class="string">&quot;&quot;</span>;</span><br><span class="line"><span class="comment">//console.log(Boolean(f));//空字符串也是false</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//boolean类型可以进行数学运算</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="literal">true</span> + <span class="literal">false</span>);<span class="comment">//1</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 三等和双等的区别</span></span><br><span class="line"><span class="keyword">var</span> a = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">var</span> b = <span class="string">&quot;10&quot;</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a == b);<span class="comment">//true只比较值</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a === b);<span class="comment">//fasle 先比较类型，在比较值，如果都相等返回true，否则返回false。</span></span><br></pre></td></tr></table></figure><h2 id="引入JS的方式"><a href="#引入JS的方式" class="headerlink" title="引入JS的方式"></a>引入JS的方式</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">在页面中引入<span class="variable constant_">CSS</span>样式有<span class="number">3</span>中方式：</span><br><span class="line"><span class="comment">/* 1.内部样式（head标签中） */</span></span><br><span class="line">    &lt;script&gt;</span><br><span class="line">        <span class="variable language_">window</span>.<span class="property">onload</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">            </span><br><span class="line">        &#125;</span><br><span class="line">    &lt;/script&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 2.内联样式（html文件的标签中） */</span></span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">onclick</span>=<span class="string">&quot;xxx();&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 3.外部引入样式（把css文件引入到html中）*/</span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;../js/jquery-3.4.1.min.js&quot;</span> <span class="attr">type</span>=<span class="string">&quot;application/javascript&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line">src属性：对应是js所在文件地址。</span><br></pre></td></tr></table></figure><h2 id="信息输出的方式"><a href="#信息输出的方式" class="headerlink" title="信息输出的方式"></a>信息输出的方式</h2><ol><li>内容会在页面中显示<br> <code>document.write(&quot;输出内容...&quot;); </code></li><li>警告框<br> <code>alert(&quot;输出内容&quot;);</code></li><li>日志输出，输出在浏览器的控制台<br> <code>console.log(&quot;输出内容&quot;); </code></li></ol><h1 id="变量的使用"><a href="#变量的使用" class="headerlink" title="变量的使用"></a>变量的使用</h1><ol><li>变量必须声明才能使用。</li><li>变量的类型在运行期确定。</li></ol><p>关键字：<code>var、let、const</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">语法：</span><br><span class="line">    <span class="variable constant_">JS</span>使用  <span class="keyword">var</span>  或  <span class="keyword">let</span>  或  <span class="keyword">const</span>  关键字来定义变量。</span><br><span class="line">    <span class="keyword">var</span> 变量名 = 值;</span><br></pre></td></tr></table></figure><ul><li>注意：<ul><li><code>var</code><br>  有变量提升作用。<br>  JS在运行期，会将所有以var关键字声明的变量全部放在函数的最顶端，但是没有赋值。  关键字声明的变量，无论声明在何处，都会被视作声明在函数的最<strong>顶端</strong>。</li><li><code>let</code><br>  用于声明局部变量的关键字。<br>  没有变量提升作用。<br>  声明的变量只在声明的地方到括号结束的地方为止。</li><li><code>const</code><br>  声明的是只读常量，一但声明，便不可改变。<br>不使用var关键字声明的变量都是全局变量。</li></ul></li><li><em>建议：局部变量尽可能不要与全局变量重名。</em>*</li></ul><h1 id="模板字符串"><a href="#模板字符串" class="headerlink" title="模板字符串"></a>模板字符串</h1><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;&quot;</span> + <span class="string">&quot;&quot;</span>; <span class="comment">//字符串拼接;</span></span><br><span class="line"><span class="number">1.</span>字符串格式化</span><br><span class="line">语法：</span><br><span class="line">$&#123;变量&#125;：获取变量的值。</span><br><span class="line"></span><br><span class="line">例子：</span><br><span class="line">    <span class="keyword">var</span> name = <span class="string">&quot;张三&quot;</span>;</span><br><span class="line">    <span class="keyword">var</span> age  = <span class="number">10</span>;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`hello <span class="subst">$&#123;name&#125;</span> 他的年龄是:<span class="subst">$&#123;age&#125;</span>`</span>);</span><br><span class="line">   </span><br><span class="line"><span class="number">2.</span>字符串的拼接</span><br><span class="line">例子：</span><br><span class="line">    <span class="keyword">var</span> value = <span class="string">&quot;zhangsan&quot;</span></span><br><span class="line">    <span class="keyword">var</span> str = <span class="string">`&lt;input type=&quot;text&quot; name=&quot;username&quot; value=&quot;<span class="subst">$&#123;value&#125;</span>&quot;&gt;`</span>;</span><br><span class="line">    <span class="variable language_">document</span>.<span class="title function_">write</span>(str);</span><br></pre></td></tr></table></figure><h1 id="函数【function】"><a href="#函数【function】" class="headerlink" title="函数【function】"></a>函数【function】</h1><p>JS中使用function关键字来定义函数。<br>函数本身并不会执行，必须调用函数才能执行。<strong>与JAVA的方法类似。</strong><br>语法：<br><code>function 函数名(参数1,参数2...)&#123;&#125;</code></p><p><strong>注意：在JS中没有多态概念，是基于对象，方法名如果相同，后面的覆盖前面的。如果变量名与函数名相同，依然覆盖。</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">show</span>(<span class="params">idCard</span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`身份证：<span class="subst">$&#123;idCard&#125;</span>`</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">show</span>(<span class="params">name,age</span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`姓名为：<span class="subst">$&#123;name&#125;</span> 年龄为：<span class="subst">$&#123;age&#125;</span>`</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 此函数覆盖了上面的函数</span></span><br><span class="line"></span><br><span class="line"><span class="title function_">show</span>(<span class="string">&quot;李四&quot;</span>,<span class="number">19</span>);</span><br><span class="line"><span class="title function_">show</span>(<span class="string">&quot;赵六&quot;</span>);</span><br><span class="line"><span class="title function_">show</span>(<span class="string">&quot;李七&quot;</span>,<span class="number">30</span>,<span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line"><span class="title function_">show</span>(<span class="string">&quot;123456789&quot;</span>,<span class="number">20</span>);</span><br><span class="line"><span class="keyword">var</span> show = <span class="string">&quot;我是一个变量&quot;</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(show);</span><br></pre></td></tr></table></figure><h2 id="回调函数"><a href="#回调函数" class="headerlink" title="回调函数"></a>回调函数</h2><p>将一个函数当做另一个函数的参数传入进去。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 例子（show函数调用fn函数）：</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">show</span>(<span class="params">a,b,fn</span>)&#123;&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params">x,y</span>)&#123;&#125;</span><br></pre></td></tr></table></figure><h2 id="匿名函数"><a href="#匿名函数" class="headerlink" title="匿名函数"></a>匿名函数</h2><p>顾名思义，没有名字的函数，一般用于回调。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">语法:</span><br><span class="line"><span class="keyword">function</span>(<span class="params">参数<span class="number">1</span>,参数<span class="number">2</span>,...</span>)&#123;&#125;</span><br><span class="line"></span><br><span class="line">例子：</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Show</span>(<span class="params">a,b,fun</span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_">fun</span>(a,b);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> showMe = <span class="title class_">Show</span>(<span class="number">3</span>,<span class="number">4</span>,<span class="keyword">function</span>(<span class="params">x,y</span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> x * y;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(showMe);</span><br></pre></td></tr></table></figure><h2 id="函数的默认参数"><a href="#函数的默认参数" class="headerlink" title="函数的默认参数"></a>函数的默认参数</h2><p><strong>函数的形参在没有具体实参传入的时候，则采用的预设的值。</strong>如果在调用时传入参数，就采用传入的值。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">例子：</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">f1</span>(<span class="params">x,y=<span class="number">100</span></span>)&#123;&#125;</span><br><span class="line"><span class="comment">// 当前的y如果在方法调用的时候，没有传入参数，那么它的值就是100</span></span><br></pre></td></tr></table></figure><h2 id="箭头函数（拉姆达表达式）"><a href="#箭头函数（拉姆达表达式）" class="headerlink" title="箭头函数（拉姆达表达式）"></a>箭头函数（拉姆达表达式）</h2><ul><li>新特性<br>  意义在于简化匿名类的写法</li><li>特点<br>  1.不需要使用function关键即可创建函数。<br>  2.省略return关键字<br>  3.继承当前this。<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">语法：</span><br><span class="line">(req,resp) =&gt; req</span><br><span class="line"></span><br><span class="line">相当于</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span>(<span class="params">req,resp</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> req;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="number">1.</span>创建一个无参函数【没有参数的箭头函数】</span><br><span class="line">ar emptyParams = <span class="function">() =&gt;</span> <span class="string">`welcome to GuangZhou`</span>;</span><br><span class="line"></span><br><span class="line"><span class="number">2.</span>单一函数，函数体只有一条语句的箭头函数</span><br><span class="line"><span class="keyword">var</span> <span class="title function_">welcome</span> = (<span class="params">name,msg</span>) =&gt; <span class="string">`<span class="subst">$&#123;msg&#125;</span> : <span class="subst">$&#123;name&#125;</span>`</span>;</span><br><span class="line"></span><br><span class="line"><span class="number">3.</span>函数体有多条语句的函数。（使用大括号、代码块）</span><br><span class="line"><span class="keyword">var</span> <span class="title function_">add</span> = (<span class="params">a,b=<span class="number">100</span></span>) =&gt; &#123;</span><br><span class="line"><span class="keyword">let</span> c = a * b;</span><br><span class="line"><span class="keyword">return</span> c;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="number">4.</span>函数体返回的是一个对象</span><br><span class="line">    <span class="keyword">var</span> <span class="title function_">Bus</span> = (<span class="params">color,price</span>) =&gt;(</span><br><span class="line">        &#123;color,price&#125;</span><br><span class="line">    );</span><br><span class="line">    <span class="keyword">var</span> bus = <span class="title class_">Bus</span>(<span class="string">&quot;黑色&quot;</span>,<span class="number">5000</span>);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(bus);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 等同于</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">Bus</span>(<span class="params">color,price</span>)&#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">color</span> = color;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">price</span> = price;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> bus = <span class="keyword">new</span> <span class="title class_">Bus</span>(<span class="string">&quot;黑色&quot;</span>,<span class="number">5000</span>);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(bus);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="number">5.</span>rest参数</span><br><span class="line"><span class="comment">// 相当于Java中的可变参数</span></span><br><span class="line">语法：</span><br><span class="line">    <span class="keyword">function</span> 函数名(参数一,...参数n)&#123;&#125;</span><br></pre></td></tr></table></figure></li></ul><h1 id="循环与选择结构"><a href="#循环与选择结构" class="headerlink" title="循环与选择结构"></a>循环与选择结构</h1><p>if</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> i = <span class="number">10</span>;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    if中的表达式可以使用数字、字符串等等表达式。</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">if</span>(i)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(--i);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>for in</code> 类似 JAVA中的 <code>forEach</code>。<br>for in 循环的不是对象的值，而是下标。一般用于迭代数组。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">&quot;你好世界&quot;</span>;</span><br><span class="line"><span class="comment">//字符串的本质就是字符数组。</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">const</span> i <span class="keyword">in</span> str)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(str[i]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 你</span></span><br><span class="line"><span class="comment">// 好</span></span><br><span class="line"><span class="comment">// 世</span></span><br><span class="line"><span class="comment">// 界</span></span><br></pre></td></tr></table></figure><h1 id="数组【Array】"><a href="#数组【Array】" class="headerlink" title="数组【Array】"></a>数组【Array】</h1><p>数组是一种复合数据结构。一个变量可以存放多个数据。<br><strong>创建数组</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 方式一：Array()【浏览器内置对象】</span></span><br><span class="line"><span class="keyword">var</span> arr = <span class="keyword">new</span> <span class="title class_">Array</span>();<span class="comment">//创建了一个空数组。</span></span><br><span class="line"><span class="keyword">var</span> arr = <span class="keyword">new</span> <span class="title class_">Array</span>(<span class="string">&quot;Tom&quot;</span>,<span class="string">&quot;Jarry&quot;</span>);<span class="comment">//创建并赋值元素</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 赋值</span></span><br><span class="line">arr[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 方式二：</span></span><br><span class="line"><span class="keyword">var</span> hobby = [];<span class="comment">//创建一个空数组</span></span><br><span class="line"><span class="keyword">var</span> hobby = [<span class="string">&quot;吃&quot;</span>,<span class="string">&quot;喝&quot;</span>,<span class="string">&quot;玩&quot;</span>,<span class="string">&quot;乐&quot;</span>];<span class="comment">//创建并赋值元素</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">注意：</span><br><span class="line"><span class="variable constant_">JS</span>中 数组的长度是随意扩容的。</span><br><span class="line"><span class="variable constant_">JS</span>中 数组中的元素类型可以不一致。但不建议。</span><br></pre></td></tr></table></figure><ul><li>数组的常用方法<ol><li>sort()：<strong>排序</strong></li><li>join()：<strong>拼接</strong>，根据指定的字符拼接，返回一个字符串</li><li>push()：向数组的<strong>末尾追加</strong>一个或者多个元素</li><li>pop()：<strong>删除</strong>数组中<strong>最后一个</strong>元素，并返回该元素</li><li>concat()：将其它数组<strong>连接</strong>到当前数组的末尾，返回一个新数组，原数组不变。</li><li>unshift()：向数组的<strong>开头添加</strong>一个或者多个元素</li><li>shift()：<strong>删除</strong>数组<strong>开头</strong>的元素，并返回该元素</li><li>slice()：从已有数组中返回选择的子范围元素【<strong>类似切片</strong>】</li><li>reverse()：<strong>将数组反转</strong>【头变尾】</li><li>toString()：将数组转换成字符串</li><li>indexOf()：返回指定元素在数组中第一次出现的<strong>下标的位置</strong></li><li>forEach()：迭代数组</li></ol></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1. sort()：排序</span></span><br><span class="line"><span class="comment">// 默认按照aciis码排序（只排序第一个）</span></span><br><span class="line"><span class="keyword">var</span> nums = [<span class="number">54</span>,<span class="number">89</span>,<span class="number">41</span>,<span class="number">589</span>,<span class="number">278</span>,<span class="number">12</span>,<span class="number">741</span>,<span class="number">0</span>,<span class="number">6</span>,<span class="number">8</span>,<span class="number">877</span>];</span><br><span class="line"><span class="keyword">var</span> names = [<span class="string">&quot;tom&quot;</span>,<span class="string">&quot;jerry&quot;</span>,<span class="string">&quot;bruse li&quot;</span>,<span class="string">&quot;andy&quot;</span>,<span class="string">&quot;smith&quot;</span>,<span class="string">&quot;alice&quot;</span>,<span class="string">&quot;rose&quot;</span>];</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(nums.<span class="title function_">sort</span>());   <span class="comment">// [0, 12, 278, 41, 54, 589, 6, 741, 8, 877, 89]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 重写排序规则后</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(nums.<span class="title function_">sort</span>(<span class="keyword">function</span>(<span class="params">a,b</span>)&#123;</span><br><span class="line">    <span class="keyword">if</span>(a &gt; b)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(a &lt; b)&#123;</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;));</span><br><span class="line"><span class="comment">// [0, 6, 8, 12, 41, 54, 89, 278, 589, 741, 877]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 默认字符串排序是按照首字母排序</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(names.<span class="title function_">sort</span>());  <span class="comment">//[&quot;alice&quot;, &quot;andy&quot;, &quot;bruse li&quot;, &quot;jerry&quot;, &quot;rose&quot;, &quot;smith&quot;, &quot;tom&quot;]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 按照长度顺序重写排序规则后</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(names.<span class="title function_">sort</span>(<span class="keyword">function</span>(<span class="params">a,b</span>)&#123;</span><br><span class="line">    <span class="keyword">if</span>(a.<span class="property">length</span> &gt; b.<span class="property">length</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(a.<span class="property">length</span> &lt; b.<span class="property">length</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    &#125;));</span><br><span class="line"><span class="comment">// [&quot;tom&quot;, &quot;andy&quot;, &quot;rose&quot;, &quot;jerry&quot;, &quot;smith&quot;, &quot;alice&quot;, &quot;bruse li&quot;]</span></span><br><span class="line"></span><br><span class="line">------------------------------------</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2.join()：拼接，根据指定的字符拼接，返回一个字符串</span></span><br><span class="line"><span class="keyword">var</span> names = [<span class="string">&quot;tom&quot;</span>,<span class="string">&quot;jerry&quot;</span>,<span class="string">&quot;bruse li&quot;</span>,<span class="string">&quot;andy&quot;</span>,<span class="string">&quot;smith&quot;</span>,<span class="string">&quot;alice&quot;</span>,<span class="string">&quot;rose&quot;</span>];</span><br><span class="line"><span class="keyword">var</span> str = names.<span class="title function_">join</span>(<span class="string">&quot;-&quot;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(str);</span><br><span class="line"><span class="comment">// tom-jerry-bruse li-andy-smith-alice-rose</span></span><br><span class="line"></span><br><span class="line">------------------------------------</span><br><span class="line"></span><br><span class="line"><span class="comment">// 3.push()：向数组的末尾追加一个或者多个元素</span></span><br><span class="line"><span class="keyword">var</span> names = [<span class="string">&quot;tom&quot;</span>,<span class="string">&quot;jerry&quot;</span>];</span><br><span class="line">names.<span class="title function_">push</span>(<span class="string">&quot;andy&quot;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(names);</span><br><span class="line"><span class="comment">// [&quot;tom&quot;, &quot;jerry&quot;, &quot;andy&quot;]</span></span><br><span class="line"></span><br><span class="line">names.<span class="title function_">push</span>(<span class="string">&quot;pengpeng&quot;</span>,<span class="string">&quot;HuLu&quot;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(names);</span><br><span class="line"><span class="comment">//  [&quot;tom&quot;, &quot;jerry&quot;, &quot;andy&quot;, &quot;pengpeng&quot;, &quot;HuLu&quot;]</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 4.pop()：删除数组中最后一个元素，并返回该元素</span></span><br><span class="line"><span class="keyword">var</span> names = [<span class="string">&quot;tom&quot;</span>,<span class="string">&quot;jerry&quot;</span>,<span class="string">&quot;PengPeng&quot;</span>];</span><br><span class="line">names.<span class="title function_">pop</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(names);</span><br><span class="line"><span class="comment">// [&quot;tom&quot;,&quot;jerry&quot;];</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 5.concat()：将其它数组连接到当前数组的末尾，返回一个新数组，原数组不变。</span></span><br><span class="line"><span class="keyword">var</span> firstnames = [<span class="string">&quot;tom&quot;</span>,<span class="string">&quot;jerry&quot;</span>,<span class="string">&quot;bruse li&quot;</span>];</span><br><span class="line"><span class="keyword">var</span> lastnames = [<span class="string">&quot;andy&quot;</span>,<span class="string">&quot;smith&quot;</span>,<span class="string">&quot;alice&quot;</span>,<span class="string">&quot;rose&quot;</span>];</span><br><span class="line"><span class="keyword">var</span> names = firstnames.<span class="title function_">concat</span>(lastnames);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(names);</span><br><span class="line"><span class="comment">// [&quot;tom&quot;, &quot;jerry&quot;, &quot;bruse li&quot;, &quot;andy&quot;, &quot;smith&quot;, &quot;alice&quot;, &quot;rose&quot;]</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 6.unshift()：向数组的开头添加一个或者多个元素</span></span><br><span class="line"><span class="keyword">var</span> names = [<span class="string">&quot;tom&quot;</span>,<span class="string">&quot;jerry&quot;</span>,<span class="string">&quot;bruse li&quot;</span>];</span><br><span class="line">names.<span class="title function_">unshift</span>(<span class="string">&quot;alice&quot;</span>,<span class="string">&quot;rose&quot;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(names);</span><br><span class="line"><span class="comment">// [&quot;alice&quot;,&quot;rose&quot;,&quot;tom&quot;,&quot;jerry&quot;,&quot;bruse li&quot;]</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 7.shift()：删除数组开头的元素，并返回该元素</span></span><br><span class="line"><span class="keyword">var</span> names = [<span class="string">&quot;tom&quot;</span>,<span class="string">&quot;jerry&quot;</span>,<span class="string">&quot;bruse li&quot;</span>];</span><br><span class="line"><span class="keyword">var</span> name = names.<span class="title function_">shift</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(name);</span><br><span class="line"><span class="comment">// tom</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(names);</span><br><span class="line"><span class="comment">// [&quot;jerry&quot;,&quot;bruse li&quot;]</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 8.slice()：从已有数组中返回选择的子范围元素【类似切片】</span></span><br><span class="line"><span class="keyword">var</span> names = [<span class="string">&quot;tom&quot;</span>,<span class="string">&quot;jerry&quot;</span>,<span class="string">&quot;bruse li&quot;</span>,<span class="string">&quot;andy&quot;</span>,<span class="string">&quot;smith&quot;</span>,<span class="string">&quot;alice&quot;</span>,<span class="string">&quot;rose&quot;</span>];</span><br><span class="line"><span class="keyword">var</span> names2 = names.<span class="title function_">slice</span>(<span class="number">1</span>,<span class="number">4</span>);<span class="comment">//包前不包后，</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(names2);</span><br><span class="line"><span class="comment">// [&quot;jerry&quot;, &quot;bruse li&quot;, &quot;andy&quot;]</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    指定一个参数时，从指定下标开始-末尾。全部包括</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">var</span> names3 = names.<span class="title function_">slice</span>(<span class="number">4</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(names3);</span><br><span class="line"><span class="comment">// [&quot;smith&quot;, &quot;alice&quot;, &quot;rose&quot;]</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 9.reverse()：将数组反转【头变尾】</span></span><br><span class="line"><span class="keyword">var</span> names = [<span class="string">&quot;tom&quot;</span>,<span class="string">&quot;jerry&quot;</span>,<span class="string">&quot;bruse li&quot;</span>,<span class="string">&quot;andy&quot;</span>,<span class="string">&quot;smith&quot;</span>,<span class="string">&quot;alice&quot;</span>,<span class="string">&quot;rose&quot;</span>];</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(names.<span class="title function_">reverse</span>());</span><br><span class="line"><span class="comment">// [ &quot;rose&quot;, &quot;alice&quot;, &quot;smith&quot;, &quot;andy&quot;, &quot;bruse li&quot;, &quot;jerry&quot;, &quot;tom&quot; ]</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 10.toString()：将数组转换成字符串</span></span><br><span class="line"><span class="keyword">var</span> names = [<span class="string">&quot;tom&quot;</span>,<span class="string">&quot;jerry&quot;</span>,<span class="string">&quot;bruse li&quot;</span>,<span class="string">&quot;andy&quot;</span>,<span class="string">&quot;smith&quot;</span>,<span class="string">&quot;alice&quot;</span>,<span class="string">&quot;rose&quot;</span>];</span><br><span class="line"><span class="keyword">var</span> str = names.<span class="title function_">toString</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(str);</span><br><span class="line"><span class="comment">// tom,jerry,bruse li,andy,smith,alice,rose</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 11.indexOf()：返回指定元素在数组中第一次出现的下标的位置</span></span><br><span class="line"><span class="keyword">var</span> names = [<span class="string">&quot;tom&quot;</span>,<span class="string">&quot;jerry&quot;</span>,<span class="string">&quot;bruse li&quot;</span>,<span class="string">&quot;andy&quot;</span>,<span class="string">&quot;smith&quot;</span>,<span class="string">&quot;alice&quot;</span>,<span class="string">&quot;rose&quot;</span>];</span><br><span class="line"><span class="keyword">var</span> index = names.<span class="title function_">indexOf</span>(<span class="string">&quot;alice&quot;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(index);</span><br><span class="line"><span class="comment">//5</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">typeof</span>(index));</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 12.forEach()：迭代数组</span></span><br><span class="line"><span class="keyword">var</span> names = [<span class="string">&quot;tom&quot;</span>,<span class="string">&quot;jerry&quot;</span>,<span class="string">&quot;bruse li&quot;</span>,<span class="string">&quot;andy&quot;</span>,<span class="string">&quot;smith&quot;</span>,<span class="string">&quot;alice&quot;</span>,<span class="string">&quot;rose&quot;</span>];</span><br><span class="line">names.<span class="title function_">forEach</span>(<span class="keyword">function</span>(<span class="params">value,index</span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`<span class="subst">$&#123;index&#125;</span> : <span class="subst">$&#123;value&#125;</span>`</span>);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// 0 : tom</span></span><br><span class="line"><span class="comment">// 1 : jerry</span></span><br><span class="line"><span class="comment">// 2 : bruse li</span></span><br><span class="line"><span class="comment">// 3 : andy</span></span><br><span class="line"><span class="comment">// 4 : smith</span></span><br><span class="line"><span class="comment">// 5 : alice</span></span><br><span class="line"><span class="comment">// 6 : rose</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="二维数组"><a href="#二维数组" class="headerlink" title="二维数组"></a>二维数组</h2><p><code>与JAVA一样</code>，数组中每个元素还是一个数组。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span>二维数组的声明</span><br><span class="line">方式一</span><br><span class="line"><span class="keyword">var</span> nums = <span class="keyword">new</span> <span class="title class_">Array</span>(<span class="keyword">new</span> <span class="title class_">Array</span>(),<span class="keyword">new</span> <span class="title class_">Array</span>());</span><br><span class="line">方式二</span><br><span class="line"><span class="keyword">var</span> nums2 = [[],[],[]];</span><br><span class="line"></span><br><span class="line"><span class="number">2.</span>二维数组的赋值</span><br><span class="line">nums[<span class="number">0</span>][<span class="number">0</span>] = <span class="number">20</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//3.二维数组的迭代</span></span><br><span class="line"><span class="keyword">var</span> names = [[<span class="string">&quot;tom&quot;</span>,<span class="string">&quot;jerry&quot;</span>],[<span class="string">&quot;alice&quot;</span>,<span class="string">&quot;smith&quot;</span>,<span class="string">&quot;jeck&quot;</span>],[<span class="string">&quot;rose&quot;</span>]];</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; names.<span class="property">length</span>; i++)&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> j = <span class="number">0</span>; j &lt; names[i].<span class="property">length</span>; j++)&#123;</span><br><span class="line">        <span class="variable language_">document</span>.<span class="title function_">write</span>(names[i][j] + <span class="string">&quot;\t&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="闭包"><a href="#闭包" class="headerlink" title="闭包"></a>闭包</h1><p>在函数内部定义了一个或者多个函数，是用来封装一个或者多个函数的。<br>简单的理解：闭包就是用于封装JS函数。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">语法：</span><br><span class="line">(<span class="keyword">function</span>(<span class="params">函数的参数</span>)&#123;</span><br><span class="line">        执行的代码块;</span><br><span class="line">    &#125;)();</span><br><span class="line"></span><br><span class="line">例子：</span><br><span class="line"><span class="keyword">var</span> fn = (<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">var</span> num = <span class="number">10</span>;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        <span class="attr">addition</span>:<span class="keyword">function</span>(<span class="params">n</span>)&#123;</span><br><span class="line">            num+=n</span><br><span class="line">            <span class="keyword">return</span> num;</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">substration</span>:<span class="keyword">function</span>(<span class="params">n</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> num-=n;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 调用函数中的函数</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(fn.<span class="title function_">addition</span>(<span class="number">20</span>));</span><br><span class="line"><span class="comment">// 30</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(fn.<span class="title function_">substration</span>(<span class="number">15</span>));</span><br><span class="line"><span class="comment">// 15</span></span><br></pre></td></tr></table></figure><h1 id="JS对象"><a href="#JS对象" class="headerlink" title="JS对象"></a>JS对象</h1><p>JS对象是数据类型之一，是一种复合的数据类型。<br>将多种数据类型集中在数据单元，并且允许通过对象来存储和调用这些数据的值。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1.自定义对象</span></span><br><span class="line">语法：</span><br><span class="line">方式一：</span><br><span class="line"><span class="keyword">var</span> stduent = &#123;属性名:属性值..&#125;</span><br><span class="line">方式二：</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">student</span>(<span class="params">name,age,sex</span>)&#123;</span><br><span class="line"><span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line"><span class="variable language_">this</span>.<span class="property">age</span> = age;</span><br><span class="line"><span class="variable language_">this</span>.<span class="property">sex</span> = sex;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">方式一例子：</span><br><span class="line"><span class="keyword">var</span> student = &#123;</span><br><span class="line">    <span class="attr">name</span>:<span class="string">&quot;张三&quot;</span>,</span><br><span class="line">    <span class="attr">age</span>:<span class="number">20</span>,</span><br><span class="line">    <span class="attr">sex</span>:<span class="string">&quot;男&quot;</span>,</span><br><span class="line">    <span class="attr">sayName</span>:<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="title function_">alert</span>(<span class="variable language_">this</span>.<span class="property">name</span>);</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">print</span>:<span class="keyword">function</span>(<span class="params">msg</span>)&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`<span class="subst">$&#123;msg&#125;</span> <span class="subst">$&#123;<span class="variable language_">this</span>.name&#125;</span>`</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(student.<span class="property">name</span>);</span><br><span class="line"><span class="comment">// 张三</span></span><br><span class="line">student.<span class="title function_">print</span>(<span class="string">&quot;欢迎来到广州&quot;</span>);</span><br><span class="line"><span class="comment">// 欢迎来到广州 张三</span></span><br><span class="line"></span><br><span class="line">方式二：</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">student02</span>(<span class="params">name,age,sex</span>)&#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">age</span> = age;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">sex</span> = sex;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">sayName</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="title function_">alert</span>(<span class="variable language_">this</span>.<span class="property">name</span>);</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">print</span> = <span class="keyword">function</span>(<span class="params">msg</span>)&#123;</span><br><span class="line">        <span class="title function_">alert</span>(msg);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> stu = <span class="keyword">new</span> <span class="title function_">student02</span>(<span class="string">&quot;李四&quot;</span>,<span class="number">20</span>,<span class="string">&quot;女&quot;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(stu.<span class="property">name</span>);</span><br><span class="line"><span class="comment">// 李四</span></span><br><span class="line"></span><br><span class="line">------------------------------------------------</span><br><span class="line"><span class="comment">// 2.对象初始化简写</span></span><br><span class="line">语法：</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">student</span>(<span class="params">name,age</span>)&#123;</span><br><span class="line">rerturn &#123;</span><br><span class="line">            name,</span><br><span class="line">            age</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">例子：</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">student</span>(<span class="params">name,age,sex</span>)&#123;</span><br><span class="line">    <span class="keyword">return</span>&#123;</span><br><span class="line">        name,</span><br><span class="line">        age,</span><br><span class="line">        sex,</span><br><span class="line">        <span class="attr">sayHello</span>:<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Hello World&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> stu = <span class="keyword">new</span> <span class="title function_">student</span>(<span class="string">&quot;李四&quot;</span>,<span class="number">20</span>,<span class="string">&quot;男&quot;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(stu.<span class="property">name</span>);</span><br><span class="line">stu.<span class="title function_">sayHello</span>();</span><br><span class="line"><span class="comment">// 李四 </span></span><br><span class="line"><span class="comment">// Hello World</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="String对象"><a href="#String对象" class="headerlink" title="String对象"></a>String对象</h2><p>1.charAt()：根据指定下标返回下标指向的字符<br>2.indexOf()：返回指定字符在字符串中第一次出现的下标位置。<br>3.lastIndexOf()：返回指定字符在字符串中最后一次出现的下标位置。<br>4.substr()：从指定的位置开始截取指定长度的子字符串。<br>5.subString()：从指定的位置开始截取指定位置的子字符串。<br>6.trim()：去除前后两端空白<br>7.replace()：替换<br>8.toLowerCase()：转换为小写<br>9.toUpperCase()：转换为大写<br>10.concat()：连接两个字符串<br>11.split()：根据指定的字符拆分字符串。返回一个数组</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">//1.创建一个字符串</span></span><br><span class="line"><span class="keyword">var</span> str = <span class="string">&quot; welcome to GuangZhou....  &quot;</span>;</span><br><span class="line"><span class="comment">// 以下语句以  str  为标准</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 1.charAt()：根据指定下标返回下标指向的字符</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(str.<span class="title function_">charAt</span>(<span class="number">0</span>)); <span class="comment">//w</span></span><br><span class="line"><span class="comment">// 2.indexOf()：返回指定字符在字符串中第一次出现的下标位置。</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(str.<span class="title function_">indexOf</span>(<span class="string">&quot;o&quot;</span>));  <span class="comment">//5</span></span><br><span class="line"><span class="comment">// 3.lastIndexOf()：返回指定字符在字符串中最后一次出现的下标位置。</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(str.<span class="title function_">lastIndexOf</span>(<span class="string">&quot;o&quot;</span>));  <span class="number">19</span></span><br><span class="line"><span class="comment">// 4.substr(index,size)：从指定的位置开始截取指定长度的子字符串。</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(str.<span class="title function_">substr</span>(<span class="number">15</span>,<span class="number">5</span>));<span class="comment">//Zhou</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(str.<span class="title function_">substr</span>(<span class="number">15</span>));<span class="comment">//Zhou....  </span></span><br><span class="line"><span class="comment">// 5.subString()：从指定的位置开始截取指定位置的子字符串。</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(str.<span class="title function_">substring</span>(<span class="number">0</span>,<span class="number">7</span>));<span class="comment">//welcome</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(str.<span class="title function_">substring</span>(<span class="number">7</span>));<span class="comment">//to GuangZhou....</span></span><br><span class="line"><span class="comment">// 6.trim()：去除前后两端空白</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(str.<span class="title function_">trim</span>().<span class="property">length</span>);</span><br><span class="line"><span class="comment">// 7.replace()：替换</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(str.<span class="title function_">replace</span>(<span class="string">&quot;GuangZhou&quot;</span>,<span class="string">&quot;*&quot;</span>));  <span class="comment">// welcome to *</span></span><br><span class="line"><span class="comment">// 8.toLowerCase()：转换为小写</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(str.<span class="title function_">toUpperCase</span>());</span><br><span class="line"><span class="comment">// 9.toUpperCase()：转换为大写</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(str.<span class="title function_">toLowerCase</span>());</span><br><span class="line"><span class="comment">// 10.concat()：连接两个字符串</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(str.<span class="title function_">concat</span>(<span class="string">&quot;翻译：欢迎来到广州&quot;</span>));  <span class="comment">//welcome to GuangZhou....  翻译：欢迎来到广州</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(str.<span class="title function_">split</span>(<span class="string">&quot; &quot;</span>));    <span class="comment">//[ &quot;&quot;, &quot;welcome&quot;, &quot;to&quot;, &quot;GuangZhou....&quot;, &quot;&quot;, &quot;&quot; ]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//格式化字符串</span></span><br><span class="line"><span class="variable language_">document</span>.<span class="title function_">write</span>(str.<span class="title function_">fontsize</span>(<span class="number">7</span>).<span class="title function_">fontcolor</span>(<span class="string">&quot;#ccc&quot;</span>).<span class="title function_">concat</span>(<span class="string">&quot;&lt;/br&gt;&quot;</span>));</span><br><span class="line"><span class="variable language_">document</span>.<span class="title function_">writeln</span>(str.<span class="title function_">small</span>() + <span class="string">`&lt;/br&gt;`</span>);</span><br><span class="line"><span class="variable language_">document</span>.<span class="title function_">writeln</span>(str.<span class="title function_">big</span>() + <span class="string">`&lt;/br&gt;`</span>);</span><br><span class="line"><span class="variable language_">document</span>.<span class="title function_">write</span>(str.<span class="title function_">italics</span>());</span><br></pre></td></tr></table></figure><h2 id="Data对象"><a href="#Data对象" class="headerlink" title="Data对象"></a>Data对象</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// new一个Data对象</span></span><br><span class="line"><span class="keyword">var</span> date = <span class="keyword">new</span> <span class="title class_">Date</span>();</span><br><span class="line"><span class="comment">//console.log(date);</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//1.设置</span></span><br><span class="line">date.<span class="title function_">setFullYear</span>(<span class="number">2020</span>);</span><br><span class="line">date.<span class="title function_">setMonth</span>(<span class="number">8</span>)</span><br><span class="line"><span class="comment">//....</span></span><br><span class="line"><span class="comment">//2.获取当前年月日 时分秒</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(date.<span class="title function_">getFullYear</span>());<span class="comment">//年</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(date.<span class="title function_">getMonth</span>() + <span class="number">1</span>);<span class="comment">//月份从0开始</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(date.<span class="title function_">getDate</span>());<span class="comment">//日</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(date.<span class="title function_">getDay</span>());<span class="comment">// 星期</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(date.<span class="title function_">getHours</span>());<span class="comment">// 小时</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(date.<span class="title function_">getMinutes</span>())<span class="comment">// 分钟</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(date.<span class="title function_">getSeconds</span>());<span class="comment">//秒</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="variable language_">document</span>.<span class="title function_">write</span>(date.<span class="title function_">getFullYear</span>() + <span class="string">&quot;年&quot;</span> + (date.<span class="title function_">getMonth</span>() + <span class="number">1</span>) + <span class="string">&quot;月&quot;</span> + date.<span class="title function_">getDate</span>() + <span class="string">&quot;日\t&quot;</span> + date.<span class="title function_">getHours</span>() + <span class="string">&quot;时&quot;</span> + date.<span class="title function_">getMinutes</span>() + <span class="string">&quot;分&quot;</span> + date.<span class="title function_">getSeconds</span>() + <span class="string">&quot;秒&quot;</span>);</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="BOM【重点】"><a href="#BOM【重点】" class="headerlink" title="BOM【重点】"></a>BOM【重点】</h1><p>Browser Object Model<br>浏览器对象模型。<br>通俗的说：可以获取浏览器信息的内置对象。</p><p>1.window<br>2.screen<br>3.navgator<br>4.location<br>…<br>9.document</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1.window</span></span><br><span class="line"><span class="comment">// 所有浏览器都支持 window 对象。它表示浏览器窗口</span></span><br><span class="line"><span class="comment">// 所有对象默认都是window对象的子对象。</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 2.screen</span></span><br><span class="line"><span class="comment">// window对象的成员，用来获取用户屏幕属性。</span></span><br><span class="line"><span class="comment">// 查看screen里面内置的属性</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">window</span>.<span class="property">screen</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`屏幕宽度 :<span class="subst">$&#123;screen.width&#125;</span> 屏幕高度：<span class="subst">$&#123;screen.height&#125;</span>`</span>);</span><br><span class="line"><span class="comment">// 屏幕宽度 :1536 屏幕高度：864</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`屏幕可用宽度 :<span class="subst">$&#123;screen.availWidth&#125;</span> 屏幕高度：<span class="subst">$&#123;screen.availHeight&#125;</span>`</span>);</span><br><span class="line"><span class="comment">// 屏幕可用宽度 :1536 屏幕高度：824</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 3.navgator</span></span><br><span class="line"><span class="comment">// 获取用户的浏览器信息。</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(navigator);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">document</span>.<span class="title function_">write</span>(<span class="string">`浏览器代号：<span class="subst">$&#123;navigator.appCodeName&#125;</span> </span></span><br><span class="line"><span class="string">    &lt;br/&gt;浏览器的名称：<span class="subst">$&#123;navigator.appName&#125;</span></span></span><br><span class="line"><span class="string">    &lt;br/&gt;浏览器的版本：<span class="subst">$&#123;navigator.appVersion&#125;</span></span></span><br><span class="line"><span class="string">    &lt;br/&gt;浏览器的cookie是否开启：<span class="subst">$&#123;navigator.cookieEnabled&#125;</span></span></span><br><span class="line"><span class="string">    &lt;br/&gt;硬件平台：<span class="subst">$&#123;navigator.platform&#125;</span></span></span><br><span class="line"><span class="string">    &lt;br/&gt;用户代理：<span class="subst">$&#123;navigator.userAgent&#125;</span></span></span><br><span class="line"><span class="string">    &lt;br/&gt;用户语言：<span class="subst">$&#123;navigator.language&#125;</span></span></span><br><span class="line"><span class="string">    `</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 4.location</span></span><br><span class="line"><span class="comment">// 浏览器地址对象</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">window</span>.<span class="property">location</span>);</span><br><span class="line"><span class="variable language_">document</span>.<span class="title function_">write</span>(<span class="string">`全球资源定位【URL】：<span class="subst">$&#123;location.href&#125;</span></span></span><br><span class="line"><span class="string">    &lt;br/&gt;服务器资源定位【URI】：<span class="subst">$&#123;location.pathname&#125;</span></span></span><br><span class="line"><span class="string">    &lt;br/&gt;端口号：<span class="subst">$&#123;location.port&#125;</span></span></span><br><span class="line"><span class="string">    &lt;br/&gt;IP地址：<span class="subst">$&#123;location.hostname&#125;</span></span></span><br><span class="line"><span class="string">    &lt;br/&gt;协议：<span class="subst">$&#123;location.protocol&#125;</span></span></span><br><span class="line"><span class="string">    `</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="number">5.</span>警告框 <span class="title function_">alter</span>()</span><br><span class="line">    <span class="title function_">alert</span>(<span class="string">&quot;提示框&quot;</span>);    <span class="comment">//会强制提示框</span></span><br><span class="line"></span><br><span class="line"><span class="number">6.</span>交互框 <span class="title function_">prompt</span>()</span><br><span class="line">    <span class="keyword">var</span> value = <span class="title function_">prompt</span>(<span class="string">&quot;交互框&quot;</span>);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(value);</span><br><span class="line">    <span class="comment">// 在输入框输入点确定后会获取值，点取消则null</span></span><br><span class="line"></span><br><span class="line"><span class="number">7.</span>确认框 <span class="title function_">confirm</span>()</span><br><span class="line">    <span class="keyword">var</span> flag = <span class="title function_">confirm</span>(<span class="string">&quot;确定删除吗？&quot;</span>);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(flag);</span><br><span class="line">    <span class="comment">// 返回的是布尔值，确定true，取消false</span></span><br><span class="line"></span><br><span class="line"><span class="number">8.</span><span class="variable language_">window</span>对象的定时器</span><br><span class="line">定时器：</span><br><span class="line">按照指定的时间，执行指定时间之后的某个事件。</span><br><span class="line">a)一次性定时器</span><br><span class="line"><span class="built_in">setTimeout</span>(callback,delay);</span><br><span class="line"></span><br><span class="line">        例子：两秒后运行回调函数</span><br><span class="line">        <span class="keyword">var</span> timer = <span class="variable language_">window</span>.<span class="built_in">setTimeout</span>(callback,<span class="number">2000</span>);</span><br><span class="line">        <span class="comment">//回调函数</span></span><br><span class="line">        <span class="keyword">function</span> <span class="title function_">callback</span>(<span class="params"></span>)&#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;定时器开始工作...&quot;</span>);</span><br><span class="line">            <span class="comment">//window.location = &quot;https://www.baidu.com&quot;;</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">b)循环性定时器</span><br><span class="line"><span class="built_in">setInterval</span>(callback,delay);</span><br><span class="line"></span><br><span class="line">            例子：每两秒运行一次</span><br><span class="line">            <span class="variable language_">window</span>.<span class="built_in">setInterval</span>(callback,<span class="number">2000</span>);</span><br><span class="line">            <span class="keyword">function</span> <span class="title function_">callback</span>(<span class="params"></span>)&#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;定时器开始工作...&quot;</span>);</span><br><span class="line">            <span class="comment">//window.location = &quot;https://www.baidu.com&quot;;</span></span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">c)清除定时任务</span><br><span class="line"><span class="built_in">clearInterval</span>();</span><br><span class="line"><span class="built_in">clearTimeout</span>();</span><br><span class="line"></span><br><span class="line">        例子：运行上次后结束</span><br><span class="line">        <span class="keyword">var</span> a = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">var</span> times = <span class="variable language_">window</span>.<span class="built_in">setInterval</span>(callback,<span class="number">2000</span>);</span><br><span class="line">        <span class="keyword">function</span> <span class="title function_">callback</span>(<span class="params"></span>)&#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;定时器开始工作...&quot;</span>);</span><br><span class="line">            a+=<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span>(a == <span class="number">3</span>)&#123;</span><br><span class="line">                <span class="built_in">clearInterval</span>(times);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="number">9.</span><span class="variable language_">document</span></span><br><span class="line">文档对象。</span><br><span class="line"> 用于查找、创建、操作节点对象。</span><br><span class="line"> 通俗的理解：将每一个<span class="variable constant_">HTML</span>标签都当做是一个对象。</span><br><span class="line"> </span><br><span class="line">    常用函数:</span><br><span class="line">        <span class="title function_">getElementById</span>(id)：根据节点的id属性来获取节点。</span><br><span class="line">        <span class="title function_">getElementsByName</span>(name)：根据节点的name属性获取节点，返回数组。</span><br><span class="line">        <span class="title function_">getElementsByClassName</span>(name)：根据<span class="keyword">class</span>属性获取节点，返回数组。</span><br><span class="line">        <span class="title function_">getElementsByTagName</span>(name)：根据标签获取节点，返回数组。</span><br><span class="line"></span><br><span class="line">        例子：</span><br><span class="line">        <span class="keyword">var</span> arr = <span class="variable language_">document</span>.<span class="title function_">getElementsByTagName</span>(<span class="string">&quot;p&quot;</span>);  <span class="comment">//获取&lt;p&gt;标签</span></span><br><span class="line">        <span class="keyword">var</span> arr = <span class="variable language_">document</span>.<span class="title function_">getElementsByClassName</span>(<span class="string">&quot;c1&quot;</span>);  <span class="comment">//获取class = &quot;c1&quot;的标签</span></span><br><span class="line">        <span class="keyword">var</span> arr = <span class="variable language_">document</span>.<span class="title function_">getElementsByName</span>(<span class="string">&#x27;hobby&#x27;</span>);  <span class="comment">//获取name = &quot;hobby&quot;的标签</span></span><br><span class="line">        <span class="keyword">var</span> arr = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;c1&quot;</span>);  <span class="comment">//获取id = &quot;c1&quot;的标签</span></span><br></pre></td></tr></table></figure><h1 id="DOM【重点】"><a href="#DOM【重点】" class="headerlink" title="DOM【重点】"></a>DOM【重点】</h1><p>Document Object Model<br>文档对象模型<br>将每一个HTML标签都当做是一个对象。<br>将一个HTML文件抽象成一颗树。</p><p>1.创建节点<br>2.插入一个节点<br>3.获取一个对象中所有的子节点<br>4.dom的css样式操作，每一个对象都有一个sytle属性</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">// 1.创建节点</span><br><span class="line">//   createElement(elementName)：创建指定elementName的节点</span><br><span class="line">//   createTextNode(content)：创建节点中的内容</span><br><span class="line">//   appendChild(element)：将element节点放入指定节点的内部【追加一个节点】</span><br><span class="line"> </span><br><span class="line">// 2.插入一个节点</span><br><span class="line">// insertBefore：插入一个节点的前面</span><br><span class="line"></span><br><span class="line">// 3.获取一个对象中所有的子节点</span><br><span class="line">// childNodes：需要进行处理，空白也是它的子节点。</span><br><span class="line"></span><br><span class="line">//4.dom的css样式操作</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span>创建节点</span><br><span class="line"><span class="comment">//createElement:通过文档对象创建一个新的节点</span></span><br><span class="line"><span class="keyword">var</span> p = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&quot;p&quot;</span>);</span><br><span class="line"><span class="comment">//createTextNode:创建节点的文本内容</span></span><br><span class="line"><span class="keyword">var</span> value = <span class="variable language_">document</span>.<span class="title function_">createTextNode</span>(<span class="string">&quot;我是p标签中的内容&quot;</span>);</span><br><span class="line"><span class="comment">//将节点内容添加到节点中</span></span><br><span class="line">p.<span class="title function_">appendChild</span>(value);</span><br><span class="line"></span><br><span class="line"><span class="comment">//获取body元素，将p元素添加到body中，最后HTML中显示p标签的内容</span></span><br><span class="line"><span class="variable language_">document</span>.<span class="title function_">getElementsByTagName</span>(<span class="string">&quot;body&quot;</span>)[<span class="number">0</span>].<span class="title function_">appendChild</span>(p);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="number">2.</span>插入一个节点</span><br><span class="line"><span class="comment">// 获取节点</span></span><br><span class="line"><span class="keyword">var</span> p = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&quot;p&quot;</span>);</span><br><span class="line"><span class="keyword">var</span> div= <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;div1&quot;</span>);</span><br><span class="line"><span class="keyword">var</span> div_p= <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;p1&quot;</span>);</span><br><span class="line"><span class="comment">// div节点中将p插入div_p前</span></span><br><span class="line">div.<span class="title function_">insertBefore</span>(p,div_p);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="number">3.</span>获取一个对象中所有的子节点（并且清除空节点）</span><br><span class="line">&lt;ul id=<span class="string">&quot;u1&quot;</span>&gt;</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">li</span>&gt;</span>HTML<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">li</span>&gt;</span>CSS<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">li</span>&gt;</span>JS<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line">&lt;/ul&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> ul = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;u1&#x27;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(ul.<span class="property">childNodes</span>);</span><br><span class="line"><span class="comment">//获取ul下的所有子节点</span></span><br><span class="line"><span class="keyword">var</span> findLi = ul.<span class="property">childNodes</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; findLi.<span class="property">length</span>; i++)&#123;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">        /\s/：匹配空白</span></span><br><span class="line"><span class="comment">        test()：正则表达式对象的内部函数。用于判断字符串中是否有指定字符，如果包含，返回true，否则false</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="keyword">if</span>(findLi[i].<span class="property">nodeName</span> == <span class="string">&quot;#text&quot;</span> &amp;&amp; <span class="regexp">/\s/</span>.<span class="title function_">test</span>(findLi[i].<span class="property">nodeValue</span>))&#123;</span><br><span class="line">            <span class="comment">//findLi[i].remove();</span></span><br><span class="line">            ul.<span class="title function_">removeChild</span>(findLi[i]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(findLi.<span class="property">length</span>);<span class="comment">//清楚后显示为3</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="number">4.</span>dom的css样式操作</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">p</span> <span class="attr">id</span>=<span class="string">&quot;p1&quot;</span>&gt;</span>这是p标签中的内容<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="keyword">var</span> p  = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;p1&#x27;</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        p.<span class="property">style</span>.<span class="property">color</span> = <span class="string">&quot;#ccc&quot;</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        p.<span class="property">style</span>.<span class="property">fontSize</span> = <span class="string">&quot;22px&quot;</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        p.<span class="property">style</span>.<span class="property">fontFamily</span> = <span class="string">&quot;宋体&quot;</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        p.<span class="property">style</span>.<span class="property">width</span> = <span class="string">&quot;200px&quot;</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></figure><h1 id="事件"><a href="#事件" class="headerlink" title="事件"></a>事件</h1><p><strong>能够与用户产生动态交互。</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">页面加载事件:</span><br><span class="line">    0.onload：页面加载事件【等待浏览器将页面渲染完毕后立即执行的事件】</span><br><span class="line"></span><br><span class="line">鼠标事件：</span><br><span class="line">    1. onclicke：点击事件【用户点击按钮】</span><br><span class="line">    2. onmouseover：鼠标移入事件</span><br><span class="line">    3. onmouseout：鼠标移出事件</span><br><span class="line">    4. onmousedown：鼠标按下事件</span><br><span class="line">    5. onmouseup：鼠标抬起事件</span><br><span class="line">    6. onmouseenter：鼠标移入事件</span><br><span class="line">    7. onmouseleave：鼠标移出事件。</span><br><span class="line">    8. onscroll：鼠标滚轮事件</span><br><span class="line"></span><br><span class="line">键盘事件：</span><br><span class="line">1.onkeydown：键盘按下事件</span><br><span class="line">2.onkeyup：键盘抬起事件</span><br><span class="line">3.onkeypress：键盘按键被按下并松开。</span><br><span class="line"></span><br><span class="line">表单事件：</span><br><span class="line">1.onblur：焦点失去事件</span><br><span class="line">2.onfocus：获取焦点事件</span><br><span class="line">3.onchange：值改变事件</span><br><span class="line">4.oninput：用户在输入事件</span><br><span class="line">5.onsubmit：用户提交事件</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">// 1.onclicke：点击事件</span><br><span class="line">// 当点击按钮，发生xxxx函数事件</span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">window</span>.<span class="property">onload</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;on&quot;</span>).<span class="property">onclick</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">            xxxxxxx</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">id</span>=<span class="string">&quot;on&quot;</span>&gt;</span>按钮<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line">// 1.onkeydown：键盘按下事件,并且输出</span><br><span class="line">window.onkeydown = function(temp)&#123;</span><br><span class="line">    console.log(`按下了 $&#123;temp.keyCode&#125;`);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">// 1.onblur：焦点失去事件</span><br><span class="line">// 当写完账号后移下密码行，出发“焦点失去”</span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">function</span> <span class="title function_">f1</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;焦点失去&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">账号：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">onblur</span>=<span class="string">&quot;f1();&quot;</span> /&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">密码：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span>  /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="模块"><a href="#模块" class="headerlink" title="模块"></a>模块</h1><p>将一个文件模块化，文件之间的引用。<br>以下例子，<code>index.html</code>导入<code>index.js</code>，<code>index.js</code>引用<code>mudole的导出</code></p><p><strong>注意：</strong><br>在导入过程中如果导入名称加 <code>&#123;&#125;</code> 表示导入的是指定文件的变量名称，或者函数名称等。<br>如果不加<code>&#123;&#125;</code> 表示导入default中的所有内容，可以理解为，将default起了一个别名</p><p>例子：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// mudole.js</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//变量</span></span><br><span class="line"><span class="keyword">let</span> a = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">let</span> b = <span class="number">20</span>;</span><br><span class="line"><span class="keyword">let</span> c = <span class="number">30</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//export：将 a 和 b变量导出</span></span><br><span class="line"><span class="keyword">export</span> &#123;a,b,c&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 导出名为info函数</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">info</span>(<span class="params"></span>)&#123;</span><br><span class="line"><span class="title function_">alert</span>(<span class="string">&quot;info函数被执行....&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 将&#123;&#125;中的内容全部导出</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span>&#123; </span><br><span class="line"><span class="attr">name</span>:<span class="string">&quot;Andy&quot;</span>,</span><br><span class="line"><span class="attr">age</span>:<span class="number">26</span>,</span><br><span class="line"><span class="title function_">e</span>(<span class="params">name</span>)&#123;</span><br><span class="line"><span class="title function_">alert</span>(<span class="string">&quot;e函数被执行:&quot;</span> + name);</span><br><span class="line">&#125;,</span><br><span class="line"><span class="title function_">getList</span>(<span class="params"></span>)&#123;</span><br><span class="line"><span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;btn&#x27;</span>).<span class="property">onclick</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;getList被触发...&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// index.js</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// import：导入</span></span><br><span class="line"><span class="keyword">import</span> &#123;a,b,c&#125; <span class="keyword">from</span> <span class="string">&quot;./mudole.js&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 导入一个叫info的函数</span></span><br><span class="line"><span class="keyword">import</span> &#123;info&#125; <span class="keyword">from</span> <span class="string">&#x27;./mudole.js&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 导入default中的所有内容,自定义别名为m</span></span><br><span class="line"><span class="keyword">import</span> m <span class="keyword">from</span> <span class="string">&#x27;./mudole.js&#x27;</span></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(b);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(c);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(m.<span class="property">name</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//函数调用并且赋值</span></span><br><span class="line">m.<span class="title function_">e</span>(<span class="string">&quot;Smith&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//调用m中的函数</span></span><br><span class="line">m.<span class="title function_">getList</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">//调用名为info的函数</span></span><br><span class="line"><span class="title function_">info</span>();</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- index.html --&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 注意，这里的type是module --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;index.js&quot;</span> <span class="attr">type</span>=<span class="string">&quot;module&quot;</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">id</span>=<span class="string">&quot;btn&quot;</span>&gt;</span>点击<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="正则表达式"><a href="#正则表达式" class="headerlink" title="正则表达式"></a>正则表达式</h1><p>如何使用？<br>例子：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> reg = <span class="keyword">new</span> <span class="title class_">RegExp</span>(这里写入表达式);</span><br><span class="line"><span class="comment">// RegExp()：正则表达式对象。提供用于匹配、检索正则表达式的函数。</span></span><br><span class="line"></span><br><span class="line">可以简写为:    <span class="regexp">/这里写入表达式/</span> . 与字符串类型;</span><br><span class="line"></span><br><span class="line">例子：</span><br><span class="line"><span class="keyword">var</span> reg = <span class="regexp">/[1234]/</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(reg.<span class="title function_">test</span>(<span class="string">&quot;567589&quot;</span>));    <span class="comment">//false</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> reg2 = <span class="keyword">new</span> <span class="title class_">RegExp</span>([<span class="number">1234</span>]);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(reg2.<span class="title function_">test</span>(<span class="string">&quot;567589&quot;</span>));    <span class="comment">//false</span></span><br></pre></td></tr></table></figure><h1 id="多选框checked（全选、不全选）"><a href="#多选框checked（全选、不全选）" class="headerlink" title="多选框checked（全选、不全选）"></a>多选框checked（全选、不全选）</h1><p>直接上demo</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">var</span> flag = <span class="number">0</span>;</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">var</span> userCode = <span class="string">&quot;&quot;</span>;</span></span><br><span class="line"><span class="language-javascript"><span class="variable language_">window</span>.<span class="property">onload</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">var</span> checks = <span class="variable language_">document</span>.<span class="title function_">getElementsByClassName</span>(<span class="string">&quot;check&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">$(<span class="string">&quot;checkAll&quot;</span>).<span class="property">onclick</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">if</span>(flag == <span class="number">0</span>)&#123;</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>;i&lt;checks.<span class="property">length</span>;i++)&#123;</span></span><br><span class="line"><span class="language-javascript">checks[i].<span class="property">checked</span> = <span class="literal">true</span>;</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript">flag = <span class="number">1</span>;</span></span><br><span class="line"><span class="language-javascript">&#125;<span class="keyword">else</span>&#123;</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>;i&lt;checks.<span class="property">length</span>;i++)&#123;</span></span><br><span class="line"><span class="language-javascript">checks[i].<span class="property">checked</span> = <span class="literal">false</span>;</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript">flag = <span class="number">0</span>;</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; checks.<span class="property">length</span>; i++)&#123;</span></span><br><span class="line"><span class="language-javascript">checks[i].<span class="property">onclick</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript"><span class="variable language_">console</span>.<span class="title function_">log</span>(checks[i].<span class="property">value</span>);</span></span><br><span class="line"><span class="language-javascript">userCode += <span class="string">`<span class="subst">$&#123;checks[i].value&#125;</span>,`</span>;</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">function</span> <span class="title function_">checkSubmit</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript"><span class="variable language_">console</span>.<span class="title function_">log</span>(userCode);</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">function</span> <span class="title function_">$</span>(<span class="params">id</span>)&#123;</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">return</span> <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(id);</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">table</span> <span class="attr">border</span>=<span class="string">&quot;1&quot;</span> <span class="attr">cellpadding</span>=<span class="string">&quot;0&quot;</span> <span class="attr">cellspacing</span>=<span class="string">&quot;0&quot;</span> <span class="attr">width</span>=<span class="string">&quot;50%&quot;</span> <span class="attr">style</span>=<span class="string">&quot;text-align: center;&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">id</span>=<span class="string">&quot;checkAll&quot;</span>/&gt;</span></span><br><span class="line">编号</span><br><span class="line"><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span>&gt;</span></span><br><span class="line">账号</span><br><span class="line"><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span>&gt;</span></span><br><span class="line">邮箱</span><br><span class="line"><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span>&gt;</span></span><br><span class="line">操作</span><br><span class="line"><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">class</span>=<span class="string">&quot;check&quot;</span> <span class="attr">value</span>=<span class="string">&quot;001&quot;</span>/&gt;</span></span><br><span class="line">001</span><br><span class="line"><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span>&gt;</span></span><br><span class="line">zhangsan</span><br><span class="line"><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span>&gt;</span></span><br><span class="line">ykdong@foxmail.com</span><br><span class="line"><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">value</span>=<span class="string">&quot;更新&quot;</span>/&gt;</span> |</span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">value</span>=<span class="string">&quot;删除&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">class</span>=<span class="string">&quot;check&quot;</span> <span class="attr">value</span>=<span class="string">&quot;002&quot;</span>/&gt;</span></span><br><span class="line">002</span><br><span class="line"><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span>&gt;</span></span><br><span class="line">zhangsan</span><br><span class="line"><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span>&gt;</span></span><br><span class="line">ykdong@foxmail.com</span><br><span class="line"><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">value</span>=<span class="string">&quot;更新&quot;</span>/&gt;</span> |</span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">value</span>=<span class="string">&quot;删除&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">class</span>=<span class="string">&quot;check&quot;</span> <span class="attr">value</span>=<span class="string">&quot;003&quot;</span>/&gt;</span></span><br><span class="line">003</span><br><span class="line"><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span>&gt;</span></span><br><span class="line">zhangsan</span><br><span class="line"><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span>&gt;</span></span><br><span class="line">ykdong@foxmail.com</span><br><span class="line"><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">value</span>=<span class="string">&quot;更新&quot;</span>/&gt;</span> |</span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">value</span>=<span class="string">&quot;删除&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">class</span>=<span class="string">&quot;check&quot;</span> <span class="attr">value</span>=<span class="string">&quot;004&quot;</span>/&gt;</span></span><br><span class="line">004</span><br><span class="line"><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span>&gt;</span></span><br><span class="line">zhangsan</span><br><span class="line"><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span>&gt;</span></span><br><span class="line">ykdong@foxmail.com</span><br><span class="line"><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">value</span>=<span class="string">&quot;更新&quot;</span>/&gt;</span> |</span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">value</span>=<span class="string">&quot;删除&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">onclick</span>=<span class="string">&quot;checkSubmit();&quot;</span>&gt;</span>提交<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 前端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HTML &amp; CSS &amp; BootStrap</title>
      <link href="/posts/ee8d.html"/>
      <url>/posts/ee8d.html</url>
      
        <content type="html"><![CDATA[<h1 id="互联网通信模型"><a href="#互联网通信模型" class="headerlink" title="互联网通信模型"></a>互联网通信模型</h1><p>定义：两台经算计通过何种类型的软件进行通信。</p><ul><li><p>C/S通信模型<br>  Client Softwore：专用客户端软件<br>  客户端软件是安装在客户端计算机的一种用于提供用户交互和发送服务器请求的一种软件，<br>  帮助用户向指定的服务器发送请求，服务端计算机得到请求之后，分析请求资源，将请求<br>  资源通过网络流返回给客户端，客户端进行解析和渲染。</p></li><li><p>特征</p><ul><li>优点<br>  有效对服务器进行很好的保护<br>  有效分摊服务器的压力，不需要去考虑高并发。</li><li>缺点<br>  用户获得服务的成本非常高。<br>  用户培养成本高，更新相对于繁琐。</li><li>代表软件<br>一般广泛用于个人娱乐市场、LOL、微信、钉钉</li></ul></li><li><p>B/S通信模型：<br>  Brower：浏览器。<br>  主流浏览器：Edge、火狐、谷歌、safari、oper</p></li><li><p>文件类型：</p><ul><li>静态资源文件<br>  事先要将文件准备好，然后部署在服务器中，当浏览器访问服务器时，服务器解析用户请求资源路径，然后返回指定静态文件。</li><li>动态资源文件<br>  动态生成的文件，其中文件中的数据是需要计算机语言经过编译和计算之后得到的，然后将文件返回。</li></ul></li><li><p>特征</p><ul><li>适用场景<br>  既可以在个人娱乐市场也可以广泛运用到企业级应用。</li><li>优点<br>  不会增加用户获得服务的成本<br>  维护特别方便</li><li>缺点<br>  不安全。<br>  需要考虑高并发。</li></ul></li></ul><h1 id="HTML"><a href="#HTML" class="headerlink" title="HTML"></a>HTML</h1><p>全称：HyperText Markup Language</p><h2 id="标签的分类"><a href="#标签的分类" class="headerlink" title="标签的分类"></a>标签的分类</h2><p>标签分为：</p><ol><li><p>块级标签<br> 独占一行<br> 如<code>h1-h6</code></p></li><li><p>行内标签<br> 可以在同一行显示<br> 如<code>span</code></p></li><li><p>单标记<br> 标记没有结束标记<br> 如<code>hr</code></p></li><li><p>双标记<br> 标记有结束标记<br> 如<code>a</code></p></li></ol><blockquote><p>基本文件结构</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 设置网页的字符集编码 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span> /&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 设置网页的关键字 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;keywords&quot;</span> <span class="attr">content</span>=<span class="string">&quot;HTML+CSS前端零基础入门&quot;</span>/&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 设置网页的描述 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;description&quot;</span> <span class="attr">content</span>=<span class="string">&quot;此网站为您提供HTML+CSS前端自学，以及视频、图文教程...&quot;</span> /&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 每三秒钟自动刷新一次 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- &lt;meta http-equiv=&quot;refresh&quot; content=&quot;3&quot;/&gt; --&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 设置3秒钟后自动跳转 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- &lt;meta http-equiv=&quot;refresh&quot; content=&quot;3;url=&#x27;https://www.oschina.net&#x27;&quot;/&gt; --&gt;</span></span><br><span class="line">        </span><br><span class="line"><span class="comment">&lt;!-- 这是icon图 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;shortcut icon&quot;</span> <span class="attr">type</span>=<span class="string">&quot;image/x-icon&quot;</span> <span class="attr">href</span>=<span class="string">&quot;https://static.oschina.net/new-osc/img/favicon.ico&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 设置网页标题 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>我的第一个网页<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h1</span>&gt;</span></span><br><span class="line">            标题标签</span><br><span class="line">        <span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">            段落标签</span><br><span class="line">        <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br><span class="line"></span><br><span class="line">说明：</span><br><span class="line">1.html</span><br><span class="line">必须要有，他是根标记。</span><br><span class="line">2.head</span><br><span class="line">网页的头部资源。【网页元数据】，其中标签的内容是影响整个网页的。</span><br><span class="line">1.网页的标题</span><br><span class="line">2.网页的字符编码</span><br><span class="line">3.网页的关键字和网页的描述以及作者</span><br><span class="line">4.网页的刷新时间。</span><br><span class="line">等等。</span><br><span class="line">3.body</span><br><span class="line">网页中所有可以显示在页面的都在body中设置。</span><br><span class="line"></span><br><span class="line">注意：</span><br><span class="line">浏览器对于HTML标签的解析是没有报错的。</span><br><span class="line">浏览器解析时，遇到不认识标签，会将标签中的内容，以正常内容显示。</span><br></pre></td></tr></table></figure><h2 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h2><ol><li>链接是可以从一个页面跳转到另一个页面实现页面直接的导航。</li><li>提交服务器，产生服务器事件。</li><li>触发网页本地事件。</li><li>发送email</li><li>做锚点【同一网页的链接】</li><li>图片链接</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">语法：</span><br><span class="line">&lt;a&gt;  &lt;/a&gt;</span><br><span class="line">href=<span class="string">&quot;url&quot;</span></span><br><span class="line">    比如:&lt;a href=<span class="string">&quot;../index.html&quot;</span>&gt;链接到index.html&lt;/a&gt;</span><br><span class="line">    ../：上一级目录</span><br><span class="line"></span><br><span class="line">target：在哪里打开新的页面</span><br><span class="line">    _self：在当前窗口打开【默认】</span><br><span class="line">    _blank：在新窗口打开</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 1. 在当前窗口打开百度。 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;https://www.baidu.com&quot;</span> <span class="attr">target</span>=<span class="string">&quot;_self&quot;</span>&gt;</span>百度<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 2.提交服务器，产生服务器事件。 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;stuListlimit.action?stuCode=dfjsakf-2323-jkjfk&amp;name=张三&quot;</span>&gt;</span>删除<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 3.触发网页本地事件。 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- javascript:; ：告诉链接，此链接是一个功能性链接。 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;javascript:;&quot;</span> <span class="attr">onclick</span>=<span class="string">&quot;alert(&#x27;你点击我干嘛？&#x27;)&quot;</span>&gt;</span>点击<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 4.发送email --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;mailto:ykdong@foxmail.com&quot;</span>&gt;</span>联系我们<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 5.做锚点【同一网页的链接】 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">name</span>=<span class="string">&quot;top&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&quot;height: 20000px;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span>    //此处作用：将页面撑大</span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#top&quot;</span>&gt;</span>回到顶端<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 6.图片链接 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;../index.html&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;../img/0.jpg&quot;</span> &gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="图片标签"><a href="#图片标签" class="headerlink" title="图片标签"></a>图片标签</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">语法：</span><br><span class="line">&lt;img /&gt;</span><br><span class="line">属性：</span><br><span class="line">src：图片的地址【任意】</span><br><span class="line">title：图片的标题</span><br><span class="line">alt：图片加载失败的描述</span><br><span class="line">width：宽度</span><br><span class="line">height：高度</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">例子：</span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;https://pengyirui.gitee.io/img/avatar.png&quot;</span> <span class="attr">title</span>=<span class="string">&quot;这是我的头像&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;葫芦&quot;</span> <span class="attr">width</span>=<span class="string">&quot;500px&quot;</span> <span class="attr">height</span>=<span class="string">&quot;500px&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure><h2 id="表格"><a href="#表格" class="headerlink" title="表格"></a>表格</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">基本表格：</span><br><span class="line">语法：</span><br><span class="line">&lt;table&gt;：表格</span><br><span class="line">&lt;caption&gt;&lt;/caption&gt; 表格的标题</span><br><span class="line">&lt;<span class="built_in">tr</span>&gt;：行</span><br><span class="line">&lt;td&gt;&lt;/td&gt;：列</span><br><span class="line">&lt;td&gt;&lt;/td&gt;</span><br><span class="line">&lt;td&gt;&lt;/td&gt;</span><br><span class="line">&lt;/tr&gt;</span><br><span class="line">&lt;/table&gt;</span><br><span class="line"></span><br><span class="line">属性：</span><br><span class="line">border：表格的边框</span><br><span class="line">width：% px</span><br><span class="line">cellpadding：数据与单元格之间的距离</span><br><span class="line">cellspacing：单元格与单元格之间的距离</span><br><span class="line">rowspan：合并单元格【合并行】</span><br><span class="line">colspan：合并单元格【合并列】</span><br><span class="line">    align=<span class="string">&quot;center&quot;</span> 设置居中</span><br><span class="line"></span><br><span class="line">高级标签（少用）</span><br><span class="line">语法：</span><br><span class="line">&lt;table&gt;</span><br><span class="line">&lt;thead&gt;</span><br><span class="line">&lt;th&gt;&lt;th&gt;</span><br><span class="line">&lt;/thead&gt;</span><br><span class="line">&lt;tbody&gt;</span><br><span class="line">&lt;<span class="built_in">tr</span>&gt;</span><br><span class="line">&lt;td&gt;&lt;/td&gt;</span><br><span class="line">&lt;/tr&gt;</span><br><span class="line">&lt;/tbody&gt;</span><br><span class="line">&lt;tfoot&gt;</span><br><span class="line">&lt;<span class="built_in">tr</span>&gt;</span><br><span class="line">&lt;td&gt;&lt;/td&gt;</span><br><span class="line">&lt;/tr&gt;</span><br><span class="line">&lt;/tfoot&gt;</span><br><span class="line">&lt;/table&gt;</span><br><span class="line">注意：</span><br><span class="line">&lt;thead&gt;和&lt;tfoot&gt;：只能出现一次</span><br><span class="line">&lt;tbody&gt;：可以出现多次</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">table</span> <span class="attr">border</span>=<span class="string">&quot;1&quot;</span> <span class="attr">width</span>=<span class="string">&quot;50%&quot;</span> <span class="attr">cellpadding</span>=<span class="string">&quot;0&quot;</span> <span class="attr">cellspacing</span>=<span class="string">&quot;0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">caption</span>&gt;</span>学生管理系统<span class="tag">&lt;/<span class="name">caption</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>姓名<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>年龄<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>性别<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>身份证号码<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>生日<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>班级<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>操作<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>阿克尚<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>20<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>男<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>3420524852252<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>2019-01-01<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>开发班<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="symbol">&amp;nbsp;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;xxx.php?stuCode=3420524852252&quot;</span> <span class="attr">onclick</span>=<span class="string">&quot;return confirm(&#x27;确定删除吗？&#x27;)&quot;</span>&gt;</span>删除<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">            <span class="symbol">&amp;nbsp;</span>|<span class="symbol">&amp;nbsp;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>更新<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>蒙多<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>22<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>男<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>48915218415<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>2021-09-09<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>开发班<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="symbol">&amp;nbsp;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span> <span class="attr">onclick</span>=<span class="string">&quot;confirm(&#x27;确定删除吗？&#x27;)&quot;</span>&gt;</span>删除<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">            <span class="symbol">&amp;nbsp;</span>|<span class="symbol">&amp;nbsp;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>更新<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="表单"><a href="#表单" class="headerlink" title="表单"></a>表单</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line">用于与用户进行交互，收集用户数据信息。</span><br><span class="line">标签：</span><br><span class="line">1.&lt;form&gt;</span><br><span class="line">属性：</span><br><span class="line">action：服务器的提交地址</span><br><span class="line">method：服务器提交方式 getpost</span><br><span class="line">enctype：文件提交类型</span><br><span class="line"></span><br><span class="line">2.&lt;input /&gt;</span><br><span class="line">属性：</span><br><span class="line">1.<span class="built_in">type</span>：</span><br><span class="line">取值：</span><br><span class="line">1.text：文本框【默认】</span><br><span class="line">2.password：密码框</span><br><span class="line">3.radio：单选</span><br><span class="line">4.checkbox：多选</span><br><span class="line">5.file：文件上传</span><br><span class="line">6.hidden：隐藏域</span><br><span class="line">7.reset：重置</span><br><span class="line">8.submit：提交</span><br><span class="line">9.button：普通按钮</span><br><span class="line"></span><br><span class="line">--HTML5提供【了解】</span><br><span class="line">1.tel：不支持PC端，只支持移动端</span><br><span class="line">2.email：邮件验证</span><br><span class="line">3.color：颜色拾取器</span><br><span class="line">4.number：数字选取</span><br><span class="line">5.<span class="built_in">date</span>：日期插件</span><br><span class="line">6.datetime：日期插件</span><br><span class="line">7.range：数字选择器</span><br><span class="line"></span><br><span class="line">2.placeholder：提示信息</span><br><span class="line">3.maxlength：最大填写字符量</span><br><span class="line">4.value：设置当前输入框的默认值</span><br><span class="line">5.disabled：数据限制，不可修改和提交，只能看</span><br><span class="line">6.<span class="built_in">readonly</span>：数据限制，不可修改。</span><br><span class="line">7.pattern：数据校验</span><br><span class="line">8.checked：单选与多选的默认选择</span><br><span class="line">9.name：设置与后台服务器交互时服务器获取的哪一个标签的值。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">3.&lt;select&gt;</span><br><span class="line">下拉列表</span><br><span class="line">属性：</span><br><span class="line">name：选取的具体数据</span><br><span class="line">&lt;option&gt;</span><br><span class="line">属性：</span><br><span class="line">value：用户选择的数据的具体值</span><br><span class="line">selected：默认选中</span><br><span class="line">4.&lt;textarea&gt;</span><br><span class="line">多行文本</span><br><span class="line">rows：行数</span><br><span class="line">cols：列数</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;xxx.php&quot;</span> <span class="attr">method</span>=<span class="string">&quot;#&quot;</span> <span class="attr">enctype</span>=<span class="string">&quot;multipart/form-data&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;hidden&quot;</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;f4d60ddb-2fe2-425b-994e-ed9f95b12d70&quot;</span>/&gt;</span></span><br><span class="line">    账号：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;请输入用户名&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;请输入用户名&quot;</span> <span class="attr">required</span> <span class="attr">maxlength</span>=<span class="string">&quot;8&quot;</span> <span class="attr">value</span>=<span class="string">&quot;ykdong@foxmail.com&quot;</span> <span class="attr">pattern</span>=<span class="string">&quot;\d&#123;6&#125;&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span>&gt;</span>账号最小6个，最多8个<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">br</span>&gt;</span></span><br><span class="line">    密码：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;password&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;请输入密码&quot;</span>/&gt;</span><span class="tag">&lt;/<span class="name">br</span>&gt;</span></span><br><span class="line">    性别：</span><br><span class="line">    男<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">name</span>=<span class="string">&quot;sex&quot;</span> <span class="attr">checked</span> <span class="attr">value</span>=<span class="string">&quot;male&quot;</span>/&gt;</span></span><br><span class="line">    女<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">name</span>=<span class="string">&quot;sex&quot;</span> <span class="attr">value</span>=<span class="string">&quot;female&quot;</span>/&gt;</span></span><br><span class="line">    保密<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">name</span>=<span class="string">&quot;sex&quot;</span> <span class="attr">value</span>=<span class="string">&quot;secret&quot;</span>/&gt;</span><span class="tag">&lt;/<span class="name">br</span>&gt;</span></span><br><span class="line">    爱好：</span><br><span class="line">    看书<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">name</span>=<span class="string">&quot;book&quot;</span> <span class="attr">value</span>=<span class="string">&quot;看书&quot;</span> <span class="attr">checked</span>/&gt;</span></span><br><span class="line">    工作<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">name</span>=<span class="string">&quot;work&quot;</span> <span class="attr">value</span>=<span class="string">&quot;工作&quot;</span>/&gt;</span></span><br><span class="line">    健身<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">checked</span> <span class="attr">disabled</span> <span class="attr">value</span>=<span class="string">&quot;sport&quot;</span>/&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">    出生日期：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;date&quot;</span> /&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">    联系方式：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;tel&quot;</span> /&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">    权限：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;number&quot;</span> <span class="attr">min</span>=<span class="string">&quot;2&quot;</span>  <span class="attr">max</span>=<span class="string">&quot;10&quot;</span> <span class="attr">step</span>=<span class="string">&quot;2&quot;</span> <span class="attr">start</span>=<span class="string">&quot;2&quot;</span>/&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">    颜色：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;color&quot;</span> /&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">    email:<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;email&quot;</span> /&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;image&quot;</span> <span class="attr">src</span>=<span class="string">&#x27;https://pengyirui.gitee.io/img/avatar.png&#x27;</span>&quot; /&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;range&quot;</span> <span class="attr">min</span>=<span class="string">&quot;10&quot;</span> <span class="attr">max</span>=<span class="string">&quot;20&quot;</span>/&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    学历：</span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">name</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span> =<span class="string">&quot;&quot;</span>&gt;</span>--请选择--<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span> =<span class="string">&quot;&quot;</span>&gt;</span>胎教<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span> =<span class="string">&quot;&quot;</span> <span class="attr">selected</span>&gt;</span>幼儿园<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span> =<span class="string">&quot;&quot;</span>&gt;</span>学前班<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span> =<span class="string">&quot;&quot;</span>&gt;</span>小学<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span> =<span class="string">&quot;&quot;</span>&gt;</span>初中<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span> =<span class="string">&quot;&quot;</span>&gt;</span>高中<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span> =<span class="string">&quot;&quot;</span>&gt;</span>大学<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span> =<span class="string">&quot;&quot;</span>&gt;</span>研究生<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span> =<span class="string">&quot;&quot;</span>&gt;</span>博士<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span> =<span class="string">&quot;&quot;</span>&gt;</span>博士后<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">    头像：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;file&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">    自我介绍：<span class="tag">&lt;<span class="name">textarea</span> <span class="attr">rows</span>=<span class="string">&quot;8&quot;</span> <span class="attr">cols</span>=<span class="string">&quot;100&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">textarea</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;reset&quot;</span> <span class="attr">value</span>=<span class="string">&quot;重置&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;提交&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">value</span>=<span class="string">&quot;点击&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">无序列表【使用率较高】</span><br><span class="line">语法：</span><br><span class="line">&lt;ul&gt;</span><br><span class="line">&lt;li&gt;&lt;/li&gt;</span><br><span class="line">&lt;/ul&gt;</span><br><span class="line">有序列表</span><br><span class="line">&lt;ol&gt;</span><br><span class="line">&lt;li&gt;&lt;/li&gt;</span><br><span class="line">&lt;/ol&gt;</span><br><span class="line"></span><br><span class="line">定义列表【极少用到】</span><br><span class="line">&lt;dl&gt;</span><br><span class="line">&lt;dt&gt;&lt;/dt&gt;</span><br><span class="line">&lt;<span class="built_in">dd</span>&gt;&lt;/dd&gt;</span><br><span class="line">&lt;/dl&gt;</span><br></pre></td></tr></table></figure><h2 id="内嵌框架"><a href="#内嵌框架" class="headerlink" title="内嵌框架"></a>内嵌框架</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">专门用于将众多的.html文件整合在一个文件中，形成一个网页效果。</span><br><span class="line">语法：</span><br><span class="line">&lt;iframe&gt;&lt;/iframe&gt;</span><br><span class="line">属性：</span><br><span class="line">src：要嵌入到网页的文件路径</span><br><span class="line">width：宽度</span><br><span class="line">height：高度</span><br><span class="line">frameborder：边框</span><br><span class="line">scrolling：鼠标滚轮 取值：no</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 把left.html引入到此处 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">iframe</span> <span class="attr">src</span>=<span class="string">&quot;left.html&quot;</span> <span class="attr">width</span>=<span class="string">&quot;100px&quot;</span> <span class="attr">scrolling</span>=<span class="string">&quot;no&quot;</span> <span class="attr">height</span>=<span class="string">&quot;800px&quot;</span> <span class="attr">frameborder</span>=<span class="string">&quot;0&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">iframe</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="文本标签"><a href="#文本标签" class="headerlink" title="文本标签"></a>文本标签</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">h1-h6:标题标签  块级标签</span><br><span class="line">p：段落    块级标签</span><br><span class="line">span:文本内容   行内标签</span><br><span class="line">sub:下标</span><br><span class="line">sup:上标</span><br><span class="line">del：删除线</span><br><span class="line"></span><br><span class="line">i：斜体</span><br><span class="line">b：加粗</span><br><span class="line">strong：加粗</span><br><span class="line">ins：下划线</span><br><span class="line">small：小字体</span><br><span class="line">big：大字体</span><br><span class="line">bdo：文本方向</span><br><span class="line">abbr：文本描述</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>标题标签，块级标记<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>你<span class="tag">&lt;/<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">p</span>&gt;</span>好<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">Iphone13 pro max 不要<span class="tag">&lt;<span class="name">del</span>&gt;</span>8888<span class="tag">&lt;/<span class="name">del</span>&gt;</span> 也不要<span class="tag">&lt;<span class="name">del</span>&gt;</span>888<span class="tag">&lt;/<span class="name">del</span>&gt;</span> 只需要<span class="tag">&lt;<span class="name">span</span> <span class="attr">style</span>=<span class="string">&quot;color: red; font-size: 34px; font-weight: bold;&quot;</span>&gt;</span>98元<span class="tag">&lt;/<span class="name">span</span>&gt;</span>，就可以带回家</span><br><span class="line"><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">水的分子表达式是：H<span class="tag">&lt;<span class="name">sub</span>&gt;</span>2<span class="tag">&lt;/<span class="name">sub</span>&gt;</span>O<span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">2的3次方等于:2<span class="tag">&lt;<span class="name">sup</span>&gt;</span>3<span class="tag">&lt;/<span class="name">sup</span>&gt;</span>=8</span><br><span class="line"><span class="tag">&lt;<span class="name">hr</span>/&gt;</span></span><br><span class="line">welcome <span class="tag">&lt;<span class="name">i</span>&gt;</span>to<span class="tag">&lt;/<span class="name">i</span>&gt;</span> GuangZhou...<span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">welcome <span class="tag">&lt;<span class="name">span</span> <span class="attr">style</span>=<span class="string">&quot;font-style: italic;&quot;</span>&gt;</span>to<span class="tag">&lt;/<span class="name">span</span>&gt;</span> GuangZhou...<span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">welcome <span class="tag">&lt;<span class="name">b</span>&gt;</span>to<span class="tag">&lt;/<span class="name">b</span>&gt;</span> GuangZhou...<span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">welcome <span class="tag">&lt;<span class="name">span</span> <span class="attr">style</span>=<span class="string">&quot;font-weight:bold ;&quot;</span>&gt;</span>to<span class="tag">&lt;/<span class="name">span</span>&gt;</span> GuangZhou...<span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">welcome <span class="tag">&lt;<span class="name">strong</span>&gt;</span>to<span class="tag">&lt;/<span class="name">strong</span>&gt;</span> GuangZhou...<span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">ins</span>&gt;</span>下划线<span class="tag">&lt;/<span class="name">ins</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">style</span>=<span class="string">&quot;text-decoration: underline&quot;</span>&gt;</span>下划线<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">small</span>&gt;</span>小小小<span class="tag">&lt;/<span class="name">small</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">big</span>&gt;</span>大大大<span class="tag">&lt;/<span class="name">big</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bdo</span> <span class="attr">dir</span>=<span class="string">&quot;rtl&quot;</span>&gt;</span>welcome to china<span class="tag">&lt;/<span class="name">bdo</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">abbr</span> <span class="attr">title</span>=<span class="string">&quot;这里的文字可以隐藏&quot;</span>&gt;</span>这段文字的背后你看不见<span class="tag">&lt;/<span class="name">abbr</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="多媒体"><a href="#多媒体" class="headerlink" title="多媒体"></a>多媒体</h2><p>用于加载视频、声音文件的标签。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 视频</span></span><br><span class="line">&lt;video&gt;&lt;/video&gt;</span><br><span class="line">属性：</span><br><span class="line">autoplay：自动播放</span><br><span class="line">controls：控制台</span><br><span class="line">loop：循环播放</span><br><span class="line"></span><br><span class="line"><span class="comment"># 声音</span></span><br><span class="line">&lt;audio&gt;&lt;/audio&gt;</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">video</span> <span class="attr">src</span>=<span class="string">&quot;../video/movie.mp4&quot;</span> <span class="attr">width</span>=<span class="string">&quot;320&quot;</span> <span class="attr">height</span>=<span class="string">&quot;240&quot;</span> <span class="attr">controls</span> <span class="attr">autoplay</span>  <span class="attr">loop</span>&gt;</span><span class="tag">&lt;/<span class="name">video</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="了解"><a href="#了解" class="headerlink" title="了解"></a>了解</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 文章、段落标签 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">article</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">header</span>&gt;</span>标题<span class="tag">&lt;/<span class="name">header</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">section</span>&gt;</span></span><br><span class="line">        第一段</span><br><span class="line">    <span class="tag">&lt;/<span class="name">section</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">section</span>&gt;</span></span><br><span class="line">        第二段</span><br><span class="line">    <span class="tag">&lt;/<span class="name">section</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">footer</span>&gt;</span>脚注<span class="tag">&lt;/<span class="name">footer</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">article</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">hr</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 图片结构标签 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">figure</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">figcaption</span>&gt;</span>Logo标识<span class="tag">&lt;/<span class="name">figcaption</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;../img/0.jpg&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">figure</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">hr</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 导航结构标签 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">nav</span> <span class="attr">style</span>=<span class="string">&quot;width: 100px;height: 200px; border: 1px solid red; margin-left: 200px;&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>网页<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>资讯<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>视频<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>贴吧<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>音乐<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>游戏<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">nav</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 语义化标签： --&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- mark：重点突出的内容 --&gt;</span></span><br><span class="line">welcome <span class="tag">&lt;<span class="name">mark</span>&gt;</span>to<span class="tag">&lt;/<span class="name">mark</span>&gt;</span> HTML</span><br><span class="line"><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- time：时间搜索标签 --&gt;</span></span><br><span class="line">我在<span class="tag">&lt;<span class="name">time</span> <span class="attr">datetime</span>=<span class="string">&quot;2019-2-14&quot;</span>&gt;</span>情人节<span class="tag">&lt;/<span class="name">time</span>&gt;</span>有个约会</span><br><span class="line"><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- details和summary --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 会有个小三角折叠 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">details</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">summary</span>&gt;</span>HTML简介<span class="tag">&lt;/<span class="name">summary</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>HTML是一门超文本标记语言<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>HTML可以包含文本、视频、音频、图片、文字等等数据。<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">details</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">hr</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- meter：计数仪，标识度量单位 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meter</span> <span class="attr">max</span>=<span class="string">&quot;100&quot;</span> <span class="attr">min</span>=<span class="string">&quot;1&quot;</span> <span class="attr">value</span>=<span class="string">&quot;12&quot;</span> <span class="attr">high</span>=<span class="string">&quot;41&quot;</span> <span class="attr">low</span>=<span class="string">&quot;20&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">meter</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">hr</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- progress：进度条 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">progress</span> <span class="attr">value</span>=<span class="string">&quot;60&quot;</span> <span class="attr">max</span>=<span class="string">&quot;100&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">progress</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="CSS"><a href="#CSS" class="headerlink" title="CSS"></a>CSS</h1><p>全称：cascading style sheets<br>如果把html比作一个人，那css就是人的衣服</p><p>由选择器、属性、属性值组成</p><ul><li>选择器：<br>  选择器是用来定义CSS样式名称，每种选择器都有各自的写法。</li><li>属性：<br>  修改网页中元素样式的根本。</li><li>属性值：<br>  所有属性都需要一个或者多个属性来确定标签在修改样式中的表现。</li></ul><h2 id="引入CSS的方式"><a href="#引入CSS的方式" class="headerlink" title="引入CSS的方式"></a>引入CSS的方式</h2><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">在页面中引入CSS样式有<span class="number">3</span>中方式：</span><br><span class="line"><span class="comment">/* 1.内部样式（html中） */</span></span><br><span class="line">&lt;style type=&quot;text/css&quot;&gt;</span><br><span class="line">        <span class="selector-tag">p</span>&#123;</span><br><span class="line">            <span class="attribute">color</span>: red;</span><br><span class="line">        &#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 2.内联样式（html文件的标签中） */</span></span><br><span class="line">&lt;<span class="selector-tag">body</span> style=&quot;<span class="attribute">background-color</span>: <span class="number">#ccc</span>;&quot;&gt;</span><br><span class="line">&lt;<span class="selector-tag">p</span>&gt;你好CSS&lt;/<span class="selector-tag">p</span>&gt;</span><br><span class="line">&lt;<span class="selector-tag">span</span>&gt;账号可以使用&lt;/<span class="selector-tag">span</span>&gt;</span><br><span class="line">&lt;<span class="selector-tag">span</span>&gt;账号不可以使用&lt;/<span class="selector-tag">span</span>&gt;</span><br><span class="line">&lt;/<span class="selector-tag">body</span>&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 3.外部引入样式（把css文件引入到html中）*/</span></span><br><span class="line">&lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;../css/oa_regist_style<span class="selector-class">.css</span>&quot;/&gt;</span><br></pre></td></tr></table></figure><h2 id="选择器"><a href="#选择器" class="headerlink" title="选择器"></a>选择器</h2><ul><li>概念<br>  在对网页中的元素进行样式修改的时候，首先要找到要修改的标签，CSS选择器就是用来寻找指定的标签的。<br>  用于过滤网页中相同名称或者相同位置的标签。</li></ul><h3 id="选择器的分类"><a href="#选择器的分类" class="headerlink" title="选择器的分类"></a>选择器的分类</h3><ol><li>基本选择器<ul><li>元素选择器</li><li>id选择器</li><li>类选择器</li></ul></li><li>属性选择器</li><li>层次选择器、后代选择器</li><li>派生/分组/集体选择器</li><li>伪类选择器</li></ol><h4 id="元素选择器"><a href="#元素选择器" class="headerlink" title="元素选择器"></a>元素选择器</h4><p>使用HTML标签作为选择器的名称。<br>例如：div{}就是用来选取整个网页中的div标签</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 例：p标签的字体为红字，ul采用默认风格，链接取消下划线。 */</span></span><br><span class="line"><span class="selector-tag">p</span>&#123;</span><br><span class="line"><span class="attribute">color</span>: red;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">ul</span>&#123;</span><br><span class="line"><span class="attribute">list-style</span>: none;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">a</span>&#123;</span><br><span class="line"><span class="attribute">text-decoration</span>: none;</span><br><span class="line"><span class="attribute">color</span>: black;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="id选择器"><a href="#id选择器" class="headerlink" title="id选择器"></a>id选择器</h4><p>通过给标签设置一个ID来选择唯一的标签。<br>建议：id唯一</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 语法：</span></span><br><span class="line"><span class="comment">#id&#123;</span></span><br><span class="line"><span class="comment">属性：属性值;</span></span><br><span class="line"><span class="comment">&#125; */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 例子：将id为s1的文字修改颜色 */</span></span><br><span class="line"><span class="comment">/* css */</span></span><br><span class="line">&lt;style type=&quot;text/css&quot;&gt;</span><br><span class="line"><span class="selector-id">#s1</span>&#123;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#008000</span>;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* html */</span></span><br><span class="line">&lt;<span class="selector-tag">body</span>&gt;</span><br><span class="line">&lt;<span class="selector-tag">span</span> id=&quot;s1&quot;&gt;welcome <span class="selector-tag">to</span> china&lt;/<span class="selector-tag">span</span>&gt;</span><br><span class="line">&lt;/<span class="selector-tag">body</span>&gt;</span><br></pre></td></tr></table></figure><h4 id="类选择器"><a href="#类选择器" class="headerlink" title="类选择器"></a>类选择器</h4><p>有些元素的元素名不相同，但是拥有相同的样式，<br>我们就可以使用类选择器进行样式的设置。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">语法：</span><br><span class="line"><span class="selector-class">.class</span>&#123;</span><br><span class="line">属性:属性值;        </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 例子：将class为c1的字体修改为18个像素 */</span></span><br><span class="line"><span class="comment">/* css */</span></span><br><span class="line">&lt;style type=&quot;text/css&quot;&gt;</span><br><span class="line">    <span class="selector-class">.c1</span>&#123;</span><br><span class="line">        <span class="attribute">font-size</span>: <span class="number">18px</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* html */</span></span><br><span class="line">&lt;<span class="selector-tag">body</span>&gt;</span><br><span class="line">    &lt;<span class="selector-tag">p</span> class=&quot;c1&quot;&gt;《关于讨论双减政策下，大学生家教是否可行》&lt;/<span class="selector-tag">p</span>&gt;</span><br><span class="line">    &lt;<span class="selector-tag">span</span> class=&quot;c1&quot;&gt;没有教师资格证的学生，不允许私下家教&lt;/<span class="selector-tag">span</span>&gt;</span><br><span class="line">&lt;/<span class="selector-tag">body</span>&gt;</span><br></pre></td></tr></table></figure><h3 id="属性选择器"><a href="#属性选择器" class="headerlink" title="属性选择器"></a>属性选择器</h3><ul><li>可以根据元素怒的属性和属性值来原则元素</li></ul><ol><li><p>根据指定的属性名来找元素</p> <figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">语法：</span><br><span class="line">元素名<span class="selector-attr">[属性名]</span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 例子： */</span></span><br><span class="line">&lt;style type=&quot;text/css&quot;&gt;</span><br><span class="line">    <span class="selector-tag">p</span><span class="selector-attr">[hello]</span>&#123;</span><br><span class="line">        <span class="attribute">color</span>: <span class="number">#FF0000</span>;</span><br><span class="line">        <span class="attribute">font-size</span>: <span class="number">18px</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line"></span><br><span class="line">&lt;<span class="selector-tag">body</span>&gt;</span><br><span class="line">    &lt;<span class="selector-tag">p</span> hello=&quot;happy&quot;&gt;自定义属性的元素&lt;/<span class="selector-tag">p</span>&gt;</span><br><span class="line">    &lt;<span class="selector-tag">p</span> world=&quot;happy&quot;&gt;普通的<span class="selector-tag">p</span>元素&lt;/<span class="selector-tag">p</span>&gt;</span><br><span class="line">&lt;/<span class="selector-tag">body</span>&gt;</span><br></pre></td></tr></table></figure></li><li><p>根据指定属性和属性值来找元素</p> <figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">语法：</span><br><span class="line">元素名<span class="selector-attr">[属性名=<span class="string">&quot;属性值&quot;</span>]</span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 例子 */</span></span><br><span class="line">&lt;style type=&quot;text/css&quot;&gt;</span><br><span class="line">    <span class="selector-tag">p</span><span class="selector-attr">[hello=<span class="string">&quot;self&quot;</span>]</span>&#123;</span><br><span class="line">        <span class="attribute">color</span>: <span class="number">#FF0000</span>;</span><br><span class="line">        <span class="attribute">font-size</span>: <span class="number">18px</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="selector-tag">p</span><span class="selector-attr">[hello=<span class="string">&quot;happy&quot;</span>]</span>&#123;</span><br><span class="line">        <span class="attribute">text-decoration</span>: underline;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;<span class="selector-tag">body</span>&gt;</span><br><span class="line">        &lt;<span class="selector-tag">p</span> hello=&quot;self&quot;&gt;自定义属性的元素&lt;/<span class="selector-tag">p</span>&gt;</span><br><span class="line">        &lt;<span class="selector-tag">p</span> hello=&quot;happy&quot;&gt;值为happy&lt;/<span class="selector-tag">p</span>&gt;</span><br><span class="line">&lt;/<span class="selector-tag">body</span>&gt;</span><br></pre></td></tr></table></figure></li><li><p>根据属性值中包含指定的词汇查找元素【类似模糊匹配】<br> <code>注意！</code>匹配的不是字符，而是词汇，词汇之间是以<code>空格</code>分开。</p> <figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;style type=&quot;text/css&quot;&gt;</span><br><span class="line">    <span class="selector-tag">p</span><span class="selector-attr">[title~=s]</span>&#123;</span><br><span class="line">        <span class="attribute">color</span>: <span class="number">#008000</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line"></span><br><span class="line">&lt;<span class="selector-tag">body</span>&gt;</span><br><span class="line">    &lt;<span class="selector-tag">p</span> title=&quot;dongyukun handsome s&quot;&gt;帅气的<span class="selector-tag">p</span>标签&lt;/<span class="selector-tag">p</span>&gt;</span><br><span class="line">&lt;/<span class="selector-tag">body</span>&gt;</span><br></pre></td></tr></table></figure></li><li><p>根据属性值中包含指定的词汇开头的元素【开头精确匹配】<br> <code>注意！</code>匹配的是开头的单词，多个单词之间用<code> &quot;-&quot;</code> 分开。</p> <figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;style type=&quot;text/css&quot;&gt;</span><br><span class="line">    <span class="selector-tag">p</span><span class="selector-attr">[hello|=d]</span>&#123;</span><br><span class="line">            <span class="attribute">color</span>: <span class="number">#FF0000</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line">&lt;<span class="selector-tag">body</span>&gt;</span><br><span class="line">    &lt;<span class="selector-tag">p</span> hello=&quot;d-dongyk-happy&quot;&gt;我是<span class="selector-tag">p</span>标签的内容&lt;/<span class="selector-tag">p</span>&gt;</span><br><span class="line">&lt;/<span class="selector-tag">body</span>&gt;</span><br></pre></td></tr></table></figure></li><li><p>根据属性值中包含指定的词汇开头的元素【开头模糊匹配】<br> 注意！匹配的是<code>开头的字符</code>。</p> <figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;style type=&quot;text/css&quot;&gt;</span><br><span class="line">    <span class="selector-tag">p</span><span class="selector-attr">[hello ^= a]</span>&#123;</span><br><span class="line">            <span class="attribute">color</span>: <span class="number">#FF0000</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line"></span><br><span class="line">&lt;<span class="selector-tag">body</span>&gt;</span><br><span class="line">    &lt;<span class="selector-tag">p</span> hello=&quot;a_bc&quot;&gt;我是<span class="selector-tag">p</span>标签的内容&lt;/<span class="selector-tag">p</span>&gt;</span><br><span class="line">&lt;/<span class="selector-tag">body</span>&gt;</span><br></pre></td></tr></table></figure></li><li><p>按照指定字符结尾的元素<br> 注意！匹配的是<code>结尾的字符</code></p> <figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;style type=&quot;text/css&quot;&gt;</span><br><span class="line">    <span class="selector-tag">p</span><span class="selector-attr">[class $= test]</span>&#123;</span><br><span class="line">        <span class="attribute">color</span>: red;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line"></span><br><span class="line">&lt;<span class="selector-tag">body</span>&gt;</span><br><span class="line">    &lt;<span class="selector-tag">p</span> class=&quot;firstedtest&quot;&gt;普通的<span class="selector-tag">p</span>元素&lt;/<span class="selector-tag">p</span>&gt;</span><br><span class="line">&lt;/<span class="selector-tag">body</span>&gt;</span><br></pre></td></tr></table></figure></li><li><p>匹配属性值中包含指定值的元素<br>注意！在属性值中全局匹配<code>指定的值</code>。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;style type=&quot;text/css&quot;&gt;</span><br><span class="line">    <span class="selector-tag">p</span><span class="selector-attr">[class *= t]</span>&#123;</span><br><span class="line">        <span class="attribute">color</span>: red;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 以下全匹配 */</span></span><br><span class="line">&lt;<span class="selector-tag">body</span>&gt;</span><br><span class="line">    &lt;<span class="selector-tag">p</span> class=&quot;firsttestabcfa&quot;&gt;第一个<span class="selector-tag">p</span>元素&lt;/<span class="selector-tag">p</span>&gt;</span><br><span class="line">    &lt;<span class="selector-tag">p</span> class=&quot;test_first&quot;&gt;第二个<span class="selector-tag">p</span>元素&lt;/<span class="selector-tag">p</span>&gt;</span><br><span class="line">    &lt;<span class="selector-tag">p</span> class=&quot;second_test&quot;&gt;第三个<span class="selector-tag">p</span>元素&lt;/<span class="selector-tag">p</span>&gt;</span><br><span class="line">    &lt;<span class="selector-tag">p</span> class=&quot;test_second&quot;&gt;第四个<span class="selector-tag">p</span>元素&lt;/<span class="selector-tag">p</span>&gt;</span><br><span class="line">&lt;/<span class="selector-tag">body</span>&gt;</span><br></pre></td></tr></table></figure></li></ol><h3 id="层次选择器"><a href="#层次选择器" class="headerlink" title="层次选择器"></a>层次选择器</h3><p>又名后代选择器<br>专门用于查找<strong>嵌套</strong>的html元素</p><ol><li><p>子元素选择器</p> <figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">语法：</span><br><span class="line"><span class="selector-tag">div</span> <span class="selector-tag">a</span>&#123;属性名:属性值&#125;</span><br><span class="line">只要<span class="selector-tag">a</span>在<span class="selector-tag">div</span>中，就可以找到</span><br><span class="line"></span><br><span class="line">&lt;style type=&quot;text/css&quot;&gt;</span><br><span class="line"><span class="selector-tag">div</span> <span class="selector-tag">a</span>&#123;</span><br><span class="line">    <span class="attribute">text-decoration</span>: none;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line"></span><br><span class="line">&lt;<span class="selector-tag">body</span>&gt;</span><br><span class="line">    &lt;<span class="selector-tag">div</span>&gt;</span><br><span class="line">        &lt;<span class="selector-tag">p</span>&gt;</span><br><span class="line">            &lt;<span class="selector-tag">a</span> href=&quot;#&quot;&gt;百度&lt;/<span class="selector-tag">a</span>&gt;</span><br><span class="line">        &lt;/<span class="selector-tag">p</span>&gt;</span><br><span class="line">        &lt;<span class="selector-tag">a</span> href=&quot;#&quot;&gt;新浪&lt;/<span class="selector-tag">a</span>&gt;</span><br><span class="line">    &lt;/<span class="selector-tag">div</span>&gt;</span><br><span class="line">&lt;/<span class="selector-tag">body</span>&gt;</span><br></pre></td></tr></table></figure></li><li><p>直接子元素选择器</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">  语法：</span><br><span class="line">  <span class="selector-tag">div</span> &gt; <span class="selector-tag">a</span>&#123;属性名:属性值&#125;</span><br><span class="line">  只查找<span class="selector-tag">div</span>下面<span class="selector-tag">a</span>元素</span><br><span class="line"></span><br><span class="line">   &lt;style type=&quot;text/css&quot;&gt;</span><br><span class="line">       <span class="selector-tag">div</span> &gt; <span class="selector-tag">a</span>&#123;</span><br><span class="line">           <span class="attribute">text-decoration</span>: none;</span><br><span class="line">       &#125;</span><br><span class="line">   &lt;/style&gt;</span><br><span class="line"></span><br><span class="line">  &lt;<span class="selector-tag">body</span>&gt;</span><br><span class="line">&lt;<span class="selector-tag">div</span>&gt;</span><br><span class="line">&lt;<span class="selector-tag">p</span>&gt;</span><br><span class="line">&lt;<span class="selector-tag">a</span> href=&quot;#&quot;&gt;百度&lt;/<span class="selector-tag">a</span>&gt;</span><br><span class="line">&lt;/<span class="selector-tag">p</span>&gt;</span><br><span class="line">&lt;<span class="selector-tag">a</span> href=&quot;#&quot;&gt;新浪&lt;/<span class="selector-tag">a</span>&gt;</span><br><span class="line">&lt;/<span class="selector-tag">div</span>&gt;</span><br><span class="line">&lt;/<span class="selector-tag">body</span>&gt;</span><br></pre></td></tr></table></figure></li><li><p>相邻兄弟选择器（第一个同级元素</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">  语法：</span><br><span class="line">  <span class="selector-tag">h1</span> + <span class="selector-tag">p</span>&#123;属性名:属性值&#125;</span><br><span class="line">  只查找指定元素下面的   第一个同级元素   。</span><br><span class="line"></span><br><span class="line">   &lt;style type=&quot;text/css&quot;&gt;</span><br><span class="line">       <span class="selector-tag">h1</span> + <span class="selector-tag">p</span>&#123;</span><br><span class="line">           <span class="attribute">color</span>: red;</span><br><span class="line">       &#125;</span><br><span class="line">   &lt;/style&gt;</span><br><span class="line"></span><br><span class="line">  &lt;<span class="selector-tag">body</span>&gt;</span><br><span class="line">&lt;<span class="selector-tag">p</span>&gt;这是<span class="selector-tag">h1</span>上的<span class="selector-tag">p</span>标签中的文字&lt;/<span class="selector-tag">p</span>&gt;</span><br><span class="line">&lt;<span class="selector-tag">h1</span>&gt;这<span class="selector-tag">h1</span>标签中的文字&lt;/<span class="selector-tag">h1</span>&gt;</span><br><span class="line">&lt;<span class="selector-tag">p</span>&gt;这是<span class="selector-tag">h1</span>下的<span class="selector-tag">p</span>标签中的文字&lt;/<span class="selector-tag">p</span>&gt;</span><br><span class="line">&lt;<span class="selector-tag">p</span>&gt;这是<span class="selector-tag">h1</span>下下的<span class="selector-tag">p</span>标签中的文字&lt;/<span class="selector-tag">p</span>&gt;</span><br><span class="line">&lt;<span class="selector-tag">p</span>&gt;这是<span class="selector-tag">h1</span>下下的<span class="selector-tag">p</span>标签中的文字&lt;/<span class="selector-tag">p</span>&gt;</span><br><span class="line">&lt;/<span class="selector-tag">body</span>&gt;</span><br></pre></td></tr></table></figure></li><li><p>相邻兄弟选择器（所有同级元素</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">  语法：</span><br><span class="line">  <span class="selector-tag">h1</span> ~ <span class="selector-tag">p</span>&#123;属性名:属性值&#125;</span><br><span class="line">  只查找指定元素下面的    所有同级元素    。</span><br><span class="line"></span><br><span class="line">   &lt;style type=&quot;text/css&quot;&gt;</span><br><span class="line">       <span class="selector-tag">h1</span> ~ <span class="selector-tag">p</span>&#123;</span><br><span class="line">           <span class="attribute">color</span>: red;</span><br><span class="line">       &#125;</span><br><span class="line">   &lt;/style&gt;</span><br><span class="line"></span><br><span class="line">  &lt;<span class="selector-tag">body</span>&gt;</span><br><span class="line">&lt;<span class="selector-tag">p</span>&gt;这是<span class="selector-tag">h1</span>上的<span class="selector-tag">p</span>标签中的文字&lt;/<span class="selector-tag">p</span>&gt;</span><br><span class="line">&lt;<span class="selector-tag">h1</span>&gt;这<span class="selector-tag">h1</span>标签中的文字&lt;/<span class="selector-tag">h1</span>&gt;</span><br><span class="line">&lt;<span class="selector-tag">p</span>&gt;这是<span class="selector-tag">h1</span>下的<span class="selector-tag">p</span>标签中的文字&lt;/<span class="selector-tag">p</span>&gt;</span><br><span class="line">&lt;<span class="selector-tag">p</span>&gt;这是<span class="selector-tag">h1</span>下下的<span class="selector-tag">p</span>标签中的文字&lt;/<span class="selector-tag">p</span>&gt;</span><br><span class="line">&lt;<span class="selector-tag">p</span>&gt;这是<span class="selector-tag">h1</span>下下的<span class="selector-tag">p</span>标签中的文字&lt;/<span class="selector-tag">p</span>&gt;</span><br><span class="line">&lt;<span class="selector-tag">span</span>&gt;这是<span class="selector-tag">h1</span>下面的<span class="selector-tag">span</span>元素&lt;/<span class="selector-tag">span</span>&gt;</span><br><span class="line">&lt;/<span class="selector-tag">body</span>&gt;</span><br></pre></td></tr></table></figure></li></ol><h3 id="派生-分组-集体选择器"><a href="#派生-分组-集体选择器" class="headerlink" title="派生/分组/集体选择器"></a>派生/分组/集体选择器</h3><p>将不同元素但是同一样式的标签聚合在一起。<br>无法一一列举</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">大致语法：</span><br><span class="line"><span class="selector-id">#content</span> &gt; <span class="selector-id">#t1</span>,<span class="selector-tag">form</span><span class="selector-attr">[action=<span class="string">&#x27;#&#x27;</span>]</span> &gt; <span class="selector-tag">input</span>,<span class="selector-class">.app</span>,<span class="selector-tag">img</span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="5-伪类选择器"><a href="#5-伪类选择器" class="headerlink" title="5.伪类选择器"></a>5.伪类选择器</h3><p>伪类：<strong>同一个标签，根据其不同的种状态，有不同的样式</strong>。这就叫做“伪类”。<br>伪类用冒号来表示。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">a</span><span class="selector-pseudo">:hover</span>&#123;<span class="attribute">color</span>: lightblue;&#125;<span class="comment">/* 鼠标滑过的样式 */</span></span><br><span class="line"><span class="selector-tag">a</span><span class="selector-pseudo">:link</span>&#123;<span class="attribute">color</span>: red;&#125; <span class="comment">/* 未访问的样式 */</span></span><br><span class="line"><span class="selector-tag">a</span><span class="selector-pseudo">:visited</span>&#123;<span class="attribute">color</span>: blue;&#125; <span class="comment">/* 已访问的样式 */</span></span><br><span class="line"><span class="selector-tag">a</span><span class="selector-pseudo">:active</span>&#123;<span class="attribute">color</span>: yellow;&#125;<span class="comment">/*已选中的样式*/</span></span><br></pre></td></tr></table></figure><h3 id="选择器的优先级"><a href="#选择器的优先级" class="headerlink" title="选择器的优先级"></a>选择器的优先级</h3><p>内联样式 &gt; 内部样式 &gt; 外部样式<br>(最接近html的优先生效)</p><p>!important：强制使用，会将选择器的优先级去除，有限使用它修饰的样式。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;../css/oa_regist_style<span class="selector-class">.css</span>&quot;/&gt;</span><br><span class="line"></span><br><span class="line">&lt;style type=&quot;text/css&quot;&gt;</span><br><span class="line">    <span class="selector-tag">p</span>&#123;</span><br><span class="line">        <span class="attribute">font-size</span>: <span class="number">20px</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">@import</span> url(<span class="string">&quot;../css/oa_regist_style.css&quot;</span>);</span><br><span class="line">&lt;/style&gt;</span><br><span class="line"></span><br><span class="line">&lt;<span class="selector-tag">body</span>&gt;</span><br><span class="line">    &lt;<span class="selector-tag">p</span> style=&quot;<span class="attribute">color</span>: <span class="number">#FF0000</span>;&quot;&gt;这是一个普通的<span class="selector-tag">p</span>标签&lt;/<span class="selector-tag">p</span>&gt;</span><br><span class="line">&lt;/<span class="selector-tag">body</span>&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 最后生效的是import导入后的样式 */</span></span><br></pre></td></tr></table></figure><h2 id="常用的CSS属性"><a href="#常用的CSS属性" class="headerlink" title="常用的CSS属性"></a>常用的CSS属性</h2><ul><li><p>字体样式（font</p>  <figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">p</span>&#123;</span><br><span class="line">    <span class="attribute">font</span>: italic bold <span class="number">30px</span> <span class="string">&quot;微软雅黑&quot;</span>;</span><br><span class="line">    <span class="comment">/* italic：斜体</span></span><br><span class="line"><span class="comment">    bold：加粗 */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>背景样式（<code>background</code></p>  <figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">div</span>&#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">1500px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">1500px</span>;</span><br><span class="line">    <span class="attribute">background</span>: <span class="number">#ccc</span> <span class="built_in">url</span>(<span class="string">../img/0.jpg</span>) no-repeat right top;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/* </span></span><br><span class="line"><span class="comment">        repeat：平铺（默认</span></span><br><span class="line"><span class="comment">        no-repeat; 不平铺</span></span><br><span class="line"><span class="comment">        repeat-x;  横向平铺</span></span><br><span class="line"><span class="comment">        repeat-y;  纵向平铺</span></span><br><span class="line"><span class="comment">        fixed：固定背景图片</span></span><br><span class="line"><span class="comment">        inherit：继承于父标签的方式</span></span><br><span class="line"><span class="comment">        top、bottom、left、right：图片定位 */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>文本样式</p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">1.color：文本颜色</span><br><span class="line">2.line-height：行高</span><br><span class="line">3.text-aligin：居中【左右居中】</span><br><span class="line">    </span><br><span class="line">4.text-indet：文字的留白</span><br><span class="line">5.text-decoration：</span><br><span class="line">    取值：</span><br><span class="line">        line-through：贯穿线</span><br><span class="line">        underline：下划线</span><br><span class="line">        overline：上划线</span><br><span class="line">6.text-transform：</span><br><span class="line">    取值：</span><br><span class="line">        uppercase：大写</span><br><span class="line">        lowercase：小写</span><br><span class="line">7.letter-sapcing：字符之间的间距</span><br><span class="line">8.word-spacing：单词之间的间距</span><br><span class="line">    按照空格来区分是否是一个单词。</span><br></pre></td></tr></table></figure></li><li><p>列表属性</p>  <figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- </span><br><span class="line"><span class="attribute">list-style-image</span>：列表图片</span><br><span class="line"><span class="attribute">list-style</span>：列表样式一般设置<span class="attribute">none</span>，表示没有前面的点</span><br><span class="line"><span class="attribute">list-style-type</span>：列表样式类型 </span><br><span class="line">--&gt;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">ul</span>&#123;</span><br><span class="line">    <span class="attribute">list-style</span>: none;</span><br><span class="line">    <span class="attribute">list-style-type</span>: oriya;</span><br><span class="line">    <span class="attribute">list-style-image</span>: <span class="built_in">url</span>(<span class="string">../img/0.jpg</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>表格属性</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">单元格与单元格之间的间距</span><br><span class="line">border-collapse: collapse;（边与边合并）</span><br><span class="line">                ：separate;（不合并）</span><br></pre></td></tr></table></figure><h2 id="盒子模型"><a href="#盒子模型" class="headerlink" title="盒子模型"></a>盒子模型</h2><p>盒子模型就是在网页设计中经常用到的一种思维模式。<br>即：内容、边框、边界，为节点的一个容器思想。<br>将众多不同元素放置在容器中，让对容器进行定位。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">属性：</span><br><span class="line">margin：外边距</span><br><span class="line">边框与边框之间的距离，两个容器之间的距离</span><br><span class="line"></span><br><span class="line">padding：内边距</span><br><span class="line">内容与边框的距离，内边距会增加容器的宽度或者高度</span><br></pre></td></tr></table></figure><h2 id="浮动（float"><a href="#浮动（float" class="headerlink" title="浮动（float"></a>浮动（float</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">可以使块级元素在同一行显示。</span><br><span class="line"><span class="built_in">float</span>:</span><br><span class="line">取值：</span><br><span class="line">left：左边浮动</span><br><span class="line">right：右边浮动</span><br><span class="line">本质是：使当前浮动元素脱离正常文档流</span><br><span class="line">正常文档流是按照左上布局，按照顺序放置元素。</span><br><span class="line"></span><br><span class="line">clear：清除浮动</span><br><span class="line">取值：both</span><br><span class="line">消除浮动所带来的影响。</span><br><span class="line">元素浮动之后原有的位置会空置出来，默认会让其它元素占用。</span><br><span class="line">清除浮动就是为了不让其它元素使用空出来的位置。</span><br></pre></td></tr></table></figure><h2 id="定位（position"><a href="#定位（position" class="headerlink" title="定位（position"></a>定位（position</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">position：定位属性</span><br><span class="line">取值：</span><br><span class="line">static：默认，按照正常文档流显示元素</span><br><span class="line">relative：相对定位，相对于元素当前的位置进行定位</span><br><span class="line">absolute：绝对定位，相对于第一个已经定位的父元素定位，如果没有父元素，就相对于body定位。</span><br><span class="line">fixed：固定定位。（类似广告，一直固定在某个地方）</span><br><span class="line">sticky：粘贴定位 （类似excel的窗口冻结）</span><br></pre></td></tr></table></figure><h2 id="display"><a href="#display" class="headerlink" title="display"></a>display</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">隐藏和显示元素以及将块级元素变为行内元素，</span><br><span class="line">也可以将行内元素变为块级元素。</span><br><span class="line">属性：</span><br><span class="line">display</span><br><span class="line">取值：</span><br><span class="line">none：隐藏元素</span><br><span class="line">block：显示元素</span><br><span class="line">inline-block：将行内标记变成块级标记</span><br><span class="line">inline：将块级标签变为行内标签</span><br></pre></td></tr></table></figure><h1 id="BootStrap"><a href="#BootStrap" class="headerlink" title="BootStrap"></a>BootStrap</h1><p>用于快速开发web应用程序和网站的前端框架。基于HTML、CSS、JS【Jquery】的</p><p><a href="https://v3.bootcss.com/">https://v3.bootcss.com</a></p><p><a href="https://www.bootcss.com/">https://www.bootcss.com/</a></p><p><a href="https://www.runoob.com/bootstrap/bootstrap-tutorial.html">https://www.runoob.com/bootstrap/bootstrap-tutorial.html</a></p><h1 id="学习链接"><a href="#学习链接" class="headerlink" title="学习链接"></a>学习链接</h1><p>菜鸟教程：<a href="https://www.runoob.com/html/html5-intro.html">https://www.runoob.com/html/html5-intro.html</a><br>W3：<a href="https://www.w3school.com.cn/">https://www.w3school.com.cn</a><br>MDN WebDocs：<a href="https://developer.mozilla.org/zh-CN/docs/Web">https://developer.mozilla.org/zh-CN/docs/Web</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> 前端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JDBC</title>
      <link href="/posts/5c27.html"/>
      <url>/posts/5c27.html</url>
      
        <content type="html"><![CDATA[<h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>Java DataBase Connectivity（数据库连接）</p><ul><li><p>概念<br>  用于执行SQL语句的 Java API，可以为多种关系型数据库提供统一的资源访问，它本身就是由Java编写的<br>  JDBC对于程序员来说就是一套API，对数据库厂商而言，是接口模型。</p></li><li><p>简单来说：JDBC可以做三件事</p><ol><li>建立数据库的连接</li><li>发送操作数据库的SQL语句</li><li>返回数据库查询出的结果集</li></ol></li><li><p>开发步骤：</p><ol start="0"><li>导包</li><li>注册驱动</li><li>连接数据库</li><li>发送SQL语句</li><li>设置占位符    *</li><li>执行SQL语句</li><li>关闭访问资源</li></ol></li><li><p>注意<br>  占位符:避免mysql注入。有值，但是不确定值是多少。<br>  增、删、改：<code>executeUpdate()</code><br>  查：<code>excuteQuery()</code></p></li></ul><h3 id="看代码"><a href="#看代码" class="headerlink" title="看代码"></a>看代码</h3><ul><li>JDBC通信规则涉及的API<ol><li>java.sql.Driver接口<br>声明了用于建立通信通道的方法名由Driver接口修饰对象相当于”隧道工人”  <code>Driver obj</code></li><li>java.sql.Connection接口<br>声明了用于维护通信通道的方法名由Connection接口修饰对象,相当于”道路养护工”  <code>Connection obj</code></li><li>java.sql.PreparedStatement接口<br>声明了用于推送通信信息的方法名由PreparedStatement接口修饰对象,相当于”快递小哥” <code>PreparedStatement obj</code></li><li>java.sql.ResultSet接口<br>声明了操作查询之后生成的临时表的方法名由ResultSet接口修饰的对象,相当于”临时表管理员”  <code>ResultSet obj</code></li><li>java.sql.DriverManager类<br>负责调用由数据库厂商提供的Driver接口实现类的实例对象去打通通道,相当于”监工”</li></ol></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 查询例子：</span></span><br><span class="line"><span class="comment">// 注册驱动</span></span><br><span class="line">Class.forName(<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 链接数据库（维护通道）</span></span><br><span class="line"><span class="type">Connection</span> <span class="variable">connection</span> <span class="operator">=</span> DriverManager.getConnection(<span class="string">&quot;jdbc:mysql://127.0.0.1:3306/test?useUnicode=true&amp;characterEncoding=utf8&quot;</span>, <span class="string">&quot;root&quot;</span>, <span class="string">&quot;123456&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 编写sql语句 并且准备 推送/接收通信</span></span><br><span class="line"><span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;select * from emp&quot;</span>;</span><br><span class="line"><span class="type">PreparedStatement</span> <span class="variable">ps</span> <span class="operator">=</span> connection.prepareStatement(sql);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 执行通信之查询</span></span><br><span class="line"><span class="type">ResultSet</span> <span class="variable">rs</span> <span class="operator">=</span> ps.executeQuery();    <span class="comment">//此处是查询，返回的是结果集</span></span><br><span class="line"><span class="comment">// 遍历结果集</span></span><br><span class="line"><span class="keyword">while</span> (rs.next())&#123;</span><br><span class="line">    System.out.print(rs.getInt(<span class="string">&quot;empno&quot;</span>) + <span class="string">&quot;\t&quot;</span>);</span><br><span class="line">    System.out.print(rs.getString(<span class="string">&quot;ename&quot;</span>) + <span class="string">&quot;\t&quot;</span>);</span><br><span class="line">    System.out.print(rs.getString(<span class="string">&quot;job&quot;</span>) + <span class="string">&quot;\t&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 批量操作并且开启事务</span></span><br><span class="line">con.setAutoCommit(<span class="literal">false</span>);    <span class="comment">//设置开启事务</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">50</span>;i&lt;<span class="number">55</span>;i++)&#123;    </span><br><span class="line">    ps.setInt(<span class="number">1</span>, i);</span><br><span class="line">    ps.setString(<span class="number">2</span>, <span class="string">&quot;dept_&quot;</span>+i);</span><br><span class="line">    ps.setString(<span class="number">3</span>, <span class="string">&quot;上海&quot;</span>);</span><br><span class="line">    ps.addBatch();          <span class="comment">//类似集合，每次加入</span></span><br><span class="line">&#125;</span><br><span class="line">ps.executeBatch();<span class="comment">//通知ps将batch中sql语句一次性推送推送过去</span></span><br><span class="line">con.commit();<span class="comment">//成功则推送</span></span><br><span class="line">con.rollback();<span class="comment">//失败则回滚</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 最后关闭流</span></span><br><span class="line">rs.close();</span><br><span class="line">ps.close();</span><br><span class="line">connection.close();</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 新增例子：</span></span><br><span class="line"><span class="comment">// 注册驱动</span></span><br><span class="line">Class.forName(<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//链接数据库</span></span><br><span class="line"><span class="type">Connection</span> <span class="variable">conn</span> <span class="operator">=</span> DriverManager.getConnection(<span class="string">&quot;jdbc:mysql://127.0.0.1:3306/gz2107?useUnicode=true&amp;characterEncoding=utf8&quot;</span>, <span class="string">&quot;root&quot;</span>, <span class="string">&quot;123456&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//编写sql语句</span></span><br><span class="line"><span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;insert into emp (name,salary,age) VALUES (?,?,?);&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//设置sql语句</span></span><br><span class="line"><span class="type">PreparedStatement</span> <span class="variable">ps</span> <span class="operator">=</span> conn.prepareStatement(sql);</span><br><span class="line"></span><br><span class="line"><span class="comment">//根据sql和表设置占位符</span></span><br><span class="line">ps.setString(<span class="number">1</span>, <span class="string">&quot;Peng&quot;</span>);</span><br><span class="line">ps.setInt(<span class="number">2</span>, <span class="number">3000</span>);</span><br><span class="line">ps.setInt(<span class="number">3</span>, <span class="number">22</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//发送sql语句</span></span><br><span class="line">ps.executeUpdate();   <span class="comment">//此处是增删改用到的，返回值是int类型</span></span><br></pre></td></tr></table></figure><p><strong>注意！！！</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">ps.executeUpdate() 与 ps.executeQuery()区别：</span><br><span class="line"></span><br><span class="line">1.推送的SQL语句类型不同</span><br><span class="line">    ps.executeUpdate()：负责推送DML语句（Insert/update/delete）</span><br><span class="line">    ps.executeQuery()：负责推送DQL语句（select）</span><br><span class="line"></span><br><span class="line">2.返回结果不同</span><br><span class="line">    ps.executeUpdate()：返回 int 类型数据；表示本次插入了多少行数据，或者删除了多少行数据，或者更新了多少行数据</span><br><span class="line">    ps.executeQuery()：返回 ResultSet 类型，表示本次查询时得到的这个临时表</span><br></pre></td></tr></table></figure><h2 id="数据库连接池"><a href="#数据库连接池" class="headerlink" title="数据库连接池"></a>数据库连接池</h2><ul><li><p>存在的问题<br>  普通的JDBC数据库连接使用的是<code>DriverManager</code>来获取，每次向数据库建立连接的时候都要将<code>connection</code>加载到内存。频繁链接断开这样的方式极大地消耗大量的资源和时间。</p></li><li><p>概念<br>  数据库连接建立一个”缓冲池”，预选在缓冲池中放入一定数量的连接，当需要建立数据库连接时，只需要从”缓冲池”中取一个使用完毕之后再放回去。数据库连接池负责分配，管理和释放数据库连接，允许应用程序重复使用一个现有的数据库连接，而不是重新建立。</p></li><li><p>常用的数据库连接池。<br>  C3P0【已经没落】<br>  druid【德鲁伊】alibaba 开源项目<br>  DBCP 全称：DataBase Connection Pool。Apache的一个开源项目</p></li></ul><h2 id="dao"><a href="#dao" class="headerlink" title="dao"></a>dao</h2><p>Data Access Object【数据访问逻辑】</p><ul><li>概念<br>  封装了数据访问的细节，对于其它层来说是透明的，看不见的。</li><li>如何写一个DAO?<ol><li>实体类【pojo、entity】<br>为了方便处理数据库中的记录，可以定义一个与数据库中的表对应的实体类。<br>即表名—类名，列名—属性名。</li><li>dao接口<br>声明一些数据访问方法，这些方法都是抽象的。</li><li>dao接口的实现类<br>用于实现dao接口中具体的数据库访问细节。</li><li>dao工厂<br>根据配置信息来获取不同的dao实现对象。</li></ol></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> SQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>javaSE</title>
      <link href="/posts/f21e.html"/>
      <url>/posts/f21e.html</url>
      
        <content type="html"><![CDATA[<h2 id="历史"><a href="#历史" class="headerlink" title="历史"></a>历史</h2><p>Java语言开发者 \ Java之父: 詹姆士.高士林(Gosling)<br>Sun Microsystem(太阳微系统)<br>被收购，Oracle公司(甲骨文): Oracle</p><ul><li><p>Java版本: </p><ul><li>JavaSE: Java Standard Edition 标准版</li><li>JavaEE: Java Enterprise Editition 企业版 并发技术</li><li>JavaME: Java Mobile Edition 移动版</li></ul></li><li><p>JDK,JRE,JVM</p><ul><li>JRE:Java Runtime Environment (Java运行时) :就是java运行的环境</li><li>JDK： Java Development Kit (Java开发工具包):<br>里面有java开发所需的编译器，运行器，函数库等……<br>JDK中包含JRE。</li><li>JVM : Java Virtual Machine (Java虚拟机)<br>是一个软件程序，运行字节码文件的，并且不能单独<br>好处，可以实现跨平台运行</li></ul></li></ul><h2 id="Java语言特性"><a href="#Java语言特性" class="headerlink" title="Java语言特性"></a>Java语言特性</h2><ul><li>简单性：Java舍弃了C++中难以掌握并不安全的功能，如：指针、多继承等，Java语言底层是C++实现的</li><li>面向对象：Java和C++一样，是一种面向对象编程语言</li><li>安全性：如：运行时堆栈溢出，强制类型检查</li><li>健壮性：Java语言在运行过程中产生的垃圾会自动回收，简称GC机制</li><li>可移植性：Java程序编译一次，不做任何修改时到处运行，也就是跨平台</li></ul><h2 id="术语"><a href="#术语" class="headerlink" title="术语"></a>术语</h2><p>OP: 面向过程<br>OOA: 面向对象分析<br>OOD: 面向对象设计<br>OOP: 面向对象编程<br>team: 团队<br>leader: 领导<br>PM:<br>1.项目经理: 有全盘项目管理，开发能力，沟通能力强<br>2.产品经理: 产品经理对软件产品负责，一般是在开发前，他负责与客户沟通。了解和收集客户需求，就开始画图(设计产品原型) UI</p><h2 id="面向对象-与-面向过程的区别"><a href="#面向对象-与-面向过程的区别" class="headerlink" title="面向对象 与 面向过程的区别"></a>面向对象 与 面向过程的区别</h2><ul><li><p>什么是面向过程<br>  概念： 做事情有一定的顺序或因果关系，那么这种程序设计为面向过程的程序设计。<br>  优点：简单，开发时间短，无需团队直接就可以开发。无需任何软件开发模型。<br>  缺点：耦合度高。</p></li><li><p>什么是面向对象<br>  概念：把生活中每个实物看做一个对象，然后把各个对象联系起来，经过一系列动作，来整体做一件事。<br>  优点: 把生活中的实物理解对对象，对象之间有联系，开发就去找对象，耦合度低。<br>  适合大型项目，彼此有联系但互不影响。<br>  缺点： 开发周期长，文档多。</p><h3 id="看代码"><a href="#看代码" class="headerlink" title="看代码"></a>看代码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test1</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line"><span class="type">int</span> n=<span class="number">10</span>; </span><br><span class="line">print(n);</span><br><span class="line">System.out.println(n);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">print</span><span class="params">(<span class="type">int</span> n)</span> &#123;</span><br><span class="line">n++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//最后输出10</span></span><br></pre></td></tr></table></figure></li></ul><h2 id="包"><a href="#包" class="headerlink" title="包"></a>包</h2><ul><li>概念：类似于windows中的文件夹</li><li>作用是: 避免同名文件的冲突</li><li>关键字:package</li><li>语法: package 包名;</li><li>取名的规范: <code>package a;</code>或者 按照域名的反写<code>com.bjpowernode.it.oa;</code>(域名.部门名.项目名;)</li></ul><h2 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h2><p><img src="https://raw.githubusercontent.com/pengyirui/blog_img/main/2021-05-11-02.png" alt="变量的内存分析图"></p><ul><li>概念: 变量是一个盒子，盒子的大小由数据类型来决定，盒子放入的是数据，数据的内容是可以变化的。 </li><li>分类:<ul><li>局部变量：在函数中定义的变量，有效范围在整个函数中有效。</li><li>全局变量：在类中定义的变量，有效范围在整个类中有效。</li></ul></li><li>有作用域(使用范围) <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123; <span class="comment">//这一对大括号就是一个作用域，变量a在此大括号中有效.</span></span><br><span class="line"><span class="type">int</span> a=<span class="number">1</span>;</span><br><span class="line">&#125; <span class="comment">//这一对大括号是叫代码块.</span></span><br><span class="line">System.out.println(a);<span class="comment">//此处不能输出</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="看代码-1"><a href="#看代码-1" class="headerlink" title="看代码"></a>看代码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test1</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">int</span> a;</span><br><span class="line">        System.out.println(a);  <span class="comment">//编译出错</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//局部变量必须初始化(给变量赋值),全局变量可以不用赋值，因为它有默认值。</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test2</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">int</span> a=<span class="number">1</span>;</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">int</span> a=<span class="number">3</span>;</span><br><span class="line">            System.out.println(a);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">int</span> a=<span class="number">2</span>;</span><br><span class="line">            System.out.println(a);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//编译出错，int a 只能定义一遍。</span></span><br></pre></td></tr></table></figure><h2 id="标识符"><a href="#标识符" class="headerlink" title="标识符"></a>标识符</h2><ul><li>概念：是程序员取的合法的一个名字，这个名字可以用在类，函数，变量处等等。</li><li>命名规则: <ul><li>标识符必须以字母开头 </li><li>标识符组成：字母，数字，下划线，$</li><li>标识符不能以数字开头，可以组合4大部分。</li><li>标识符可以取中文吗？ 可以的，中文也是字符，和字母类似，直接使用。但是项目中不用</li><li>标识符用在类处，要求类名首字母大写。</li><li>不能用关键字</li></ul></li><li>标识符规范<ul><li>驼峰、下划线命名</li><li>望文生义</li></ul></li></ul><h2 id="Java代码执行机制"><a href="#Java代码执行机制" class="headerlink" title="Java代码执行机制"></a>Java代码执行机制</h2><p><img src="https://raw.githubusercontent.com/pengyirui/blog_img/main/2021-05-11-01.png" alt="Java加载与执行"><br>分为两个阶段: </p><ul><li>编译阶段<ul><li>编写Java源代码,保存为.java的文件</li><li>打开命令提示符—&gt;写入一个javac 源文件名 </li><li>编译完成后，会形成一个.class文件，为字节码文件。</li></ul></li><li>运行阶段<ul><li>通过写入一条命令：java 类名</li><li>这个.class文件被类加载器(classloader)进行加载，交给了虚拟机(JVM),是一个程序，软件，它开始读取.class文件中的类信息，把.class文件—&gt;翻译成了0101数据(二进制)</li><li>二进制数据被操作系统识别(windows)，交给相应的硬件进行执行,最终输出结果。</li></ul></li></ul><h2 id="dos下"><a href="#dos下" class="headerlink" title="dos下"></a>dos下</h2><ul><li>javadoc:生成文档注释命令<br>  例子：<br>  把Helloworld的注释文档放进aaa文件夹下<br>  <code>C:&gt; javadoc -d aaa HelloWorld.java</code></li><li>jar:打压缩包(.jar)<br>  例子：<br>  把Helloworld.java和Helloworld2.java打包压缩民命为hello.jar<br>  <code>C:&gt; jar cvf hello.jar Helloworld.java Helloworld2.java</code></li><li>导入包<br>  HelloWorld.java导入hello文件夹下的另一个HelloWorld.java<br>  <code>C:&gt; javac -d . HelloWorld.java</code><br>  <code>C:&gt; java hello.HelloWorld</code></li></ul><h2 id="计算机编码"><a href="#计算机编码" class="headerlink" title="计算机编码"></a>计算机编码</h2><ul><li>ASCII码: 美国标准信息交换码:只支持英文 ，不支持中文<br>  比如: a: 97    A: 65</li><li>ISO-8859-1: 支持拉丁文,英文，不支持中文</li><li>GBK : 所有中文编码统称: 支持简体(GB2312)和繁体,固定长度中文</li><li>UTF-8：支持中文，英文 :可变长度中文</li><li>Unicode:支持任何一种语言，包括中文，让中文在任何一台电脑上都能正确显示。<br>  语法:\u十六进制数字<br>  比如:\u6702; </li></ul><h2 id="进制表示"><a href="#进制表示" class="headerlink" title="进制表示"></a>进制表示</h2><p>二进制，八进制，十六进制在计算机编程时，如何表示<br>二进制： 0b<br>八进制： 0<br>十六进制: 0x</p><p>例子：<br>二进制以零b开头如：<code>int a = 0b0101010;</code><br>八进制以零开头如：<code>int a = 012345;</code><br>十六进制以零x开头如：<code>int a = 0x12345;</code></p><h2 id="数据类型之间转换"><a href="#数据类型之间转换" class="headerlink" title="数据类型之间转换"></a>数据类型之间转换</h2><ul><li>自动类型转换(隐式类型转换)：<br>  要求：要转换的两种类型必须兼容<br>  低优先级类型–&gt;高优先级类型（byte–&gt;int）</li><li>强制类型转换：<br>  要求：要转换的两种类型必须兼容<br>  高优先级类型–&gt;低优先级类型（int–&gt;byte）</li><li>当多种数据类型混合运算时，有限取范围大的数据类型</li></ul><p>语法：（要强制转换的类型）数据<br>例子：<code>(int)3.14</code></p><p><img src="https://raw.githubusercontent.com/pengyirui/blog_img/main/2021-05-11-03.png" alt="顺序与转换"></p><ol><li>基本数据类型中除了<code>布尔</code>数据类型以外，剩余7种数据类型之间是可以相互转换的</li><li>取值范围小的数据类型是可以直接给取值范围大的数据类型赋值，构成自动类型转换，也叫做隐式类型转换</li><li>取值范围大的数据类型不能直接给取值范围小的类型赋值，则必须进行强制类型转换，也叫做显式类型转换，可能会存在精度有丢失</li><li>当对byte、short、char类型赋值时，如果没有超出当前数据类型取值范围，则是可以直接赋整数类型的值</li><li>当对byte、short、char类型进行混合运算时，则先转为int类型，然后再进行计算</li><li>当多种数据类型进行混合运算时，结果为当前运算中取值范围大的数据类型</li></ol><h2 id="字面量"><a href="#字面量" class="headerlink" title="字面量"></a>字面量</h2><ul><li>概念：就是数据。</li><li>数据分类：<ul><li>基本数据类型:<br><code>并且有优先级</code><table><thead><tr><th align="left">数据类型</th><th align="left">所占的字节大小</th><th align="left">默认值</th></tr></thead><tbody><tr><td align="left">byte：字节</td><td align="left">1</td><td align="left">0</td></tr><tr><td align="left">short：短整形</td><td align="left">2</td><td align="left">0</td></tr><tr><td align="left">int：整形</td><td align="left">4</td><td align="left">0</td></tr><tr><td align="left">long：长整形</td><td align="left">8</td><td align="left">0L</td></tr><tr><td align="left">float：单精度</td><td align="left">4</td><td align="left">0.0f</td></tr><tr><td align="left">double：双精度</td><td align="left">8</td><td align="left">0.0</td></tr><tr><td align="left">boolean：布尔</td><td align="left">1</td><td align="left">false</td></tr><tr><td align="left">char：字符</td><td align="left">2</td><td align="left">\u0000</td></tr></tbody></table></li><li>引用数据类型：<br>  String：字符串<br>  Array：数组<br>  class：类类型<br>  interface：接口类型<br>  enum：枚举类型<br>  。。。。</li></ul></li></ul><h3 id="看代码-2"><a href="#看代码-2" class="headerlink" title="看代码"></a>看代码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> a=<span class="number">1</span>;</span><br><span class="line"><span class="type">int</span> b=<span class="number">2</span>;</span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">&quot;a和b和是&quot;</span>+a+b);</span><br><span class="line"><span class="comment">//输出：a和b和是12（拼接优先级比运算优先级大）</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">byte</span> a=<span class="number">1</span>;</span><br><span class="line"><span class="type">short</span> b=<span class="number">10</span>;</span><br><span class="line"><span class="type">char</span> c=<span class="string">&#x27;a&#x27;</span>;</span><br><span class="line"></span><br><span class="line">System.out.println(a+b+c); <span class="comment">//108</span></span><br><span class="line"><span class="comment">// 多种类型同时放在一起时，它们会先转成整形int类型，然后进行操作</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> a=020_28283223;   <span class="comment">//整数中可以带下划线，新版本jdk特性决定的。</span></span><br></pre></td></tr></table></figure><h2 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h2><ul><li><p>概念: 一些符号，这些可以参与运算，逻辑比较等操作。 </p></li><li><p>算术运算符:<br>  执行基本数学运算的符号: +,-,*,/(除法),%(取余数)</p></li><li><p>逻辑运算符:<br>  执行逻辑判断:</p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&amp;(按位与，逻辑与) </span><br><span class="line"><span class="number">10</span> &amp; <span class="number">6</span> ：按位与 (换成二进制）</span><br><span class="line">条件<span class="number">1</span> &amp; 条件<span class="number">2</span> </span><br><span class="line"></span><br><span class="line">|(按位或，逻辑或)</span><br><span class="line"><span class="number">10</span> | <span class="number">6</span> ：按位或(换成二进制)</span><br><span class="line"></span><br><span class="line">条件<span class="number">1</span>|条件<span class="number">2</span>: 逻辑或</span><br><span class="line">!(非) </span><br><span class="line">&amp;&amp;(短路与) </span><br><span class="line">||(短路或)</span><br><span class="line"></span><br><span class="line">^(异或)</span><br><span class="line"><span class="number">10</span> ^ <span class="number">6</span>： 换成二进制，不同的为<span class="number">1</span>，相同的为<span class="number">0</span>。</span><br><span class="line">逻辑异或^</span><br><span class="line">当两边的值不同时，则结果为<span class="literal">true</span>，否则为<span class="literal">false</span></span><br><span class="line"><span class="literal">true</span> ^ <span class="literal">true</span> 结果为<span class="literal">false</span></span><br><span class="line"><span class="literal">true</span> ^ <span class="literal">false</span> 结果为<span class="literal">true</span></span><br><span class="line"><span class="literal">false</span> ^ <span class="literal">false</span> 结果为<span class="literal">false</span></span><br><span class="line"><span class="literal">false</span> ^ <span class="literal">true</span> 接为<span class="literal">true</span></span><br></pre></td></tr></table></figure></li><li><p>比较运算符: &gt;,&gt;=,&lt;,&lt;=,!= </p></li><li><p>移位运算符 :<br>  转换成二进制后位移</p><ul><li>往右移位: &gt;&gt;, &gt;&gt;&gt;</li><li>往左移位: &lt;&lt;   <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">如：<span class="number">10</span>&gt;&gt;<span class="number">1</span> <span class="comment">//输出：5      解释：10转换成二进制后向右移动一位</span></span><br><span class="line">            <span class="comment">//相当于除以2</span></span><br><span class="line">    <span class="number">10</span>&gt;&gt;<span class="number">2</span> <span class="comment">//相当于除以4</span></span><br></pre></td></tr></table></figure></li></ul></li></ul><p>以后项目中要做除法运算，使用移位了。</p><ul><li><p>三目运算符<br>  语法格式：条件 ? 代码1 : 代码2<br>  首先判断条件，如果条件为true，则执行代码1，否则执行代码2</p></li><li><p>赋值运算符 =,+=,-=,*=,/=,%= </p></li><li><p>+=和-=都有强转的概念</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//例子1：</span></span><br><span class="line"><span class="type">int</span> a=<span class="number">1</span>; </span><br><span class="line"><span class="type">int</span> b=<span class="number">2</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> c=a++;  <span class="comment">//1  a=2 </span></span><br><span class="line"><span class="type">int</span> d=++b;  <span class="comment">//d=3 b=3</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//最后输出2 3 1 3</span></span><br><span class="line">System.out.println(a); </span><br><span class="line">System.out.println(b);</span><br><span class="line">System.out.println(c);</span><br><span class="line">System.out.println(d);</span><br><span class="line"></span><br><span class="line"><span class="comment">//例子2：</span></span><br><span class="line"><span class="type">int</span> a=<span class="number">1</span>; </span><br><span class="line"><span class="type">int</span> b=<span class="number">2</span>;</span><br><span class="line"></span><br><span class="line">a++; <span class="comment">//2</span></span><br><span class="line">++b; <span class="comment">//3</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//最后输出2  4</span></span><br><span class="line">System.out.println(a++); </span><br><span class="line">System.out.println(++b);</span><br></pre></td></tr></table></figure></li></ul><h2 id="判断语句-与-循环语句"><a href="#判断语句-与-循环语句" class="headerlink" title="判断语句 与 循环语句"></a>判断语句 与 循环语句</h2><p>If(布尔表达式)<br>单if<br>If…else<br>If…else if …else（多重if选择结构）<br>If…if(if嵌套)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 当做等值操作时，则就可以使用switch case完成</span></span><br><span class="line">Swith(变量/表达式)&#123;</span><br><span class="line">    <span class="keyword">case</span> 常量:</span><br><span class="line">        满足<span class="keyword">case</span>需要做的事情；</span><br><span class="line">        <span class="keyword">break</span>；<span class="comment">//退出</span></span><br><span class="line">    <span class="keyword">default</span>:（比较灵活不一定写在最后）</span><br><span class="line">        以上都不满足最后才执行</span><br><span class="line">        <span class="keyword">break</span>；<span class="comment">//退出</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>循环概念：<br>有规律地重复做同样的事情<br>外层循环做一次，内层循环做一遍</p></li><li><p>步骤:<br>  书写循环变量，赋予初始值<br>  书写循环条件<br>  书写循环体：循环做的事情<br>  设计循环退出的条件 ,防止循环死掉 死循环</p></li><li><p>while和do…while循环区别?<br>  while和do..while语法不同。<br>  while先判断条件是否满足，再去执行，do…while先去执行，再判断条件是否满足。不管怎样，do…while一定会执行一次</p></li><li><p>循环关键字:<br><code>break</code>:  退出当前循环结构<br><code>continue</code>: 结束本轮(次)循环，进入下一轮循环</p></li><li><p>循环标签（尽量不用）<br>使用意义：在二重循环结构中，可以直接退出最外层的循环</p></li></ul><h3 id="看代码-3"><a href="#看代码-3" class="headerlink" title="看代码"></a>看代码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//此处的a,b为循环标签（指针的方式）,实际项目建议不要使用循环标签. </span></span><br><span class="line"></span><br><span class="line">a:<span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">3</span>;i++) &#123;</span><br><span class="line">b:<span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;<span class="number">2</span>;j++) &#123;</span><br><span class="line">    <span class="keyword">if</span>(j==<span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">break</span> a;  <span class="comment">//一次直接退出a的外层for循环，</span></span><br><span class="line">    &#125;</span><br><span class="line">    System.out.println(<span class="string">&quot;i=&quot;</span>+i+<span class="string">&quot;,j=&quot;</span>+j);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//判断使出了什么？</span></span><br><span class="line"><span class="type">int</span> i=<span class="number">0</span>,j=<span class="number">0</span>; </span><br><span class="line"><span class="keyword">for</span>(;i&lt;<span class="number">7</span>;i++) &#123;</span><br><span class="line">    <span class="keyword">if</span>(j&gt;<span class="number">4</span>) &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;**&quot;</span>); </span><br><span class="line">        <span class="keyword">continue</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    System.out.println(<span class="string">&quot;*&quot;</span>); </span><br><span class="line">    j++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//分析最后输出</span></span><br><span class="line"><span class="comment">//i  j</span></span><br><span class="line"><span class="comment">// 0  1 * </span></span><br><span class="line"><span class="comment">// 1  2*</span></span><br><span class="line"><span class="comment">// 2  3*</span></span><br><span class="line"><span class="comment">// 3  4*</span></span><br><span class="line"><span class="comment">// 4  5*</span></span><br><span class="line"><span class="comment">// 5  5**</span></span><br><span class="line"><span class="comment">// 6  5 **</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> a=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">switch</span>(a) &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">        System.out.println(<span class="string">&quot;a&quot;</span>);</span><br><span class="line">    <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">        System.out.println(<span class="string">&quot;b&quot;</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">        System.out.println(<span class="string">&quot;c&quot;</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line"><span class="comment">//输出ab，构成穿透</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> i=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(;i&lt;<span class="number">10</span>;i++) &#123;</span><br><span class="line">    System.out.println(i);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//循环输出1~9</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;;i++) &#123;</span><br><span class="line">    System.out.println(i);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//死循环，i不停地加，条件默认为true</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;<span class="number">10</span>;) &#123;</span><br><span class="line">    System.out.println(i);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//死循环，一直输出1，没有退出条件</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(;;) &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;hello&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//死循环，一直输出hello</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//if可以没有大括号，但要紧接着语句</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">1</span>; </span><br><span class="line"><span class="keyword">if</span> (a &gt; <span class="number">0</span>)</span><br><span class="line">    System.out.println(<span class="string">&quot;输出1&quot;</span>);</span><br><span class="line">    System.out.println(<span class="string">&quot;输出2&quot;</span>);</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">    System.out.println(<span class="string">&quot;输出3&quot;</span>);</span><br></pre></td></tr></table></figure><h2 id="方法（函数）"><a href="#方法（函数）" class="headerlink" title="方法（函数）"></a>方法（函数）</h2><p>概念:  方法也叫函数，是一段用来完成特定功能的代码。<br>作用:  代码可以重复利用  ,提高复用性<br>语法:  <code>[访问修饰符] static 方法返回类型 方法名(参数列表) &#123;  &#125;</code></p><ul><li>方法是可以相互调用的</li><li>方法定义<code>不能</code>嵌套</li><li>java中方法返回值只能返回<code>单个值</code>。</li><li>逻辑代码<code>不能</code>写在类体中，必须写在方法内部</li></ul><p><code>当方法带有返回值类型时，如果在case或者default中编写return则就不需要再编写break，否则出现编译错误；当方法带有返回值类型必须编写返回严谨，否则就出现编译错误。</code></p><p><img src="https://raw.githubusercontent.com/pengyirui/blog_img/main/2021-05-11-04.png"></p><h3 id="看代码-4"><a href="#看代码-4" class="headerlink" title="看代码"></a>看代码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">p</span><span class="params">()</span>&#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">p2</span><span class="params">()</span>&#123;  <span class="comment">//方法定义不能嵌套 </span></span><br><span class="line">System.out.println(<span class="string">&quot;我是p2&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">p();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 逻辑代码`不能`写在类体中，必须写在方法内部</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test1</span> &#123;</span><br><span class="line"><span class="type">int</span> x=<span class="number">2</span>; </span><br><span class="line"><span class="keyword">if</span>(x&gt;<span class="number">0</span>) &#123;</span><br><span class="line">System.out.println(x);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">p</span><span class="params">()</span>&#123;</span><br><span class="line">System.out.println(x);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// java中方法返回值只能返回`单个值`。</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">p</span><span class="params">()</span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> width=<span class="number">1</span>;</span><br><span class="line"><span class="type">int</span> height=<span class="number">2</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> width,height;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">p();</span><br></pre></td></tr></table></figure><h2 id="递归"><a href="#递归" class="headerlink" title="递归"></a>递归</h2><p>方法自己调用自己</p><p>递归效率低，容易栈溢出，不建议使用</p><p>解决栈溢出的方案： </p><ol><li>减少输出的次数<br> 设置相应的条件，规定输出的次数，防止溢出</li><li>栈的空间大小调整<br> 不适合于初级工程师</li></ol><p>递归调用实际中还是有应用场合：<br>一些经典的数学运算<br>做目录的列出，可以递归，比如当前盘下的所有内容</p><p>练习：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="comment">//使用递归完成，计算n!</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">mul</span><span class="params">(<span class="type">int</span> n)</span>&#123;</span><br><span class="line">        <span class="comment">//判断形参n的值，如果n是0 或者n是1，则直接返回1</span></span><br><span class="line">        <span class="keyword">if</span>(n == <span class="number">0</span> || n == <span class="number">1</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> n * mul(n - <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        System.out.println(Test.mul(<span class="number">3</span>)); <span class="comment">//例如3!</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="关键字：return"><a href="#关键字：return" class="headerlink" title="关键字：return"></a>关键字：return</h2><p>带返回类型的方法中：  return 要返回的值;<br>无返回类型的方法中：  直接写return即可； 代表是终止方法执行。</p><h2 id="重载-与-重写"><a href="#重载-与-重写" class="headerlink" title="重载 与 重写"></a>重载 与 重写</h2><h3 id="方法重载（overload）"><a href="#方法重载（overload）" class="headerlink" title="方法重载（overload）"></a>方法重载（overload）</h3><ul><li>意义：解决方法命名上的繁琐的问题，用同一个名字，就可以直接操作。</li></ul><p>满足三条件：<br>同一个类中<br>方法名相同<br>参数列表不同（个数、顺序、类型）</p><h3 id="方法重写-覆盖（override）"><a href="#方法重写-覆盖（override）" class="headerlink" title="方法重写\覆盖（override）"></a>方法重写\覆盖（override）</h3><p>概念: 发生在继承结构中，把父类中继承过来的同名方法改变里面的内容。如果子类中的方法与父类中的方法签名相同，只需要改变内容即可。<br><code>即外壳不变，核心重写！</code></p><p>签名相同：方法名相同，方法的参数列表相同，方法的返回类型相同，方法的访问修饰符相同。</p><p>如果父类中书写了静态方法，就不讨论方法重写</p><h3 id="区别"><a href="#区别" class="headerlink" title="区别"></a>区别</h3><p>重写是发生在继承中，重载是发生在本类中</p><p>重写必须一切都要相同,从方法名，参数类型，顺序，返回类型，访问修饰符<br>重载是方法名相同，方法的参数个数不同，类型不同，顺序不同。与返回类型，访问修饰符无关</p><h3 id="看代码-5"><a href="#看代码-5" class="headerlink" title="看代码"></a>看代码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        B b=<span class="keyword">new</span> <span class="title class_">B</span>();</span><br><span class="line">        b.m1();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">A</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">m1</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;m1方法&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">B</span> <span class="keyword">extends</span> <span class="title class_">A</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">m1</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;m1方法&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 构成重载了吗？没有。重写针对的是实例方法。静态方法不讨论方法重写。</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 题二</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Mouse</span> &#123;&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Jerry</span> <span class="keyword">extends</span> <span class="title class_">Mouse</span> &#123; &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">A</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> Mouse <span class="title function_">show</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Mouse</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">B</span> <span class="keyword">extends</span> <span class="title class_">A</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> Jerry <span class="title function_">show</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Jerry</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 构成了重载。子类中方法的返回类型如果是父类同名方法的返回类型的子类，则子类中的这个方法为方法重写。</span></span><br></pre></td></tr></table></figure><h2 id="关键字：static-与-代码块"><a href="#关键字：static-与-代码块" class="headerlink" title="关键字：static 与 代码块"></a>关键字：static 与 代码块</h2><p>静态代码块、属性、方法在类加载时就开始加载，所以是<code>类级别</code>的</p><p>可以修饰属性、方法、代码块、内部类以及实现静态导入</p><ul><li>修饰属性<br>  <code>public static int a=1;    //静态变量，也叫静态属性</code> </li><li>修饰方法<br>  <code>public static void show()&#123;&#125;     ////静态方法</code></li><li>修饰代码块<br>  <code>static&#123;    &#125;    //当类加载到内存时执行静态代码块，并且只执行一次</code></li><li>修饰内部类（一般不用）  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">show</span><span class="params">()</span>&#123;</span><br><span class="line"><span class="type">Inner2</span> <span class="variable">i</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Inner2</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">Inner2</span>&#123; <span class="comment">//称为静态内部类，一般在外部类的静态方法中使用</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>static关键字可以实现静态导入  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyClass</span> &#123;</span><br><span class="line"><span class="keyword">static</span> <span class="type">int</span> <span class="variable">y</span> <span class="operator">=</span> <span class="number">100</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> MyClass.y;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="comment">//注意：当在一个类中，如果想直接使用其他类中的静态变量，则必须要实现静态导入</span></span><br><span class="line">    System.out.println(y);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>与final配合使用  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyClass</span> &#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">A</span> <span class="operator">=</span> <span class="number">100</span>; <span class="comment">//表示常量，也就是值不能更改，因此建议：final关键字与static关键字配合使用，原因：当编写static关键字在内存中只存放一次，并且该类所有对象都可以共享，也就是节省空间</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">double</span> <span class="variable">PI</span> <span class="operator">=</span> <span class="number">3.14</span>;</span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">static</span> <span class="type">double</span> <span class="variable">MY_PI</span> <span class="operator">=</span> <span class="number">3.14159</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p>静态方法中不能访问非静态成员方法和变量</p><p>多个代码块时，自上而下，按照顺序依次加载。<br>静态变量初始化可以在构造方法中进行初始化，但不建议</p><h2 id="关键字：final"><a href="#关键字：final" class="headerlink" title="关键字：final"></a>关键字：final</h2><p>概念：最终的<br>可以修饰三个部分： </p><ul><li>属性:<br>  属性为最终属性:  代表此属性内容不可更改<br>  语法: public final String name=”1”;</li><li>方法:<br>  方法为最终方法：代表此方法不能被重写</li><li>类：<br>  此类为最终类:代表此类不能被继承 </li></ul><p>加入static ,做成静态常量，常量名全大写<br>例子：public final static String NAME=”abc”;</p><h3 id="看代码-6"><a href="#看代码-6" class="headerlink" title="看代码"></a>看代码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Animal</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">show</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;父类输出&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Dog</span> <span class="keyword">extends</span> <span class="title class_">Animal</span>  &#123;</span><br><span class="line">    <span class="type">int</span> age;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">show</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;子类输出&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test01</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="keyword">final</span> Animal a=<span class="keyword">new</span> <span class="title class_">Dog</span>();</span><br><span class="line">        a.age=<span class="number">18</span>;<span class="comment">//报错，因为Animal没定义age</span></span><br><span class="line">        a.show();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="访问权限"><a href="#访问权限" class="headerlink" title="访问权限"></a>访问权限</h2><p>公共类和非公共类<br>当一个类前面编写public修饰符，称为公共类，则该类可以在任意包中使用<br>当一个类前面没有编写public修饰符，称为非公共类，则该类只能在<code>当前包中使用</code></p><p>成员目前所学知识点中包含：成员变量和成员方法</p><table><thead><tr><th align="left">访问权限</th><th align="left">在本类中</th><th align="left">在当前包中</th><th align="left">不同包的子类</th><th align="left">任意包任意类</th></tr></thead><tbody><tr><td align="left">private私有的</td><td align="left">可以使用</td><td align="left">不可以使用</td><td align="left">不可以使用</td><td align="left">不可以使用</td></tr><tr><td align="left">默认的</td><td align="left">可以使用</td><td align="left">可以使用</td><td align="left">不可以使用</td><td align="left">不可以使用</td></tr><tr><td align="left">protected受保护的</td><td align="left">可以使用</td><td align="left">可以使用</td><td align="left">可以使用</td><td align="left">不可以使用</td></tr><tr><td align="left">public公共的</td><td align="left">可以使用</td><td align="left">可以使用</td><td align="left">可以使用</td><td align="left">可以使用</td></tr></tbody></table><p>例子：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="type">int</span> ages; <span class="comment">// 私有的，如封装便需要用到</span></span><br><span class="line">String name; </span><br><span class="line"></span><br><span class="line"><span class="comment">// 大多数情况下，方法的访问权限使用public</span></span><br></pre></td></tr></table></figure><h2 id="面向对象"><a href="#面向对象" class="headerlink" title="面向对象"></a>面向对象</h2><ul><li>Java中有3种变量：<br>  <code>实例变量</code>:存在于堆内存中<br>  <code>静态变量</code>:存在于本地内存区域(方法区)中<br>  <code>局部变量</code>:存在与栈内存中</li></ul><ul><li><p>面向对象<br>  对象：是实体，是生活中真实存在的事物。<br>  类：是模板，是一个抽象的概念。把对象共同的特征和行为抽取出来。</p><p>  实例：对象另一种说法<br>  实例化：类产生对象的过程        类—&gt;对象<br>  抽象：对象的共同特征和行为抽取出来，形成模板的过程。     对象—&gt;类</p></li><li><p>属性<br>  概念：也叫特征；是全局变量也叫实例变量。<br>  特点：属性以数据的方式呈现由对象所有，且每个对象都有一份实例变量有默认值,引用数据类型去做一个类的属性</p></li><li><p>行为<br>  行为也叫方法，代表此类的一个动作。<br>  这种方法也叫实例方法。<br>  这种方法由对象来调用，由对象所有。<br>  方法取名一般使用动词。</p></li></ul><ul><li><p>构造方法<br>  概念: 是与类同名的方法，也叫构造函数,也叫构造器<br>  特点：方法名与类同名<br>  比如： Student(); </p><p>  作用：用来给属性赋值(初始化属性)       给其他对象初始化.<br>  语法: [访问修饰符] 方法名(){ 方法体;}</p></li><li><p>缺省构造器: 无参构造方法<br>  如果类中没有声明任何构造方法，则在实例化时，会默认加载无参构造方法。<br>  支持方法重载<br>  在new对象时，进行调用</p></li></ul><h3 id="看代码-7"><a href="#看代码-7" class="headerlink" title="看代码"></a>看代码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 题一</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">String name;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Test01</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Test</span> <span class="variable">t</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Test</span>();</span><br><span class="line">        t.name = <span class="string">&quot;zhangsan&quot;</span>;</span><br><span class="line">        t = <span class="literal">null</span>;<span class="comment">//t地址为空，会报错</span></span><br><span class="line">        System.out.println(t.name);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//运行错误：NullPointerException:空指针异常</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 题二</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        Person p=<span class="keyword">new</span> <span class="title class_">Person</span>();</span><br><span class="line">        p.age=<span class="number">10</span>;</span><br><span class="line">        add(p);</span><br><span class="line">        System.out.println(p.age);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">add</span><span class="params">(Person p)</span> &#123;</span><br><span class="line">        p.age++;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">    <span class="type">int</span> age;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 最后输出什么？？？11</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 题三</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        Student s=<span class="keyword">new</span> <span class="title class_">Student</span>();</span><br><span class="line">        s.age = <span class="number">18</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Student</span> &#123;</span><br><span class="line">    String name;</span><br><span class="line">    <span class="type">int</span> age;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Student</span><span class="params">(<span class="type">int</span> a)</span>&#123;</span><br><span class="line">        age=a;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 运行错误，没有无参构造器</span></span><br></pre></td></tr></table></figure><h2 id="封装（private）"><a href="#封装（private）" class="headerlink" title="封装（private）"></a>封装（private）</h2><ul><li><p>概念<br>  把类的内部细节(属性，方法)进行隐藏，对外提供公开访问的方法让其他类进行访问，此种方式为封装。</p></li><li><p>作用<br>  可以防止恶意用户直接操作此属性或此方法，保证其安全性。</p></li><li><p>步骤<br>  属性私有化 private<br>  书写读写器 getXXX() setXXX()<br>  在写器中设置判断语句 </p></li></ul><p>技巧：当set返回当前对象时，在使用时就可以进行连缀操作</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 日期类：</span></span><br><span class="line"><span class="comment"> *   属性：年，月，日</span></span><br><span class="line"><span class="comment"> *   封装属性，要求：年份在0以上，月份为12个月，日不能超过31天</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Date</span> &#123;</span><br><span class="line">    <span class="comment">//编写实例变量</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> year;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> month;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> day;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getYear</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> year;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Date <span class="title function_">setYear</span><span class="params">(<span class="type">int</span> year)</span> &#123;</span><br><span class="line">        <span class="comment">//判断形参year的值是否在0以上，否则实例变量year的值为2021</span></span><br><span class="line">        <span class="keyword">if</span>(year &gt; <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="built_in">this</span>.year = year;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="built_in">this</span>.year = <span class="number">2021</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        如果条件满足则执行if完成赋值，并且返回当前对象，否则执行else完成赋值并且返回当前对象</span></span><br><span class="line"><span class="comment">        因此得到：无论条件是否满足都要执行返回当前对象</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getMonth</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> month;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Date <span class="title function_">setMonth</span><span class="params">(<span class="type">int</span> month)</span> &#123;</span><br><span class="line">        <span class="comment">//判断形参month的值是否在1---12范围内，满足赋值，否则将实例变量赋值为5</span></span><br><span class="line">        <span class="keyword">if</span>(month &gt;= <span class="number">1</span> &amp;&amp; month &lt;= <span class="number">12</span>)&#123;</span><br><span class="line">            <span class="built_in">this</span>.month = month;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="built_in">this</span>.month = <span class="number">5</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getDay</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> day;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Date <span class="title function_">setDay</span><span class="params">(<span class="type">int</span> day)</span> &#123;</span><br><span class="line">        <span class="comment">//判断形参day的值是否在1---31范围内，否则实例变量day的值为24</span></span><br><span class="line">        <span class="keyword">if</span>(day &gt;= <span class="number">1</span> &amp;&amp; day &lt;= <span class="number">31</span>)&#123;</span><br><span class="line">            <span class="built_in">this</span>.day = day;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="built_in">this</span>.day = <span class="number">24</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">测试类</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">package</span> demo1;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//创建日期对象</span></span><br><span class="line">        <span class="type">Date</span> <span class="variable">d</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Date</span>();</span><br><span class="line">        <span class="comment">//完成对实例变量赋值，则调用set方法完成</span></span><br><span class="line">        d.setYear(<span class="number">2009</span>);</span><br><span class="line">        <span class="comment">/*d.setMonth(71);</span></span><br><span class="line"><span class="comment">        d.setDay(11);*/</span></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        其实上面三条语句等价于如下一条语句</span></span><br><span class="line"><span class="comment">        因此得到结论：</span></span><br><span class="line"><span class="comment">            当set返回当前对象时，在使用时就可以进行连缀操作</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        d.setYear(<span class="number">2009</span>)</span><br><span class="line">                .setMonth(<span class="number">71</span>)</span><br><span class="line">                .setDay(<span class="number">11</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//输出实例变量的值，则调用get方法完成</span></span><br><span class="line">        System.out.println(d.getYear() + <span class="string">&quot;年&quot;</span> + d.getMonth() + <span class="string">&quot;月&quot;</span> + d.getDay() + <span class="string">&quot;日&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="继承-泛化（extends）"><a href="#继承-泛化（extends）" class="headerlink" title="继承\泛化（extends）"></a>继承\泛化（extends）</h2><p>发生在至少两个类<br>父类（别名：超类、基类、superclass）：放进其他类的共同属性和行为<br>子类（别名：派生类、扩展类、subclass）：放入其自己独有的属性和行为<br>遵循 is a原则，例如：cat is an Animal</p><p>特点：减少重复代码书写、耦合度高、单一继承</p><p>继承中，父类的私有属性不能被子类。<br>继承中，父类的构造方法不能被子类继承。</p><p>在Java中，Object类是所有类的父类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">编写父类语法格式：</span><br><span class="line">[修饰符] class 父类类名&#123;</span><br><span class="line">编写公共的属性和公共的方法</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">编写子类语法格式：</span><br><span class="line">[修饰符] class 子类类名 extends 父类类名&#123;</span><br><span class="line">编写独有的属性和独有的方法</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="关键字：this与super"><a href="#关键字：this与super" class="headerlink" title="关键字：this与super"></a>关键字：this与super</h2><h3 id="this"><a href="#this" class="headerlink" title="this"></a>this</h3><p>概念: 指代当前对象。是一个变量，是一个引用，且引用的是当前对象。</p><p>this代表的是对象本身（对象级别的）；所以所以可以输出（对象地址），可以调用实例变量和方法，但存在于堆区、不能用在静态方法中</p><p>this在大部分情况下是可以省略的。 </p><p>this可以在构造方法中使用，用来区分属性和局部变量（当属性和局部变量同名时）。</p><p>构造方法是可以在另外一个构造方法中调用<br>语法:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">this</span>(); <span class="comment">//调用无参构造方法</span></span><br><span class="line"><span class="built_in">this</span>(参数列表); <span class="comment">//调用带参构造方法</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">// 注意！！！写法必须是构造方法中的第一句话，并且只能用一次</span></span><br></pre></td></tr></table></figure><h3 id="super"><a href="#super" class="headerlink" title="super"></a>super</h3><p>概念: super是关键字，所代表的是来自于父类的那一部分特征。</p><p>super的语法:<br>super.属性: 调用父类的属性.<br>super.方法: 调用父类的方法. </p><p>super不是一个变量，不能输出。<br>super可以认为是this的一部分，但是它没有开辟任何的内存空间只负责调用来自父类的特征。</p><p>super关键字也可以省略。 </p><p>super在构造方法中的使用<br>子类不管发生什么情况，一定会<em>自动</em>去调用父类的无参构造方法<br>父类的无参构造方法，把它显示地声明出来。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">super</span>();  调用父类的无参构造方法</span><br><span class="line"><span class="built_in">super</span>(参数列表);调用父类的带参构造方法</span><br></pre></td></tr></table></figure><h3 id="区别-1"><a href="#区别-1" class="headerlink" title="区别"></a>区别</h3><p>this代表是当前对象，是一个变量，引用<br>super 不是一个变量，不会堆中开辟空间，super代表那个来自父类的那一部分特征<br>super是this的一部分</p><p>相同：<br>都可以调用属性，方法<br>都可以用在构造方法中。<br>都不能调用，用在静态方法。</p><h3 id="看代码-8"><a href="#看代码-8" class="headerlink" title="看代码"></a>看代码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">B</span>().show();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">A</span> &#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> <span class="string">&quot;小明&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">B</span> <span class="keyword">extends</span> <span class="title class_">A</span> &#123;</span><br><span class="line"></span><br><span class="line">    String name=<span class="string">&quot;张三&quot;</span>; <span class="comment">//可以允许子类定义与父类同名的属性</span></span><br><span class="line">    <span class="type">int</span> age;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">show</span><span class="params">()</span>&#123;</span><br><span class="line"></span><br><span class="line">        System.out.println(name);</span><br><span class="line">        System.out.println(<span class="built_in">this</span>.name); <span class="comment">//子类调用的是自己类中的name属性</span></span><br><span class="line">        System.out.println(<span class="built_in">super</span>.name);  <span class="comment">//父类特征</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//最后输出张三、张三、小明</span></span><br></pre></td></tr></table></figure><h2 id="多态"><a href="#多态" class="headerlink" title="多态"></a>多态</h2><ul><li><p>概念<br>  同一种事物，由于条件不同所得到的结果也不同。（多种形态、状态）</p></li><li><p>例子<br>  水。低温: 固态；常温: 液态；高温: 气态</p></li><li><p>需要满足三个步骤：<br>  要有继承结构<br>  要有方法重写<br>  父类引用，子类对象</p></li></ul><p><code>class Animal &#123;    &#125;</code><br><code>class Cat extend Animal&#123;    &#125;</code><br><code>Animal animal=new Cat();</code></p><ul><li>项目中的应用场合，一般是两种<ul><li>作为方法的参数：父类引用做方法参数使用<br>  <code>service(Friend friend);</code><br>  <code>Friend friend=new ChineseFriend();</code></li><li>作为方法返回类型使用:<br>  <code>public Pet getPet(int typeId)</code><br>  <code>Pet pet=getPet(1);</code></li></ul></li></ul><p><em>（静态绑定，编译阶段）</em>编译器会发现animal的类型是Animal类型，所以编译器会把Animal中的属性或方法给绑定上,如果属性和方法绑定上了，编译就通过；如果没有绑定上，则编译会出错；</p><p><em>（动态绑定，运行阶段）</em>接下来运行的时候，发现堆内存中实际存储的对象是Cat对象， 此时，就会把Cat类中相关属性或方法绑定上。</p><ul><li><p>语法<br>  向上转型 （类似于自动类型转换）： 子类—&gt;父类（低转高）<br>  Animal animal=new Dog();</p><p>  向下转型（类似于强制类型）: 父类—&gt;子类（高转低）<br>  有概率出错<br>  Dog dog=(Dog)animal;</p></li></ul><h3 id="看代码-9"><a href="#看代码-9" class="headerlink" title="看代码"></a>看代码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        Animal animal=<span class="keyword">new</span> <span class="title class_">Animal</span>() ;</span><br><span class="line">        Dog dog=<span class="keyword">new</span> <span class="title class_">Dog</span>();</span><br><span class="line">        Cat cat=<span class="keyword">new</span> <span class="title class_">Cat</span>();</span><br><span class="line">        dog=(Dog)animal;<span class="comment">//这里</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Animal</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">show</span><span class="params">()</span> &#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Cat</span> <span class="keyword">extends</span> <span class="title class_">Animal</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">play</span><span class="params">()</span>&#123; &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Dog</span> <span class="keyword">extends</span> <span class="title class_">Animal</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">swim</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//运行错误，从父类引用animal转为子类Dog类型时，转换出错。</span></span><br></pre></td></tr></table></figure><h2 id="关键字：instanceof"><a href="#关键字：instanceof" class="headerlink" title="关键字：instanceof"></a>关键字：instanceof</h2><p>用来判断变量名（父类）存放的是否是类名（子类）对象，如果存放在，则对象则结果为true，否则为false。</p><ul><li>语法：<br><code>if (变量名 instanceof 类名或者接口)&#123;    &#125;</code></li></ul><h2 id="抽象（abstract）"><a href="#抽象（abstract）" class="headerlink" title="抽象（abstract）"></a>抽象（abstract）</h2><p>一般在类上声明，同时可以声明抽象方法。但不能修饰属性！！!</p><p>抽象类中可以定义非抽象属性，方法，也可以定义抽象方法<br>抽象类不能实例化 ,实例化此抽象类下的子类</p><p>抽象父类有一个方法，子类可以选择不实现或去实现。如果子类选择了不实现，子类自己声明成abstract类即可。如果子类要实现，子类应该把此方法打开，书写方法内容。</p><p>抽象类中是否一定定义抽象方法？ 不一定<br>抽象方法是否一定存在于抽象类中？ 是的。</p><ul><li><p>修饰类:  抽象类<br>  抽象类的意义从语法角度说，里面加入一个抽象的方法</p><p>  语法: </p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">A</span>  &#123;</span><br><span class="line">    <span class="comment">//属性</span></span><br><span class="line">    <span class="type">int</span> a=<span class="number">1</span>;</span><br><span class="line">    抽象类中可以加入实例方法，变量，静态方法，变量</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><ul><li>修饰方法：抽象方法<br>  语法:<br>  <code>public abstract void show() &#123;    &#125;</code><br>  抽象类从实际应用来说，生活中是抽象的，代码也必须设计成抽象的形状<br>  <code>abstract class Shape &#123;    &#125;</code></li></ul><h2 id="接口（interface）"><a href="#接口（interface）" class="headerlink" title="接口（interface）"></a>接口（interface）</h2><ul><li>概念:<br>  接口是一个特殊的抽象类<br>  里面只有2个内容：静态常量，抽象方法</li><li>使用语法<br>  <code>[访问修饰符] interface 接口名 &#123; &#125;</code></li></ul><p>接口，可以看成定义为一种能力</p><p>接口不能实例化,需要实现类来实现<br>接口中的静态常量一般很少写，所以认为接口中就是抽象方法<br>抽象类和接口都不能创建对象，也就是说：抽象类和接口都是多态的一种形式</p><p>两个多<br>可以多实现<br>可以多继承</p><ol><li><p>在JDK8.0中，接口中包含：抽象方法(默认有public abstract)、公有静态常量(默认有public static final)、public static修饰的方法、public default修饰的方法</p></li><li><p>关系<br>在Java中，<code>类与类之间是继承</code>，也就是：子类继承父类，并且是<code>单继承</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">class A&#123;</span><br><span class="line">&#125;</span><br><span class="line">class B extends A&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在Java中，<code>接口与接口之间是继承</code>，也就是：子接口继承父接口，并且是<code>多继承</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">interface X&#123;</span><br><span class="line">&#125;</span><br><span class="line">interface Y&#123;</span><br><span class="line">&#125;</span><br><span class="line">interface Z extends X,Y&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在JAVA中，<code>类与接口之间是实现</code>，也就是：实现类实现接口，并且是<code>多实现</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">interface A1&#123;</span><br><span class="line">&#125;</span><br><span class="line">interface B1&#123;</span><br><span class="line">&#125;</span><br><span class="line">class C1 implements A1,B1&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>接口不能继承类</code></p></li><li><p>在一个类中，<code>该类既有继承也有实现，则继承必须位于实现的前面</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">public class A extends B implements X,Y &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>在Java中，接口中的抽象方法默认有<code>public abstract</code>,可以改写成如下</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Pet</span>&#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">eat</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>接口<code>不能创建对象</code>，也就是说：接口也是多态的一种形式<br> 比如：Pet p = new Dog();</p></li><li><p>接口也是一种数据类型，<code>属于引用数据类型</code>，在内存中存放的是地址(引用)</p></li><li><p>当实现类实现接口时，必须要<code>重写</code>接口中所有的<code>抽象方法</code>，否则实现类也是抽象类<br> 大多数情况下，实现类都要重写接口中的<code>所有抽象方法</code></p></li></ol><ul><li><p>接口和抽象类有和区别<br>  抽象类中可以有抽象方法，还有非抽象的属性和方法；接口只有抽象方法<br>  抽象类半抽象的；接口纯抽象。<br>  接口和抽象类都不能实例化<br>  抽象类只能实现单一继承，而接口多继承。</p></li><li><p>面向接口编程程序设计的步骤：<br>  定义一个接口，书写抽象方法<br>  定义一个实现类，实现接口中的所有抽象方法<br>  可以使用接口多态:<br>  语法:  <code>接口类型 接口名=new 实现类类名();</code></p></li></ul><h3 id="看代码-10"><a href="#看代码-10" class="headerlink" title="看代码"></a>看代码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Test01</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String name=<span class="string">&quot;a&quot;</span>; <span class="comment">//对的</span></span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> age=<span class="number">2</span>; <span class="comment">//对的</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">show</span><span class="params">()</span>; <span class="comment">//对的</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">print</span><span class="params">()</span>; <span class="comment">//对的</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">MyInterface</span><span class="params">()</span>; <span class="comment">//错的</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="title function_">sum</span><span class="params">()</span>; <span class="comment">//错的</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Object中有常见方法"><a href="#Object中有常见方法" class="headerlink" title="Object中有常见方法"></a>Object中有常见方法</h2><p><code>toString()</code>:把一个对象变成一个字符串<br><code>getClass()</code>：得到此对象所属类型<br><code>equals()</code> : 判断2个对象是否相等</p><p><code>hashCode()</code>: 得到对象哈希码值<br><code>finalize()</code>: 垃圾回收器清理不用对象</p><h3 id="看代码-11"><a href="#看代码-11" class="headerlink" title="看代码"></a>看代码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// equals() : 判断2个对象是否相等,重写equals</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test01</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span>  <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        String s1=<span class="string">&quot;abc&quot;</span>;</span><br><span class="line">        String s2=<span class="string">&quot;abc&quot;</span>;</span><br><span class="line">        System.out.println(s1.equals(s2));  <span class="comment">//true </span></span><br><span class="line"></span><br><span class="line">        Student s11=<span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&quot;zhangsan&quot;</span>,<span class="number">18</span>);</span><br><span class="line">        Student s21=<span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&quot;zhangsan&quot;</span>,<span class="number">18</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println(s11.equals(s11)); <span class="comment">//false</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Student</span> &#123;</span><br><span class="line">    String name;</span><br><span class="line">    <span class="type">int</span> age;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Student</span><span class="params">(String name,<span class="type">int</span> age)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name=name;</span><br><span class="line">        <span class="built_in">this</span>.age=age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 重写equals()方法</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">equals</span><span class="params">(Object obj)</span> &#123;</span><br><span class="line">        <span class="comment">//判断传入的对象是否为空</span></span><br><span class="line">        <span class="keyword">if</span> (obj==<span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (!(obj <span class="keyword">instanceof</span> Student))&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">this</span>==obj)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">boolean</span> isTrue;</span><br><span class="line">        <span class="comment">//把传入的对象变成学生类对象</span></span><br><span class="line">        Student s=(Student)obj;</span><br><span class="line">        <span class="comment">//重写思路:比较2个对象的内容是否相等</span></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         if (this.name.equals(s.name)&amp;&amp;this.age==s.age)&#123;</span></span><br><span class="line"><span class="comment">         isTrue=true;</span></span><br><span class="line"><span class="comment">         &#125;else &#123;</span></span><br><span class="line"><span class="comment">         isTrue=false;</span></span><br><span class="line"><span class="comment">         &#125;</span></span><br><span class="line"><span class="comment">         return isTrue;</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">         <span class="comment">//简化后如下</span></span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.name.equals(s.name)&amp;&amp;<span class="built_in">this</span>.age==s.age;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="内部类"><a href="#内部类" class="headerlink" title="内部类"></a>内部类</h2><p>概念: 在一个类中再编写一个类。里面的这个类，称为内部类，也叫做内置类或者叫做嵌套类</p><ul><li>成员内部类<br>  作为外部类的一个成员</li><li>静态内部类<br>  此类为静态的</li><li>局部内部<br>  在方法定义中的类</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyClass</span> &#123;</span><br><span class="line">    <span class="comment">//称为成员变量</span></span><br><span class="line">    <span class="type">int</span> a;</span><br><span class="line">    <span class="comment">//称为成员方法，也可以叫做实例方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">print</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">Inner</span> <span class="variable">i</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Inner</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//称为内部类，也可以叫做成员内部类，一般是在外部类的实例方法中使用</span></span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">Inner</span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//称为成员方法，也叫做静态方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">show</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">Inner2</span> <span class="variable">i</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Inner2</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//在内部类前面编写static关键字，称为静态内部类，一般在外部类的静态方法中使用</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">Inner2</span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">print3</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">int</span> num; <span class="comment">//局部变量</span></span><br><span class="line">        <span class="keyword">class</span> <span class="title class_">Inner3</span>&#123; <span class="comment">//称为局部内部类</span></span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>匿名内部类（重点）<br>  代表此类没有名字。 是一种特殊的局部内部类。</li></ul><p>当只创建一次对象时，可以使用匿名内部类完成。<br>当使用匿名内部类前提，必须要继承父类或者实现接口。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">语法: </span><br><span class="line"><span class="keyword">new</span> 要实现的接口名称()/要继承的类名() &#123;</span><br><span class="line">接口中的方法()/父类的方法()实现 </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 例子一</span></span><br><span class="line"><span class="comment">// 接口</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Pet</span> &#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">eat</span><span class="params">()</span>; <span class="comment">//编写吃的抽象方法</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 测试类</span></span><br><span class="line"><span class="type">Pet</span> <span class="variable">p1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Pet</span>()&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">eat</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;正在吃Xxxxxx....&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line">p1.eat();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 上下两个等价</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//其实只创建一次对象时， 还可以使用匿名内部类完成</span></span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Pet</span>()&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">eat</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;正在吃Xxxxxx....&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;.eat();</span><br></pre></td></tr></table></figure><h2 id="类与类之间的关系"><a href="#类与类之间的关系" class="headerlink" title="类与类之间的关系"></a>类与类之间的关系</h2><ol><li>继承(泛化)<br>子类继承父类，子接口继承父接口</li><li>实现<br>实现类实现接口</li><li>依赖<br>如果A类中方法的返回值类型或者参数列表或者局部变量使用到了B类，则称为A类依赖于B类</li><li>关联<br>如果A类中使用B类定义了成员变量，则称为A类关联B类</li><li>聚合<br>聚合也是关联的一种，如果A类中包含若干个B类，但是A类不能限定B类的生命周期，称为A类为聚合类</li><li>组合<br>组合也是关联的一种，如果A类中包含若干个B类，但是A类能限定B类的生命周期，称为A类为组合类</li></ol><h2 id="异常"><a href="#异常" class="headerlink" title="异常"></a>异常</h2><ul><li><p>概念:<br>  一段程序代码在执行过程中，遇到了不正常的事件，发生了中断，这种方式为异常。</p></li><li><p>异常有分类: (应用级别)</p><ul><li>检查异常（checked异常）<br>  编译时，会检查此异常，必须先去解决，否则编译不通过</li><li>非检查异常（unchecked异常: ）<br>  编译正确，不报错，但是运行时会引发此异常</li></ul></li></ul><p>抛出异常遵循的是反向链的调用方式</p><ul><li><p>异常结构图:  api类库结构图<br>  根类: <code>Throwable</code><br>  子类： <code>Error(系统级)</code>   <code>Exception(应用级)</code><br>  常见的应用级(应用级)： <code>NullPointerException ClassCastException, ArithemeticException,InputMismatchException,ArrayIndexOutOfBoundsException</code> …….</p></li><li><p>Java异常处理机制<br>  try: 尝试<br>  catch: 捕获<br>  finally: 最终，用来释放资源 ，关闭<br>  throw: 抛: 语句级<br>  throws：方法定义抛出异常</p></li></ul><h3 id="throw和throws"><a href="#throw和throws" class="headerlink" title="throw和throws"></a>throw和throws</h3><p>在实际工作项目中，建议throw和throws两个关键字同时书写，避免出现异常无法处理</p><ul><li>throw: 语句抛异常<br>语法: <code>throw 要抛出的异常对象;</code><br>举例：<code> throw new RuntimeException();</code></li></ul><p>throw用在方法内部语句抛出异常</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">show</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(); <span class="comment">//语句级异常</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>throws: 方法抛异常<br>语法: <code>throws 要抛出的异常类名</code><br>举例： <code>throws RuntimeException</code></li></ul><p>throws关键字写在方法定义的小括号的后面</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">show</span><span class="params">()</span><span class="keyword">throws</span> 要抛出的异常类名&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="try…catch…finally"><a href="#try…catch…finally" class="headerlink" title="try…catch…finally"></a>try…catch…finally</h3><p><code>try</code>必须，<code>catch,finally</code>不一定具备</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 捕获多个异常，多重catch选择结构。（类似if() else if()）</span></span><br><span class="line"><span class="comment">// 注意：书写异常的顺序按照有小到大的顺序</span></span><br><span class="line"><span class="comment">//catch(异常类1|异常类2 引用)    //jdk1.5新特性</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"></span><br><span class="line">&#125;<span class="keyword">catch</span>()&#123;</span><br><span class="line"></span><br><span class="line">&#125;<span class="keyword">catch</span>()&#123;</span><br><span class="line"></span><br><span class="line">&#125;<span class="keyword">catch</span>()&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">......</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 完整语法</span></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="comment">//要监控的代码</span></span><br><span class="line">&#125;<span class="keyword">catch</span>(要捕获的异常类名 此异常类名产生的引用(变量)) &#123;</span><br><span class="line"><span class="comment">//捕获异常后要做的事情</span></span><br><span class="line"><span class="comment">//以下为常用错误</span></span><br><span class="line"><span class="comment">//设计异常输出内容: System.err.println(&quot;这写自定义的东西&quot;);</span></span><br><span class="line"><span class="comment">//打印异常的消息: System.out.println(引用.getMessage()); </span></span><br><span class="line"><span class="comment">//打印异常跟踪信息: 引用.printStackTrace();</span></span><br><span class="line"></span><br><span class="line">&#125;<span class="keyword">finally</span> &#123;</span><br><span class="line"><span class="comment">//要释放的资源,要关闭的内容 </span></span><br><span class="line"><span class="comment">//数据库用完后的完毕</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="自己写异常类"><a href="#自己写异常类" class="headerlink" title="自己写异常类"></a>自己写异常类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">年龄设置0至100岁，否则异常输出</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="comment">//测试类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestAges</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Ages</span> <span class="variable">ages</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Ages</span>();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            ages.setAge(<span class="number">200</span>);</span><br><span class="line">        &#125;<span class="keyword">catch</span> (AgesException e)&#123;</span><br><span class="line">            System.err.println(<span class="string">&quot;输出红色字体&quot;</span>);</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;继续运行&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//年龄类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Ages</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setAge</span><span class="params">(<span class="type">int</span> age)</span> <span class="keyword">throws</span> AgesException &#123;</span><br><span class="line">        <span class="keyword">if</span> (age&gt;= <span class="number">0</span> &amp;&amp; age&lt;= <span class="number">100</span>) &#123;</span><br><span class="line">            <span class="built_in">this</span>.age = age;</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">AgesException</span>(<span class="string">&quot;抛出异常&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//自定义异常类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AgesException</span> <span class="keyword">extends</span> <span class="title class_">Exception</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">AgesException</span><span class="params">(String message)</span>&#123;</span><br><span class="line">        <span class="built_in">super</span>(message);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="看代码-12"><a href="#看代码-12" class="headerlink" title="看代码"></a>看代码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 题目一</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="type">int</span> a=<span class="number">10</span>;</span><br><span class="line">        <span class="type">int</span> b=<span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> c=a/b;</span><br><span class="line">    &#125;<span class="keyword">catch</span>(Exception e) &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;出错了!&quot;</span>);</span><br><span class="line"></span><br><span class="line">    &#125;<span class="keyword">catch</span>(ArithemeticException e) &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;出错了2!&quot;</span>);</span><br><span class="line">        </span><br><span class="line">    &#125;<span class="keyword">catch</span>(InputMismatchException e) &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;出错了3!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 多重catch有顺序 ...由小到大。</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 题目二</span></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="type">int</span> a=<span class="number">10</span>;</span><br><span class="line">    <span class="type">int</span> b=<span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> c=a/b;</span><br><span class="line"></span><br><span class="line">&#125;<span class="keyword">catch</span>(Exception e) &#123;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">    e.printStackTrace();</span><br><span class="line">    System.err.println(<span class="string">&quot;异常发生&quot;</span>);  <span class="comment">//运行出错，return后续代码不会执行</span></span><br><span class="line"></span><br><span class="line">&#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;代码结束&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//题目三</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Super</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">m1</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IOException</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Sub</span> <span class="keyword">extends</span> <span class="title class_">Super</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">m1</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//子类抛出异常必须比父类抛出的异常要小或者是没有。</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//题目四</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test01</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Test02.add(<span class="number">0</span>);</span><br><span class="line">            System.out.println(<span class="string">&quot;异常发生了&quot;</span>);</span><br><span class="line"></span><br><span class="line">        &#125;<span class="keyword">catch</span>(Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            System.err.println(<span class="string">&quot;处理异常&quot;</span>);</span><br><span class="line">            </span><br><span class="line">        &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;处理结束&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Test02</span>  &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">add</span><span class="params">(<span class="type">int</span> i)</span> <span class="keyword">throws</span> RuntimeException&#123;</span><br><span class="line">            <span class="keyword">if</span> (i==<span class="number">0</span>)&#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>();</span><br><span class="line">            &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;此处异常&quot;</span>);</span><br><span class="line">        i++;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//最后输出:处理异常     异常结束</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//题目四</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test01</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">int</span> s=getValue(<span class="number">10</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">getValue</span><span class="params">(<span class="type">int</span> i)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> i; <span class="comment">//编译出错，方法最后没有返回值</span></span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            i++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h2><ul><li><p>概念<br>  是引用数据类型，类似一个盒子，可以存放多个数据，并且相同的数据类型、固定的空间大小。</p></li><li><p>特点<br>  固定的空间大小，一次可以开辟一块连续的区域。<br>  每个空间有标识符下标，作用是根据下标，找到此空间中的数据<br>  空间大小是固定的，但可以扩充的。<br>  数组是引用数据类型<br>  数组中放入的数据可以是基本数据类型，也可以是引用数据类型 。</p></li><li><p>数组的4大要素<br>  数组的数据类型<br>  数组名<br>  数组的长度<br>  下标 </p></li><li><p>优缺点<br>  <em>查找效率高。</em>有连续的空间、空间大小相同、有下标、首个空间的地址就是数组地址，通过偏移量和表达式运算计算出元素所在内存地址位置<br>  <em>插入或删除效率比较低。</em>会导致其他元素发生移位。</p></li></ul><p>数组如果没有赋值，则会有默认值出现。</p><h3 id="一维数组"><a href="#一维数组" class="headerlink" title="一维数组"></a>一维数组</h3><ul><li><p>动态声明（声明时，只开空间不赋值）<br>  数据类型[] 数组名=new 数据类型[数组大小];<br>  <code>Int[] a = new int[3];</code></p><p>  数据类型[] 数组名=new 数据类型[]{元素1,元素2,……}<br>  <code>int[] a = new int[] &#123;1,2,3&#125;;</code></p></li><li><p>静态声明（声明时，一并赋值）<br>  数据类型[] 数组名={元素1,元素2,……};<br>  <code>Int[] a = &#123;1,2,3&#125;</code><br>  <code>数组名[下标]=值;</code></p></li><li><p>扩充</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 一对一扩充</span></span><br><span class="line"><span class="type">int</span>[] a=&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;;    </span><br><span class="line"><span class="type">int</span>[] b=<span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">6</span>];  </span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;a.length;i++) &#123;</span><br><span class="line">    b[i]=a[i];</span><br><span class="line">&#125;</span><br><span class="line">a=b;<span class="comment">// b指向a，数组扩充完毕</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//arraycopy方法扩充</span></span><br><span class="line"><span class="comment">//语法：System.arraycopy(原数组,哪里开始,新数组,新数组的开始,新数组的结束);</span></span><br><span class="line"><span class="comment">// 把ints列表的前三，复制到ints2空列表的前三上</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="type">int</span>[] ints = &#123;<span class="number">11</span>, <span class="number">22</span>, <span class="number">33</span>, <span class="number">44</span>, <span class="number">55</span>, <span class="number">66</span>&#125;;</span><br><span class="line">    <span class="type">int</span>[] ints2 = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">10</span>];</span><br><span class="line">    System.arraycopy(ints, <span class="number">0</span>, ints2, <span class="number">0</span>, <span class="number">3</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// System.arraycopy(src ,srcPos ,dest ,destPos ,length); `</span></span><br><span class="line"><span class="comment">// 可以把src数组中从srcPos开始的length个元素复制到dest数组从destPos开始的位置上</span></span><br><span class="line"><span class="comment">// 把ints列表的前三，复制到ints2空列表的前三上</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="type">int</span>[] ints = &#123;<span class="number">11</span>, <span class="number">22</span>, <span class="number">33</span>, <span class="number">44</span>, <span class="number">55</span>, <span class="number">66</span>&#125;;</span><br><span class="line">    <span class="type">int</span>[] ints2 = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">10</span>];</span><br><span class="line">    System.arraycopy(ints, <span class="number">0</span>, ints2, <span class="number">0</span>, <span class="number">3</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i : ints2) &#123;</span><br><span class="line">        System.out.println(i);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="二维数组"><a href="#二维数组" class="headerlink" title="二维数组"></a>二维数组</h3><ul><li><p>概念:<br>  二维数组是特殊的一维数组，是一维数组的嵌套。 </p></li><li><p>静态声明<br>  数据类型[][] 二维数组名={二维数组中的元素1，元素2}<br>  这里的二维数组元素是指一维数组<br>  <code>int[] a=&#123;&#125;;</code></p></li><li><p>动态声明<br>  数据类型[][] 二维数组名=new int [长度][一堆数组长度];</p><p>  数据类型[二维数组的总长度][二维数组中每一个一维数组的长度]<br>  <code>int[] a = new int[2][3];</code></p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 二维数组遍历（类似九九乘法表）</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">show</span><span class="params">(<span class="type">int</span>[][] array)</span> &#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;array.length;i++) &#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;array[i].length;j++) &#123;</span><br><span class="line">System.out.print(array[i][j]+<span class="string">&quot;\t&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">System.out.println();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="可变长参数"><a href="#可变长参数" class="headerlink" title="可变长参数"></a>可变长参数</h3><ul><li><p>概念<br>  可变长参数用于接收任意个数据， 即该参数接收数据的数量是可以变化的。</p></li><li><p>语法<br>  <code>修饰符 返回值类型 方法名（ 参数类型 参数名，  参数类型… 参数名）&#123;   &#125;</code></p></li><li><p>说明<br>  一个方法最多只能有一个变长参数， 并且变长参数只能放在参数列表的最后<br>  在参数类型与参数名之间使用三个小点表示变长参数<br>  在调用方法时，可以给变长参数传递任意个数据<br>  在方法体中可以把变长参数当作数组使用</p></li><li><p>例子</p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test06</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//在调用方法时, 可以给变长参数传递任意个数据</span></span><br><span class="line">        sum();</span><br><span class="line">        sum(<span class="number">1</span>);</span><br><span class="line">        sum(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>);</span><br><span class="line">        sum(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">10</span>);</span><br><span class="line">        <span class="type">int</span>[] ints = &#123;<span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>&#125;;</span><br><span class="line">        sum(ints);    <span class="comment">//也可以给变长参数传递一个存储整数的数组</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//定义方法,计算 若干整数 的和, 就可以使用变长参数来接收这些整数</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">sum</span><span class="params">( <span class="type">int</span>... data)</span> &#123;</span><br><span class="line">        <span class="comment">//在方法体中可以把变长参数当作数组来用</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">sum</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; data.length; i++) &#123;</span><br><span class="line">            sum += data[i];</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;sum = &quot;</span> + sum);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="看代码-13"><a href="#看代码-13" class="headerlink" title="看代码"></a>看代码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span>[][] bb=<span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">2</span>][];  对的 :二维数组长度必须先声明   </span><br><span class="line"><span class="type">int</span>[][] cc=<span class="keyword">new</span> <span class="title class_">int</span>[][<span class="number">3</span>];  错的:没有二维数组总长度。</span><br><span class="line"></span><br><span class="line"><span class="comment">// 题目一</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Test01</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">int</span>[] a;</span><br><span class="line">        a=&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;;  <span class="comment">//编译出错，出错原因就是此为静态声明,声明和赋值同时进行，不能分开。</span></span><br><span class="line"></span><br><span class="line">        <span class="type">int</span>[] b;</span><br><span class="line">        b=<span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">2</span>];  <span class="comment">//正确的，因为动态声明不要求声明时给值，可以先定义，然后再开空间最后再给值。</span></span><br><span class="line"></span><br><span class="line">        <span class="type">int</span>[] aa=<span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">3</span>]; <span class="comment">//正确的</span></span><br><span class="line">        </span><br><span class="line">        <span class="type">int</span>[] bb=<span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">3</span>]&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;; <span class="comment">//错误的</span></span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> cc=&#123;<span class="number">1</span>,<span class="number">23</span>,<span class="number">3</span>&#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 题目二</span></span><br><span class="line"><span class="type">int</span>[][] aa=<span class="keyword">new</span> <span class="title class_">int</span>[][]&#123;&#123;<span class="number">1</span>,<span class="number">2</span>&#125;,&#123;<span class="number">3</span>,<span class="number">4</span>&#125;&#125;; <span class="comment">//这是二位数组的动态赋值</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span>[][] bb=<span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">2</span>][];  <span class="comment">//对的:二维数组长度必须先声明   </span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span>[][] cc=<span class="keyword">new</span> <span class="title class_">int</span>[][<span class="number">3</span>];  <span class="comment">//错的:没有二维数组总长度</span></span><br></pre></td></tr></table></figure><h2 id="foreach循环"><a href="#foreach循环" class="headerlink" title="foreach循环"></a>foreach循环</h2><p>快捷键：iter回车<br>使用foreach循环,增强的for循环遍历数组中的元素,格式为</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>( 数据类型 变量名  :  数组名 )&#123;</span><br><span class="line">    循环体</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>说明:<br>    数据类型就是数组中元素的类型,如果数组存储int整数则数据类型就是int, 如果数组中存储double小数则数据类型就是double, 如果数组中存储String字符串则数据类型就是String<br>    变量名由程序员自己命名, 只在当前foreach循环中有效<br>    执行过程, 会把数组的每个元素依次赋值给变量,再执行循环体<br>    foreach循环与for循环都可以遍历访问数组的所有元素,<code>但是foreach循环仅用于遍历访问</code>, for循环不仅可以读数组元素,还可以修改数组元素</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 例子</span></span><br><span class="line"><span class="type">int</span> [] ints = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;; <span class="comment">// 简化版赋值</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i : ints) &#123;</span><br><span class="line">    System.out.println(i);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="十大经典排序算法"><a href="#十大经典排序算法" class="headerlink" title="十大经典排序算法"></a>十大经典排序算法</h2><p><a href="https://www.runoob.com/w3cnote/ten-sorting-algorithm.html">https://www.runoob.com/w3cnote/ten-sorting-algorithm.html</a></p><p>冒泡排序思路:从前向后两两比较, 把大的数交换到后面就实现了由小到大的排序<br>选择排序思路: 从当前数组元素中选择最小的交换到前面</p><p>二分查找, 前提是数组已经实现了由小到大的排序, 始终与中间的元素比较大小, 如果比中间元素小,把范围缩小到左一半, 如果比中间元素大就把范围缩小到右一半</p><h2 id="常用方法"><a href="#常用方法" class="headerlink" title="常用方法"></a>常用方法</h2><h3 id="字符串类"><a href="#字符串类" class="headerlink" title="字符串类"></a>字符串类</h3><ul><li>概念<br>  String是一个引用数据类型，代表字符串，符号是一对双引号。并且是一个常量,此常量位于常量池。</li></ul><p>实际项目中字符串拼接不要用<em>加号</em>，因为会大量产生常量并且占空间。</p><p>String 字符串名=”字符串内容”;<br>举例: <code>String str=&quot;hello&quot;;</code>  </p><p>String 字符串名=new String(“字符串内容”);<br>举例:<code>String str=new String(&quot;world&quot;);</code> </p><h4 id="字节数组—-gt-字符串"><a href="#字节数组—-gt-字符串" class="headerlink" title="字节数组—&gt;字符串"></a>字节数组—&gt;字符串</h4><ul><li>语法<br>  <code>String(字节数组byte[] ,开始,结束);</code></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">byte</span>[] bytes = &#123;<span class="number">65</span>,<span class="number">66</span>,<span class="number">67</span>,<span class="number">68</span>,<span class="number">69</span>,<span class="number">70</span>,<span class="number">71</span>,<span class="number">72</span>,<span class="number">73</span>,<span class="number">74</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="type">String</span> <span class="variable">s2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(bytes,<span class="number">3</span>,<span class="number">5</span>);</span><br><span class="line">System.out.println(s2); <span class="comment">// DEFGH</span></span><br><span class="line"></span><br><span class="line"><span class="type">String</span> <span class="variable">s3</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(bytes);</span><br><span class="line">System.out.println(s3); <span class="comment">//ABCDEFGHIJ</span></span><br></pre></td></tr></table></figure><h4 id="字符数组—-gt-字符串"><a href="#字符数组—-gt-字符串" class="headerlink" title="字符数组—&gt;字符串"></a>字符数组—&gt;字符串</h4><p>在实际开发中,可能调用某个方法获得一个字符数组, 可以把字符数组中的字符连接为字符串</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">char</span> [] chars = &#123;<span class="string">&#x27;A&#x27;</span>,<span class="string">&#x27;b&#x27;</span>,<span class="string">&#x27;6&#x27;</span>,<span class="string">&#x27;*&#x27;</span>,<span class="string">&#x27;汉&#x27;</span>,<span class="string">&#x27;字&#x27;</span>,<span class="number">97</span>, <span class="number">98</span>, <span class="number">30686</span>, <span class="number">30988</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="type">String</span> <span class="variable">s</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(chars);<span class="comment">//把chars数组中所有的字符连接为字符串</span></span><br><span class="line">System.out.println(s); <span class="comment">// Ab6*汉字ab矞礌</span></span><br><span class="line"></span><br><span class="line"><span class="type">String</span> <span class="variable">s2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(chars,<span class="number">0</span>,<span class="number">5</span>);</span><br><span class="line">System.out.println(s2); <span class="comment">// Ab6*汉             把chars数组中从0开始 的5个字符连接为字符串</span></span><br></pre></td></tr></table></figure><h4 id="索引值-和-符串的长度"><a href="#索引值-和-符串的长度" class="headerlink" title="索引值  和  符串的长度"></a>索引值  和  符串的长度</h4><p>标获取此下标对应的字符<br><code>String.charAt(下标)</code></p><p>返回字符串的长度<br><code>String.length()</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">s</span> <span class="operator">=</span> <span class="string">&quot;hello进阶&quot;</span>;</span><br><span class="line"></span><br><span class="line">System.out.println(s.charAt(<span class="number">0</span>)); <span class="comment">//h    显示第 0 个索引值</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; s.length(); i++) &#123;</span><br><span class="line">    System.out.print(s.charAt(i) + <span class="string">&quot;    &quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// h    e    l    l    o    进    阶</span></span><br></pre></td></tr></table></figure><h4 id="比较大小"><a href="#比较大小" class="headerlink" title="比较大小"></a>比较大小</h4><p>比较当前字符串与参数字符串的大小<code>(ASCII码顺序)</code>,如果当前字符串大返回正数, 参数字符串大返回负数,相等返回0<br><code>compareTo(String anotherString)</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">System.out.println(<span class="string">&quot;hello&quot;</span>.compareTo(<span class="string">&quot;你好啊啊啊&quot;</span>)); <span class="comment">// -20216 返回负数说明 compareTo()里的数大</span></span><br><span class="line">System.out.println( <span class="string">&quot;hello&quot;</span>.compareTo(<span class="string">&quot;hello&quot;</span>));  <span class="comment">//0  返回0，相等</span></span><br><span class="line">System.out.println(<span class="string">&quot;你好啊啊啊&quot;</span>.compareTo(<span class="string">&quot;hello&quot;</span>)); <span class="comment">// 20216 返回正数说明 compareTo()里的数小</span></span><br></pre></td></tr></table></figure><p><em>忽略大小写</em>后再比较两个字符串的大小<br><code>compareToIgnoreCase(String str)  </code><br>String类定义时,实现了Comparable接口,重写它的抽象方法compareTo()方法, 逐个比较字符串的每个字符,遇到第一个不相等的字符,码值相减</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">System.out.println(<span class="string">&quot;hello&quot;</span>.compareToIgnoreCase(<span class="string">&quot;HELLO&quot;</span>)); <span class="comment">// 0 返回0，相等</span></span><br></pre></td></tr></table></figure><h4 id="是否包含XXX"><a href="#是否包含XXX" class="headerlink" title="是否包含XXX"></a>是否包含XXX</h4><p>返回的是布尔值</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">s</span> <span class="operator">=</span> <span class="string">&quot;hello进阶&quot;</span>;</span><br><span class="line"></span><br><span class="line">System.out.println(s.contains(<span class="string">&quot;hello&quot;</span>)); <span class="comment">//true  ,s字符串包含Hello</span></span><br><span class="line">System.out.println(s.startsWith(<span class="string">&quot;hello&quot;</span>)); <span class="comment">//true,  s字符串以hello开始</span></span><br><span class="line">System.out.println(s.endsWith(<span class="string">&quot;hello&quot;</span>)); <span class="comment">//false, s字符串不是以hello结尾</span></span><br><span class="line">System.out.println(s.equals(<span class="string">&quot;hello进阶&quot;</span>)); <span class="comment">//true s字符完全相等</span></span><br><span class="line">System.out.println(s.equalsIgnoreCase(<span class="string">&quot;Hello进阶&quot;</span>)); <span class="comment">//true s字符忽略大小写，完全相等</span></span><br></pre></td></tr></table></figure><h4 id="编码转换"><a href="#编码转换" class="headerlink" title="编码转换"></a>编码转换</h4><p>返回字符串在当前默认编码下对应的字节数组<br><code>byte[] getBytes() </code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//当前编码是UTF-8</span></span><br><span class="line"><span class="type">String</span> <span class="variable">s</span> <span class="operator">=</span> <span class="string">&quot;hello进阶&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">byte</span>[] bytes = s.getBytes();<span class="comment">//返回s字符串在当前默认编码(UTF-8)下对应的字节数组, 在UTF-8编码中, 一个英文字符占1字节, 一个汉字占3字节</span></span><br><span class="line">System.out.println(Arrays.toString(bytes));<span class="comment">//[104, 101, 108, 108, 111, -24, -65, -101, -23, -104, -74]</span></span><br></pre></td></tr></table></figure><p>返回当前字符串在指定的charsetName编码下对应的字节数组<br><code>byte[] getBytes(String charsetName)  </code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//当前编码是UTF-8</span></span><br><span class="line"><span class="comment">//把字符串转换为指定GB2312编码下对应的字节数组  !!如果显示错误需要在main方法说明以下</span></span><br><span class="line"></span><br><span class="line"><span class="type">String</span> <span class="variable">s</span> <span class="operator">=</span> <span class="string">&quot;hello进阶&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">byte</span>[] gb2312s = s.getBytes(<span class="string">&quot;GB2312&quot;</span>); <span class="comment">//GB2312是一种汉字编码,在这种编码中,一个英文 占1字节, 一个汉字占2字节,</span></span><br><span class="line">System.out.println( Arrays.toString(gb2312s )); <span class="comment">//[72, 101, 108, 108, 111, -74, -81, -63, -90, -67, -38, -75, -29]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//同样可以把gbks字节数组中的字节,再以GB2312编码解析为字符串</span></span><br><span class="line"><span class="type">String</span> <span class="variable">s1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(gb2312s,<span class="string">&quot;GB2312&quot;</span>);</span><br><span class="line">System.out.println(s1);<span class="comment">// hello进阶</span></span><br></pre></td></tr></table></figure><h4 id="返回索引值"><a href="#返回索引值" class="headerlink" title="返回索引值"></a>返回索引值</h4><p>返回str在当前字符串中第一次出现的索引值<br><code>int indexOf(String str)</code></p><p>返回str在当前字符串中最后一次出现的索引值<br><code>int lastIndexOf(String str) </code> </p><p>返回当前字符串中从beginIndex开始 的字符串<br><code>String substring(int beginIndex) </code></p><p>返回当前字符串中[beginInex, endIndex)范围内的字符串<br><code>String substring(int beginIndex, int endIndex) </code> </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">path</span> <span class="operator">=</span> <span class="string">&quot;C:\\Users\\HuLu\\Desktop\\JavaProjects\\JavaSE\\src\\Test.java&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="variable">slash</span> <span class="operator">=</span> path.lastIndexOf(<span class="string">&quot;\\&quot;</span>); <span class="comment">// 45  最后一个 \\ 在第45</span></span><br><span class="line">System.out.println(slash);</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="variable">dot</span> <span class="operator">=</span> path.indexOf(<span class="string">&quot;.&quot;</span>); <span class="comment">// 50 第一次出现 . 是在第50</span></span><br><span class="line">System.out.println(dot);</span><br><span class="line"></span><br><span class="line"><span class="type">String</span> <span class="variable">filename</span> <span class="operator">=</span> path.substring(slash + <span class="number">1</span> ,dot); <span class="comment">// Test 返回当前字符串中(46,50]范围内的字符串</span></span><br><span class="line">System.out.println(filename);</span><br></pre></td></tr></table></figure><h4 id="字符串—-gt-符数组"><a href="#字符串—-gt-符数组" class="headerlink" title="字符串—&gt;符数组"></a>字符串—&gt;符数组</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">s</span> <span class="operator">=</span> <span class="string">&quot;hello进阶&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">char</span>[] chars = s.toCharArray();</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="type">char</span> c : chars) &#123;</span><br><span class="line">    System.out.print(c + <span class="string">&quot;    &quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// h    e    l    l    o    进    阶</span></span><br></pre></td></tr></table></figure><h4 id="大小写转换"><a href="#大小写转换" class="headerlink" title="大小写转换"></a>大小写转换</h4><p>把字符串中的大写字母转换为小写,返回新的字符串,原来的字符串不变<br><code>String toLowerCase()</code> </p><p>把字符串中的小写字母转换为大写,返回新的字符串,原来的字符串不变<br><code>String toUpperCase()</code>  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">s1 = <span class="string">&quot;Good Good Study&quot;</span>;</span><br><span class="line"><span class="type">String</span> <span class="variable">lowerCase</span> <span class="operator">=</span> s1.toLowerCase();</span><br><span class="line"><span class="type">String</span> <span class="variable">upperCase</span> <span class="operator">=</span> s1.toUpperCase();</span><br><span class="line">System.out.println( lowerCase );    <span class="comment">//good good study</span></span><br><span class="line">System.out.println( upperCase );     <span class="comment">//GOOD GOOD STUDY</span></span><br><span class="line">System.out.println( s1 );       <span class="comment">//Good Good Study</span></span><br></pre></td></tr></table></figure><h4 id="去掉前后的空白符"><a href="#去掉前后的空白符" class="headerlink" title="去掉前后的空白符"></a>去掉前后的空白符</h4><p>去掉前后的空白符, 返回新的字符串, 原来字符串不变<br><code>String trim() </code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">s1 = <span class="string">&quot;     Hello   world         &quot;</span>;</span><br><span class="line"><span class="type">String</span> <span class="variable">trim</span> <span class="operator">=</span> s1.trim();</span><br><span class="line">System.out.println(<span class="string">&quot;**&quot;</span> + trim + <span class="string">&quot;**&quot;</span>); <span class="comment">//**Hello   world**</span></span><br><span class="line">System.out.println(<span class="string">&quot;**&quot;</span> + s1 + <span class="string">&quot;**&quot;</span>); <span class="comment">//**     Hello   world         **</span></span><br></pre></td></tr></table></figure><h4 id="类型的数据转换"><a href="#类型的数据转换" class="headerlink" title="类型的数据转换"></a>类型的数据转换</h4><p>把其他类型的数据转换为String字符串<br><code>static String valueOf(int i)  </code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="variable">num</span> <span class="operator">=</span> <span class="number">456</span>;</span><br><span class="line"><span class="type">String</span> <span class="variable">s1</span> <span class="operator">=</span> String.valueOf(num);<span class="comment">//把整数转换为字符串</span></span><br><span class="line">System.out.println(s1); <span class="comment">//456</span></span><br><span class="line"></span><br><span class="line"><span class="type">String</span> <span class="variable">s2</span> <span class="operator">=</span> <span class="string">&quot;789&quot;</span>;</span><br><span class="line"><span class="type">int</span> <span class="variable">num2</span> <span class="operator">=</span> Integer.parseInt(s2);<span class="comment">//可以把数字字符串转换为整数</span></span><br><span class="line"></span><br><span class="line">System.out.println(num2); <span class="comment">//789</span></span><br></pre></td></tr></table></figure><h4 id="与正则匹配"><a href="#与正则匹配" class="headerlink" title="与正则匹配"></a>与正则匹配</h4><p>String类中与正则表达式相关的几个方法<br>判断字符串是否匹配regex正则表达式<br><code>boolean matches(String regex)  </code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Scanner</span> <span class="variable">sc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">System.out.println(<span class="string">&quot;请输入手机号&quot;</span>);</span><br><span class="line"><span class="type">String</span> <span class="variable">phoneNum</span> <span class="operator">=</span> sc.next();</span><br><span class="line"><span class="comment">//需要先定义手机号的模式串, 手机号第一位是1, 第二位可以是[3456789],其他还有9位数字</span></span><br><span class="line"><span class="type">String</span> <span class="variable">pattern</span> <span class="operator">=</span> <span class="string">&quot;1[3-9]\\d&#123;9&#125;&quot;</span>;</span><br><span class="line"><span class="comment">//打印手机号是否匹配模式</span></span><br><span class="line">System.out.println(  phoneNum.matches(pattern) ); <span class="comment">//匹配返回true，否则返回false</span></span><br></pre></td></tr></table></figure><p>会把字符串中符合regex正则表达式的字符串使用replacement替换,返回替换后的字符串<br><code>String replaceAll(String regex, String replacement) </code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 把数值变成*</span></span><br><span class="line"><span class="type">String</span> <span class="variable">text</span> <span class="operator">=</span> <span class="string">&quot;java123456peng&quot;</span>;</span><br><span class="line"><span class="type">String</span> <span class="variable">s</span> <span class="operator">=</span> text.replaceAll(<span class="string">&quot;\\d&quot;</span>, <span class="string">&quot;*&quot;</span>);</span><br><span class="line">System.out.println( s );    <span class="comment">//java******peng</span></span><br></pre></td></tr></table></figure><p>对当前字符串使用符合regex正则表达式的字符串进行拆分<br><code>String[] split(String regex)</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">text</span> <span class="operator">=</span> <span class="string">&quot;A small step forward,A big step of civilization&quot;</span>;</span><br><span class="line"><span class="comment">//把字符串中的单词拆分出来, 发现单词与单词之间使用空格或者逗号分隔的, 就对字符串使用[ ,]拆分 ,</span></span><br><span class="line">String[] split = text.split(<span class="string">&quot;[ ,]&quot;</span>);  <span class="comment">//方法返回拆分后小的字符串组成的数组</span></span><br><span class="line"><span class="keyword">for</span> (String s1 : split) &#123;</span><br><span class="line">    System.out.print(s1 ); <span class="comment">//AsmallstepforwardAbigstepofcivilization    （println可以给开行这里只为演示方便</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="可变字符串"><a href="#可变字符串" class="headerlink" title="可变字符串"></a>可变字符串</h4><p> 字符串字面量与String是<code>不可变性</code>的这里不再赘述</p><p><code>StringBuffer</code>与<code>StringBuilder </code>字符串缓冲区的意思。</p><ul><li>工作原理<br>  预先在内存中申请一块空间，存放字符序列。 如果空间满了，会重新改变缓冲区的大小，以容纳更多的字符序列。</li><li>优势<br>  空间只开一块，容量可以扩充，大大减少内存空间的浪费。 </li><li>使用语法:<br>  <code>StringBuffer 名称=new StringBuffer();          //产生一个StringBuffer对象 ,缓冲区的初始容量是16个字符</code><br>  <code>StringBuffer sb3=new StringBuffer(&quot;hello&quot;);    //产生一个StringBuffer对象，里面放入了hello的字符串,容量是字符串长度+StringBuffer的初始容量16个字符</code></li><li>不同点<br>  StringBuffer是一个线程安全的(支持同步)<br>  StringBuilder是线程不安全的（不支持同步)<br>其他用法全部一样</li></ul> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1) 先创建StringBuilder对象</span></span><br><span class="line"><span class="type">StringBuilder</span> <span class="variable">sb</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line">System.out.println( sb );</span><br><span class="line"></span><br><span class="line"><span class="comment">//2) 字符串连接</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">    <span class="comment">//把数字连接到sb字符串中</span></span><br><span class="line">    sb.append(i);</span><br><span class="line">&#125;</span><br><span class="line">System.out.println( sb );   <span class="comment">//0123456789</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//3) 删除</span></span><br><span class="line">sb.delete(<span class="number">3</span>, <span class="number">6</span>);  <span class="comment">//删除sb字符串中索引值[3, 6 )范围内的字符</span></span><br><span class="line">System.out.println( sb );   <span class="comment">//0126789</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//4)插入</span></span><br><span class="line">sb.insert(<span class="number">3</span>, <span class="string">&quot;hello&quot;</span>);</span><br><span class="line">System.out.println( sb );   <span class="comment">//012hello6789</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//5) 替换</span></span><br><span class="line">sb.replace(<span class="number">3</span>, <span class="number">8</span>, <span class="string">&quot;world&quot;</span>);</span><br><span class="line">System.out.println(sb );    <span class="comment">//012world6789</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//6) 逆序</span></span><br><span class="line"><span class="type">StringBuffer</span> <span class="variable">s</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuffer</span>(<span class="string">&quot;helloworld&quot;</span>);</span><br><span class="line">s.reverse();</span><br><span class="line">System.out.println(s); <span class="comment">//dlrowolleh</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="常用数学类"><a href="#常用数学类" class="headerlink" title="常用数学类"></a>常用数学类</h3><h4 id="java-lang-Math数学类"><a href="#java-lang-Math数学类" class="headerlink" title="java.lang.Math数学类"></a>java.lang.Math数学类</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//生成[0,1)范围内的随机小数</span></span><br><span class="line">System.out.println( Math.random());</span><br><span class="line"></span><br><span class="line"><span class="comment">//Math.min()返回两个数中的较少者,  Math.max()返回两个数中的较大者</span></span><br><span class="line">System.out.println( Math.max(<span class="number">10</span>, <span class="number">20</span>));  <span class="comment">//20</span></span><br><span class="line">System.out.println(Math.min(<span class="number">3.14</span>, <span class="number">5.89</span>));   <span class="comment">//3.14</span></span><br><span class="line"></span><br><span class="line">System.out.println( Math.pow(<span class="number">2</span>, <span class="number">10</span>));   <span class="comment">//1024  2的10次方</span></span><br><span class="line">System.out.println( Math.sqrt(<span class="number">100</span>));    <span class="comment">//10.0  平方根</span></span><br><span class="line"></span><br><span class="line">System.out.println(Math.ceil(<span class="number">3.11</span>)); <span class="comment">//4.0   始终向前进一位的最小整数</span></span><br><span class="line">System.out.println(Math.floor(<span class="number">3.99</span>)); <span class="comment">//3.0  始终不进位进一位最大整数</span></span><br></pre></td></tr></table></figure><h4 id="专门生成随机数"><a href="#专门生成随机数" class="headerlink" title="专门生成随机数"></a>专门生成随机数</h4><p>在java.util.Random类中</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//先创建Random对象</span></span><br><span class="line"><span class="type">Random</span> <span class="variable">random</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Random</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">//生成[0, 1) 范围内的随机小数</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">    System.out.println( random.nextDouble());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">    System.out.println( random.nextInt());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//生成[ 0 , limit) 范围内的随机整数</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">    System.out.println( random.nextInt( <span class="number">100</span> ));</span><br></pre></td></tr></table></figure><h4 id="数字格式化"><a href="#数字格式化" class="headerlink" title="数字格式化"></a>数字格式化</h4><p>java.text.DecimalFormat类中</p><p>把数字转换 为指定格式的字符串<br> 可以在构造方法中指定模式串, 格式符有:<br><code>0</code> 数字, 不足的位数会补0<br><code>#</code> 数字</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">DecimalFormat</span> <span class="variable">df</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DecimalFormat</span>(<span class="string">&quot;###,###.0000&quot;</span>);</span><br><span class="line"><span class="comment">//调用format()方法可以把数字转换为 指定的格式</span></span><br><span class="line"><span class="type">String</span> <span class="variable">s</span> <span class="operator">=</span> df.format(<span class="number">1234.56</span>);</span><br><span class="line">System.out.println( s );    <span class="comment">//1,234.5600</span></span><br><span class="line"></span><br><span class="line">s = df.format(<span class="number">456789456.78999999</span>);</span><br><span class="line">System.out.println( s );    <span class="comment">//456,789,456.7900</span></span><br></pre></td></tr></table></figure><h4 id="高精度（了解即可）"><a href="#高精度（了解即可）" class="headerlink" title="高精度（了解即可）"></a>高精度（了解即可）</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">BigInteger</span> <span class="variable">i1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BigInteger</span>(<span class="string">&quot;798465884651866515461651326513265132645485616541248651486516845141651326513&quot;</span>);</span><br><span class="line"><span class="type">BigInteger</span> <span class="variable">i2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BigInteger</span>(<span class="string">&quot;798465864548561654126541651326513&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//add()相加,  subtract()相减,  multiply()相乘,  divide()相除</span></span><br><span class="line"><span class="type">BigInteger</span> <span class="variable">i3</span> <span class="operator">=</span> i1.add(i2);</span><br><span class="line">System.out.println(i3);</span><br><span class="line"></span><br><span class="line">i3 = i1.subtract(i2);</span><br><span class="line">System.out.println(i3);</span><br><span class="line"></span><br><span class="line">i3 = i1.multiply(i2);</span><br><span class="line">System.out.println( i3);</span><br><span class="line"></span><br><span class="line">i3 = i1.divide(i2);</span><br><span class="line">System.out.println( i3 );</span><br><span class="line"></span><br><span class="line"><span class="comment">//注意:小数相除可能会遇到除不断的情况, 会抛出 ArithmeticException 算术异常</span></span><br><span class="line"><span class="type">BigDecimal</span> <span class="variable">d1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BigDecimal</span>(<span class="string">&quot;78894657986453.879465&quot;</span>);</span><br><span class="line"><span class="type">BigDecimal</span> <span class="variable">d2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BigDecimal</span>(<span class="string">&quot;788946579863.8465&quot;</span>);</span><br><span class="line"><span class="comment">//小数相除, 通常需要指定保留小数的位数,及尾数的处理方式</span></span><br><span class="line"><span class="type">BigDecimal</span> <span class="variable">d3</span> <span class="operator">=</span> d1.divide(d2, <span class="number">10</span>, RoundingMode.DOWN);</span><br><span class="line"><span class="comment">//RoundingMode是一种枚举类型,枚举就是一组常量的组合</span></span><br><span class="line">System.out.println( d3 );</span><br></pre></td></tr></table></figure><h3 id="日期类"><a href="#日期类" class="headerlink" title="日期类"></a>日期类</h3><h4 id="Date日期类"><a href="#Date日期类" class="headerlink" title="Date日期类"></a>Date日期类</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1) 创建Date对象返回当前日期</span></span><br><span class="line"><span class="type">Date</span> <span class="variable">date</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Date</span>();</span><br><span class="line">System.out.println( date );     <span class="comment">//Wed Aug 25 09:05:23 CST 2021</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//2) 调用Date对象的getTime()返回 时间戳（毫秒级）    从1970-1-1 00:00:00开始</span></span><br><span class="line"><span class="type">long</span> <span class="variable">millis</span> <span class="operator">=</span> date.getTime();</span><br><span class="line">System.out.println(millis);     <span class="comment">//1629853674892</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//3) 获得当前日期对应的毫秒数       //系统级</span></span><br><span class="line"><span class="type">long</span> <span class="variable">timeMillis</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">System.out.println( timeMillis );</span><br><span class="line"></span><br><span class="line"><span class="comment">//4) 根据毫秒数创建日期对象</span></span><br><span class="line"><span class="type">Date</span> <span class="variable">date2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Date</span>(timeMillis);</span><br><span class="line">System.out.println( date2 );</span><br><span class="line">date2 = <span class="keyword">new</span> <span class="title class_">Date</span>(<span class="number">1000</span>);</span><br><span class="line">System.out.println( date2 ); <span class="comment">//Thu Jan 01 08:00:01 CST 1970,  CST是中国时间,距离世界协调时有8小时的时差</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//5) 格式化 Data ----&gt; String        常用的格式符有: y年, M月, d日, H小时, m分钟 , s秒</span></span><br><span class="line"><span class="type">SimpleDateFormat</span> <span class="variable">sdf</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SimpleDateFormat</span>(<span class="string">&quot;yyyy-MM-dd HH:mm:ss&quot;</span>);</span><br><span class="line"><span class="comment">//把日期转换 为字符串</span></span><br><span class="line"><span class="type">String</span> <span class="variable">s</span> <span class="operator">=</span> sdf.format(date);</span><br><span class="line">System.out.println( s );        <span class="comment">//2021-06-01 15:33:57</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//6) 解析 Sting ----&gt; Data</span></span><br><span class="line"><span class="type">String</span> <span class="variable">text</span> <span class="operator">=</span> <span class="string">&quot;2086年5月8日 9:28:58&quot;</span>;</span><br><span class="line"><span class="comment">//根据字符串创建新的SimpleDateFormat对象, 或者重新设置SimpleDateFormat对象的格式</span></span><br><span class="line"><span class="type">SimpleDateFormat</span> <span class="variable">another</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SimpleDateFormat</span>(<span class="string">&quot;yyyy年M月d日 H:mm:ss&quot;</span>);</span><br><span class="line">sdf.applyPattern(<span class="string">&quot;yyyy年M月d日 H:mm:ss&quot;</span>);</span><br><span class="line"><span class="comment">//调用SimpleDateFormat对象的parse(String text)可以把字符串转换为日期对象,</span></span><br><span class="line"><span class="comment">// 调用方法提示语法错误:Unhandled exception: java.text.ParseException未处理的异常, 当前Alt+Enter,选择Add exception to method signature抛出处理, 支行程序后,如果sdf的模式串与字符串不匹配就会产生异常</span></span><br><span class="line">date2 = sdf.parse(text);</span><br><span class="line">System.out.println( date2 );</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="Time日期类"><a href="#Time日期类" class="headerlink" title="Time日期类"></a>Time日期类</h4><p>java.util.Date日期类不是线程安全的, 在JDK8中新增了一组线程安全的日期API,在java.time包中</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//创建LocalDateTime对象返回当前日期, LocalDateTime类的构造方法使用private修饰为私有的, 不能直接new对象了, LocalDateTime类提供一组静态方法返回该类的对象</span></span><br><span class="line"><span class="type">LocalDateTime</span> <span class="variable">localDateTime</span> <span class="operator">=</span> LocalDateTime.now();</span><br><span class="line">System.out.println( localDateTime );    <span class="comment">//2021-06-01T15:43:59.291</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//格式化 LocalDateTime对象 ----&gt; String</span></span><br><span class="line"><span class="type">DateTimeFormatter</span> <span class="variable">dtf</span> <span class="operator">=</span> DateTimeFormatter.ofPattern(<span class="string">&quot;yyyy年MM月dd日 HH:mm:ss&quot;</span>);</span><br><span class="line"><span class="comment">//调用 LocalDateTime 对象的实例方法format( DatTimeFormatter )可以转换为字符串</span></span><br><span class="line"><span class="type">String</span> <span class="variable">s</span> <span class="operator">=</span> localDateTime.format(dtf);</span><br><span class="line">System.out.println( s );    <span class="comment">//2021年06月01日 15:46:30</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//把字符串转换为LocalDateTime对象</span></span><br><span class="line"><span class="type">String</span>  <span class="variable">text</span> <span class="operator">=</span> <span class="string">&quot;2086年5月8日 9:28:58&quot;</span>;</span><br><span class="line"><span class="comment">//根据字符串创建DateTimeFormatter</span></span><br><span class="line"><span class="type">DateTimeFormatter</span> <span class="variable">another</span> <span class="operator">=</span> DateTimeFormatter.ofPattern(<span class="string">&quot;yyyy年M月d日 H:mm:ss&quot;</span>);</span><br><span class="line"><span class="comment">//调用 LocalDateTime类的静态方法parse(String, DateTimeFormatter)可以把字符串解析为日期, 如果字符串与模式串不匹配就会产生异常</span></span><br><span class="line"><span class="type">LocalDateTime</span> <span class="variable">dateTime</span> <span class="operator">=</span> LocalDateTime.parse(text, another);</span><br><span class="line">System.out.println( dateTime);</span><br></pre></td></tr></table></figure><h2 id="Arrays类常用方法"><a href="#Arrays类常用方法" class="headerlink" title="Arrays类常用方法"></a>Arrays类常用方法</h2><h3 id="Arrays-deepToString-二维数组"><a href="#Arrays-deepToString-二维数组" class="headerlink" title="Arrays.deepToString (二维数组)"></a>Arrays.deepToString (二维数组)</h3><p>可以把二维数组 元素连接为字符串</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> [][] twoInts2 = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">6</span>][<span class="number">10</span>]; </span><br><span class="line">System.out.println(Arrays.deepToString( twoInts2));</span><br><span class="line"></span><br><span class="line"><span class="comment">// [[0, 0], [0, 0], [0, 0]]</span></span><br></pre></td></tr></table></figure><h3 id="Arrays-toString-数组名"><a href="#Arrays-toString-数组名" class="headerlink" title="Arrays.toString( 数组名 )"></a>Arrays.toString( 数组名 )</h3><p>可以把数组元素连接为字符串</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span>[] ints = &#123;<span class="number">32</span>, <span class="number">54</span>, <span class="number">76</span>, <span class="number">98</span>, <span class="number">87</span>, <span class="number">54</span>, <span class="number">12</span>, <span class="number">5</span> &#125;;</span><br><span class="line">System.out.println(Arrays.toString(ints));</span><br><span class="line"></span><br><span class="line"><span class="comment">// [32, 54, 76, 98, 87, 54, 12, 5]</span></span><br></pre></td></tr></table></figure><h3 id="copyOf-src源数组-新数组的长度"><a href="#copyOf-src源数组-新数组的长度" class="headerlink" title="copyOf( src源数组, 新数组的长度)"></a>copyOf( src源数组, 新数组的长度)</h3><p>可以实现数组的复制,  会根据newLength新数组长度创建一个新的数组, 把src源数组中的元素复制到新数组中, 返回新的数组</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//新数组长度可以比原来数组长度大,类似于数组扩容</span></span><br><span class="line"><span class="type">int</span>[] ints = &#123;<span class="number">32</span>, <span class="number">54</span>, <span class="number">76</span>, <span class="number">98</span>, <span class="number">87</span>, <span class="number">54</span>, <span class="number">12</span>, <span class="number">5</span> &#125;;</span><br><span class="line"><span class="type">int</span>[] bigger = Arrays.copyOf(ints, ints.length * <span class="number">2</span>);</span><br><span class="line">System.out.println( Arrays.toString(bigger));</span><br><span class="line"></span><br><span class="line"><span class="comment">//[32, 54, 76, 98, 87, 54, 12, 5, 0, 0, 0, 0, 0, 0, 0, 0]</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//新数组长度也可以比原来数组长度小</span></span><br><span class="line"><span class="type">int</span>[] smaller = Arrays.copyOf(ints, ints.length / <span class="number">2</span>);</span><br><span class="line">System.out.println( Arrays.toString(smaller));</span><br><span class="line"></span><br><span class="line"><span class="comment">//[32, 54, 76, 98]</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="Arrays-sort-从小到大排序"><a href="#Arrays-sort-从小到大排序" class="headerlink" title="Arrays.sort() 从小到大排序"></a>Arrays.sort() 从小到大排序</h3><p>调用Arrays.sort( 数组, from,  to )方法可以只对象数组中[from, to)范围内的元素进行排序</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span>[] ints = &#123;<span class="number">32</span>, <span class="number">54</span>, <span class="number">76</span>, <span class="number">98</span>, <span class="number">87</span>, <span class="number">54</span>, <span class="number">12</span>, <span class="number">5</span> &#125;;</span><br><span class="line">Arrays.sort(ints);</span><br><span class="line">System.out.println( Arrays.toString(ints));</span><br><span class="line"><span class="comment">//[5, 12, 32, 54, 54, 76, 87, 98]</span></span><br></pre></td></tr></table></figure><h3 id="Arrays-binarySearch-二分查找"><a href="#Arrays-binarySearch-二分查找" class="headerlink" title="Arrays.binarySearch() 二分查找"></a>Arrays.binarySearch() 二分查找</h3><p><code>排序后</code>可以二分查找。如果它包含在数组中，则返回搜索键的索引，返回负数说明不存在</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">System.out.println( Arrays.binarySearch(ints, <span class="number">5</span>));</span><br><span class="line">System.out.println( Arrays.binarySearch(ints, <span class="number">54</span>));</span><br><span class="line">System.out.println( Arrays.binarySearch(ints, <span class="number">55</span>)); <span class="comment">//-6,负数说明不存在</span></span><br></pre></td></tr></table></figure><h2 id="枚举（enum）"><a href="#枚举（enum）" class="headerlink" title="枚举（enum）"></a>枚举（enum）</h2><p>本质就是类，只不过一次可以开多个对象<br>使用自定义枚举类型定义变量, 赋值枚举常量值时,在常量前要加枚举类型名的前缀<br>当变量的值是有限的几个离散常量值时可以定义为枚举类型, 如性别, 季节等 , 通过枚举可以提高程序的可读性与健壮性</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">        <span class="type">Result</span> <span class="variable">result</span> <span class="operator">=</span> Result2.女;</span><br><span class="line">        System.out.println(result); <span class="comment">//女</span></span><br><span class="line"></span><br><span class="line">        <span class="type">Result</span>  <span class="variable">result2</span> <span class="operator">=</span> Result.SUCCESS;</span><br><span class="line">        System.out.println(result2); <span class="comment">//SUCCESS</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">enum</span>  <span class="title class_">Result</span>&#123;       <span class="comment">//使用enum关键字定义枚举类型, Result就是枚举类名</span></span><br><span class="line">    <span class="comment">//在枚举类体中定义一组常量, 常量值之间使用逗号分隔</span></span><br><span class="line">    SUCCESS, FAILURE</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">enum</span> <span class="title class_">Result2</span>&#123;</span><br><span class="line">    男,女</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//可容纳的</span></span><br><span class="line"><span class="keyword">enum</span> <span class="title class_">Season</span> &#123;</span><br><span class="line">枚举对象() &#123;</span><br><span class="line">实现的是抽象方法的内容。 </span><br><span class="line">&#125;</span><br><span class="line">构造方法() </span><br><span class="line">实例方法() </span><br><span class="line">静态方法()</span><br><span class="line">抽象方法(); <span class="comment">//可以加入，但是必须去实现，每个枚举对象都必须去实现。 </span></span><br><span class="line">枚举不能有逻辑判断如<span class="keyword">if</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="创建包装类对象"><a href="#创建包装类对象" class="headerlink" title="创建包装类对象"></a>创建包装类对象</h2><ul><li>概念<br>  每一个基本类型都有一个包装类，对基本类型的包装。</li><li>目的<br>  让基本类型变成对象类型，可以使用属性和方法。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">基本类型                包装类 </span><br><span class="line"><span class="type">byte</span>                    Byte</span><br><span class="line"><span class="type">short</span>                   Short</span><br><span class="line"><span class="type">int</span>                     Integer</span><br><span class="line"><span class="type">long</span>                    Long</span><br><span class="line"><span class="type">float</span>                   Float</span><br><span class="line"><span class="type">double</span>                  Double</span><br><span class="line"><span class="type">boolean</span>                 Boolean </span><br><span class="line"><span class="type">char</span>                    Character</span><br><span class="line"></span><br><span class="line"><span class="comment">//1) 所有的包装类都可以根据 基本类型数据创建</span></span><br><span class="line"><span class="type">Integer</span> <span class="variable">i1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Integer</span>(<span class="number">123</span>);</span><br><span class="line"><span class="type">Double</span> <span class="variable">d1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Double</span>(<span class="number">3.14</span>);</span><br><span class="line"><span class="type">Boolean</span> <span class="variable">b1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Boolean</span>(<span class="literal">true</span>);</span><br><span class="line"><span class="type">Character</span> <span class="variable">c1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Character</span>(<span class="string">&#x27;汉&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">///注意</span></span><br><span class="line"><span class="type">Byte</span>  <span class="variable">bb</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Byte</span>((<span class="type">byte</span>)<span class="number">66</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 除了Character外,其他的包装类可以根据String字符串创建</span></span><br></pre></td></tr></table></figure><p>包装类常用方法(以Integer为例)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Integer</span> <span class="variable">i1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Integer</span>(<span class="number">123</span>);</span><br><span class="line"><span class="type">Integer</span> <span class="variable">i2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Integer</span>(<span class="string">&quot;456&quot;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">Integer ---&gt; byte</span></span><br><span class="line"><span class="comment">对象--&gt;基本: 拆箱操作</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="type">byte</span> <span class="variable">bb</span> <span class="operator">=</span> i1.byteValue();  <span class="comment">//就是把i1的value属性值 123 强制转换为byte字节类型。</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*2)</span></span><br><span class="line"><span class="comment">基本类型比较大小</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    static int compare(int x, int y) 比较两个int基本类型数据的大小,</span></span><br><span class="line"><span class="comment">    如果第一个数大返回正数, 相等返回0, 第二个数大返回负数</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">System.out.println( Integer.compare(<span class="number">10</span>, <span class="number">20</span>));   <span class="comment">//-1</span></span><br><span class="line">System.out.println( Double.compare(<span class="number">45.2</span>, <span class="number">3.9</span>));  <span class="comment">//1</span></span><br><span class="line">System.out.println( Boolean.compare(<span class="literal">false</span>, <span class="literal">false</span>));     <span class="comment">//0</span></span><br><span class="line">System.out.println( Boolean.compare(<span class="literal">true</span>, <span class="literal">false</span>));     <span class="comment">//1</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*3)</span></span><br><span class="line"><span class="comment">包装类对象比较大小</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    int compareTo(Integer anotherInteger)  比较两个包装类对象的大小,</span></span><br><span class="line"><span class="comment">    如果当前对象大返回正数,相等返回0,参数对象大返回负数</span></span><br><span class="line"><span class="comment">    所有的包装类都实现了Comparable接口, 重写了compareTo()方法.</span></span><br><span class="line"><span class="comment">    包装类对象比较大小时,其实比较的是包装类对象的value属性值的大小</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">System.out.println( i1.compareTo(i2));  <span class="comment">//-1</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*4)</span></span><br><span class="line"><span class="comment">数字字符串 ---&gt; int整数</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    static int parseInt(String s) 可以把数字字符串转换为int整数</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line"><span class="type">int</span> <span class="variable">num</span> <span class="operator">=</span> Integer.parseInt(<span class="string">&quot;789&quot;</span>);</span><br><span class="line"><span class="type">double</span> <span class="variable">dd</span> <span class="operator">=</span> Double.parseDouble(<span class="string">&quot;12.45&quot;</span>);</span><br><span class="line"><span class="type">boolean</span> <span class="variable">fff</span> <span class="operator">=</span> Boolean.parseBoolean(<span class="string">&quot;kdkd&quot;</span>);</span><br><span class="line"><span class="comment">///注意Character没有parseCharacter()方法,不能把字符串转换为char字符</span></span><br><span class="line"><span class="comment">//把基本类型转换为字符串</span></span><br><span class="line"><span class="type">String</span> <span class="variable">s</span> <span class="operator">=</span> String.valueOf(num);</span><br><span class="line">s = <span class="string">&quot;&quot;</span> + num;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*5) 基本--&gt;对象: 装箱操作 兼容类型</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    static Integer valueOf(int i)</span></span><br><span class="line"><span class="comment">    static Integer valueOf(String s)</span></span><br><span class="line"><span class="comment">    从JDK9开始 , 建议调用静态方法valueOf()创建包装类对象</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">i1 = Integer.valueOf(<span class="number">258</span>);</span><br><span class="line">i2 = Integer.valueOf(<span class="string">&quot;369&quot;</span>);</span><br><span class="line"><span class="comment">//        Double.valueOf()</span></span><br><span class="line"><span class="comment">//        Boolean.valueOf()</span></span><br><span class="line"><span class="comment">//        Character.valueOf()</span></span><br></pre></td></tr></table></figure><h3 id="装箱与拆箱"><a href="#装箱与拆箱" class="headerlink" title="装箱与拆箱"></a>装箱与拆箱</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// jdk1.5之后：jdk新特性</span></span><br><span class="line"><span class="comment">//自动装箱</span></span><br><span class="line"><span class="comment">// 从int到Integer过程:基本--&gt;对象</span></span><br><span class="line"><span class="type">Integer</span> <span class="variable">i1</span> <span class="operator">=</span> <span class="number">789</span>;  <span class="comment">//程序运行这一行时, 根据基本类型数据789创建一个Integer对象, 把这个对象的引用现付给i1</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//自动拆箱</span></span><br><span class="line"><span class="comment">// 从Integer到int过程：对象--&gt;基本</span></span><br><span class="line"><span class="type">int</span>  <span class="variable">x</span> <span class="operator">=</span> i1;   <span class="comment">//系统会自动 的把i1包装类对象的value属性值赋值给x</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">Integer</span> <span class="variable">i2</span> <span class="operator">=</span> <span class="number">789</span>;  <span class="comment">//根据789创建一个新的Integer对象,把这个对象的引用赋值给i2</span></span><br><span class="line">System.out.println( i1 == i2  );    <span class="comment">//false</span></span><br><span class="line"></span><br><span class="line"><span class="type">Integer</span> <span class="variable">i3</span> <span class="operator">=</span> <span class="number">69</span>;</span><br><span class="line"><span class="type">Integer</span> <span class="variable">i4</span> <span class="operator">=</span> <span class="number">69</span>;</span><br><span class="line">System.out.println( i3 == i4 );     <span class="comment">//true</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    java认为 -128~127 范围内的整数使用最频繁, 所以这个范围内的整数自动装箱后保存到共享池中</span></span><br><span class="line"><span class="comment">    即i3与i4引用了共享池中同一个Integer对象.</span></span><br><span class="line"><span class="comment">    类似于字符串字面量, 都采用享元模式, 为了减少对象创建的数量</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line"></span><br><span class="line"><span class="type">Long</span> <span class="variable">gg1</span> <span class="operator">=</span> <span class="number">12L</span>;</span><br><span class="line"><span class="type">Long</span> <span class="variable">gg2</span> <span class="operator">=</span> <span class="number">12L</span>;</span><br><span class="line">System.out.println( gg1 == gg2 );   <span class="comment">//true</span></span><br></pre></td></tr></table></figure><h2 id="集合"><a href="#集合" class="headerlink" title="集合"></a>集合</h2><ul><li>概念<br>  是一个容器,大小是可以自动扩展的，里面放入的数据<em>全是对象</em></li><li>分类<br>  单值集合: 此集合中只放入一个值。如:<code>list,set</code><br>  键值配对集合: 也叫key-value集合,放入2个部分，一个key,一个value. 比如:<code>map</code></li></ul><p><img src="https://raw.githubusercontent.com/pengyirui/blog_img/main/2021-08-29-01.png" alt="关系图"><br><img src="https://raw.githubusercontent.com/pengyirui/blog_img/main/2021-08-29-02.png" alt="关系图"></p><h3 id="Collection接口"><a href="#Collection接口" class="headerlink" title="Collection接口"></a>Collection接口</h3><ul><li><p>常用方法</p><ol><li> add(Object o) :  添加元素</li><li> remove(Object o): 删除元素</li><li> size(): 大小</li><li> clear(): 清空元素</li><li> isEmpty(): 判断集合是否为空</li><li> toArray():把集合转为数组</li><li> contains(Object o):包含指定元素</li><li> iterator(): 迭代方法</li></ol></li><li><p>迭代器遍历步骤<br>  产生集合对象，调用<code>iterator()</code>方法，得到迭代器对象，返回得到是布尔值<br>  提供迭代器对象，不断调用<code>hasNext()</code>方法，看是否有下一个元素<br>  如果有数据，则通过迭代器对象，调用<code>next()</code>方法，取出下一个数据</p></li><li><p>迭代器的原理：<br>  迭代器中有一个指针，一开始指到空挡位置，并没有指向实际数据。而当调用<code>hasNext()</code>方法后，指针下移，从下一个位置取出这个集合中对应的快照。（如果“快照”被破坏就报错）</p></li></ul><h3 id="List"><a href="#List" class="headerlink" title="List"></a>List</h3><ul><li><p>语法<br>  List 集合接口名=new 实现类名(); </p></li><li><p>特点<br>  有序 、可重复</p></li><li><p>常见独有方法<br>  add(int index,Object o): 在指定的位置添加元素<br>  get(int index): 根据下标获取该下标对应的元素</p></li><li><p>排序<br>有一个对集合进行操作的工具类:<br><code>Collections.sort(要排序的list集合);</code></p></li><li><p><code>LinkedList</code></p><ul><li>概念<br>  按照顺序从头依次接下来。</li><li>链表的基本单元是节点。(Node)<br>  每一个节点中有2个部分<br>  数据、下一个节点的地址。头，尾节点没有地址。 </li></ul></li><li><p>比较</p><table><thead><tr><th>集合名</th><th>底层算法</th><th>查询速度</th><th>添加与删除</th></tr></thead><tbody><tr><td>ArrayList</td><td>数组</td><td>快，因为有一块连续空间、下标、地址,可以计算</td><td>慢</td></tr><tr><td>LinkedList</td><td>链表</td><td>慢，因为分散的内存空间</td><td>快</td></tr></tbody></table></li></ul><h3 id="set"><a href="#set" class="headerlink" title="set"></a>set</h3><ul><li><p>特点<br>  无序、不可重复、没下标</p></li><li><p>语法<br>  <code>Set 集合名=new HashSet();</code></p></li><li><p>常见方法<br>  大部分来自父接口Collection </p></li><li><p><code>HashSet</code>消除重复的原则<br>  <code>首先</code>先去看每个对象的Hash码,调用一个hashCode()，看每个对象的hashCode是否相等，如果不相等，则HashSet认为这是不同的元素，则把它们全部加入集合;<code>然后</code>，如果Hashset值相同的，则会去调用equals()方法，看两个对象内容是否相等，如果内容不相等，则hashset认为是不同的元素，分别加入集合。<code>最后</code>，如果equals()方法比较内容相同，则认为是相同元素，则会消除重复。<br>  <code>所以</code>最好把<code>HashCode(),equals()</code>重写.</p></li><li><p><code>SortedSet</code>（比较少用）<br>特点：可以排序（底层是treeMap集合）<br>使用: 和Set使用一样<br>TreeSet消除重复和排序都是重写Comparable排序接口中的<code>comareTo()</code>方法做到的。和hashset中的hashCode(),equals()重写没有关系。 </p></li><li><p>排序<br>  <code>Comparable</code>：这种接口必须由一个类去实现，不然此接口中的方法无法实现 默认实现接口<br>  主要重写compareTo(Object o);</p><p>  <code>Comparator</code>: 这个接口比较灵活，分离比较规则,无需关联一个类，处理上更加人性化。</p></li></ul><h3 id="Map接口"><a href="#Map接口" class="headerlink" title="Map接口"></a>Map接口</h3><ul><li><p>概念<br>  此集合中加入两个部分的值，一个是key,一个是value ,根据key找到value</p></li><li><p>语法<br>  Map map引用=new HashMap();</p></li><li><p>常见独有方法:<br>  <code>put(Object key,Object value)</code>添加元素<br>  <code>get(Object key)</code>根据键，得到值<br>  <code>containsKey(Object key)</code>判断集合中是否有指定的key存在</p></li><li><p>应用场景<br>  集合在项目中一般用来临时存储数据的，首选是集合。如电商的购物车。</p></li><li><p>特点<br>  无序的，如果键重复，会覆盖相同键中原来的值</p></li><li><p>HashMap算法<br>  红黑树: 二叉树结构(平衡)<br>  插入，删除元素都没有问题，当要插入或删除的元素比较多，出现插入或删除的效率会低下的问题。<br>  hashmap中元素不多时，一般使用链表结构,链表搜索很复杂。</p></li><li><p>遍历</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">map.put(<span class="string">&quot;111&quot;</span>, <span class="string">&quot;aaa&quot;</span>);</span><br><span class="line">map.put(<span class="string">&quot;222&quot;</span>, <span class="string">&quot;bbb&quot;</span>);</span><br><span class="line">map.put(<span class="string">&quot;333&quot;</span>, <span class="string">&quot;ccc&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (Object o : map.entrySet()) &#123;</span><br><span class="line">    Map.<span class="type">Entry</span> <span class="variable">entry</span> <span class="operator">=</span> (Map.Entry)o;</span><br><span class="line">    System.out.println(entry.getKey() + <span class="string">&quot;\t&quot;</span> + entry.getValue());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//单独获取Key值</span></span><br><span class="line">Set set=map.keySet();</span><br></pre></td></tr></table></figure></li><li><p>HashMap与Hashtable区别</p></li></ul><table><thead><tr><th>集合名</th><th>特征</th></tr></thead><tbody><tr><td>HashMap</td><td>键值都可以为空, ，轻量级,线程不安全(多人并发访问),访问速度快</td></tr><tr><td>Hashtable</td><td>键值都不能为空, 重量级,线程安全，访问的速度会慢</td></tr></tbody></table><p>如果hashmap也要线程安全就需要声明<br><code>Collections.synchronizedMap(new HashMap());</code><br>排序工具类<br><code>Collections.sort();</code></p><ul><li><p>TreeMap</p><ul><li>特点<br>  可以排序，但对key排序</li><li>语法<br>  <code>Map map=new TreeMap();</code></li></ul><p>  使用了两种接口实现排序的<br>  <code>Comparator: compare(Object o1,Object o2)</code><br>  <code>Comparable: compareTo(Object o) </code></p><p>  实际工作中常用两种集合<code>：ArrayList和HashMap.</code></p></li></ul><h3 id="看代码-14"><a href="#看代码-14" class="headerlink" title="看代码"></a>看代码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">创造迭代器</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> class 迭代器 &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        Collection c=<span class="keyword">new</span> <span class="title class_">ArrayList</span>();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2.集合添加元素</span></span><br><span class="line">        c.add(<span class="string">&quot;hello&quot;</span>);</span><br><span class="line">        c.add(<span class="string">&quot;world&quot;</span>);</span><br><span class="line">        c.add(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//3.遍历</span></span><br><span class="line">        <span class="comment">//调用iterator()方法,返回迭代器接口</span></span><br><span class="line">        Iterator it=c.iterator();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//4.通过上面的迭代器接口,调用hasNext()方法</span></span><br><span class="line">        <span class="comment">//循环查看迭代器中是否有下一个元素</span></span><br><span class="line">        <span class="keyword">while</span>(it.hasNext()) &#123;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//如果有，进入循环，取出下一个元素</span></span><br><span class="line">            <span class="comment">//迭代器取数据</span></span><br><span class="line">            Object o=it.next();</span><br><span class="line"></span><br><span class="line">            <span class="comment">//打印输出</span></span><br><span class="line">            System.out.println(o);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">迭代器遍历快照被破坏</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">        Collection c=<span class="keyword">new</span> <span class="title class_">ArrayList</span>();</span><br><span class="line"></span><br><span class="line">        c.add(<span class="string">&quot;hello&quot;</span>);</span><br><span class="line">        c.add(<span class="string">&quot;ok1&quot;</span>);</span><br><span class="line">        c.add(<span class="string">&quot;ok2&quot;</span>);</span><br><span class="line"></span><br><span class="line">        Iterator it=c.iterator();</span><br><span class="line">        <span class="keyword">while</span>(it.hasNext()) &#123;</span><br><span class="line">            Object o=it.next();</span><br><span class="line">            c.remove(<span class="string">&quot;ok1&quot;</span>);</span><br><span class="line">            System.out.println(o);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">遍历键值对</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">map.put(<span class="string">&quot;111&quot;</span>, <span class="string">&quot;aaa&quot;</span>);</span><br><span class="line">map.put(<span class="string">&quot;222&quot;</span>, <span class="string">&quot;bbb&quot;</span>);</span><br><span class="line">map.put(<span class="string">&quot;333&quot;</span>, <span class="string">&quot;ccc&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (Object o : map.entrySet()) &#123;</span><br><span class="line">    Map.<span class="type">Entry</span> <span class="variable">entry</span> <span class="operator">=</span> (Map.Entry)o;</span><br><span class="line">    System.out.println(entry.getKey() + <span class="string">&quot;\t&quot;</span> + entry.getValue());</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="泛型"><a href="#泛型" class="headerlink" title="泛型"></a>泛型</h2><ul><li><p>概念<br>  只能往”盒子”中放入同种数据类型。规定了集合中存放元素的具体的类型。</p></li><li><p>泛型能修饰<br>  集合，类，接口，方法。</p></li><li><p>泛型的符号<br>  <code>&lt;&gt;</code></p></li><li><p>在集合中的语法:<br>  单值<br>  <code>集合类型&lt;集合中规定的数据类型&gt; 集合名=new 实现类名&lt;集合中规定的数据类型&gt;();</code><br>  key-value<br>  <code>集合类型&lt;key的类型,值的类型&gt; 集合名=new 实现类名&lt;key的类型,值的类型&gt;();</code></p><p>  例子</p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">List &lt;String&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span> &lt;String&gt;();</span><br><span class="line">Map &lt;String,String&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span> &lt;String,String&gt; ();</span><br></pre></td></tr></table></figure></li><li><p>在类中</p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">实例化</span><br><span class="line">Box&lt;String&gt; box = <span class="keyword">new</span> <span class="title class_">Box</span>&lt;String&gt;();</span><br><span class="line"></span><br><span class="line">&lt;String&gt;后box只能输入str类型了</span><br></pre></td></tr></table></figure></li></ul><h2 id="文件"><a href="#文件" class="headerlink" title="文件"></a>文件</h2><ul><li><p>概念<br>  文件是把相关的一些记录放在一起，形成了数据，这些数据的集合为文件。</p></li><li><p>File类常见方法<br>  getName(): 得到文件名称<br>  length():长度<br>  getPath(): 获取文件绝对路径或相对路径<br>  exists(): 判断文件是否存在<br>  createNewFile(): 创建一个空的新文件<br>  lastModified():最后修改时间<br>  isDirectory()/isFile() : 是一个文件还是一个目录<br>  getAbsolutePath(): 获取文件绝对路径<br>  mkdir()/mkdirs(): 创建目录<br>  delete(): 删除文件<br>  getParent():得到文件的父目录<br>  list()： 列出当前目录下所有的内容</p></li><li><p>例子：</p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">File</span> <span class="variable">f</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;c:/a/a.txt&quot;</span>);</span><br><span class="line"></span><br><span class="line">f.mkdirs();</span><br></pre></td></tr></table></figure></li></ul><h2 id="IO流"><a href="#IO流" class="headerlink" title="IO流"></a>IO流</h2><ul><li><p>概念<br>  是一个通道，是用来传输数据的，一连串数据，遵循一定的方向，采用是先进先出（FIFO）方式。<br>  <img src="https://raw.githubusercontent.com/pengyirui/blog_img/main/2021-08-29-03.png"><br>  <img src="https://raw.githubusercontent.com/pengyirui/blog_img/main/2021-08-29-04.png"><br>  <img src="https://raw.githubusercontent.com/pengyirui/blog_img/main/2021-08-29-05.png" alt="方向"></p></li><li><p>归类</p><ul><li><p>按照流向划分:<br>输入流和输出流 </p></li><li><p>按照数据单位划分:<br>字节流：能解决所有的情况。<br>字符流：解决字符问题。</p></li><li><p>按用途划分：<br>打印流、对象流。。。</p></li></ul></li></ul><h3 id="字节流"><a href="#字节流" class="headerlink" title="字节流"></a>字节流</h3><p><code>FileInputStream/FileOutputStream</code><br>文件输入/输出流：是一个基本的节点流</p><ul><li><p>语法<br>  <code>FileInputStream(File file)</code><br>  <code>FileInputStream(String pathname)</code></p></li><li><p>方法：<br>  <code>read()</code>: 读取一个数据，数据单位就是字节<br>  返回int类型，返回实际的数据，如果流中没有数据，则返回-1.<br>  <code>close()</code>:关闭流<br>  <code>flush()</code>刷新流<br>  <code>read(byte[] b) </code>: 把流中的数据读取到字节数组b,返回实际读取的长度</p></li><li><p>文件输出流追加数据<br>  <code>new FileOutputStream(路径,追加(true));  </code><br>  <code>String---&gt;byte[]: 编码 </code><br>  <code>byte[]---&gt;String: 解码</code></p></li></ul><h3 id="缓冲输入输出流"><a href="#缓冲输入输出流" class="headerlink" title="缓冲输入输出流"></a>缓冲输入输出流</h3><p>中间有个缓冲带。所以读完与写完必须要关闭流。<br><code>BufferedInputStream/BufferedOutputStream</code></p><h3 id="对象流"><a href="#对象流" class="headerlink" title="对象流"></a>对象流</h3><p>对对象操作<br><code>ObjectInputStream/ObjectOutputStream</code><br>对象输入/输出流: </p><ul><li><p>特点<br>  流的数据类型是字节,把对象转成字节流。</p></li><li><p>对象写到文件中，必须先序列化操作<br>  序列化: 把一个java对象转成字节的过程。<br>  反序列化:把字节转成java对象的过程</p><p>  如果不想读取到某个属性，可以加入关键字<code>transient</code></p></li><li><p>有关对象流的面试问题<br>如果学生类中有一个属性它是另外一个类，请问在对象流中传输，会出问题。<br>没有序列化，说明了类中的属性如果是另外一个类，此类也必须<code>序列化</code></p></li></ul><p>在属性中使用了关键字<code>transient</code>，这个会不会导致序列化终止？<br>序列化过程没有终止，但是属性不会通过流传递内容。</p><p>如果属性加入了static关键字，序列化是否终止？<br>序列化完成，但是结果也没有传递。</p><p>对于一个类，如果要实现序列化操作，建议在类中书写好此类的序列号。<code>serialVerionUID</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//对象输入流读取文件中的对象</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//1.声明2个流</span></span><br><span class="line">        InputStream is=<span class="literal">null</span>;</span><br><span class="line">        ObjectInputStream ois=<span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2.使用try...catch</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            is=<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;d:/a/a.txt&quot;</span>);</span><br><span class="line">            <span class="comment">//3.产生对象流</span></span><br><span class="line">            ois=<span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(is);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//4.读取对象</span></span><br><span class="line">            Student s1= (Student) ois.readObject();</span><br><span class="line">            Student s2= (Student) ois.readObject();</span><br><span class="line"></span><br><span class="line">            <span class="comment">//5.学生数据打印</span></span><br><span class="line">            System.out.println(s1.getName()+<span class="string">&quot; &quot;</span>+s1.getAge()+<span class="string">&quot; &quot;</span>+s1.getHobby());</span><br><span class="line">            System.out.println(s2.getName()+<span class="string">&quot; &quot;</span>+s2.getAge()+<span class="string">&quot; &quot;</span>+s1.getHobby());</span><br><span class="line"></span><br><span class="line">        &#125;<span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line"></span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span>(ois!=<span class="literal">null</span>) &#123;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    ois.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 学生类，实现序列化接口</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Student</span> <span class="keyword">implements</span> <span class="title class_">Serializable</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">long</span> <span class="variable">serialVersionUID</span> <span class="operator">=</span> -<span class="number">8355267483751747059L</span>;</span><br><span class="line">    <span class="keyword">private</span>  String name;</span><br><span class="line">    <span class="keyword">private</span>  <span class="type">int</span> age;</span><br><span class="line">    <span class="keyword">private</span> String hobby;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="字符流"><a href="#字符流" class="headerlink" title="字符流"></a>字符流</h3><ul><li>概念<br>  流动的是单个或多个字符。此流只能处理字符串，字符。但是不能处理文本之外的数据。</li></ul><p>基本字符流(字节到字符的桥梁)<br><code>InputStreamReader/OutputStreamWriter</code></p><p>文件输入输出便捷类<br><code>FileReader/FileWriter</code><br>构造方法中，可以加入文件路径，可以实现追加。<br>缺点：不能处理字符集</p><p>最常用的是<br><code>BufferedReader/PrintWriter</code><br><code>readLine()</code>以行为单位读取字符串<br><code>println()</code>通过输出流把数据写入文件</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//把studentDemo文本复制到student.txt下</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">PrintWriter</span> <span class="variable">pw</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">BufferedReader</span> <span class="variable">br</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//文本之间的转换</span></span><br><span class="line">            br = <span class="keyword">new</span> <span class="title class_">BufferedReader</span>(<span class="keyword">new</span> <span class="title class_">InputStreamReader</span>(<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;c:\\a\\studentDemo.txt&quot;</span>)));</span><br><span class="line">            pw = <span class="keyword">new</span> <span class="title class_">PrintWriter</span>(<span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;c:\\a\\student.txt&quot;</span>));</span><br><span class="line"></span><br><span class="line">            <span class="comment">//读取文件,写入文件然后刷新</span></span><br><span class="line">            String s=br.readLine();</span><br><span class="line">            pw.write(s);</span><br><span class="line">            pw.flush();</span><br><span class="line">            </span><br><span class="line"></span><br><span class="line">        &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//关闭文件</span></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                br.close();</span><br><span class="line">                pw.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="其他流"><a href="#其他流" class="headerlink" title="其他流"></a>其他流</h3><p><code>PrintStream</code>: 字节流<br>过滤流—&gt;打印字节流</p><p>手工输入流:  <code>System.in</code><br><code>Scanner input=new Scanner(System.in);</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 测试手工输入流：接收用户手工输入一系列字符遇到q停止</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test07</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//1.产生缓冲字符流</span></span><br><span class="line">        BufferedReader br=<span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2.使用模板</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//产生对象 System.in</span></span><br><span class="line">            br=<span class="keyword">new</span> <span class="title class_">BufferedReader</span>(<span class="keyword">new</span> <span class="title class_">InputStreamReader</span>(System.in));</span><br><span class="line">            <span class="comment">//给出提示</span></span><br><span class="line">            System.out.println(<span class="string">&quot;请输入:&quot;</span>);</span><br><span class="line">            <span class="comment">//定义一个字符串变量</span></span><br><span class="line">            String str=<span class="literal">null</span>;</span><br><span class="line">            <span class="comment">//循环读取</span></span><br><span class="line">            <span class="keyword">while</span>((str=br.readLine())!=<span class="literal">null</span>) &#123;</span><br><span class="line">                System.out.println(str);</span><br><span class="line">                <span class="comment">//判断一下:遇到了q停止</span></span><br><span class="line">                <span class="keyword">if</span>(<span class="string">&quot;q&quot;</span>.equals(str)) &#123;</span><br><span class="line">                    <span class="comment">//退出</span></span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;<span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">if</span>(br!=<span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    br.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">PrintStream流</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test06</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> FileNotFoundException &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//0.产生一个基本节点流对象</span></span><br><span class="line">        OutputStream os=<span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;d:/a/a.txt&quot;</span>);</span><br><span class="line">        <span class="comment">//1.产生一个PrintStream对象</span></span><br><span class="line">        PrintStream ps=<span class="keyword">new</span> <span class="title class_">PrintStream</span>(os);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//改变控制台的输出方式</span></span><br><span class="line">        System.setOut(ps);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//测试</span></span><br><span class="line">        System.out.println(<span class="string">&quot;这是PrintStream的测试，输出内容待会到文件a.txt,你看不到的，哈哈!&quot;</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;写入完毕!&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//关闭</span></span><br><span class="line">        ps.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="多线程"><a href="#多线程" class="headerlink" title="多线程"></a>多线程</h2><ul><li>概念<br>  程序: 程序员编写的代码，那么可以运行。<br>  进程: 正在运行中的程序。一个程序对应着一个进程。<br>  线程: 是线程中的一个基本执行单元或执行场景，存在于进程中。一个进程包含至少一个线程，或多个线程。 </li></ul><p><img src="https://raw.githubusercontent.com/pengyirui/blog_img/main/2021-09-01-02.png" alt="大概关系图"><br><img src="https://raw.githubusercontent.com/pengyirui/blog_img/main/2021-09-01-03.png" alt="内存图"></p><ul><li><p>线程开发方式<br>  继承一个类: Thread类<br>  <code>语法:  class A extends Thread &#123;&#125;</code></p><p>  另外一种实现一个接口： Runnable接口<br>  <code>语法:  class B implements Runnable &#123;&#125;</code></p><p>  使用匿名类</p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">语法: <span class="keyword">new</span> 要实现的接口名称/要继承父类() &#123;</span><br><span class="line">        接口或父类中的方法()&#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>状态</p><ul><li><p>初始状态<br>  new对象</p></li><li><p>可运行状态<br>  调用start（）</p></li><li><p>运行状态<br>  抢到cpu</p></li><li><p>结束状态<br>  运行结束</p></li><li><p>阻塞状态： 当线程执行一些进入阻塞的方法后，那么会进入阻塞状态.<br><code>sleep()</code>: 睡眠方法（毫秒级别）<br>  这是一个静态方法，由Thread类来调用 <code>Thread.sleep();</code><br><code>join()</code>: 加入方法<br>  如果在一个线程中加入了另外一个线程，则会让加入的线程先执行完毕，然后当前这个线程再继续接着执行。<br><code>yield()</code>:让出机会<br>  如果有多个线程同时运行，可能会发生一个线程长时间占据了cpu,其他线程没有机会得到运行，为了防止此现象发生，采用了yield机制，把运行机会让出来，让其他线程能够得到运行。<br>  使用yield，线程优先级相同时，才能给其他线程能够得到运行的机会。</p></li></ul></li><li><p>设置优先级<br>  默认5，最低1，最高10<br>  <code>t1.setPriority(Thread.MAX_PRIORITY);  //最高优先级</code><br>  <code>t2.setPriority(Thread.MIN_PRIORITY);  //最低优先级</code></p></li><li><p>注意<br>  获取线程名字: <code>Thread.currentThread().getName();</code><br>  设置线程名字:<code>Thread.currentThread().setName();</code></p></li><li><p>线程的打扰、暂停方法：<br>  interrupt(),通过线程对象调用<br>  语法: <code>线程对象.interrupt();</code></p></li></ul><h3 id="线程同步"><a href="#线程同步" class="headerlink" title="线程同步"></a>线程同步</h3><p>解决数据不一致问题</p><ul><li><p>概念<br>  多个线程相互争抢共同的资源(临界资源)，会导致出现数据不一致，为了防止此现象，使用同步机制(锁机制)来保证数据的一致。</p></li><li><p>三种锁</p><p>  方法锁：在方法加入synchronized关键字<br>  例子：</p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">show</span><span class="params">()</span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>  对象锁 : 先产生一个锁，锁的类型是任意类型 </p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">步骤： </span><br><span class="line"><span class="number">1.</span>先产生一把对象锁: Object obj=<span class="keyword">new</span> <span class="title class_">Object</span>();  </span><br><span class="line"><span class="number">2.</span>把对象锁放入<span class="keyword">synchronized</span>() 中 </span><br><span class="line">        <span class="keyword">synchronized</span>(obj) &#123;</span><br><span class="line">            要同步的代码</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><p>  this锁</p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">synchronized</span>(<span class="built_in">this</span>) &#123;</span><br><span class="line">    要锁的内容放在此处</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="守护线程"><a href="#守护线程" class="headerlink" title="守护线程"></a>守护线程</h3><ul><li><p>概念<br>  是一个线程，在后台默默地为其他线程提供服务。<br>  比如：JVM中，还有一个垃圾回收线程，属于守护线程，为主线程提供服务</p></li><li><p>让t1线程成为守护线程<br>  <code>Thread t1 = new TestThread();</code><br>  <code>t1.setDaemon(true);</code></p></li></ul><p>典型：守护进程Timer类</p><h3 id="线程通讯机制"><a href="#线程通讯机制" class="headerlink" title="线程通讯机制"></a>线程通讯机制</h3><ul><li>概念<br>  有一方处于等待状态，在等待前的，必须去唤醒另外的处于等待的消费者或生产者线程。</li></ul><p>生产者和消费者模型， 使用的是<code>wait()/notifyAll()</code>机制</p><ul><li>关于<code>wait/notify</code>的注意点<br>  此通讯机制必须使用<code>同步</code>。<br>  <code>wait/notify</code>方法由对象调用，可以是任意对象，但是要确保调用这2个方法的对象，必须是同一对象<br>  调用<code>notify()/notifyAll()</code>,就会马上去唤醒那些处于等待状态的线程，让其马上工作。<br>  有条件地调用<code>wait()</code>，不然一直处于等待状态<br>  <code>notify()/notifyAll()</code>书写位置很灵活，它不限于现在前面还是后面</li></ul><p>区别：调用<code>wait()</code>后，后台会释放对象锁；调用<code>sleep()</code>后，后台不会释放任何锁。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 题目一</span></span><br><span class="line"><span class="comment"> *一共有200张票，反别由三个售票窗口卖票，票数依次递减</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test03</span> &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//1.产生票</span></span><br><span class="line">        Ticket ticket=<span class="keyword">new</span> <span class="title class_">Ticket</span>(<span class="number">200</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2.产生售票窗口</span></span><br><span class="line">        SellTicketThread t1=<span class="keyword">new</span> <span class="title class_">SellTicketThread</span>(ticket);</span><br><span class="line">        t1.setName(<span class="string">&quot;售票窗口1&quot;</span>);</span><br><span class="line">        SellTicketThread t2=<span class="keyword">new</span> <span class="title class_">SellTicketThread</span>(ticket);</span><br><span class="line">        t2.setName(<span class="string">&quot;售票窗口2&quot;</span>);</span><br><span class="line">        SellTicketThread t3=<span class="keyword">new</span> <span class="title class_">SellTicketThread</span>(ticket);</span><br><span class="line">        t3.setName(<span class="string">&quot;售票窗口3&quot;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        t1.start();</span><br><span class="line">        t2.start();</span><br><span class="line">        t3.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Ticket</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//属性</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> num;  <span class="comment">//数量</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Ticket</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Ticket</span><span class="params">(<span class="type">int</span> num)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.num = num;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getNum</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> num;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setNum</span><span class="params">(<span class="type">int</span> num)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.num = num;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 卖票</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">sellTicket</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//必须有票卖，卖多次，使用循环结构</span></span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//同步</span></span><br><span class="line">            <span class="keyword">synchronized</span> (<span class="built_in">this</span>) &#123;</span><br><span class="line"></span><br><span class="line">                <span class="comment">//设计退出循环的条件</span></span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (<span class="built_in">this</span>.num &gt; <span class="number">0</span>) &#123;  <span class="comment">//有票卖</span></span><br><span class="line"></span><br><span class="line">                    <span class="comment">//打印售票窗口的名字</span></span><br><span class="line">                    System.out.println(Thread.currentThread().getName() + <span class="string">&quot;:开始售卖第&quot;</span> + <span class="built_in">this</span>.getNum());</span><br><span class="line">                    <span class="comment">//每卖出一张，就休息一下</span></span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        Thread.sleep(<span class="number">20</span>);</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                        e.printStackTrace();</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    <span class="comment">//数字得递减</span></span><br><span class="line">                    <span class="built_in">this</span>.num--;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;  <span class="comment">//无票了</span></span><br><span class="line"></span><br><span class="line">                    <span class="comment">//退出循环</span></span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">            &#125; <span class="comment">//同步结束</span></span><br><span class="line">            <span class="comment">//使用yield()</span></span><br><span class="line">            <span class="comment">//给其他线程一个机会</span></span><br><span class="line">            Thread.yield();</span><br><span class="line"></span><br><span class="line">        &#125; <span class="comment">//while结束</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 卖票线程</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">SellTicketThread</span> <span class="keyword">extends</span>  <span class="title class_">Thread</span>  &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//属性</span></span><br><span class="line">    <span class="keyword">private</span> Ticket ticket;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">SellTicketThread</span><span class="params">()</span> &#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">SellTicketThread</span><span class="params">(Ticket ticket)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">this</span>.ticket=ticket;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">        ticket.sellTicket();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 题目二：利用线程的通信机制,用两个线程打印以下的结果:</span></span><br><span class="line"><span class="comment"> * 1 2 A 3 4 B 5 6 C 7 8 D ... 49 50 Y 51 52 Z</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test01</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//对象锁产生</span></span><br><span class="line">        Object o=<span class="keyword">new</span> <span class="title class_">Object</span>();</span><br><span class="line">        <span class="comment">//2.线程对象产生</span></span><br><span class="line">        NumberThread t1=<span class="keyword">new</span> <span class="title class_">NumberThread</span>(o);</span><br><span class="line">        CharacterThread t2=<span class="keyword">new</span> <span class="title class_">CharacterThread</span>(o);</span><br><span class="line"></span><br><span class="line">        t1.start();</span><br><span class="line">        t2.start();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">NumberThread</span> <span class="keyword">extends</span> <span class="title class_">Thread</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//定义一个对象锁</span></span><br><span class="line">    <span class="keyword">private</span> Object o;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">NumberThread</span><span class="params">(Object o)</span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">this</span>.o=o;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//同步</span></span><br><span class="line">        <span class="keyword">synchronized</span> (o) &#123;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;= <span class="number">52</span>; i += <span class="number">2</span>) &#123;</span><br><span class="line"></span><br><span class="line">                System.out.println(i); <span class="comment">//1</span></span><br><span class="line">                System.out.println(i + <span class="number">1</span>); <span class="comment">//2</span></span><br><span class="line"></span><br><span class="line">                <span class="comment">//唤醒那个处于等待状态的</span></span><br><span class="line"></span><br><span class="line">                <span class="comment">//让此线程陷入等待状态的字母线程</span></span><br><span class="line">                o.notifyAll();</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    <span class="comment">//有条件的wait()</span></span><br><span class="line">                    <span class="keyword">if</span>(i!=<span class="number">52</span>)</span><br><span class="line">                    o.wait();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">CharacterThread</span> <span class="keyword">extends</span> <span class="title class_">Thread</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//产生对象锁</span></span><br><span class="line">    <span class="keyword">private</span> Object o;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">CharacterThread</span><span class="params">(Object o)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">this</span>.o=o;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//同步</span></span><br><span class="line">        <span class="keyword">synchronized</span> (o) &#123;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//循环打印</span></span><br><span class="line">            <span class="keyword">for</span>(<span class="type">char</span> c=<span class="string">&#x27;A&#x27;</span>;c&lt;=<span class="string">&#x27;Z&#x27;</span>;c++) &#123;</span><br><span class="line"></span><br><span class="line">                System.out.println(c);</span><br><span class="line"></span><br><span class="line">                <span class="comment">//先去唤醒哪个处于等待状态的数字</span></span><br><span class="line">                o.notifyAll();</span><br><span class="line"></span><br><span class="line">                <span class="comment">//字母陷入等待</span></span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    <span class="keyword">if</span>(c!=<span class="string">&#x27;Z&#x27;</span>)</span><br><span class="line">                    o.wait();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="新框架（了解）"><a href="#新框架（了解）" class="headerlink" title="新框架（了解）"></a>新框架（了解）</h3><p>jdk1.5版本后，推出了新的线程框架<br>线程池: ThreadPool<br>接口： ExecutorService </p><p>线程通讯机制更新：<br>wait(): await()<br>notify():signal()/signalAll()<br>synchronized(){} : lock取代 </p><p>线程开发方式<br>实现一个接口: Callable接口<br>好处：能抛异常，方法有返回值。</p><p>DEMO</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 线程池：属于jdk1.5之后的新线程框架</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test01</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//1.产生线程池</span></span><br><span class="line">        ExecutorService es=Executors.newFixedThreadPool(<span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//1.5产生Runnable对象</span></span><br><span class="line">        Runnable r1=<span class="keyword">new</span> <span class="title class_">A1</span>(<span class="string">&quot;*****&quot;</span>);</span><br><span class="line">        Runnable r2=<span class="keyword">new</span> <span class="title class_">A1</span>(<span class="string">&quot;$$$$$&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2调用submit方法，放入线程对象</span></span><br><span class="line">        es.submit(r1);</span><br><span class="line">        es.submit(r2);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//3.线程池用完后，要关闭</span></span><br><span class="line">        es.shutdown();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">A1</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String token; <span class="comment">//符号</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">A1</span><span class="params">()</span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">A1</span><span class="params">(String token)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">this</span>.token=token;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=<span class="number">100</span>;i++) &#123;</span><br><span class="line"></span><br><span class="line">            System.out.println(i+<span class="string">&quot;,&quot;</span>+token);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> 业务： 银行存取钱，要求：不断地存，存的钱不能高于2000元；</span></span><br><span class="line"><span class="comment"> 同时，取钱，不断地取，取的钱不能低于0 。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Card</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">double</span> balance; <span class="comment">//余额</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//做一个lock接口对象</span></span><br><span class="line">    Lock lock=<span class="keyword">new</span> <span class="title class_">ReentrantLock</span>();</span><br><span class="line">    <span class="comment">//根据条件接口，调用newCondition()方法，得到条件接口对象</span></span><br><span class="line">    Condition c=lock.newCondition();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Card</span><span class="params">()</span> &#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Card</span><span class="params">(<span class="type">double</span> balance)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">this</span>.balance=balance;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 存钱</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">deposit</span><span class="params">(<span class="type">double</span> money)</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line"></span><br><span class="line">       <span class="comment">// synchronized (this) &#123;</span></span><br><span class="line">        <span class="comment">//使用新现场框架的lock机制</span></span><br><span class="line">        lock.lock();</span><br><span class="line"></span><br><span class="line">            System.out.println(<span class="string">&quot;存钱线程:存入的钱是:&quot;</span> + money);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//不断地存</span></span><br><span class="line">            <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">                <span class="comment">//存的钱余额不能高于2000</span></span><br><span class="line">                <span class="keyword">if</span> (<span class="built_in">this</span>.balance + money &gt; <span class="number">2000</span>) &#123;</span><br><span class="line"></span><br><span class="line">                    <span class="comment">//生产过多,暂停生产</span></span><br><span class="line">                    <span class="comment">//处于等待，目的让消费者前来消费</span></span><br><span class="line">                   <span class="comment">// this.wait();</span></span><br><span class="line">                    c.await();</span><br><span class="line">                &#125;<span class="keyword">else</span> &#123;</span><br><span class="line"></span><br><span class="line">                    <span class="comment">//小于2000，继续生产</span></span><br><span class="line">                    <span class="comment">//退出循环</span></span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//加入钱</span></span><br><span class="line">            <span class="type">double</span> <span class="variable">now</span> <span class="operator">=</span> <span class="built_in">this</span>.balance + money;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//休息一下0.1秒</span></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Thread.sleep(<span class="number">100</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//余额回传</span></span><br><span class="line">            <span class="built_in">this</span>.balance = now;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            <span class="comment">//通知取钱线程过来取钱</span></span><br><span class="line">            <span class="comment">//this.notifyAll();</span></span><br><span class="line">            c.signalAll();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//释放锁</span></span><br><span class="line">        lock.unlock();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//&#125; //同步结束</span></span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;存钱线程：当前的余额是:&quot;</span>+<span class="built_in">this</span>.balance);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 取钱</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">withdraw</span><span class="params">(<span class="type">double</span> money)</span> &#123;</span><br><span class="line"></span><br><span class="line">        lock.lock();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//使用同步</span></span><br><span class="line">       <span class="comment">// synchronized (this) &#123;</span></span><br><span class="line"></span><br><span class="line">            System.out.println(<span class="string">&quot;取钱线程:取出的钱是:&quot;</span> + money);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//取钱,判断取的钱是否够</span></span><br><span class="line">            <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (<span class="built_in">this</span>.balance - money &lt; <span class="number">0</span>) &#123;</span><br><span class="line"></span><br><span class="line">                    <span class="comment">//等待</span></span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        <span class="comment">//this.wait();</span></span><br><span class="line">                        c.await();</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                        e.printStackTrace();</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line"></span><br><span class="line">                    <span class="comment">//有钱继续取</span></span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//加入钱</span></span><br><span class="line">            <span class="type">double</span> <span class="variable">now</span> <span class="operator">=</span> <span class="built_in">this</span>.balance - money;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//休息一下0.2秒</span></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Thread.sleep(<span class="number">100</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//余额回传</span></span><br><span class="line">            <span class="built_in">this</span>.balance = now;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//通知存钱线程，可以生产了</span></span><br><span class="line">            <span class="comment">//this.notifyAll();</span></span><br><span class="line">        c.signalAll();</span><br><span class="line"></span><br><span class="line">        lock.unlock();</span><br><span class="line"></span><br><span class="line">      <span class="comment">//  &#125;    //同步结束</span></span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;取钱线程：当前的余额是:&quot;</span>+<span class="built_in">this</span>.balance);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="反射（Reflection）"><a href="#反射（Reflection）" class="headerlink" title="反射（Reflection）"></a>反射（Reflection）</h2><ul><li><p>概念<br>  就是操作字节码文件(class),目的是要获取字节码文件中的类的内部信息。如属性，方法，构造方法。而反射入口是Class对象。</p></li><li><p>产生Class对象<br>  代码阶段、编译阶段：<code>Class.forName(&quot;类所在的位置&quot;);</code><br>  类加载器得到：。。。。。。较少使用不写了<br>  Class类阶段（加载阶段）：<code>类名.class</code><br>  Runtime阶段：<code>对象.getClass():</code></p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//获取Stu类对象的三种方法，都是输出 class Stu</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test2</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//你要获取哪个类的内部细节，类名就写谁</span></span><br><span class="line">        <span class="comment">//获取学生的反射入口</span></span><br><span class="line">        <span class="comment">//类类型  类对象</span></span><br><span class="line">        <span class="type">Class</span> <span class="variable">c</span> <span class="operator">=</span> Stu.class;</span><br><span class="line">        System.out.println(c);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//产生对象获取Class</span></span><br><span class="line">        <span class="type">Stu</span> <span class="variable">s</span> <span class="operator">=</span><span class="keyword">new</span> <span class="title class_">Stu</span>();</span><br><span class="line">        <span class="type">Class</span> <span class="variable">c2</span> <span class="operator">=</span>s.getClass();</span><br><span class="line">        System.out.println(c2);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//类所在的位置获取</span></span><br><span class="line">        <span class="type">Class</span> <span class="variable">c3</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;Stu&quot;</span>);</span><br><span class="line">        System.out.println(c3);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Stu</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String name;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> age;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>属性：(Field) </p><ol><li><p>得到所有属性<br> <code>getFields()</code>: 得到本类中所有的公开属性<br> <code>getDeclaredFields()</code>:得到本类中所有的属性</p></li><li><p>得到单个属性<br> <code>Class.getField(String name)</code>:  得到公开属性<br> <code>Class.getDeclaredField(String name)</code>: 得到所有属性<br> <code>Field.set(Object obj,Object value)</code>: 给属性设置值 传入实际对象，实际的值<br> <code>Field.get(Object obj)</code>: 得到属性的值 </p><p> <code>注意</code>：对于私有属性，正常类无法直接访问，但是可以通过反射访问。如果反射要访问，必须设置属性的可访问权限。<br> <code>Field.setAccessible(true);</code>  </p></li></ol></li><li><p>方法: (Method): </p><ol><li><p>得到所有方法:<br> <code>Class.getMethods()</code>:  得到所有公开方法<br> <code>Class.getDeclaredMethods()</code>: 得到所有方法</p></li><li><p>得到单个方法:<br> <code>Class.getMethod(String name)</code>: 得到单个公开方法<br> <code>Class.getDeclaredMethod(String name)</code>:得到单个所有方法</p><p> <code>Method.invoke(Object obj, Object... args);</code> //解析方法（运行方法，方法有参数就带上）</p></li></ol></li></ul><ul><li><p>构造方法: (Constructor) </p><ol><li>得到所有的构造方法<br> <code>Class.getConstructors()</code>: 得到所有公开构造方法<br> <code>Class.getDeclaredConstructors()</code>:得到所有构造方法</li><li>得到单个构造方法<br> <code>Class.getConstructor(Class&lt;?&gt;... parameterTypes)</code>:得到公开的单个构造方法<br> <code>Class.getDeclaredConstructor(Class&lt;?&gt;... parameterTypes)</code>: 得到单个构造方法</li><li>如何输出构造方法中的内容:<br> <code>Class.newInstance();</code> //调用了无参构造方法<br> <code>Constructor.newInstance(Object...obj);</code>：//调用了带参构造方法（需要clss.getConstructor(Class&lt;?&gt;… parameterTypes)。获取构造器后才能创建</li></ol></li><li><p>了解其他的Class</p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//外部类</span></span><br><span class="line">Class&lt;String&gt; clazz1 = String.class;</span><br><span class="line"><span class="comment">//接口</span></span><br><span class="line">Class&lt;Serializable&gt; clazz2 = Serializable.class;</span><br><span class="line"><span class="comment">//数组</span></span><br><span class="line">Class&lt;Integer[]&gt; clazz3 = Integer[].class;</span><br><span class="line"><span class="comment">//二维数组</span></span><br><span class="line">Class&lt;Integer[][]&gt; clazz4 = Integer[][].class;</span><br><span class="line"><span class="comment">//注解</span></span><br><span class="line">Class&lt;Deprecated&gt; clazz5 = Deprecated.class;</span><br><span class="line"><span class="comment">//枚举</span></span><br><span class="line">Class&lt;Thread.State&gt; clazz6 = Thread.State.class;</span><br><span class="line"><span class="comment">//基本数据类型</span></span><br><span class="line">Class&lt;Long&gt; clazz7 = <span class="type">long</span>.class;</span><br><span class="line"><span class="comment">//void数据类型</span></span><br><span class="line">Class&lt;Void&gt; clazz8 = <span class="keyword">void</span>.class;</span><br><span class="line">Class&lt;Class&gt; clazz9 = Class.class;</span><br></pre></td></tr></table></figure></li></ul><h3 id="Field-说明"><a href="#Field-说明" class="headerlink" title="Field 说明"></a>Field 说明</h3><p><code>getModifiers</code>: 以int形式返回修饰符<br>说明:默认修饰符是0，public 是1，private是2，protected是4,static是8，final是16<br>例子：public static 修饰的返回是 9<br><code>getType</code>:以Class形式返回类型<br><code>getName</code>:返回属性名</p><h3 id="Method-说明"><a href="#Method-说明" class="headerlink" title="Method 说明"></a>Method 说明</h3><p><code>getModifiers</code>: 以int形式返回修饰符<br>说明:默认修饰符是0，public 是1，private是2，protected是4,static是8，final是16<br><code>getReturnType</code>：getReturnType:以Class形式获取返回类型<br><code>getName</code>:返回方法名<br><code>getParameterTypes</code>:以Class[]返回参数类型数组</p><h3 id="看代码-15"><a href="#看代码-15" class="headerlink" title="看代码"></a>看代码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//对属性进行操作</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test2</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IllegalAccessException, InstantiationException, NoSuchFieldException &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//1.得到类对象</span></span><br><span class="line">        Student s=<span class="keyword">new</span> <span class="title class_">Student</span>(); <span class="comment">//产生了学生对象</span></span><br><span class="line">        Class&lt;?&gt; c=s.getClass();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2.通过类对象得到单个属性</span></span><br><span class="line">        Field field=c.getDeclaredField(<span class="string">&quot;age&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;反射得到的属性对象是：&quot;</span>+field);</span><br><span class="line">        <span class="comment">// 反射得到的属性对象是：public int pojo.Student.age</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//得到属性名字</span></span><br><span class="line">        String name=field.getName();</span><br><span class="line">        System.out.println(<span class="string">&quot;学生类中的age属性名称是：&quot;</span>+name);</span><br><span class="line">        <span class="comment">// 学生类中的age属性名称是：age</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//给属性赋值</span></span><br><span class="line">        field.set(s,<span class="number">18</span>);</span><br><span class="line">        <span class="comment">//得到属性值</span></span><br><span class="line">        Object value=field.get(s);</span><br><span class="line">        System.out.println(<span class="string">&quot;学生类中age属性的值是:&quot;</span>+value);</span><br><span class="line">        <span class="comment">// 学生类中age属性的值是:18</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//得到name的值</span></span><br><span class="line">        field=c.getDeclaredField(<span class="string">&quot;name&quot;</span>);</span><br><span class="line">        String name2=field.getName();</span><br><span class="line">        System.out.println(<span class="string">&quot;学生类中的name属性名称是：&quot;</span>+name2);</span><br><span class="line">        <span class="comment">// 学生类中的name属性名称是：name</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//反射访问私有属性</span></span><br><span class="line">        field.setAccessible(<span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//给name属性赋值</span></span><br><span class="line">        field.set(s,<span class="string">&quot;zhangsan&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//得到属性值</span></span><br><span class="line">        Object obj2=field.get(s);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;学生类中的age属性赋的值是：&quot;</span>+obj2);</span><br><span class="line">        <span class="comment">// 学生类中的age属性赋的值是：zhangsan</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 反射操作方法</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test05</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ClassNotFoundException &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//1.得到类对象</span></span><br><span class="line">        Class&lt;?&gt; c=Class.forName(<span class="string">&quot;com.bjpowernode.test.Student&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2.通过类对象得到所有的方法</span></span><br><span class="line">        Method[] methods=c.getDeclaredMethods();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//3.遍历</span></span><br><span class="line">        <span class="keyword">for</span>(Method method:methods) &#123;</span><br><span class="line"></span><br><span class="line">            System.out.println(<span class="string">&quot;学生类中的所有的方法对象:&quot;</span>+method);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//得到方法名</span></span><br><span class="line">            String name=method.getName();</span><br><span class="line"></span><br><span class="line">            System.out.println(<span class="string">&quot;方法名称是：&quot;</span>+name);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//得到方法返回类型</span></span><br><span class="line">            System.out.println(<span class="string">&quot;方法返回类型是:&quot;</span>+method.getReturnType());</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">解析方法</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test2</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//1.得到类对象</span></span><br><span class="line">        Class&lt;?&gt; c=Student.class;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2.通过类对象得到单个方法对象</span></span><br><span class="line">        Method method=c.getDeclaredMethod(<span class="string">&quot;show&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//产生一个学生类的实际对象</span></span><br><span class="line">        Student s= (Student) c.newInstance();</span><br><span class="line">        <span class="comment">//3.反射实现方法调用</span></span><br><span class="line">        method.invoke(s);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">带参数的解析方法</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test07</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> NoSuchMethodException, IllegalAccessException, InstantiationException, InvocationTargetException &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//1.产生类对象</span></span><br><span class="line">        Class&lt;?&gt; c=Student.class;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2.通过c调用getDeclaredMethod()得到单个方法</span></span><br><span class="line">        Method method=c.getDeclaredMethod(<span class="string">&quot;sum&quot;</span>,<span class="type">int</span>.class,<span class="type">int</span>.class);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2.5产生学生对象</span></span><br><span class="line">        Student s= (Student) c.newInstance();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//3.调用此sum</span></span><br><span class="line">        Object o=method.invoke(s,<span class="number">2</span>,<span class="number">3</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//4.打印最终方法调用返回结果</span></span><br><span class="line">        System.out.println(<span class="string">&quot;方法sum调用后，结果为:&quot;</span>+o);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">构造方法</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test09</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//1.得到类对象</span></span><br><span class="line">        Class&lt;?&gt; c=Student.class;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2.得到构造方法对象</span></span><br><span class="line">        Constructor cc=c.getDeclaredConstructor();</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;反射得到的无参构造方法是：&quot;</span>+cc);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//3.带参构造方法</span></span><br><span class="line">        Constructor ccc=c.getDeclaredConstructor(String.class,<span class="type">int</span>.class);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;反射得到的带参构造方法是:&quot;</span>+ccc);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;*************************************************&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//输出无参构造方法中的内容</span></span><br><span class="line">        <span class="comment">//得到无参构造方法对象</span></span><br><span class="line">        <span class="comment">//Student sss=new Student();</span></span><br><span class="line">        cc.newInstance();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//输出带参构造方法中的内容</span></span><br><span class="line">        Object o=ccc.newInstance(<span class="string">&quot;zhangsan&quot;</span>,<span class="number">18</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;学生对象是：&quot;</span>+o);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>学生类模板</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Student</span> &#123;</span><br><span class="line">    <span class="keyword">private</span>   String name; <span class="comment">//姓名</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> age;</span><br><span class="line">    <span class="keyword">protected</span> String hobby;</span><br><span class="line">    <span class="type">int</span> score;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Student</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;这是学生类中的无参构造方法&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Student</span><span class="params">(String name, <span class="type">int</span> age)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">        System.out.println(<span class="string">&quot;这是学生类中的带参构造方法&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getAge</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setAge</span><span class="params">(<span class="type">int</span> age)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">show</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;这是学生类中的show方法&quot;</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">sum</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> x+y;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="注解（Annotation）"><a href="#注解（Annotation）" class="headerlink" title="注解（Annotation）"></a>注解（Annotation）</h2><ul><li><p>概念<br>  注解是一个引用数据类型: ,用来给属性，类，或方法等做约束使用的。</p></li><li><p>jdk自带注解:<br>  <code>@Override</code>  :重写<br>  <code>@SuppressWarnings</code> :  压下警告<br>  <code>@Deprecated</code> : 过时</p></li><li><p>自定义注解:<br>  步骤： </p><ol><li><p>先定义一个注解（像类一样<br>语法: </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> 注解名称 &#123;</span><br><span class="line"></span><br><span class="line">            注解的属性</span><br><span class="line">            (这里的属性按照变量的方式去写)</span><br><span class="line">            访问修饰符 数据类型 属性名(); </span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure></li><li><p>定义此注解的元注解</p><p> 元注解: 注解的注解</p><p> <code>@Target</code>: 目标:交代你自定义的注解，稍后打在何处(位置）：可以打在类处，方法处，属性处,……<br> <code>@Rentention</code>:保留 把注解保留在哪个地方: </p><p> 1)Source: 源文件中 :   Test01.java<br> 2)Class:  字节码中 :   Test01.class<br> 3)Runtime:运行时:  注解保存在字节码中，但是注解可以通过反射找到。</p></li><li><p>使用你的注解</p></li></ol></li></ul><h2 id="基础网络编程"><a href="#基础网络编程" class="headerlink" title="基础网络编程"></a>基础网络编程</h2><p>Web 编程：编写程序运行在同一个网络下的两个终端上，使<br>得它们之间可以进行数据传输。</p><h3 id="TCP"><a href="#TCP" class="headerlink" title="TCP"></a>TCP</h3><p>TCP 是面向连接的运输层协议，传输数据之前必须先建立稳<br>定的连接。<br>优点：稳定可靠，不会出现数据丢失的情况，数据是按照先<br>后顺序依次到达。<br>缺点：速度慢、效率低<br>服务端：ServerSocket<br>客户端：Socket</p><p>Server.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> TCP;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.net.ServerSocket;</span><br><span class="line"><span class="keyword">import</span> java.net.Socket;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Server</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">ServerSocket</span> <span class="variable">serverSocket</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">Socket</span> <span class="variable">socket</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">OutputStream</span> <span class="variable">outputStream</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">InputStream</span> <span class="variable">inputStream</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">DataOutputStream</span> <span class="variable">dataOutputStream</span> <span class="operator">=</span></span><br><span class="line">                <span class="literal">null</span>;</span><br><span class="line">        <span class="type">DataInputStream</span> <span class="variable">dataInputStream</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            serverSocket = <span class="keyword">new</span></span><br><span class="line">                    <span class="title class_">ServerSocket</span>(<span class="number">8080</span>);</span><br><span class="line">            System.out.println(<span class="string">&quot;---服务端---&quot;</span>);</span><br><span class="line">            System.out.println(<span class="string">&quot;已启动，等待接收客户端请求...&quot;</span>);</span><br><span class="line">            <span class="keyword">while</span>(<span class="literal">true</span>)&#123;</span><br><span class="line">                socket = serverSocket.accept();</span><br><span class="line">                inputStream =</span><br><span class="line">                        socket.getInputStream();</span><br><span class="line">                dataInputStream = <span class="keyword">new</span></span><br><span class="line">                        <span class="title class_">DataInputStream</span>(inputStream);</span><br><span class="line">                <span class="type">String</span> <span class="variable">request</span> <span class="operator">=</span></span><br><span class="line">                        dataInputStream.readUTF();</span><br><span class="line">                System.out.println(<span class="string">&quot;接受到了客户端请求：&quot;</span> + request);</span><br><span class="line">                outputStream =</span><br><span class="line">                        socket.getOutputStream();</span><br><span class="line">                dataOutputStream = <span class="keyword">new</span></span><br><span class="line">                        <span class="title class_">DataOutputStream</span>(outputStream);</span><br><span class="line">                <span class="type">String</span> <span class="variable">response</span> <span class="operator">=</span> <span class="string">&quot;HelloWorld&quot;</span>;</span><br><span class="line">                dataOutputStream.writeUTF(response);</span><br><span class="line">                System.out.println(<span class="string">&quot;给客户端做出响应：&quot;</span> + response);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                dataInputStream.close();</span><br><span class="line">                dataOutputStream.close();</span><br><span class="line">                inputStream.close();</span><br><span class="line">                outputStream.close();</span><br><span class="line">                socket.close();</span><br><span class="line">                serverSocket.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Client.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> TCP;</span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.net.Socket;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Client</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Socket</span> <span class="variable">socket</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">OutputStream</span> <span class="variable">outputStream</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">InputStream</span> <span class="variable">inputStream</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">DataOutputStream</span> <span class="variable">dataOutputStream</span> <span class="operator">=</span></span><br><span class="line">                <span class="literal">null</span>;</span><br><span class="line">        <span class="type">DataInputStream</span> <span class="variable">dataInputStream</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            socket = <span class="keyword">new</span> <span class="title class_">Socket</span>(<span class="string">&quot;127.0.0.1&quot;</span>,</span><br><span class="line">                    <span class="number">8080</span>);</span><br><span class="line">            System.out.println(<span class="string">&quot;---客户端---&quot;</span>);</span><br><span class="line">            <span class="type">String</span> <span class="variable">request</span> <span class="operator">=</span> <span class="string">&quot;Hello!&quot;</span>;</span><br><span class="line">            System.out.println(<span class="string">&quot;客户端说：&quot;</span> +</span><br><span class="line">                    request);</span><br><span class="line">            outputStream =</span><br><span class="line">                    socket.getOutputStream();</span><br><span class="line">            dataOutputStream = <span class="keyword">new</span></span><br><span class="line">                    <span class="title class_">DataOutputStream</span>(outputStream);</span><br><span class="line">            dataOutputStream.writeUTF(request);</span><br><span class="line">            inputStream =</span><br><span class="line">                    socket.getInputStream();</span><br><span class="line">            dataInputStream = <span class="keyword">new</span></span><br><span class="line">                    <span class="title class_">DataInputStream</span>(inputStream);</span><br><span class="line">            <span class="type">String</span> <span class="variable">response</span> <span class="operator">=</span></span><br><span class="line">                    dataInputStream.readUTF();</span><br><span class="line">            System.out.println(<span class="string">&quot;服务端响应为：&quot;</span> +</span><br><span class="line">                    response);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                outputStream.close();</span><br><span class="line">                inputStream.close();</span><br><span class="line">                dataInputStream.close();</span><br><span class="line">                dataOutputStream.close();</span><br><span class="line">                socket.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="UDP"><a href="#UDP" class="headerlink" title="UDP"></a>UDP</h3><h2 id="代理"><a href="#代理" class="headerlink" title="代理"></a>代理</h2><ul><li><p>静态代理和动态代理的区别<br>  静态代理中代理类在编译期就已经确定，而动态代理则是JVM运行时动态生成，静态代理的效率相对动态代理来说相对高一些。<br>  但是静态代理代码冗余大，一但需要修改接口，代理类和委托类都需要修改。</p></li><li><p>JDK动态代理和CGLIB动态代理的区别<br>  JDK动态代理只能对实现了接口的类生成代理，而不能针对类。<br>  CGLIB是针对类实现代理，主要是对指定的类生成一个子类，覆盖其中的方法。因为是继承，所以该类或方法最好不要声明成final。</p></li></ul><p>例子：通过代理输出<br>张三使用JDK动态代理，李四使用CGLIB动态代理</p><p>Speaker接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Speaker</span> &#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">speak</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>张三实体实现speaker接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Zhangsan</span> <span class="keyword">implements</span> <span class="title class_">Speaker</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">speak</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;张三出声。。。&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>JDK代理</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 需要实现 InvocationHandler</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JdkLawyer</span> <span class="keyword">implements</span> <span class="title class_">InvocationHandler</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Object obj;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 传参构造方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">JdkLawyer</span><span class="params">(Object obj)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.obj = obj;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    invoke方法</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span> <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;jdk动态代理ing&quot;</span>);</span><br><span class="line">        method.invoke(obj, args); <span class="comment">//反射</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.lang.reflect.Proxy;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//jdk动态代理</span></span><br><span class="line">        <span class="type">JdkLawyer</span> <span class="variable">jdkLawyer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JdkLawyer</span>(<span class="keyword">new</span> <span class="title class_">Zhangsan</span>());</span><br><span class="line"></span><br><span class="line">        <span class="type">Speaker</span> <span class="variable">speaker1</span> <span class="operator">=</span> (Speaker) Proxy.newProxyInstance(Demo.class.getClassLoader(), <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;Speaker.class&#125;, jdkLawyer);</span><br><span class="line">        speaker1.speak();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 最后输出：</span></span><br><span class="line"><span class="comment">// jdk动态代理ing</span></span><br><span class="line"><span class="comment">// 张三出声。。。</span></span><br></pre></td></tr></table></figure><hr><p>需要导包</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--代理包--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>cglib<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>cglib<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.3.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>李四实体类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Lisi</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">speak</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;李四出声。。。&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>代理类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> net.sf.cglib.proxy.MethodInterceptor;</span><br><span class="line"><span class="keyword">import</span> net.sf.cglib.proxy.MethodProxy;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 实现MethodInterceptor</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CglibLawyer</span> <span class="keyword">implements</span> <span class="title class_">MethodInterceptor</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Object obj;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 构造方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">CglibLawyer</span><span class="params">(Object obj)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.obj = obj;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">intercept</span><span class="params">(Object o, Method method, Object[] objects, MethodProxy methodProxy)</span> <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Cglib动态代理ing&quot;</span>);</span><br><span class="line">        method.invoke(obj, objects);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> net.sf.cglib.proxy.Enhancer;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// Cglib动态代理</span></span><br><span class="line">        <span class="type">CglibLawyer</span> <span class="variable">cglibLawyer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CglibLawyer</span>(<span class="keyword">new</span> <span class="title class_">Lisi</span>());</span><br><span class="line">        <span class="type">Lisi</span> <span class="variable">lisi</span> <span class="operator">=</span> (Lisi)Enhancer.create(Lisi.class, cglibLawyer);</span><br><span class="line">        lisi.speak();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 最后输出：</span></span><br><span class="line"><span class="comment">// Cglib动态代理ing</span></span><br><span class="line"><span class="comment">// 李四出声。。。</span></span><br></pre></td></tr></table></figure><h2 id="Lambda表达式"><a href="#Lambda表达式" class="headerlink" title="Lambda表达式"></a>Lambda表达式</h2><p>ambda表达式， 从本质来讲， 是<strong>一个</strong>匿名函数。 可以使用使用这个<strong>匿名函数</strong>， 实现接口中的方法。<br>对接口进行非常简洁的实现， 从而简化代码。</p><p>实际上， 我们在写lambda表达式的时候， 也不需要关心返回值类型。<br>我们在写lambda表达式的时候， 只需要关注两部分内容即可： <strong>参数列表</strong> 和 <strong>方法体</strong></p><h3 id="基础"><a href="#基础" class="headerlink" title="基础"></a>基础</h3><p>基础语法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">(参数) -&gt; &#123;</span><br><span class="line">    方法体</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 参数部分 ： 方法的参数列表， 要求和实现的接口中的方法参数部分一致，</span></span><br><span class="line"><span class="comment">// 包括参数的数量和类型。</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 方法体部分 ： 方法的实现部分， 如果接口中定义的方法有返回值， </span></span><br><span class="line"><span class="comment">// 则在实现的时候， 注意返回值的返回。</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// -&gt; : 分隔参数部分和方法体部分。</span></span><br></pre></td></tr></table></figure><p>例子：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 接口</span></span><br><span class="line"><span class="meta">@FunctionalInterface</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">SingleReturnMutipleParameter</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="title function_">test</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 测试</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BasicSyntax</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// 实现多个参数, 有返回值的函数式接口</span></span><br><span class="line">        <span class="type">SingleReturnMutipleParameter</span> <span class="variable">lambda6</span> <span class="operator">=</span> (<span class="type">int</span> a, <span class="type">int</span> b) -&gt; &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;这是多个参数, 有返回值的方法&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> a + b;</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="type">int</span> <span class="variable">ret3</span> <span class="operator">=</span> lambda6.test(<span class="number">100</span>, <span class="number">200</span>);</span><br><span class="line">        System.out.println(ret3);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 最后输出以下结果</span></span><br><span class="line">        <span class="comment">// 这是多个参数, 有返回值的方法</span></span><br><span class="line">        <span class="comment">// 300</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="进阶"><a href="#进阶" class="headerlink" title="进阶"></a>进阶</h3><ul><li><p>参数部分的精简</p><ul><li><p>参数的类型<br>  由于在接口的方法中，已经定义了每一个参数的类型是什么。 而且在使用lambda表达式实现接口的时候， 必须要保证参数的数量和类型需要和接口中的方法保持一致。 因此， 此时lambda表达式中的参数的类型可以省略不写。</p><p>  注意事项：<br>  如果需要省略参数的类型， 要保证： 要省略， 每一个参数的类型都必须省略不写。 绝对不能出现， 有的参数类型省略了， 有的参数类型没有省略。</p></li><li><p>参数的小括号<br>  如果方法的参数列表中的参数数量 <strong>有且只有一个</strong> ，此时，参数列表的小括号是可以省略不写的</p><p>  注意事项:<br>  只有当参数的数量是一个的时候， 多了、少了都不能省略。<br>  省略掉小括号的同时， 必须要省略参数的类型。</p></li></ul></li><li><p>方法体部分的精简</p><ul><li>方法体大括号的精简<br>  当一个方法体中的逻辑， 有且只有一句的情况下， 大括号可以省略。</li><li>return的精简<br>  如果一个方法中唯一的一条语句是一个返回语句， 此时在省略掉大括号的同时， 也必须省略掉return。</li></ul></li></ul><h3 id="函数引用"><a href="#函数引用" class="headerlink" title="函数引用"></a>函数引用</h3><p>在有些情况下， 我们需要在lambda表达式中实现的逻辑， 在另外一个地方已经写好了。<br>此时我们就不需要再单独写一遍， 只需要直接引用这个已经存在的方法即可</p><p><strong>注意事项:</strong><br>在引用的方法后面， 不要添加小括号。<br>引用的这个方法， 参数（数量、类型） 和 返回值， 必须要跟接口中定义的一致。</p><ul><li>语法：<br>  <code>类::静态方法</code><br>  <code>对象::非静态方法</code></li></ul><p>函数引用： 引用一个已经存在的方法， 使其替代lambda表达式完成接口的实现。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Lambda1</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 接口</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">interface</span> <span class="title class_">Calculate</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="title function_">calculate</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="title function_">calculate2</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (a != b) &#123;</span><br><span class="line">            <span class="keyword">return</span> a - b;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> a + b;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">calculate</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (x &gt; y) &#123;</span><br><span class="line">            <span class="keyword">return</span> x - y;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (x &lt; y) &#123;</span><br><span class="line">            <span class="keyword">return</span> y - x;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> x + y;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// 单纯的引用 ，换成冒号的写法更优雅</span></span><br><span class="line">         <span class="type">Calculate</span> <span class="variable">calculate0</span> <span class="operator">=</span> (x, y) -&gt; calculate(x, y);</span><br><span class="line">        <span class="comment">//</span></span><br><span class="line">        <span class="comment">// 引用一个静态方法</span></span><br><span class="line">        <span class="type">Calculate</span> <span class="variable">calculate</span> <span class="operator">=</span> Lambda1::calculate;</span><br><span class="line">        <span class="comment">// 调用</span></span><br><span class="line">        System.out.println(calculate.calculate(<span class="number">10</span>, <span class="number">10</span>));</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 引用一个非静态方法</span></span><br><span class="line">        <span class="type">Calculate</span> <span class="variable">calculate2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Lambda1</span>()::calculate2;</span><br><span class="line">        <span class="comment">// 调用</span></span><br><span class="line">        System.out.println(calculate2.calculate(<span class="number">10</span>, <span class="number">20</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="构造方法的引用"><a href="#构造方法的引用" class="headerlink" title="构造方法的引用"></a>构造方法的引用</h3><p>如果某一个函数式接口中定义的方法， 仅仅是为了得到一个类的对象。 此时我们就可以使用<br>构造方法的引用， 简化这个方法的实现。</p><ul><li>语法<br>  <code>类名::new</code></li><li>注意事项<br>  可以通过接口中的方法的参数， 区分引用不同的构造方法。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">demo</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 一个类</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">        String name;</span><br><span class="line">        <span class="type">int</span> age;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">public</span> <span class="title function_">Person</span><span class="params">()</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;一个Person对象被实例化了&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 接口</span></span><br><span class="line">    <span class="meta">@FunctionalInterface</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">interface</span> <span class="title class_">GetPerson</span> &#123;</span><br><span class="line">        <span class="comment">// 仅仅是希望获取到一个Person对象作为返回值</span></span><br><span class="line">        Person <span class="title function_">test</span><span class="params">()</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// lambda表达式实现接口</span></span><br><span class="line">        <span class="type">GetPerson</span> <span class="variable">lambda</span> <span class="operator">=</span> Person::<span class="keyword">new</span>; <span class="comment">// 引用到Person类中的无参构造方法，获取到一个Person对象</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 调用</span></span><br><span class="line">        lambda.test();</span><br><span class="line">        <span class="comment">//输出</span></span><br><span class="line">        <span class="comment">//一个Person对象被实例化了</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="对象方法的特殊引用"><a href="#对象方法的特殊引用" class="headerlink" title="对象方法的特殊引用"></a>对象方法的特殊引用</h3><p>如果在使用lambda表达式，实现某些接口的时候。 lambda表达式中包含了某一个对象， 此时方法体<br>中， 直接使用这个对象调用它的某一个方法就可以完成整体的逻辑。 其他的参数， 可以作为调用方法<br>的参数。 此时， 可以对这种实现进行简化。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@FunctionalInterface</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">interface</span> <span class="title class_">MyInterface</span> &#123;</span><br><span class="line">    <span class="comment">// String get(Person person);</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">set</span><span class="params">(Person person, String name)</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="type">Person</span> <span class="variable">xiaoming</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Person</span>();</span><br><span class="line">    xiaoming.setName(<span class="string">&quot;xiaoming&quot;</span>);</span><br><span class="line">    <span class="comment">//</span></span><br><span class="line">    <span class="comment">// MyInterface lambda1 = x -&gt; x.getName();</span></span><br><span class="line">    <span class="comment">// MyInterface lambda2 = Person::getName;</span></span><br><span class="line">    <span class="comment">// System.out.println(lambda2.get(xiaoming));</span></span><br><span class="line"></span><br><span class="line">    <span class="type">MyInterface</span> <span class="variable">lambda1</span> <span class="operator">=</span> (x, n) -&gt; x.setName(n);</span><br><span class="line">    <span class="type">MyInterface</span> <span class="variable">lambda2</span> <span class="operator">=</span> Person::setName;</span><br><span class="line">    lambda2.set(xiaoming, <span class="string">&quot;456&quot;</span>);</span><br><span class="line">    System.out.println(xiaoming.getName());</span><br><span class="line">    <span class="comment">// 成功修改成456</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="闭包问题"><a href="#闭包问题" class="headerlink" title="闭包问题"></a>闭包问题</h3><p>如果在lambda表达式中，<strong>使用到了局部变量</strong>，那么这个局部变量会被隐式的声明为 final。 是一个常<br>量， <strong>不能修改值</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Lambda4</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">int</span> <span class="variable">y</span> <span class="operator">=</span> <span class="number">20</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// 1. 定义一个局部变量</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">x</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line">        <span class="comment">// 2. 使用lambda表达式实现接口</span></span><br><span class="line">        <span class="type">LambdaTest</span> <span class="variable">lambda</span> <span class="operator">=</span> () -&gt; &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;x = &quot;</span> + x);</span><br><span class="line">            System.out.println(<span class="string">&quot;y = &quot;</span> + y);</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="comment">// 3. 修改变量x的值，发现会报错</span></span><br><span class="line">        <span class="comment">// x = 20;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 4. 修改变量y的值，不会报错</span></span><br><span class="line">        y = <span class="number">200</span>;</span><br><span class="line"></span><br><span class="line">        lambda.test();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@FunctionalInterface</span></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">LambdaTest</span> &#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">test</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h3><ul><li>线程的实例化  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="type">Thread</span> <span class="variable">thread</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">        <span class="comment">// 线程中的处理</span></span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>集合的常见方法  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    ArrayList&lt;String&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    Collections.addAll(list, <span class="string">&quot;我&quot;</span>, <span class="string">&quot;是&quot;</span>, <span class="string">&quot;葫芦&quot;</span>, <span class="string">&quot;呀？&quot;</span>);</span><br><span class="line">    <span class="comment">// 按照条件进行删除</span></span><br><span class="line">    list.removeIf(ele -&gt; ele.endsWith(<span class="string">&quot;？&quot;</span>));</span><br><span class="line">    <span class="comment">// 批量替换</span></span><br><span class="line">    list.replaceAll(ele -&gt; ele.concat(<span class="string">&quot;!&quot;</span>));</span><br><span class="line">    <span class="comment">// 自定义排序</span></span><br><span class="line">    list.sort((e1, e2) -&gt; e2.compareTo(e1));</span><br><span class="line">    <span class="comment">// 遍历</span></span><br><span class="line">    list.forEach(System.out::println);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 最后输出：</span></span><br><span class="line"><span class="comment">//葫芦!</span></span><br><span class="line"><span class="comment">//是!</span></span><br><span class="line"><span class="comment">//我!</span></span><br></pre></td></tr></table></figure></li><li>集合的流式编程  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    ArrayList&lt;String&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    Collections.addAll( list, <span class="string">&quot;我&quot;</span>, <span class="string">&quot;是&quot;</span>, <span class="string">&quot;葫芦&quot;</span>, <span class="string">&quot;呀?&quot;</span>);</span><br><span class="line">    list.parallelStream().filter(ele -&gt; ele.length() &gt; <span class="number">1</span>).forEach(System.out::println);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 葫芦</span></span><br><span class="line"><span class="comment">// 呀?</span></span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>所谓情商高，就是会说话（日常生活版）</title>
      <link href="/posts/3749.html"/>
      <url>/posts/3749.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>此书可以说是我看过几本同类型书的大杂烩，把一些重点、方法都归纳在此，再结合中国的文化会让你觉得读这本书没有那么晦涩难懂。适合没那么多时间和基本了解一下读者来读。以下节选比较有用的笔记来说下。</p></blockquote><p><img src="https://raw.githubusercontent.com/pengyirui/blog_img/main/2021-07-23-00.jpg"><br><em>兆民</em></p><h2 id="不做话题终结者"><a href="#不做话题终结者" class="headerlink" title="不做话题终结者"></a>不做话题终结者</h2><ol><li><p>否定+解释<br><code>别人对你提出问题，如果不符合实际情况，一般你都会否定说“不是&quot;。这个时候别停下，再追加一句“解释”。</code><br>“我不是东北人”+“我生在江苏，祖籍在东北”；<br>“这个熊本熊是假的”+“因为国内还没有指定的专营店，不过能在北京看到它已经很难得了”。<br>加上一句解释，就给对方留下了继续和你对话的”引子”，说不定对方正好也是江苏人，说不定对方也正想和你研究一下熊本熊的历史渊源呢。</p></li><li><p>拒绝+肯定<br><code>拒绝别人的好意和请求是很正常的事，因为你确实无法抽身，可是往往那种生硬的回绝会让对方不高兴甚至造成误会。这时，如果在拒绝之后加上一句肯定的话、效果就完全不同了。</code><br>“我今晚要加班参加不了”+”不过明晚有空我很愿意去”；<br>“现在心情很差不想和你讨论”+”明早我在办公室，你可以那个时候来，我们聊聊”</p></li><li><p>拒绝+反问<br><code>当你既无法满足对方要求，又无法给出确切的补充回答，又该怎么办呢？不妨用“反问”把问题抛给对方，反何可以让话题继续下去，或者干脆换个话题，不至于尴尬。</code><br>“我去不了，所有周末时间都被安排满了”+”我记得你周末也要看孩子。怎么突然有时间了”；<br>“我现在不想考虑谈恋爱的事”+“你为什么觉得我们俩合适呢”。</p></li><li><p>肯定+反问<br><code>有时候，不光否定句式连肯定的回答也会终结话题加上一句反问，可以使话题递进下去，说不定还能激起对方的好奇心。</code><br>“你为这份事业坚持了十年真不容易啊！”<br>“是啊，的确不容易”+“你知道是什么支撑我一路走下来的吗”<br>这时对方自然会竖起耳朵迎候你的故事。</p></li></ol><h2 id="打电话需要注意的"><a href="#打电话需要注意的" class="headerlink" title="打电话需要注意的"></a>打电话需要注意的</h2><p>长话短说（引起兴趣后再详细讲）<br>郑重的心态（找一个适合的地方通话）<br>情绪浓度会削弱（在很重要的事情无法引起对方足够重视。一些难以启齿的话只在电话中才说的出口。）</p><h2 id="寒暄"><a href="#寒暄" class="headerlink" title="寒暄"></a>寒暄</h2><ol><li><p>兴趣导向<br>“怎么，没吃早饭啊？”<br>“是啊，起晚了。”<br>“一晚熬夜看球了吧？”<br>“唉，别提了，我的意大利啊，又输了。”<br>“对了，你说起足球，下个月鸟巢有皇马的邀请赛你知道吗？”</p></li><li><p>赞美导向<br>“张总早，您出去开会？”<br>“对，见个客户。”<br>“您这条领带很帅啊，老婆给买的吧？”<br>“哈哈，对，都好几年了。”<br>“看上去跟新的一样。噢，张总，公司年会时间最后定了吗？今年大家可都盼着您的歌声呢，唱功那么好。”</p></li><li><p>建议导向<br>“咦。这么巧，你也在这儿逛着呢？”<br>“家里来了亲戚，想找个地方吃饭。”<br>“六楼新开了一家川菜馆，我们上周刚吃过，很不错。”<br>“是嘛，那行啊，我们也去试试”</p></li><li><p>理解导问<br>“看你在朋友圈，上发的消息，上周你是不是搬家了，搬完了吗？<br>“搬是搬完了，生一肚子气”<br>“怎么啦？”<br>“房东非说我搬家把地板搞花了，扣了一部分押金。”<br>“啊？还有这种事，这太欺负人了吧，不能就这么算了呀！”<br>“唉，我也不想跟他掰扯了，就这样吧。<br>“确实挺过分的，不过我以前的房东比这个过分十倍。”</p></li></ol><p>这里只列举出了四种导向的寒暄，其实只要留心观察和刻意训练我们可以总结出各式各样的寒暄法，以应对不同场合的需要不过30秒钟寒暄要<code>注意几件事</code>：</p><ol><li>寒暄就是寒暄，无须给一件事下结论，可在任何时候结束，不必有负担；</li><li>最好不掺杂过多个人好恶或价值判断，否则容易给人造成不舒服的感觉；</li><li>保持话题边界，不涉及隐私，不过分关心对方生活更不宜谈论其他熟人的流言鉴语；</li><li>常面带微笑、语气随和，始终让寒暄处在轻松氛围中。</li></ol><p>凡经历过短暂寒暄的人都清楚，想要在某个临时情景中迅速找出恰当的话题，确实很不容易。那么该怎么提高这种能力呢？</p><ol><li>注意观察。<br>服饰、鞋帽、发型、手中的物品…任何细节都能成为话题。</li><li>切口要小，话题宜具体。<br>最好不要一上来就问开放式问题，如“最近怎么样啊”“工作忙吗”之类的，一般情况下，对方在毫无准备的情况下只好说“还行”“还好”。这时话题就很难再继续下去了。</li><li>要占据主动，这一点非常重要。<br>占据主动意味着主动开口寒暄，占据话题优势，进而把话题引导到自己有所准备的内容上，避免措手不及。</li><li>搜集一些有意思的话题。<br>平时上网浏览就是搜集寒喧话题的好时机，把感兴趣的话题或新闻随手记下来，下一次指不定在什么短暂相遇的场合就能用上；影视剧里也有许多寒暄的对白，觉得精彩的也可以记下来。</li></ol><h2 id="五个W"><a href="#五个W" class="headerlink" title="五个W"></a>五个W</h2><p>沟通的对象是谁（Who），沟通的时机（When）和沟通的场合（Where）是怎样的，要说点什么（What），以及为什么要说这些（Why）</p><p>提取出核心意思后，“五个w”就变为：对象、时机、场合、内容和目的。</p><ol><li><p>对象<br>（1）对方是谁？搞清楚对方的行业、职位、教育背景、年龄、与自己的现实关系；<br>（2）对方与同行业的人相比有什么独特的地方？<br>（3）他引以为傲和不愿触碰的话题分别是什么？</p></li><li><p>时机、场合（<code>重要</code>）<br>（1）这次谈话会在什么时间开始？工作时间还是休息时间，一场庆祝会之后还是一场追悼会之后？<br>（2）对方此时的情绪可能会是怎样的？<br>（3）谈话是在办公室还是外面？这个地方对双方可能会产生哪些影响？需要提前注意什么？<br>（4）这个场合有第三人参加吗？会对这次谈话带来哪此影响以及是否可控？<br>（5）如果不是见面交谈，对方更愿意接收电子邮件、信息（微信）、电话还是书面报告？</p></li><li><p>内容<br>（1）此次谈话你要阐述的事情是什么？<br>（2）这件事最核心的内容是什么？<br>（3）对方需要知道什么？有多重要？<br>（4）哪些内容可以删去或者放在下次再说？哪些又是绝不能让对方知道的？<br>（5）对方对这件事了解的程度如何？他可能会有什么反应？</p></li><li><p>目的<br>（1）为什么想跟对方说这些，意图何在？<br>（2）希望以此产生什么结果？<br>（3）谈话之后希望对方做些什么？</p></li><li><p>语气和应对方式<br>（1）这件事你会采取什么态度与对方交谈，可以始终控制好情绪吗？<br>（2）你最担心的状况是什么？如果发生了你准备以何种态度应对？<br>（3）如果对方否定或不接受，是否准备了第二套方案？</p></li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> 书本 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>沟通的艺术：看入人里，看出人外</title>
      <link href="/posts/21fd.html"/>
      <url>/posts/21fd.html</url>
      
        <content type="html"><![CDATA[<p><img src="https://raw.githubusercontent.com/pengyirui/blog_img/main/2021-07-05-00.jpg"><br><em>（美国）罗纳德·B·阿德勒、罗纳德·B·阿德勒、拉塞尔·F·普罗科特</em></p><h2 id="人际沟通入门"><a href="#人际沟通入门" class="headerlink" title="人际沟通入门"></a>人际沟通入门</h2><h3 id="为什么要沟通"><a href="#为什么要沟通" class="headerlink" title="为什么要沟通"></a>为什么要沟通</h3><p>每个人也都有自己独处的临界点，超过这个临界点，本来愉快的独处就会变成痛苦的状态。换句话说，我们都需要友谊，我们都需要去沟通。重要的是，对于我们的健康而言，人际沟通是不可或缺的。</p><p><code>认同需求</code>，解释：如果我们和他人沟通的渠道被剥夺了，我们将无从得知我们自己是谁。；<code>社交需求</code>；<code>实际目标</code>。</p><h3 id="沟通的历程"><a href="#沟通的历程" class="headerlink" title="沟通的历程"></a>沟通的历程</h3><p>线性观（收音机、电视等<br>最早出现的是线性沟通模式 ，在此模式中，沟通就像是一方对另一方所做之事：传送者把意见与感觉编码成某种形式的信息，然后借着演讲、写作等渠道，传送给接收者，接收者是指将信息解码的人，显示出了与收音机或电视机类似的运作方式</p><p>交流观（面对面、邮箱等<br>不同的沟通者之间一定会有共通的背景，如果这块重叠的背景越来越小，那么沟通也会变得越来越困难。交流模式认为噪音也可能出自于沟通者的内部，包括生理性嗓音 ，由于生物性因素而干扰信息的接收，比如生病、疲倦、听障等等。沟通者也会触及心理性噪音 ：正确了解信息的能力所造成的内在干扰力量，从这儿引导我们注意到另一个重要的观点：<code>变流式的沟通并不是我“对”别人做了什么，而是我“跟”别人做了什么</code></p><p>例子：父母与孩子之间的互动品质取决于双方共同的行为，孩子对父母的影响力和父母对孩子的影响力一样大</p><h3 id="沟通的原则与迷思"><a href="#沟通的原则与迷思" class="headerlink" title="沟通的原则与迷思"></a>沟通的原则与迷思</h3><ul><li><p>沟通可以是有目的或无目的的行为<br>除了这种无意间泄漏的言谈之外，我们还会在无意地传送出许多非口语信息——你自己可能察觉不到自己讨人厌的行为、不耐烦的举止或感到厌烦时发出的轻微叹息声，但别人却都看见了</p></li><li><p>沟通是不可逆转的<br>某些时候，更多的解释的确可以澄清某人的疑虑，道歉可以减缓某人的创伤；但也有时不论你说的再多，都无法再挽回你在他人心中种下的印象。</p></li><li><p>沟通同时具有内容和关系两个向度<br><code>内容向度</code> 是指明确讨论的信息——“下一个转角左转”、“在网上购买比较便宜”、“你踩到我的脚了”，诸如此类。<br><code>所有的信息都带有关系向度</code> ，用以表达出你对对方的感受：你喜欢或不喜欢对方、位居主道或屈于从属、自在或焦虑等等。例如，即使只是简单地在说“今晚很忙，也许改天吧！”你可能以不同方式传递出各种不同的关系性信息。</p></li><li><p>沟通得越多不见得沟通得越好<br>我们大概都有钻牛角尖的经验，越想越多而让状况更糟，越扯越远而身陷泥淖。</p></li><li><p>成功的沟通并不表示彼此了解<br>例如，我们经常刻意地模糊回应，以淡化对别人的冲击</p></li><li><p>千万不要认为结果都是由单一事件所造成的<br>在很多情境下，有许多因素都会影响他人如何回应你。</p></li></ul><h3 id="人际沟通的本质"><a href="#人际沟通的本质" class="headerlink" title="人际沟通的本质"></a>人际沟通的本质</h3><ul><li>参与者的多寡进行的<br>人际沟通、成对沟通 并不等同 团体沟通、公开沟通或是大众传播。<br>特色：独特性、不可替代性、相互依存性、通常（但不总是）包含着自我揭露、内在的奖赏</li></ul><p>大部分的人们不可能对遇见的每个人都花费时间和气力去建立关系，这也是人际关系之所以有价值的原因</p><h3 id="个人化与非个人化沟通：平衡之道"><a href="#个人化与非个人化沟通：平衡之道" class="headerlink" title="个人化与非个人化沟通：平衡之道"></a>个人化与非个人化沟通：平衡之道</h3><p>更确切地说，在这极端的二元之间，有一段连续性的距离，而我们就在其中某个点上。</p><p>个人化与非个人化要素的转换是会随着时间而改变的。终日谈情说爱的年轻恋人，当他们的关系逐渐增长时，他们的沟通形态也会随之变得仪式化、例行化，他们花在亲密关系的沟通将会减少，而较不亲昵的日常对话则会大增</p><h3 id="三要素"><a href="#三要素" class="headerlink" title="三要素"></a>三要素</h3><p>认知的复杂度<br>假设有个老朋友最近看起来对你有点不满，你觉得原因可能是你做的某件事冒犯到他了，或是因为他最近的生活不是很顺利导致他有点心烦——当然也有可能是你想太多了，其实什么事都没有发生。为了避免类似这样的过度反应甚至是误解的状况一再发生，试着以多元的角度去臆测、思考，将会提高问题解决的机会。</p><p>自我监控<br>观察自己的行为并借此调整行动的过程称之为自我监控。他们能够暂时远离自己，去质问自己“我在搞什么？”</p><h2 id="看入人里"><a href="#看入人里" class="headerlink" title="看入人里"></a>看入人里</h2><h2 id="认同：我只的塑造与展现"><a href="#认同：我只的塑造与展现" class="headerlink" title="认同：我只的塑造与展现"></a>认同：我只的塑造与展现</h2><h3 id="沟通和自我概念"><a href="#沟通和自我概念" class="headerlink" title="沟通和自我概念"></a>沟通和自我概念</h3><p>事实上，日常生活中从别人那里得到的信息在告诉我们该如何看待自己上扮演了最重要的角色。</p><p>每个孩子每天都会被关于自己表现的信息炮轰，这里面有些是正面的：“你好可爱！”“我爱你！”“多么懂事的女孩啊！”也有一些是负面的：“你到底是怎么了！”“你不能做一点有用的事吗？”“你是个坏男孩。”“让我静一下，你快让我疯了！”<br>这些像镜子似的评价，都是我们借以了解自己的途径。而孩子天生具有照单全收的信任本性，他们没有其他方式可以了解自己，只能接受身边无所不知、充满权威的成人们的正向和负向的表面评价。</p><ul><li><p>我们借着和别人比较来决定我们是优于别人还是劣于别人<br>但当你仔细想想就会发现，这些事实并不说明你没有价值，而是你——以及其他这样做的人用不合理的标准和对照成员来评断自己。</p></li><li><p>自我概念是主观的<br>将追求完美当作理想并没有错，我们只是要提醒一下要达到完美境界并不是什么容易的事情。期待自己非要完美不可，只会给你传达既错谬又没必要的自我贬低信息。<br>慢慢地，我们会开始相信那些我们不断重复叙述的习性。那些轻蔑的自我评价被视为是谦虚的，而且变成了我们自我概念的一部分；而那些优点和成就将不会被提到，尔后便被遗忘。到最后，我们对自己的看法将会比真实的自己还要糟。</p></li><li><p>性征和性别<br>从生命开始的前几个月，我们身为男性或女性，便塑造了别人和我们沟通的方式，同时决定了我们的自我感觉，孩子通常不能选择塑造他们个性的环境，但是成人可以。</p></li><li><p>自我应验预言和沟通 （想象好的可以变得更好，坏的也可以变得更坏<br>是指若个体对事件会发生有所预期，会比没有预期更可能成真。虽然你并没有故意对事情给予特定的标签，但是自我应验预言总是一再发生。自我应验的寓言包含四个步骤：<br>1．持有某种期待（对自己或别人）。<br>2．表现出与期望一致的行为。<br>3．期待如实发生。<br>4．强化起初的期待。</p></li></ul><h3 id="沟通作为认同管理"><a href="#沟通作为认同管理" class="headerlink" title="沟通作为认同管理"></a>沟通作为认同管理</h3><ul><li><p>公开自我和隐私自我<br><code>觉知的自我</code>是自我概念的反映，你意识到的自我是在你真诚反省时所相信的自己。我们认为这种自我是“隐私的”，因为你不可能把它对另一个人全部展现出来。<br>在大多数例子中，我们尝试创造的展现的自我，是一个已经被社会承认的形象：勤勉的学生、可爱的同事、尽责的员工、忠诚的朋友等等。社会规范常常在觉知的自我和展现的自我之间创造出一条鸿沟</p></li><li><p>我们致力于建构多元认同<br>例如，讲话的风格或甚至语言的本身，都可以看出一个人是如何建构他的个人认同。<br>随着你的成长，你和你父母的互动必然也会对你自己的特性加以改变。有时你的行动脉络像一个负责任的成人（关于这辆车你可以信我），但在另一个情况下你可能像一个无助的小孩（我找不到我的袜子）。</p></li><li><p>认同管理是合作的<br>实际上所有的对话都提供了一种竞技场，在回应别人行为时，沟通者就在建构他们的自我。就像你在第一章读到的那样，沟通并不是分离的，不能分隔成单独的一件件事件。事实上，某一刻所发生的事，是由两人长期关系累积的各种经验而导致的。</p></li><li><p>认同管理可以深谋远虑或者不知不觉<br>沟通者只有在面对面坐着，也就是说他们的表情可以被其他人看到的时候，才会进行表情的模仿（例如：微笑或回应其他人信息的表情）<br>我们大部分的行为带有传送信息给别人的目的，换句话说，就是在做认同管理。<br>许多我们每天例行的活动并不是经过高度策略性的思考决定的，反而是依赖我们以前的经验而发展出来的“脚本”<br>你会发现自己在这些熟悉的情境中可能常常会“掉进”角色之中。只有当这些角色不适合的时候，你才会慎重地考量你需要进行的反应。</p></li></ul><h3 id="为什么要管理认同？"><a href="#为什么要管理认同？" class="headerlink" title="为什么要管理认同？"></a>为什么要管理认同？</h3><p>开始经营关系<br>当你想要进一步了解某人时，你会刻意小心翼翼地去与TA攀谈</p><p>获得别人的顺从<br>你或许也会和蔼可亲地和你不特别有好感的邻居聊天，以便发生问题时可以彼此互惠互助。</p><p>保住别人的颜面<br>当健壮的人遇到肢体残障的人时，通常会借着若无其事的举止或强调彼此之间的相似处来伪装他们的不舒服</p><p>管理他们的认同：举止、外貌和配备</p><h3 id="摘要"><a href="#摘要" class="headerlink" title="摘要"></a>摘要</h3><p>自我概念是个人关于自我知觉方面比较稳定的部分，有些自我特性来自性格的遗传。自我概念是由重要他人所传送的信息而创造出来的，也经由与参照团体的社会比较而得出。自我概念是主观而且多元的，得知别人怎么看我是其中的重要渠道。自我会随着时间逐步形成，但是自我概念很难改变。文化、性别也对自我概念具有影响力。<br>当一个人对一件事的预期影响了结果时，便会产生自我应验预言。预言可能由别人的期待组成，也可能是由自己强加的。自我应验预言可以是正面的，也可以是负面的。认同管理是人们设计出来的策略性沟通，用来影响别人对自己的观感。有一些沟通者是高度自我监控的，也就是说他们对自己的行为有高度的知觉；而有些人比较不会察觉到他们自己的言语行为是如何影响别人的。<br>认同管理的产生有两种原因。许多时候它源自社交规范和习俗，有些时候它的目的是达到多样化的沟通内容和目标。沟通者借着管理他们的举止、外貌和配备来创造一种认同，以便进行和别人互动的定位。在面对面或通过媒介沟通时，都会产生认同管理。因为每个人都有很多个他或她可以展现的面貌，选择其中某一个面貌示人并不代表这个人不诚实。</p><h2 id="知觉：看到什么就是什么"><a href="#知觉：看到什么就是什么" class="headerlink" title="知觉：看到什么就是什么"></a>知觉：看到什么就是什么</h2><p>这一类经验提醒我们：在我们有限的感官经验外，有太多事情正在进行着，以至于我们所谓的现实其实只是真实世界的一小部分。</p><p>我们都曾经忽略过朋友身上不寻常的地方，也许是别人的新发型，也许是别人话中透露出的难过的信息——而这信息并没有夸张到能引起我们的注意。</p><h3 id="组织知觉的过程"><a href="#组织知觉的过程" class="headerlink" title="组织知觉的过程"></a>组织知觉的过程</h3><p>组织我们的知觉的过程四个步骤是选择、组织、诠释和协商。</p><h4 id="选择"><a href="#选择" class="headerlink" title="选择"></a>选择</h4><p>刺激的强度 常左右我们的注意力<br>为何在其他条件相同的情况下，我们容易记住特别高或特别矮小的人，在宴会里大声喧哗的人也总是比轻声细语的来宾吸引较多的目光，虽然不见得讨人喜欢。<br>重复的刺激、我们常接触的人，也容易引起我们的注意。</p><p><code>动机</code>也决定我们从环境中挑选什么信息<br>如果你正饥肠辘辘，你会注意路上任何一家餐馆、市场及食品广告牌。</p><p>选择不仅在于注意某些刺激，也包括了忽视其他的线索。举例来说，当你认为某甲是个了不起的人时，你可能会忽略他或她的缺点</p><h4 id="组织"><a href="#组织" class="headerlink" title="组织"></a>组织</h4><p>从环境中选择信息后，我们必须用有意义的方式组织这些信息。<br>举例来说：如果你将某个教授归类为友善的，你会用某种相对应的方式向该教授请教；而如果你将该教授归类为吝啬小气，你应对他的方式可能就迥然不同.</p><p>刻板印象 　在我们选好一种分类的组织基模后，我们便使用那套基模来归纳和预测<br>举例来说，如果你特别有性别意识，你会对男女行为的差异和不同的被对待方式特别留意；刻板印象大多虽然基于事实的核心，但却超出了眼前的实情，而成为缺乏事实基础的陈述。<br>如果我们陷入这种刻板印象，我们便会寻找单一事件或行为，来支持我们这些不正确的信念.<br>刻板印象有时也不是出于坏心眼，而是源自好意或只是常识不足。</p><h4 id="诠释"><a href="#诠释" class="headerlink" title="诠释"></a>诠释</h4><p>在我们选择和组织我们的知觉后，我们以某种方式对其加以诠释，使之具有特定的意义</p><p>以下有几种因素能够影响我们诠释的方式：<br>交情深浅<br>过去的经验<br>对人类行为的假设<br>态度<br>期望<br>资讯<br>自我概念<br>关系的满意度</p><p>虽然我们依序讨论了选择、组织和诠释，但这三个不同的阶段可能以不同的顺序发生。举例来说，家长和保姆过去的诠释（杰克只会捣蛋）会影响到未来的选择（他的行为变得值得特别注意），以及事件的组织（小朋友的打架事件总是被认定为杰克引起的）。在所有的沟通中，知觉总是一个持续进行的过程，你很难确定它的起点和终点。</p><h4 id="协商"><a href="#协商" class="headerlink" title="协商"></a>协商</h4><p>了解协商运作过程的一种方法，是将人际沟通视为故事的交换，<code>学者将我们描述个人世界的故事称为叙事</code></p><p>当我们的叙事与别人的叙事产生龃龉时，我们可能坚持自己的观点而拒绝接受别人的看法（通常别人的看法对自己比较不利），或者也可能可以试着协商出具有共同基础的叙事。共享的叙事是创造出顺畅的沟通的最佳机会。例如，始终共同与阻碍他们交往的人斗争并最终成功的恋人会比没有这种共同斗争故事的恋人更快乐；同样的，对于两人交往中的重要转折点有共识的情侣，比那些对在交往过程中哪件事最重要看法不同的恋人更加满意彼此的关系</p><p>共享的叙事不必完全是清晰真切的叙事</p><h3 id="影响知觉的因素"><a href="#影响知觉的因素" class="headerlink" title="影响知觉的因素"></a>影响知觉的因素</h3><p>他们以更慈悲的方式解读对方的行为，当事情不如意时他们仍相信对方的初衷是善意的。他们似乎愿意原谅或甚至淡忘对方的罪过。</p><p>有以下因素<br>生理因素<br>感官：“你为什么不超车？那台卡车前面至少有一公里都没有车子。”“我不觉得有那么长，而且我不想害死大家！”<br>年龄 　<br>健康：因此，当你不舒服的时候，要让别人知道，这样他们才能对你的异常表现有所理解<br>疲劳<br>饥饿：我们在饥饿时会脾气暴躁，吃太饱则会昏昏欲睡，这都会影响到人际沟通<br>生理循环<br>心理挑战：所以要记住，如果有人的观感与反应和我们不一样，可能是超过我们理解范围的某些因素所造成的。<br>文化差异<br>社会角色<br>性别角色：靠着观察，孩童们接触大众传播媒体，接受大人的回馈，以学习符合性别角色行为 ，从社会中的成员到习俗中的性别角色，我们习惯将违反这些角色的行为视为不寻常甚至不符合社会期待。<br>职业角色<br>自我概念：最后一个影响我们如何看待自己、如何与人互动的因素便是自我概念。大多数的研究显示：高自尊的人比较有可能对别人有较高的评价，低自尊的人可能对别人有较低的评价</p><h3 id="知觉的倾向"><a href="#知觉的倾向" class="headerlink" title="知觉的倾向"></a>知觉的倾向</h3><p>但我们常常使用两套不同的标准<code>对人严厉，对己仁慈</code></p><p>我们评价自己时往往比评价别人更为宽容，会试图说服自己和别人“我的本意是善良的”。我们倾向用最宽容的条件裁断自己。社会心理学家将这种倾向称为自利的偏误。当别人遭遇不幸时，我们常将问题归咎于对方个人的因素，而自己遭遇不幸时，我们就将问题归咎于外在因素<br>“自我评价”比“别人评断我”更慈悲的自我中心倾向也已经被实验证明</p><p>强调别人的缺点：人们知道一个人正、负两方面的特征时，人们倾向于受到较不讨喜的那些特性所影响。</p><p>最明显的最有力<br>我们容易被显而易见的事件所影响：问题在于最明显的因素不一定是事件中唯一的或最重要的因素<br>先入为主：留恋于第一印象，根据自己的第一印象进而给人贴标签是知觉过程中无可避免的一部分，这些标签是产生诠释的方式之一<br>如果这样的第一印象是准确的，那这些印象对在以后考虑如何回应对方时是个有用的信息；然而若这些印象是不准确的，问题就来了。在我们形成对别人的评价后，我们倾向于紧紧抓住不放，甚至调整矛盾的信息以符合原先的评价。<br>心理学家提出光环效应 来说明对于具有某个正面特质的人，我们是如何将所有的正面印象都加诸到他身上的。尤其是由于第一印象往往来自生理上的外貌吸引力，我们很容易将正面特质归属到“长得好看”的人身上<br>形成第一印象几乎是不可避免的，因此我们能提供的最好的忠告便是：<code>保持开放的心胸，当发生的事证明你错怪对方时，要愿意改变当初的判断。</code></p><p>以己之心，度人之腹<br>这样的例子告诉我们，别人并非总是按照我们的方式思考和感觉的，因此假定彼此类似可能导致问题。你如何能找出别人真正的立场？有时候要靠直接询问对方，有时候靠着和其他人核对，而有时则需要在深思熟虑后做一个成熟的猜测，这些替代性的方式都比单纯的假定“每个人都像你一样反应”来得更好</p><h3 id="知觉检核"><a href="#知觉检核" class="headerlink" title="知觉检核"></a>知觉检核</h3><p>“你为什么对我生气？”（谁说我生你的气了？）<br>“你出了什么问题？”（谁说我有问题？）<br>“快点！告诉我实话！”（谁说我在说谎？）</p><p>即便你的诠释是正确的，然而义正词严、一针见血的评论很可能让对方产生防卫。<br>知觉检核 的技巧为你提供了处理这些诠释的更好方法</p><p>知觉检核的要素<br>知觉检核完整的程序包含三个部分：<br>▶ 描述你注意到的行为。<br>▶ 列出关于此行为至少两种可能的诠释。<br>▶ 请求对方对行为诠释作澄清。</p><p>例子：<br>“当你大声踱步走出房间，并大力地关上房门时，” （行为）<br>“我不确定你是否对我生气，” （第一种诠释）“或者你只是比较匆忙。”（第二种诠释）<br>“你真正的感觉是怎样？”（请求澄清）“你这几天都没有笑容，”（行为）</p><p>知觉检核是帮助你正确了解别人的一项工具。因为它的目的是相互了解，所以这个迈向沟通的检核需要彼此</p><p>非口语的一致性<br>控诉的语调或是有敌意的姿态会和要求澄清的真诚言语矛盾，因为你的非口语信息暗示了你对别人的态度，早已经为此下了断语。</p><h3 id="同理心与沟通"><a href="#同理心与沟通" class="headerlink" title="同理心与沟通"></a>同理心与沟通</h3><p>我们很容易将同理心与同情心 混为一谈，观念上这两者在两个方向是不同的。<br>第一，同情心表示你用自己的观点来看别人的困境而产生的悲悯之心，而同理心是指你设身处地地思考对方的处境而产生的感同身受。<br>第二，只有在我们明确知道别人痛苦的原因后，我们才会产生同情，但没有同情也可能同理，不必太多同情你仍然可以同理</p><p><code>枕头法</code>：建立同理心的工具<br><code>立场一：我对你错</code> 　当我们在看一个议题时，这是我们通常会采用的观点。我们立即从我们的立场，看到我们的对以及别人的错，而对方恰好和我们的立场相反，这一个立场毋庸赘述。</p><p><code>立场二：你对我错</code> 　这是你转换视角，尝试用最强而有力的相反论点，来解释对方如何以不同的观点看此议题。除了认出对方立场的长处外，这也是唱反调的人挑毛病的方法之一。<br>找自己的缺点，并试着支持对方的立场，需要训练和相当程度的勇气——虽然现在这只是练习，如果你选择回到立场一，你可以立即撤退。根据大部分人的经验，转换视角让我们看出别人观点中的优点。立场二的目的是找到方法，以理解其他人为什么用你原先无法苟同的方式行事。</p><p><code>立场三：双方都对，双方都错</code> 　从这个立场，你承认了彼此的长处和弱点。如果你在立场二里表现得不错，很清楚的，双方都有优点也有缺点，用更公平的方式看待此事能让你比较不会吹毛求疵，也比较能了解对方的观点。立场三也可以帮助你找到双方共同的立足点，能够让你看出：这个议题并非像起初所见，是一个全对、全错的事件。</p><p><code>立场四：这个议题不重要</code> 　这个观点将帮助你了解到，这个议题并非如同你想象的重要。虽然起初很难</p><p><code>立场五：所有的观点皆有真理</code>    将某些议题看做无关痛痒，但是大部分的事情思考一下后，就会发现它不像我们所原先认为的那么重要了。当你了解你不会让这个议题盖过两人关系中其他重要的部分时，这个议题的重要性也会淡化。我们很容易为了争辩一个议题而越陷越深，以致忘了在其他方面两人的观念是非常接近的。</p><p>在你从五个立场看过这个议题后，你也许已经发现了新的思考模式，这些思考方式也许未必能够改变你的想法，甚至不能解决手边的问题，但它们可以<code>增加你别人立场的容忍度</code>，并因此改善沟通的气氛。</p><ul><li>沟通文本<br>  枕头法实例：筹划一场婚礼<br>  背景：谁会想到筹划一场婚礼会是一场梦魇？我的未婚夫和我挣扎于是把婚礼办成一场盛大的宴会还是小型而温馨的聚会。我喜欢盛大豪华的派对，他却要一个较小规模、负担得起的婚宴。<br>  立场一：我对你错我有一个大家庭，如果没有邀请每个人，我会有愧疚感。同时，我有很多朋友，如果他们在我特别的日子里缺席，我会觉得很遗憾。如果要发出邀请，我们必须邀请所有人才不至于伤害别人的心，否则邀请的标准在哪？只要能用钱解决的都是小事，我认为一生只结一次婚，并且我也没有时间去细算。我的父母很愿意分担一些费用，因为他们希望我的整个家族都能出席婚礼。<br>  立场二：你对我错我的未婚夫是对的，他说我们真的没有钱去支付一场特别又昂贵的婚礼。多挥霍一分钱在婚礼上，我们就少一分钱买房子，而买房子正是我们希望很快能实现的事。我的未婚夫是对的他说一场盛大的婚礼会让我的房子的事延后一到两年，而如果房价开始上涨我们甚至要等更久。他说得对，不管我们邀请多少人，总会有人被遗漏，这只是取决于标准的问题。他说得没错，一场盛大婚礼的筹划过程会带来很大压力。<br>  立场三：双方都对，双方都错<br>  我们两人都对，我们两人都有错。我想邀请整个家族和朋友到这欢乐的婚礼现场是对的，我认为特别的婚礼将是一辈子的回忆也是对的。他说得也对，他说这么做会留下不好的感觉，他说这么做会延后我们买房子的计划。他的一些观点很不错，计划一场盛大的庆典的确会把我们搞疯，并本末倒置了生活中重要的事情。<br>  立场四：这个议题不重要<br>  在想过这一切以后，我已经了解准备婚礼和婚姻生活是两码事儿。婚礼的形式很重要，但它毕竟并不能影响我们婚姻生活的形式，婚后我俩如何生活才重要。将来我们要一同面对许多决定，例如孩子和工作——这些事情的结果比婚礼重要得多。<br>  结论：<br>  在使用枕头法思考过这个议题的所有面向之前，我专注于我的方式，那样的态度使我们两人之间产生一些在此关头不该有的负面感觉。我知道如果其中一方赢了，结果仍旧会伤了感情，这并不算是胜利。我不知道我们最后会决定什么形式的婚礼，但我已经决定将我的焦点放在真正重要的目标上，就是维持互敬互爱的正向关系。</li></ul><h3 id="摘要-1"><a href="#摘要-1" class="headerlink" title="摘要"></a>摘要</h3><p>发生在世界上的许多事情超过人所能理解的范围，我们靠着四步骤的过程将环境的信息赋予意义：从环境中选择某些刺激，将它们组织成有意义的形式，参考过去经验、对人类行为的假设、期望、知识、个人心情来形成我们的诠释，并借由我们与别人分享的叙事来跟别人协商这些资讯。<br>有很多因素会影响我们如何选择、组织、诠释和协商信息。生理因素，例如五官的性能、年龄、健康都扮演了重要角色；文化背景、社会角色、自我概念也会影响我们看世界的方式。要验证我们对别人行为的诠释是否正确，知觉检核是一项很有用的工具。同理心是经验别人观点的一种能力，同理心与同情心不同，同理心比较能接近别人的经验，也不需要赞同或可怜对方。枕头法是增强同理心的方法之一，它包含以五种观点看同一项议题。</p><h2 id="情绪：适时适地传达感觉"><a href="#情绪：适时适地传达感觉" class="headerlink" title="情绪：适时适地传达感觉"></a>情绪：适时适地传达感觉</h2><h3 id="什么是情绪？"><a href="#什么是情绪？" class="headerlink" title="什么是情绪？"></a>什么是情绪？</h3><p>社会科学家通常认同我们所谓的感觉有几个构成要素。<br>生理的因素<br>口语的表达<br>非口语反应：一个垂头弯腰的姿势和一声叹息，也许是一个悲伤的征兆，但也可能是一个疲惫的表现；同样地，颤抖的双手可能是兴奋也可能是害怕。非口语行为通常是模棱两可的</p><p>认知的解释：认知在决定情绪状态上扮演一个重要的角色。<br>你读到某些害怕的生理元素是心跳加快、冒汗、肌肉紧绷和血压升高，有趣的是，这些症状与兴奋所伴随而来的生理变化相似。换句话说，假如我们去测量一个正具有强烈情绪的人的生理状况，我们也许分不清他是因害怕而颤抖还是因兴奋而颤抖。</p><p>例子：我注意到当我在演讲时我会冒汗，因此我推论我是焦虑的。假如它时常发生，我甚至可能会自己贴标签为一个“焦虑的人”。一旦我有了这个标签，下一个我必须回答地问题是“为什么我是焦虑的？”然后，我开始去找寻一个适当的解释。我也许会注意到有一些学生起身离开或者心不在焉，我会为这是否因为我的演讲不够精彩而焦虑，而这的确令我焦虑。我如何知道这场演讲不精彩呢？因为我让我的听众觉得索然无味，我会焦虑是因为虽然我想成为一个演讲高手，但实际上我是一个乏味的演说者。我觉得我不适合演讲，我干脆去速食店工作还快活一点。不久之后有学生跟我说：这里太热了，我一直在流汗而无法专心听你的演讲。剎那间，我不再是“焦虑的”或“令人乏味的”了。</p><h3 id="影响情绪表达的因素"><a href="#影响情绪表达的因素" class="headerlink" title="影响情绪表达的因素"></a>影响情绪表达的因素</h3><p>大多数的人都很少表达情绪，至少很少在口头上表达。人们普遍能够自在地陈述事实，往往乐于表达他们的意见，但是难得透露他们感觉</p><p>文化：影响情绪表达的最主要因素之一，是文化属于个人主义还是集体主义。集体主义文化的成员（例如日本和印度）重视他们“团体内”成员的和谐，而且，不允许有可能扰乱团体成员关系的任何负向情绪的表达。相反地，高度个人主义文化的成员（像美国和加拿大）可以很舒服地向他们身旁亲密的人透露自己的情绪个人主义者和集体主义者处理团体外成员的情绪表达也有所不同，对于外人，集体主义者反而会相当坦白他们的负向情绪，个人主义者会隐藏负面情绪（如：厌恶）这很容易看出，在表现的习惯上，会导致多么不同的沟通问题。例如，个人主义的北美人可能认为集体主义的亚洲人不够坦率，而亚洲人容易认为北美人是过度情感流露。</p><p>性别：男性不善于表达，而女性则较善于表达。比如，女人比男人更可能使用情绪（比如这个符号“：-）”）<br>第二个因素是沟通对象的性别<br>第三个影响因素是我们对于沟通对象的情绪敏感度，<br>最后一个因素是在两人中的权力差异，权力较小的人会（或许是必须）学习觉察权力较大的人的信号。异性配对组的实验显示，“女人的直觉”应重新命名为“从属直觉”。<br>都显示出了控制力较少的人更善于解读领导者的非语言信号。似乎权力结构更是支配情绪敏感度的因素。</p><p>社会习俗<br>社会规范甚至禁止太多正向的情绪表达。虽然一个小男生可以和父亲牵手，甚至对母亲拥抱或亲吻都没问题，但随着我们日渐长大，对朋友的情感表露越来越少，以至于即使是单纯的表达，像是“我爱你”，在成人之间也很少耳闻。这只是因为我们对他人不用口语表达我们的感觉，并不代表我们完全不和他人沟通。<br>情绪表达受到许多社会规范的要求所影响，销售人员必须要对顾客展现笑容，不论顾客多么令人反感；老师和经理必须理性行事并且情绪控制得宜；而学生如果提出得体的问题会得到肯定，否则就会被道德劝说或要求礼貌</p><p>自我袒露的不安<br>此外，鼓起勇气分享类似这些情绪的人，仍然冒着面临不愉快结果的风险。有些人也许会将情感的表达误解为浪漫的邀约，而不确定的坦白可能会被解读为软弱的征兆。另一个风险是，坦承情绪或许会使别人有不舒服的感觉。</p><p>情绪感染力<br>这个过程使情绪从一个人身上传递到另一个人身上。</p><h3 id="情绪表达的原则"><a href="#情绪表达的原则" class="headerlink" title="情绪表达的原则"></a>情绪表达的原则</h3><p>辨认感觉<br>辨识感觉、说话和行动之间的不同你感觉到某一个状况，并不意味着你总是要把它说出来，而且，说到一种感觉也不意味着你必须对它有所行动</p><p>以口语阐明情绪<br>许多沟通者认为他们当时正在表达情绪，但实际上他们的陈述只是对情绪的一种伪装。<br>例如，常常能到有人很有情绪地说“我觉得该去看这场秀”或者“我感到我们见面太频繁了”，但事实上，这些描述都没有任何情绪的内容。在第一个句子里，“觉得”这个词真正代表的含义是“我想去看场秀”，而第二句的“感到”代表着“我认为我们见面太频繁了”。如果加上真正的感觉字眼，你就会发现原本的说法缺乏对情绪的表达——“我很无聊，所以我想去看这场秀”“我认为我们见面太频繁了，这让我有种局限感”——无聊和局限感才是表达情绪的词汇有时候沟通者错误地低估他们感觉的强度，<br>例如：“我有一点点不愉快”或“我颇为兴奋”或“我有一点点困惑”，当然，不是所有的感觉都是强烈的，我们感受到的悲伤与快乐确实程度不同，不过有些人会习惯性地淡化自己的感受。你有没有这种情况？</p><ul><li>表达情绪的词语<br>  害怕的<br>  焦急的惊讶的<br>  矛盾的生气的<br>  不悦的担心的<br>  没感情的羞愧的<br>  羞赧的手足无措的<br>  暴躁的恶意的<br>  无聊的勇敢的<br>  镇定的唱反调的<br>  无忧无虑的兴高采烈的<br>  骄傲的冷静的<br>  自在的在乎的<br>  自信的困惑的<br>  满意的疯狂的<br>  挫败的防卫的<br>  乐意的忧郁的<br>  超然的心力交瘁的<br>  失望的反感的<br>  心烦意乱的着迷的<br>  急躁的得意的<br>  尴尬的木然的<br>  热情的眼红的<br>  兴奋的精疲力竭的<br>  可怕的忍无可忍的<br>  不安的恭维的<br>  愚蠢的孤独的<br>  自由的友善的<br>  泄气的勃然大怒的<br>  高兴的闷闷不乐的<br>  愉快的快乐的<br>  烦扰的无助的<br>  快活的有希望的<br>  毛骨悚然的敌意的<br>  蒙羞的匆忙的<br>  受伤的歇斯底里的<br>  不耐烦的印象深刻的<br>  羞怯的无安全感的<br>  感兴趣的受胁迫的<br>  易怒的忌妒的<br>  喜悦的怠惰的<br>  寂寞的深情的<br>  冷淡的狂热的<br>  不好意思的难受的<br>  混淆不清的窘迫的<br>  忽视的焦虑的<br>  麻木的乐观的<br>  偏执的热情的<br>  平静的悲观的<br>  开玩笑的喜欢的<br>  占有欲的有压力的<br>  保护的困惑的<br>  神清气爽的遗憾的<br>  宽心的怨恨的<br>  烦躁的可笑的<br>  浪漫的悲伤的<br>  感性的性感的<br>  发抖的震惊的</li></ul><p>假如你决定要表达你的感觉，你必须很清楚地确认你和你的伙伴都了解你的感觉是放在一个特定的情境之下，而不是直接针对整个关系。说“当你不守信用时，我会怨恨你”而不要说“我怨恨你”；“当你讲到你的钱时，我觉得很无聊”而不是“我和你在一起很无聊”</p><p>分享多样的感觉<br>许多时候，你所表达的感觉不是你唯一感受到的。举例而言，你可能常表达你的生气而忽略了在生气之前的困惑、失望、挫折、悲伤或尴尬<br>我们经常只达其中一种情绪，而且是最负面的那种情绪想想看如果你在各种情境中总是表达出全盘的情绪，对方的反应将会如何的不同。</p><p>评估何时与何处表达感觉<br>通常，一阵强烈情绪涌上的瞬间并不是说出口的最佳时机<br>在某些情况下，你也可能选择永远不要表达情绪。当老师问你“你觉得我的课如何”时，即使你非常想跟你的老师说他的课非常无聊、让你昏昏欲睡，最好的回答仍然可能是无关痛痒的“还好啦！”即使你被一个抓你超速的傲慢警察所激怒，最明智之道还是忍耐着不流露出愤怒。如果你感觉到强烈的情绪经验但是又不便口头表述出来（有难言之隐），写出你的感受与想法，确实是有利于心理、生理和情绪调适。</p><p>关照沟通渠道<br>现今的沟通者比起几十年前有更多的沟通渠道可供选择。用语音信箱留书表示要结束一段关系是合适的渠道吗？什么时候用即时通讯送出“不爽”的信息会被接受？如果你为某个新鲜事觉得兴奋不已，是直接面告亲友还是发表在博客上？</p><h3 id="管理困扰的情绪"><a href="#管理困扰的情绪" class="headerlink" title="管理困扰的情绪"></a>管理困扰的情绪</h3><p>在一般沟通渠道时的文明用语要求，到了电子网络上都可以解放——大多数时候是对陌生人，有时候甚至是对个人网络的对象。在你说出可能会后悔的话之前，最好记住第一章所列出的原则：沟通不可逆，有如覆水难收，一旦你按下“送出”键，你不可能撤回爆发出去的情绪。</p><p>管理困扰的情绪<br>虽然感知和表达情绪会增加人与人之间关系的品质，但是，并不是所有的感觉都是有益的，盛怒、沮丧、惊恐和忌妒对于让你感觉比较好受或增进你的人际关系都毫无帮助。<br>有助益与无助益的情绪。有助益的情绪 有助于效率，无助益的情绪 降低有效运作情况。<br>这两种类型间的差异是它们的强度<br>第二个区别无助益情绪和有助益情绪的地方是它们时间的持续性</p><p>无助益情绪的来源<br>对大多数的人而言，感觉似乎是自成一格。你希望当你接近陌生人时能够泰然自若，可是你的声音仍然颤抖不停；当你要求加薪时，你试着展现自信，但是你的眼睛却焦虑地眨个不停。这种情绪是怎么发生的</p><p>情绪记忆<br>有些威胁的来源是来自神经科学家说的情绪记忆，我们经常看见只要这个事件与过去困扰经验有一点点相似之处，即使是寻常事件也会引发无助益情绪，以下例子可以说明这个观点：<br>▶ 约翰自从在小学转学被嘲笑之后，只要在不熟悉的情境都感到不自在。<br>▶ 玛丽安觉得很了解带着深沉磁性声音的男人，因为当她还是个孩子时，她被带有这种男低音的家人虐待。<br>▶ 罗伯特只要遇到使用某种香水的女人就觉得不安，因为他之前被使用这种香水的女人甩了。</p><p>自我内言<br>知心理学家认为不是与陌生人相见或是被情人抛弃的事情使人感觉不好，而是他们对那些事情所抱持的信念。<br>例子：<br>引用一个故事使这个论点更清晰。想象你自己经过一个朋友家，看到你的朋友吧。<br>探出窗口，并对你骂了一连串难听的绰号（你自行想象一个朋友和绰号），在这个情境之下，你可能感到受伤和心烦。现在，换成想象你正经过一间精神疗养院，相同的是这位朋友在那里，显然他是一个病人，对你大骂同样难听的绰号。在这个情况下，你的感觉可能会相当不同，很有可能转变成悲伤和怜悯。在这个被叫绰号的故事情节中，你可以看到，面对同样的情况，情绪的结果却非常不同。你有不同感觉的理由，来自你在每一个情况中的想法。在第一个情况中，你的想法可能是：你的朋友对你很生气；或者，你可能猜测你一定做了什么严重的事，而受到如此的对待。在第二个情况中，你的想法可能是：你的朋友有某些精神问题，很可能你会感到同情</p><table><thead><tr><th>事件</th><th>思考</th><th>感觉</th></tr></thead><tbody><tr><td>被叫绰号</td><td>“我做错某件事?”</td><td>感到受伤，心烦被叫绰号</td></tr><tr><td>被叫绰号</td><td>“我的朋友一定生病了。”</td><td>关心，同情</td></tr></tbody></table><p>人对一件事情所作的诠释，决定了他们的感觉<br>在爱情关系里，想法会形塑满足感。“我爱你”这句话可以有多种解释，这句话会把表面价值转变成一种深情的真诚表达。</p><table><thead><tr><th>事件</th><th>思考</th><th>感觉</th></tr></thead><tbody><tr><td>听到“我爱你”</td><td>感到“这是一句真诚的话。”</td><td>高兴</td></tr></tbody></table><p>相同的话在激情中，可能被解读为虽然真心却在错误时机的宣告，一种有意让接受者感觉更好的企图，或是试图操控，例如：<br>听到“我爱你”感到“她／他这样说是要操控我。”生气</p><p>一种非常愚蠢而有害的无助益自我内言叫做反刍，即不断地坚持负面想法，反复强化这种负面思考的强度。</p><p>非理性思考和无助益的情绪<br>别误会：抛弃赞同的谬误，并不是指要过着以自我为中心的生活。考虑到他人的需求仍然是重要的，但是当你为了追求这些目标而抛弃自己的需求和原则时，这个代价就太高了</p><p>像这样变得迷恋于“应该”，会有三个恼人的后果。<br>第一，它导致不必要的痛苦，因为不断渴望理想的人，很少满足于他们现在已经拥有的或欣赏他们现在的样子。<br>第二，只是抱怨没有行动，会让你不想做任何事来改变不满意的状态。<br>第三，所谓的抱怨会使得痛恨喋喋不休的人建构一种防卫的氛围。告诉人家你喜欢什么，会比说教更有效用。尝试一下把“你应该准时”变成“我希望你能更守时”吧</p><p>减少无助益的情绪<br>监控你的情绪反应：第一个步骤是当你处于无助益的情绪时，要会辨认<br>辨认情绪的方法是通过生理感受刺激：紧张、心跳加速、生理潮热等等，虽然这些也可能是食物中毒的症状，但是它们多半回事源于一种强烈的情绪。<br>注意引发的事件：在你知道你的感觉如何之后，下一个步骤是要想出是什么事件发展引起你的反应，有时候它是明显的。时候事件发展不是单一的，而是一连串小事情持续累积到一个临界点，因此而引发无助益的情绪。</p><p>沟通文本<br>行动的理性思考：应付令人讨厌的顾客<br>以下的范例是说明前文所描述的理性思考方式如何应用于每天的挑战之中。要注意理性的思考不能消除无助益情绪，而是有助于它们受到控制，更有可能进行有效的沟通。<br>引发的事件<br>我在一个挤满观光客和当地居民的大塑购物中心工作，我们公司的信誉基于服务。但是，不久前我已经对我的顾客失去耐性。这间店从开始营业到营业时间结束都很忙，许多顾客是无理、坚持己见和苛求的，其他人期待我成为一个导览者、餐馆评论者、医疗顾问甚至是小孩的临时保姆，我觉得我好像随时要爆炸了。</p><p>信念和自我内言</p><ol><li>我已经厌烦与群众有关的工作，人真的令人讨厌。</li><li>顾客应该是更有耐心和礼貌的，而非像对待仆人般地对待我。</li><li>这个工作逼得我快发狂！如果我继续待在这里工作，我将会变得和顾客一样无理。</li><li>我不能辞职：我应该找不到另一个待遇相当的工作。</li></ol><p>驳斥非理性信念</p><ol><li>它过度推论地说所有的人都是令人讨厌的。实际上，大多数的顾客是好的，有的甚至是很好，约有10%的顾客会制造大部分的纷争。辨识到大部分的人是好的，让我不觉得那么痛苦。</li><li>惹人讨厌的顾客应该更有礼貌是事实，但是期待每一个人必须这样做是不切实际的。毕竟，这不是一个完美的世界。</li><li>就顾客逼得我快发狂来说，我想是我没有控制好这个场面。我是一个成人，而且我可以控制住我自己，我可能不喜欢某些人的行事作风，但如何回应他们是我的选择。</li></ol><p>记录你的自我内言：分析联结在事件发展和你的感觉之间的思考时，这是一个<br>驳斥你的非理性信念：驳斥你的非理性信念是在理情治疗法里的成功之钥。运用在前文所条列出来的非理性谬误，找出你基于错误思考的内在陈述。</p><h3 id="摘要-2"><a href="#摘要-2" class="headerlink" title="摘要"></a>摘要</h3><p>情绪有数种面向。它们借由内在的生理改变发出信号，借由非语言反应表露出来，并且借由认知的解释定义多数的情况。有些情绪是基本的，反之，其他是两种或更多种情绪的组合。有些是强烈的，而相较之下，其他是温和的。<br>有些人的性格使他们较少表达情绪，文化和性别也会影响我们想要或不愿意做情绪分享，社会规范阻止某些感觉的表达，特别是负向的感觉。许多社会规范不允许某种感觉的表达。对袒露情绪后果的害怕会导致人们隐瞒一些情绪的表达。对成人而言，有时将情绪全部表达出来是不适当的，所以有几种指导方针有助于定义何时以及如何有效地表达情绪。以口语阐明情绪，增加自我觉察，复杂的情绪表达都是重要的。辨别感觉、说话和行动之间的差异，乐意接受感觉的责任，而不是将它们归咎于别人，会促成更好的反应。选择适当的时间和地点分享感觉也是很重要的，同时选择最合适的沟通渠道。<br>有些情绪是有助益的，而其他的情绪是无助益的，而且会抑制有效的行为。这些情绪之中，有许多基于大脑杏仁核区域的生理反应，但是负面情绪也可能是非理性想法所引起的，借由确认令人烦恼的情绪、事件发展和引发它们的自我内言，并且以更具逻辑的情境分析取代任何非语言思考，往往有可能更有自信和有效率地沟通</p><h2 id="看出人外"><a href="#看出人外" class="headerlink" title="看出人外"></a>看出人外</h2><h2 id="语言：既是障碍又是桥梁"><a href="#语言：既是障碍又是桥梁" class="headerlink" title="语言：既是障碍又是桥梁"></a>语言：既是障碍又是桥梁</h2><h3 id="语言是符号"><a href="#语言是符号" class="headerlink" title="语言是符号"></a>语言是符号</h3><p>在人类的语言中，信号与事物表征间的联系并没有直接的关系。语言只是符号：字词与想法或所提及的事情有着专断的关系。<br>举例来说，“five”并没有特殊之处，这个字代表你手指的数目，但只是英语系国家的人同意这样表示。对于一个讲法文的人来说，“cinq”这个符号也是5的意思，而对于一个电脑程式设计师来说，“0101”表示与5相等的值。</p><p>如果用相同的方式使用符号，语言会变得更容易使用及了解。然而，你亲身的经验显示：事实并非如此。对你而言非常清楚的信息，却使其他人困惑或误解。<br>你告诉你的发型设计师“头发修一点就好”，然后你非常惊讶地发现她的“一点”竟然是你的“很多”。当你针对女权主义的价值做激昂的辩论时，并没有领悟到你和其他人口中的“女权主义”竟然呈现完全不同的意义。</p><p>诸如此类的误解提醒我们：意义不在字眼里，而在心眼里</p><h3 id="语言的影响"><a href="#语言的影响" class="headerlink" title="语言的影响"></a>语言的影响</h3><p>人们在做字词的联想时，无论正确与否，其所持的意义远远超过字典里的解释。</p><p>命名与认同</p><blockquote><p>我妈是黑人（black），我爸爸是非裔美国人（African-American），我祖父是黑奴（Negro），我实在很想知道我会是什么。”<br>不同名字有不同的内涵。名字的影响确实影响人们的第一印象，但在沟通者相互熟识后似乎影响力就降低了。名称用以辨认身份的重要性，也会应用在团体中的成员里。</p></blockquote><p><code>联盟关系</code><br>除了塑造一个人的身份之外，语言可以增进和表明与他人的一致性。<br>沟通者会被与他们说话方式相似的人所吸引。同样地，沟通者会想要和适应他们甚至有相同说话方式的人结盟。这里，说话方式包括字词的选用、说话速率、字数和断句，以及礼貌的程度。在俚语及说话习惯上，使用相同词汇的青少年显示出了语言一致性的原则。这相同的过程也在其他团体中运行着，从街头帮派到军事人员再到计程车司机之间。沟通研究学者称这个想与沟通者认同，并调适说话方式以与之相称的过程为聚敛现象。<br>有趣的是这些网友的网络语言已经渗透到日常生活对话，例如在表达自己的无奈或脱力感时说：“ORZ”。<br>同样地，想要获得晋升的员工，会想办法让自己的说话方式和他们的上司一样；他们的上司会采用像经理一样的说话方式，经理则会向董事长靠拢。</p><p>语言调适的原理同样也会反向运作。沟通者想要使他们自己与他人分离时，便会采取分化策略 来强调他们与他人不同的方式。举例来说，一个民族的成员们，虽然说着流利的主流语言，但可能会使用他们自己的方言来作为显示团结的方式，这是一种“区隔他人”的策略。分化策略也可能在其他情况下运作。<br>另一件要注意的事情是，当你不隶属该族群却故意使用该族群的用语，可能被视为做作或冒犯。分化策略的语言目标之一是要建立规范，指出谁有“权力”使用或谁不能使用某些特定语汇。</p><p><code>权力</code><br>沟通研究者辨识出一些语言形态，可以增强或缩减说话者对其他人的影响力。观察下列两种陈述的不同：<br>“老师，对不起。我实在不知道该怎么说，但我……嗯……我猜我没有办法及对完成这项工作。我有很紧急的私事，而且……这实在不可能在今天完成。我会在星期一把工作完成并将它摆在你的桌上，可以吗？”“我不能准时完成这项工作。我有紧急的私事，而且这实在不可能在今天完成。我会在星期一的时候把工作完成并摆在你的桌上。”<br>不管教授接不接受这个借口，我们可以看出第二种陈述的音调比较有自信，而第一种陈述的音调比较愧疚及不确定。表5-1从我们刚才所读的陈述中整理出一些低权力的语言形态 。许多研究显示出减少这些形态的说话者会被视为较有自信、活泼及有魅力。单一形态的“低权力的语言形态”实际上也可以使一个人比较没有权威性，或更缺乏社交魅力</p><p>低权力语言的范例<br><code>闪烁其词</code><br>“我有点失望……”“我想我们应该……”“我猜我想要……”<br><code>犹疑试探</code><br>“嗯，我可以打断你一下吗？”“唔，我们可以试试看这个点子……”<br>“但愿你……可以试着准时”<br><code>强化重点</code><br>“那正是我所感受到的……”“我并不是非常饿”<br><code>礼貌形式</code><br>“抱歉，长官……”<br><code>附加问句</code><br>“我们该启程了，不是吗？”“你不认为我们应该给他另一次机会吗？”<br><code>否定式陈述</code><br>“我也许不应该这样说，但……”“我不是很确定，但……”</p><p>即使是在很看重强硬声明的文化中，太过权威的语言也会威吓或胁迫到他人。观察在同一个情况下两种不同的处理方式：“对不起，我的小孩有点无法入睡，你介意把音乐关小声一点吗？”“你的音乐太大声使我的小孩睡不着。请你关小声一点。”比较有礼貌而没有权威的方式，会比强硬陈述的效果来得好。</p><p>如果你靠近极具权威的方向，在短时间内你可能会获得你想得到的东西，但可能会让你疏远其他人，长期下去会使你的人际关系产生危机。更进一步地说，太过权威的陈述有不尊重和优越感的意味，就好像要对抗他人进而获得他们的臣服。</p><p>在一些情况下，礼貌且较不权威的说话方式会增强说话者所想表达的效果。举例来说，老板可能对他的秘书说你介意再把这封信打一遍吗？”事实上，老板及秘书都知道这是一个命令而非请求，但是用疑问句的方式显得比较体谅些，也让这位秘书对老板的印象较好。这样既满意又合乎理性的目标结果似乎解释了为什么融合既权威又有礼貌的语言是最有效果的。</p><p><code>打岔性语言</code><br>事实与意见的混淆。<br>事实性的陈述可以用对或错来证实。反之，意见性的陈述基本上以说话者的信念为主，这是无法被证实或否认的</p><p><code>事实与推论的混淆</code><br>把你的意见表示出来可以朝理性的和谐迈向一大步，但拥有这个习惯却不能保证可以解决所有语言的问题，我们会因事实性陈述和推论性陈述而感到困惑、引发问题。所谓推论性陈述，便是在一切都未定的情况下，就做出结论。<br>当我们把我们的推论当作事实时，争议便由此而生。</p><p><code>情绪性的语言</code><br>情绪性语言表面上在述说某事，但事实上它表明了说者对某事的态度。如果你认同你的朋友对一个艰涩主题的迂回说法，你可能会认为他是“机智的”；如果你不认同他的观点，你可能认为他“拐弯抹角”。</p><table><thead><tr><th>当你认同时，你会说</th><th>当你不认同时，你会说</th></tr></thead><tbody><tr><td>朴实的</td><td>廉价的</td></tr><tr><td>传统的</td><td>老旧的</td></tr><tr><td>外向</td><td>疯狂</td></tr><tr><td>谨慎、小心</td><td>胆小、怯懦</td></tr><tr><td>革新的</td><td>激进的</td></tr><tr><td>宣传手法战略胜利</td><td>大屠杀奇特的</td></tr></tbody></table><p>避免因情绪性字眼而产生争议的最佳方法，是用中性字眼来描述人、事物或想法，以及用之表示出你的观点。不说“我希望你戒掉这些性别歧视的评论”，而说：“我不喜欢你用‘女孩’这个性别标签来称呼我们。”这种<code>不带情绪性的陈述不但显得精确，被别人接受的可能性也更大</code></p><p>语言的责任性<br>语言除了使得信息内容清楚或模糊的功能外，也反映出说话者对他或她的信念及感觉负责的意愿程度。接收或反对的回应向我们提供了很多关于说话者的资讯，同时也形成了一种关系气氛。</p><ul><li>沟通文本<br>在工作中使用“我”和“你”字的语言有些时候丽贝卡觉得很有挫折感，因为她的同事汤姆常常不在位子上。她不想说出来，因为她喜欢汤姆，也不想被人听着像是在发牢骚。最近汤姆不在位子上的情况更为频繁，时间也更长了。像是今天，他把半小时的用餐时间又再多延长了45分钟。当他回到办公室时，丽贝卡使用了含有“你”字的语言来对他抱怨。丽贝卡：你去哪里了？你应该在十二点半回来，可是现在却已经快要一点半了。汤姆（对丽贝卡生气的语调感到惊讶，她从未这样跟他说话）：我有一些事要办。有什么问题吗？丽贝卡：我们都有很多事要办，汤姆，但很不公平的是，你利用上班时间来办你的事。汤姆（在听到丽贝卡的指控后开始防卫）：我不知道你为什么那么在乎我是如何做我的工作的。老板都没有抱怨，那你在担心什么？<br>丽贝卡：老板没有抱怨，是因为我们全部都在掩护你。你应该感激我们为你的迟到或早退所编的借口。（丽贝卡又一次使用了“你”字的语言，来告诉汤姆他该怎么想及怎么做。）<br>汤姆（现在过于防备而不去思索丽贝卡的担心）：喂，我想在这边我们都会彼此掩护吧？就以上次来说，我为了让你去参加你亲戚在新加坡的婚礼，加班了一整个礼拜。丽贝卡：那不一样！那时我并没有说谎啊！而当你去放风时，我却必须编造出你在哪里的假话。你让我很为难，汤姆，你别想再指望我会继续为你掩护了。<br>汤姆（感到罪恶，但是因为对丽贝卡的评论和恐吓太生气了，以至于无法承认自己的错误）：很好，我不会再要求你帮我忙了，对不起让你这么抓狂。丽贝卡可能成功地减少了汤姆的不守时，但她选择使用“你”字的语言却使得他觉得防备及生气。办公室的气氛可能就此变得很紧张——这不是丽贝卡所希望的结果。注意一下，她其实可以使用“我”字的语言来处理相同的状况，作法是去形容她的问题而不是责备汤姆。<br>丽贝卡：汤姆，我需要和你讨论一个问题。（注意丽贝卡是如何把问题视为她的而不责怪汤姆。）汤姆：怎么了？<br>丽贝卡：你知道你有时会迟到，或拉长吃饭时间对吧？汤姆（感到大事不妙，并很小心地聆听）：对。<br>丽贝卡：嗯，我必须告诉你这会让我很为难（丽贝卡用行为式的陈述来描述问题，接着便表达出她的感受）。当老大问起你在哪里的时候，我不想说你不在这里，因为这会让你有麻烦，所以有时候我会编造借口甚至说谎。但是老大听起来对我的借口起了疑心，我很担忧这个情形。<br>汤姆（觉得防备，因为他有罪恶感，但却也同情丽贝卡的处境）：我不想让你有困扰，我会在处理我的私事时更留神。丽贝卡：我知道，汤姆，我只是希望你能明白，我可能没办法再为你掩护了。<br>汤姆：嗯，好的，感谢你为我所做的。注意看，使用“我”字的语言是如何让丽贝卡诚实地面对汤姆而不是以责怪来抨击他。即使汤姆没有改变，丽贝卡也可以把她心中的那块石头给放下，她甚至可为她这种不爱争辩、不令人讨厌的作法而感到骄傲。</li></ul><p>人称代名词的使用及其效果</p><table><thead><tr><th></th><th>优点</th><th>缺点</th><th>小技巧</th></tr></thead><tbody><tr><td>“我”信息的语言</td><td>为个人的想法、感觉和意愿负起责任。比“你”字的语言所引发的防卫戒心较少。</td><td>可能被认为是自负的、自我陶醉的及自恋的。</td><td>当他人不认为是他的问题时，使用“我”字语言。可结合“我”和“我们”的语言一起使用。</td></tr><tr><td>“我们”信息的语言</td><td>有包括、直凝聚和约束的含义。</td><td>对别人来说可能不恰当。</td><td>可结合“我”字的语言在团体的情境下增加团结。避免在表达个人的想法、感觉和意愿时使用。</td></tr><tr><td>“你”信息的语言</td><td>他人取向的信号，尤其是当话题是正面时。</td><td>听起来有评价和判断的意味。</td><td>在对质时，使用“我”字的语言。在赞美或包含在他人之中时，才使用“你”字的语言。</td></tr></tbody></table><h3 id="摘要-3"><a href="#摘要-3" class="headerlink" title="摘要"></a>摘要</h3><p>语言是个很棒的工具，但同时却也是许多人与人之间问题的来源。语言同时反应及塑造了使用者的看法。用来指称人们的名称会影响人们被对待的方式。用以指称说话者的名称及他们使用的语言，则反映出说话者吸引听众兴趣的程度。语言的形态也反应和塑造出说话者被接纳的本领。性别与语言的关系也会让人感到困惑。男人与女人说话的方式存在着许多的差异：谈话的内容、沟通的理由及沟通的形式等方面。职业、社会心理、问题解决的趋向也都影响着语言的使用，而心理性别角色比生物性别更具有影响力。语言通常塑造并反映出文化观，低语境敏感文化会尽可能直接清楚、不含糊地表达感受及想法，高语境敏感文化为了要促进社会和谐会避免将话说得太具体。有些文化比较重视简洁有力地使用语言，而有些文化认为语言应该要详尽。在一些社会里，正式程度显得很重要，而在另一些社会里比较看重非正式的用法</p><h2 id="非口语沟通：超越字词之外的信息"><a href="#非口语沟通：超越字词之外的信息" class="headerlink" title="非口语沟通：超越字词之外的信息"></a>非口语沟通：超越字词之外的信息</h2><h3 id="非口语沟通的特征"><a href="#非口语沟通的特征" class="headerlink" title="非口语沟通的特征"></a>非口语沟通的特征</h3><p>所有行为都具有沟通的价值</p><p>非口语沟通主导着关系</p><p>非口语沟通提供许多的功能</p><p>非口语沟通是暧昧不明的。<br>在第五章我们已经了解到口语表达经常是多重意思，但是非口语信息更加模糊不清。想一想一个简单的动作——眨眼——可以代表什么意思？不同人将这个动作用来解释很多不同的事情，包含用来表达谢谢、表示友善、衡量危险、性引诱或者只是眼睛有问题。</p><h3 id="非口语沟通的类型"><a href="#非口语沟通的类型" class="headerlink" title="非口语沟通的类型"></a>非口语沟通的类型</h3><p>身体动作</p><p>身体定向<br>我们要从身体定向以身体、脚与头，面对或背对其他人的程度开始讨论。在这一过程中你可以跟第三个人说话，但不可以用字词直接告诉他你们想要独自交谈。实际上，你只要明显地将你的身体背向那位闯入者，就可以让他清楚地了解你的感受。他会发现他很难穿过你的肩膀去进行交谈。</p><p>姿势<br>紧张和放松提供了辨识其他姿势的情绪之钥。例如，紧绷是分辨一个人社会地位的方法，通常地位比较低的人都比较僵硬、紧张，而地位比较高的人则比较放松。这种状况经常可以在公司内看到：员工通常比较严谨，而老板则常常向后倾斜坐在椅子上。</p><p>手势<br>例如，假如有人在街角问你如何到达某一个餐厅时，你可能会告诉他街道名字和明显的路标，但是同时你也可能会用手指出方向并用手势指引他如何到那里。举例而言，我们都知道点头代表“对”、摇头代表“不是”、挥手代表“你好”或是“再见”、当手放在耳朵旁边代表“我听不见你说的”，而几乎所有满7岁的人都能了解比中指的含义。<br>有一点必须记住，表征的意思并非如上述般放诸四海而皆准，例如在北美“竖起大拇指”表示“很棒”，在伊拉克和其他国家则意味着猥亵淫秽之意。</p><p>表情与眼神<br>眼睛本身就可以传递好几种信息，跟某人目光接触，通常是一种关联的象征，而目光的转移，则表示了避免接触的欲望。</p><p>声音<br>事实上，当要求听众去判断演讲者的态度时，他们对副语言的注意比对语言的注意更多。此外，当声音的因素与语言的信息不同时（比如当有人大声喊出“我很高兴！”时）听众往往会根据副语言而不是语言来做出自己的判断。小孩子对那些说话声音比较温柔的人会给予比较温顺地回应，而面对那些说话比较不友善的人通常会比较害羞地离开。<br>声音的成分会影响别人如何看这位说话者。例如，说话比较大声且没有口吃的人，会比那些说话比较小声且吞吞吐吐的人看起来更有自信；具有较迷人声音的人也会比那些声音较不具有吸引力的人更受到尊敬。</p><p>触碰<br>例如，一个接吻也可能只是一种礼貌而已。接触会传达出较多或较少的信息有以下几点因素：<br>身体的哪一部分去做碰触<br>身体的哪一部分被碰触碰触的时间持续多久<br>用了多少力气在碰触之后有没有其他行动<br>是否有谁看到碰触的行为发生在什么情况下<br>发生碰触之两者之间是什么关系<br>从这个列表可以看出，触碰实际上是一种复杂的语言，由于非口语信息本身就是模糊不清的，所以这种语言容易产生误会也就不足为奇了</p><p>外貌<br>我们的外貌会将信息传送给别人。外貌有两个向度：生理吸引力和穿着打扮。</p><p>生理吸引力<br>一个大家都认为很迷人的女性会有比较多的约会，在大学里可以得到比较高的分数，比较容易说服男性，也会获得较轻的法院判决。凡是被认为比较具有吸引力的人，无论男女，都比较容易被认为比他们的其他兄弟姐妹更敏感、仁慈、坚强、社会化和有趣。生理吸引力也被用来评估事业领域，这些人往往起薪较高、更快升迁、考核成绩较好。<br>教师也会受到学生的吸引力影响，比较具有吸引力的学生，通常也比其他不具吸引力的同学更容易受到聪明、友善及受欢迎之类的称赞。<br>即使你不是美女或帅哥也别失望，证据显示当我们认识某些人越深且更加喜欢他们时，就会对他们越看越顺眼。何况，我们看别人美丽或丑陋不是只凭他天生的条件，也会根据他们如何运用自己生理上的条件而定。姿势、手势、面部表情还有其他行为都可以增加还没被标签化的人的吸引力，合适的练习将会有助于改善我们看起来的样子</p><p>穿着打扮<br>一位穿着皱皱的、不合身的老旧衣服的人可能是公司的经理，一位穿着时髦的人可能正在前往打扫壁炉的路上，但也可能是一位穿着怪异的百万富翁。当我们有其他资讯之后，穿着的重要性似乎就降低了。这个事实显示，衣着在建立关系的第一阶段中扮演着非常重要的角色，建立良好的第一印象，以使别人更进一步的认识我们是必要的。</p><p>物理空间<br>人际距离学 是一门人类与动物如何使用空间的学问。至少有两种人际距离学的向度：距离和领域</p><p>距离性<br>每一个人无论到什么地方，都会带着看不见的个人空间，我们会想象这个防护罩里是我们私人的领域，就好像是我们身体的一部分。当你跟伙伴越来越接近时，你的防护罩好像被打开了，你的空间被闯入了，这是你为什么会感到不舒服的原因。当你再往后退时，你的伙伴从你的防护罩中撤退，你就会觉得比较放松了<br>当然，如果你和一位非常亲密的伙伴（如配偶）进行这个活动的话，你应该不会感受到有任何的不舒服，甚至你们彼此碰触到也不会有不舒服的感受<br>人类学家爱德华·霍尔定义出我们在日常生活中的四种距离，依据我们在特定时间点下对这个人的感觉、对话内容以及我们的人际关系目标来决定。</p><p>霍尔的四个空间范围中的第一个是最小的亲密距离 ，这样的距离从皮肤接触到半米左右。通常只有非常亲密的人可以处于这个空间之内，并且多半会发生一些私人情境中——做爱、拥抱、安慰、保护。<br>▶ 第二个空间的范围是个人距离 ，这个距离介于半米到1.2米之间，这样的距离通常是夫妇在公开场合站在一起的距离。不过，如果在宴会中有异性站在这样的距离，你可能会觉得有些不舒服。这样的移动通常也代表着要开始一个随性的谈话。在这样的距离下我们可以与某个人保持“一个臂膀的长度”，暗示着在这范围之内有沟通正在发生。<br>▶ 第三个空间是社会距离 ，这个距离介于1.2到3.6米之间。在此距离下发生的沟通大多是商业行为。在此距离内比较近的一档是1.2到2米，这样的距离通常是销售员与顾客或是同事之间的距离；而比较远的一档——2到3.6米——在合乎礼节及非个人的情境里，这样的距离通常是我们跟老板之间的距离，这样他可以穿过他的办公桌看到我们，这跟拿一张椅子坐在老板旁约1米的距离有很大的不同，让人不那么紧张。<br>▶ 公共距离 在霍尔的分类中是最远的一种，指的是3.6米以外的距离。在这公共距离里，比较近的距离就是大多数老师在教室里的距离，较远的空间——超过7.6米以上的距离——对于两个人的沟通来说几近不可能。演讲者大多数采用公共距离，其原因是听众的人数太多了，但我们同时也可以猜想，如果有人在可以选择的情况下仍然选择公共距离，那就表示他不想有任何的对话。选择最适合的距离可以有效地彰显出我们如何对待及回应他人。例如，学生对于会拉近自己与学生之间距离的老师，以及该老师所教授的课程，都比较满意，也会比较愿意遵循老师的教学内容。同样的，接受医疗的病人也会对那些不冷漠的医生感到满意。</p><p>领域性<br>个人空间就像一个防护罩，无论我们走到哪里，它都在我们身边，仿佛是身体的一部分。然而领域是一个不会动的地理上的位置，比如工作的地点、房间、房子或物理上的空间，领域就是指以上这些空间中我们可以拥有自己权利的地方<br>人们使用空间的方式也可以说明权力和地位。一般而言，比较具有地位的人通常都拥有比较大的空间与较多的个人隐私。当我们要进入老板的办公室之前，一定要先敲门，而他/她却可以随意进出我们工作的区域</p><p>物理环境<br>这就像马克·克奈普（Mark Knapp）在“没有人味的房间”里所描述的：在这空间里烟灰缸干净得出奇，家具都用东西覆盖着，还有玻璃制的灯罩，都透露着非口语信息，告诉我们不要碰到任何东西。住在像这样的房子里，恐怕没有人会感到放松，根本无法好好投入在宴会里。有一件事是很明确的，环境已经对人们传递了不舒服的信息</p><p>时间<br>一般人都会认为，老板直接走进员工的办公室是很自然的事情，但员工如果没有预约通常不会干扰老板。一个相关的规则是地位较低的人从来不会让地位比较高的人等</p><h3 id="摘要-4"><a href="#摘要-4" class="headerlink" title="摘要"></a>摘要</h3><p>非口语沟通包含不用字词表达出来的信息，包括身体动作、声音、触碰、外貌、物理空间、物理环境、时间等。<br>非口语沟通是沟通的必备要件，也是普遍存在的事实。事实上，不传递非口语信息是不可能的。虽然大多数的非口语信息具有通则性，但是仍然受到文化和性别所影响。大多数的非口语沟通会流露出与口语沟通相反的态度和情绪，最好进一步确认表达者的初衷。非口语沟通提供很多的功能，有重复、替代、补充、强调、调整和泄漏口语沟通等。非口语沟通在很多方面跟口语沟通不同。非口语沟通通常都暧昧不明，而且大多不是意识层面的。当口语与非口语的内容不一致时，沟通者多仰赖非口语的部分，也因此在解读非口语线索时要特别谨慎</p><h2 id="倾听：不只是听见"><a href="#倾听：不只是听见" class="headerlink" title="倾听：不只是听见"></a>倾听：不只是听见</h2><p>倾听囊括了大众沟通媒体，例如收音机与电视，以及倾听面对面的信息</p><h3 id="倾听的定义"><a href="#倾听的定义" class="headerlink" title="倾听的定义"></a>倾听的定义</h3><p>听与倾听<br>听是声波传到耳膜引起振动后经听觉神经传送到大脑，倾听是大脑对这些生化电波冲动重新建构成原始声音表征之后再赋予意义的过程。除了疾病、外伤造成失聪或使用耳塞之外，你几乎无法停止“听到”，不管你想要听或不想要听，你的耳朵都会接收到所有的声波并将其传送到大脑。<br>而倾听就不是这种自动的过程，我们经常全都听到却不一定都认真倾听。有时候我们会自动地或无意识地“关掉”我们所厌恶的声音，例如邻居的割草声或街道车声，我们也会因为主题不重要或对其没兴趣而停止倾听，比如在面对无聊的故事、电视购物频道等时，喋喋不休的唠叨抱怨也是导致我们停止倾听的例子。</p><h3 id="倾听过程的元素听到"><a href="#倾听过程的元素听到" class="headerlink" title="倾听过程的元素听到"></a>倾听过程的元素听到</h3><p>要做一位能干的沟通者，你必须要知道听你说话的那个人有可能无法有效地接收你所传达的信息，所以你必须调整你的说话方式，如说的<code>慢一点、大声一点、清晰一点</code>，都是有效的方法。</p><p>听到是一个生理的过程，而专注 则是一个心理的过程<br>对一个信息做出回应 ，就是对说话者给予清楚的反馈。通常倾听者并不会很明显地去回应说话者，但研究者建议我们应该对说话者给予多些反馈<br>例如保持目光的接触、给予适当的脸部表情，等等。在语言行为方面，包括回应对方的问题、交换意见与想法，都可以证明倾听的专心程度。</p><p>记忆 是记住信息的一种能力，如果我们无法记住我们听到的信息，便会枉费我们对倾听所做的努力</p><h3 id="倾听的挑战"><a href="#倾听的挑战" class="headerlink" title="倾听的挑战"></a>倾听的挑战</h3><p>分为以下几类</p><p><code>虚伪倾听</code> 是真诚倾听的伪造品。虚伪的人在外表上是很专注的，他们看着你的眼睛、点头、在正确的时刻微笑，且还不时地会回应你，但在这兴趣盎然的外表下，他们却想着完全无关的事情</p><p><code>自恋的倾听</code>者（有时称为沟通的自我陶醉者）不会假装他们对于说话者的说话内容有兴趣。相反的，他们会尝试将沟通的主题转移到他们有兴趣的事物上。其中一种自恋倾听的策略被称为“回应转换钮”，意即在回应的当中将沟通的焦点从说话者转移到自己身上。当你说“我的数学课程真的是很困难”时，自恋的倾听者会转到他自己身上说：“你认为数学很困难？你应该试试我的药物课程。”自恋倾听者的另外一个特征是他们会去中断、阻碍沟通，这样的倾听不但无法由沟通中获得有价值的资讯，甚至还会破坏说话者和他们之间的关系。</p><p><code>选择性倾听</code> 的人只会针对他们有兴趣的部分来做回应，而拒绝倾听其他所有的部分。有时候我们都会是有选择性倾听的人。举例来说，当我们在收听广播中的广告或音乐时，我们都可能只是听到但没有听进去；但当广播在播报气象或宣布当前时刻的时候，我们就会竖起耳朵仔细听</p><p><code>隔绝性倾听</code>者的行为几乎与选择性倾听者相反。他们不会从沟通中寻找有兴趣的话题，相反的，此类倾听者会避免沟通。当人们在述说一个话题时，他们宁愿不去讨论它，而是采用隔绝性倾听 来避免听或表示注意。若你提醒他一个关于他的事情，可能是他们未完成的工作、低劣的成绩或外表的样子，他们也只会点头或简单地回答你，然后就迅速地忘记你曾说过的话。</p><p>使用<code>防卫性倾听</code> 的人总是认为别人所说的话都是在攻击自己。例如，青少年总是在父母对他们的朋友或参与的活动提出一些疑问时就认为这是对他们的不信任，或找他们的碴。</p><p>使用<code>埋伏方式来倾听</code>的人，对说话者的言论会很小心仔细地去倾听。如果他们想从你的话中，搜集他们想要得到的资讯，他们就会开始侦察你。在各种实例中，检察官就是一个最好的埋伏性倾听的例子</p><p><code>鲁钝的倾听</code>是无效倾听的最后一种类型，此类倾听者无法清楚地接收到说话者的信息。之前我们有提到，人们通常不会开放地解释自己的想法或感觉，不但不会去直接表达真正的意思，反而会使用一种更细微的、无意识的方式来选择某些字句或非语言线索来进行互动沟通。鲁钝的倾听者不会去寻找字面或行为背后的意义，他们只会接收说话者字句中的表面价值加以理解</p><ul><li>正确的态度和技巧去倾听<br><code>少说话</code><br>如果你的目的是要了解说话者的意思，那么你就要避免自私地抢夺说话者的舞台并一味地转换话题或发表自己想法的做法。</li></ul><p><code>摆脱注意力分散</code><br>有一些会分散我们注意力的刺激来自于外在环境，包括电话铃声、收音机和电视机、朋友的随时造访，等等；还有一些是来自于心理内在，包括心思被其他事情所占据、肚子饿，等等。所以当你面对重要的资讯时，尽可能地排除所有会让我们分心的内在和外在干扰刺激是很必要的。这可能意味着关掉电视，拔掉电话听筒，换到安静的房间里，以使你不受电脑诱惑、不必牵挂桌上未完成的工作或眷恋柜子上的食物</p><p><code>不要过早评断</code><br>例如武断的批评别人、还没听完别人的话就先做评价等。当你不赞同别人地说法或是当别人批评你的时候，反击回去的确是一</p><p><code>寻找关键意思</code><br>大部分的人在说话的时候有他们主要想表达的想法，你可以运用你的智慧把思考的速度推得比说话者还要快，这样的话你也许就可以从说话者的一大堆言词中摘录出其关键意思。但如果你真的无法了解说话者所欲传达的意思，或许你可以使用一些不会得罪对方的{问话或解释技巧来做澄清</p><h3 id="倾听反应的类型"><a href="#倾听反应的类型" class="headerlink" title="倾听反应的类型"></a>倾听反应的类型</h3><p>借力使力<br>有时候倾听者的最佳反应只是顺水推舟地让说话者自己继续话题。借力使力牵涉到使用沉默和简短的言论来鼓舞对方多说一些话，让对方借由这个过程自己协助自己解决问题</p><p>例子：<br>巴勃罗 ：朱莉娅的爸爸最近要卖掉一部电脑，很便宜，只要600美元！我很想要买，但是如果我要买的话，我现在就要赶快行动，因为好像也有另外一个人对这台电脑很有兴趣。不过，虽然这是一个很棒的价钱，但是买下它可能会花光我所有的存款，而我需要一年的时间才可以再存到和现在一样多的钱。<br>提姆 ：嗯哼。<br>巴勃罗 ：我想这个冬天我不会去旅行吧！这样的话，我就可以趁这个时间留在学校打工赚钱……也许也可以再多找一份临时工作。<br>提姆 ：这样很好啊。<br>巴勃罗 ：你觉得我应该买下这台电脑吗？<br>提姆 ：我不知道，你觉得呢？<br>巴勃罗 ：真的好难决定啊！<br>提姆 ：（沉默）<br>巴勃罗 ：我想我要买下这台电脑，因为以后我可能再也没有机会用这么便宜的价钱买到电脑了。</p><p>当你无法帮别人做决定时，借力使力式的回应会是一个很棒的技巧。你会发现其实你不用做太多，你沉默的存在就是一个让别人自己寻找答案的催化剂，尤其当你是用真诚的心在与对方相处的时候，这时你的非语言行为，比如眼神的接触、姿势、面部表情、声调，都可以显示出你对方的关心。<code>但是要记得的是如果你使用的方式机械而呆板，反而可能会惹恼、激怒别人，而不能帮助到对方</code></p><p>释义<br>释义技巧的成功关键在于要用你自己的措词重述别人的观点，以便能再一次对信息进行交叉检视。假如你只是单纯地逐字重复对方过的每个字会使你看起来有点可笑，而仍然没有达到澄清对方意思的目的。</p><p>释义个人性信息也可以当作是一种助人的工具，就像下页“沟通文本”里的内容那样，反映说话者的想法和感受而不是去评断或分析等等，会传达出你的投入和关切</p><p>沟通文本<br>在职场中运用释义下面两位同事的对话可以让我们看到释义是如何协助倾听者和说话者找到解决问题的方法的。<code>请特别注意吉尔在马克没有提出忠告的状况下如何得到自己的结论，也注意马克在使用释义技巧时是如何结合真诚的问话方式和其他助人技巧而使释义运用得更自然的。</code></p><p>吉尔：我最近觉得老板对我怪怪的。<br>马克：怎么讲？（一个很简单的问题，邀请吉尔继续说）<br>吉尔：我开始觉得也许他对女人有意见，或者是他对我有意见。<br>马克：你是说他针对你？（马克将他所认知的吉尔的想法释义出来）<br>吉尔：哦，不！也不全然是啦！但事实上，他似乎不太喜欢女性，或至少是不喜欢我这个女性。（吉尔纠正马克的误解并加成解释）<br>马克：那是什么意思呢？（马克问了另外一个简单的调题，以得到更多的资讯）<br>吉尔：恩，不论是什么时候，在开会或只是在办公室聊天，他总是只和男性说话。虽然他对男性和女性都会下命令，但是他似乎都不会邀请女性说说她们的想法。<br>马克：所以你觉得或许他是不看重女性的，是这样吗？（马克将吉尔最后的陈述加以释义）<br>吉尔：是啊！嗯，他似乎对女性的见解没有什名兴趣，但这也并不表示他全然讨厌女性，我知道在办公室里他会依靠一些女性，而且他总是说他的生活不能缺少她们。上个月特蕾莎在试用办公室里的新电脑系统,他似乎就很欣赏她，他还给她放一天的假，并且告诉我们所有的人特蕾莎是如何救了他一命。马克：听起来你现在似乎有一些困惑。（反映吉尔的感觉）<br>吉尔：我是很困惑啊！我不知道这是不是只是我自己的胡思乱想，我是说我是一个还不错的主管，但是他从来没有邀请我说说我的想法，关于如何增进业务或其他的点子，而且我也不记得他是否真的有询问过女性的意见。但也许是我多虑了。<br>马克：你似乎不太确定你的想法是否正确，但是我可以感觉得到你真的很在乎这件事。（马克释义吉尔的主要想法和感觉）<br>吉尔：你说的对，但是我不知道该怎么办。<br>马克：也许你应该……（开始提供忠告，但踩了煞车，并再次询问吉尔的想法），唔，所以你的决定呢？<br>吉尔：嗯，我可以就直接问他，他是否注意到自己似乎从来不会询问女性的意见。但是这样也许太具攻击性，也太愤怒了。<br>马克：但你不生气吗？（试着澄清吉尔的感觉）<br>吉尔：也不是啦！我只是不知道我是否该因为他不看重女性的想法而生气。或许他是不看重我的想法，也或许根本就是我想太多了。<br>马克：所以你真的是更困惑了。（再次反映吉尔的感觉）<br>吉尔：是啊！我不知道老板是否欣赏我，也不知道到底是怎么一回事，我希望可以知道他对我的想法到底是什么。也许我可以就直接告诉他，这件事的困惑并请他澄清。但是如果他根本没有这样想呢？这样他似乎会认为我是一个很没安全感的人。<br>马克：（马克觉得吉尔真的应该要好好弄清楚这件事，但是他不确定吉尔的做法是否恰当，所以他将吉尔可能告诉老板的话释义一遍给吉尔听）所以这样会让你看起来不太好。<br>吉尔：我想恐怕是吧！我在想或许我可以和办公室里的其他同事谈谈，并问问他们的想法……吉尔：没错。也许我可以问问特蕾莎、她是个可以说心事的对象，我想我会尊重她对这件事情的看法的，也许她可以给我一些如何处理这件事情的好电子。<br>马克：听起来如果可以先和特雷莎谈谈的话，你会觉得还蛮舒服的。（释义）<br>吉尔：（继续酝酿这个想法）是啊！如果她没有这样觉得的话，或许我可以先冷静一阵子,但如果在问过特蕾莎之后，我还是想跟老板谈谈的话，至少我可以确定这件事不是我自己胡思乱想。<br>马克：很好，让我知道事情的后续发展吧</p><p>借由下面的三种方法，可以协助你让自己的释义技巧听起来更自然，包括：</p><ol><li>改变说话者的措词：<br>说话者 ：双语教育真是一个失败又浪费钱的政策。<br>释义者 ：你看看我说的对不对，你很生气是因为你觉得双语教育表面听起来很棒，但是实质上却没什么作用，对吗？</li><li>从你所接收到的对方信息当中，抓出一个具体例子，来向说话者说明你所了解的程度：<br>说话者 ：李真是一个浑蛋，我真不敢相信他昨天晚上所做的事！<br>释义者 ：你觉得那些笑话很惹人讨厌，对吗？</li><li>反映说话者的潜在寓意。在言谈中，如果你觉得对方似乎有一些暗喻在言语中忽隐忽现，在你就他的话展开回答前，做一个整体或部分的理解性核对是必要的。<br>释义者 ：你一直提醒我要小心，听起来你好像是在担心有一些事即将发生在我身上，是吗？释义虽然不见得无往不利，但是表达你的重述等于是为对方提供一个修正的机会，像上述例子就说明了开放式的释义便于说话者修正这一点</li></ol><p>冷安慰：无助益的信息<br>例如<br>那也没什么啦，你要不要听听我有多倒霉？<br>总之，我不知道你看上他哪一点！他很烂，你可以找到更好的人的。<br>他／她对你而言太年轻（老）了。<br>你不可能在一生中什么都要。现在总算结束了，我敢说他从头到尾都在欺骗你，那个浑球！<br>他只是利用你做性工具。他总是在你背后狠狠地桶你一刀，要这种人干吗？<br>现在我们更有时间到处闲晃了，就像以前那样</p><p>否认别人拥有感觉的权力：许多非同理式的回应都是在暗示对方拥有某些感觉是错误的、不应该的，例如在“不用担心”的这句话中，虽然它的目的是为了要让对方消除心中的恐惧，但其实它的潜在意思是希望对方可以换一个感觉不要再自怨自艾。像这样的反建议是没有帮助的，毕竟别人不会因为你这样告诉他们就真的可以停止忧虑。还有其他拒绝别人感觉的例子包括“这又没有什么，不值得你那样难过”、“你这样想真的很荒唐可笑”</p><p>聚焦在“彼时彼地”，而非“此时此地”：在遇到困难时，我们会认为睡一觉醒来隔天的心情就会好一点，但是也有的时候却反而更糟<br>虽然这些话的目的是希望对方可以多增加一点信心，但是这些聚焦在“彼时彼地”的说法对今天正在心碎的人毫无安慰的效果。</p><p>火上加油的评断：当你做了错误的决定时，又听到“你知道吗，这都是你的错！当初你根本就不应该这么做的”之类的话，你肯定会真的感到很泄气</p><p>自我防卫：在回应别人的时候，话中还不忘防卫自己，例如“不要怪我！我已经做了所有我该做的事了”，很显然的，你其实是觉得关心你自己比关心对方还要重要。</p><h3 id="摘要-5"><a href="#摘要-5" class="headerlink" title="摘要"></a>摘要</h3><p>倾听是最普遍但也最常被人忽略的沟通形式。听到跟倾听有差别，心不在焉地听跟心无旁骛地听也完全不同。倾听是指将别人的信息赋予含义的过程，它包含了五个元素：听到、专注、理解、回应和记忆。<br>造成倾听不良的原因有许多，可能是因为每天我们都被太多的外在信息所轰炸，再加上自己私人的问题、飞快的思想等，以至于无法真正专注于倾听之上。有一些无法良好接收信息的倾听者，其原因是来自于生理上听力的缺陷，还有的原因是因为缺乏训练。倾听的重要功能之一，是要从对方的话中搜寻重要的资讯，成功的关键就是少说话、减少分散我们注意力的事物、避免过早的评断，并寻找说话者的关键想法等。倾听反映重视搜集资讯和给予支持，这些反应包括：借力使力、问话、释义和支持。有些倾听反映着重在提供方向和评估：分析、忠告、评断。有效率的沟通者会很艺术、很有变化地使用它们，随时考虑性别、情境、对方和自己等因素，并选择一个最适合自己风格的方式来做回应</p><h2 id="看人之间"><a href="#看人之间" class="headerlink" title="看人之间"></a>看人之间</h2><h2 id="发展关系动力"><a href="#发展关系动力" class="headerlink" title="发展关系动力"></a>发展关系动力</h2><h3 id="我们为什么要建立关系？"><a href="#我们为什么要建立关系？" class="headerlink" title="我们为什么要建立关系？"></a>我们为什么要建立关系？</h3><p>是什么让我们与一些人建立关系，而不是其他人呢？小孩不能选择父母，大多数工作者无法选择他们的老板或同事。但在其他大多数情况，我们会寻找某些人而避开另一些人。</p><p><code>外貌</code><br>即使你的外貌并不符合社会标准，你也可以想一想这些鼓舞人心的因素：第一，过了起初的第一印象之后，长相普通但是具有亲切的人格特质的人，会被评价为具有吸引力；第二，生理外表因素在关系增进之后重要性降低。就像社会学家说的吸引人的外表特征可以打开大门，但是渐渐地，除了外表之外，必须还有其他条件才能保持大门常开”。</p><p><code>相似性</code><br>如果别人在很重要的领域上和我们具有高度相似性，吸引效果最大——例如两个人互相支持彼此的生涯目标，喜欢一样的朋友，对于人权有类似的信念，那么他们彼此自然可以忍受在热门音乐和寿司品位上的微小不一致.当我们接触到跟我们相似、但是具有怪异的行事作风或冒犯社会习俗的态度的人时，相似性的作用会从吸引转成厌恶</p><p><code>互补性</code><br>当差异具有互补性时，差异便可以增强一段关系，也就是说一个同伴的特质可以满足另一个同伴的需求。例如一个同伴是支配，而另一个是顺从，两者通常就会彼此吸引</p><p><code>相互吸引力</code><br>通常，我们会喜欢那些喜欢我们的人.你或许会想这些人所表现出来的喜欢的态度可能是假的，或只是一种不诚实的手段，想从你身上获得什么。这类的行为一点都不是“喜欢”。另一种情况下，被喜爱不能满足你的自我判断：当有人称赞你很漂亮、聪明、仁慈而你却觉得自己丑陋、愚蠢并严厉时，你也许会选择忽视这些赞美的信息，并且继续存留在你熟悉的不愉快的状态中。</p><p><code>能力</code><br>我们喜欢围绕在聪明的人四周，也许是因为我们希望他们的能力和技能可以分一些给我们。但从另一方面来看，我们也不喜欢围绕在太完美的人身旁，因为相较之下，自己看起来会很糟。在这种比较的态度下，人们会被那些聪明却有显而易见缺点的人们所吸引，这并不足为奇，因为那表示他也是人，就像我们一样。</p><p><code>袒露</code><br>揭露自己的重要信息有助于建立喜欢的关系。有时这一类的喜欢基础来自于发现我们有多么类似，例如某些经验（我毁了一个合约）或是某些态度（我也对陌生人感到焦虑）。但并非所有的袒露都会带来好感。研究显示，满意的袒露的关键在于互惠：你所揭露的资讯量与质跟对方要取得平衡。第二重要的因素是时间，某些人的时机选择错误，往往会带来错误的结果，这种错误有可能是很不明智的行为</p><p><code>接近</code><br>俗话说“近水褛台先得月”，我们容易和常常见面的人建立关系。我们很容易和亲近的邻居建立友谊.同样地，另一方面来说，亲近很可能会产生觊觎的情形。</p><p><code>报酬</code><br>最露骨的程度就是，交换的过程看起来是冷酷和计较的。但是在某些类型的关系中看起来也颇合常理。一段良好的商务关系经常建立于宴会的帮助，有时友谊的建立也是出于一种非正式的.就算在亲密的关系中，也有交换的元素存在。朋友和情人通常会容忍彼此的怪癖，因为相较于他们所得到的舒适和愉快感来说这一点点的不愉快是值得接受的。</p><h3 id="关系发展与维系的模式"><a href="#关系发展与维系的模式" class="headerlink" title="关系发展与维系的模式"></a>关系发展与维系的模式</h3><p>寻求任何一种形式的亲密感，不管是情感上、生理上还是智力上的都有其成本，然而我们决定付出成本与否，最大考量就是其收益。如果寻求和维持这个亲密关系的成本太高，或是收益不值得努力，那我们就会决定撤回。</p><p>以下阶段特别描述亲密关系、浪漫的关系和亲密的友谊。其他亲密关系模式，例如家庭关系也适用。当你逐步读下去时，请试着思考这些阶段如何描述长期关系的特性，例如，一对伴侣关系或生意伙伴的关系</p><p><code>初始阶段</code><br>第一阶段的目标在于你愿意与人接触，并表示你是一个值得谈话的对象。沟通在初始阶段通常是相当简短的，往往依循一些常见的公式，如握手、谈论无关紧要的话题——例如天气——并且友善地表达情感。这类的行为看起来相当表面且没有意义，然而这却是一种有兴趣与他人建立关系的象征。</p><p><code>试验阶段</code><br>在与新朋友有些接触后，下一个阶段就是考虑是否有兴趣进一步追求建立关系。这会涉及一些不确定的推论，也就是需要有一个通过得到更多相关消息来了解他人的过程。一种常见的不确定推论会从基本资料下手，这些基本资料包含常见的基本会话，例如“你从哪里来？”或是“你主修什么？”从这里我们便可以发现自己与他人的一些相似性你也慢跑吗？你一个星期跑几公里呢？”<br>“闲谈”是试验阶段 的最佳保证。就像马可·克奈普说的那样，闲谈就像是防腐液：“我们讨厌它，但是我们却每天都大量地使用它。最后，闲聊还可以提供与他人的联结，有些人甚至还沉醉其中</p><p><code>强化阶段</code><br>在强化阶段 中，我们在第一章所谈到真正的人际关系才开始发展。不同沟通模式在沟通中产生的许多改变，都会发生在强化阶段。对他人的情感变得较为平常，约会的情侣们会用较广范围的沟通战略来描绘他们对吸引力的感觉。<br>但他们更常以不直接的方法沟通：花更多的时间一起度过，要求相互的支持，为同伴做一些有趣的事，给予一些情感的纪念品、暗示和调情，非语言的表达情感，了解对方的朋友及家庭，以及试着有更多生理上的相互吸引，等等。在发展友谊时，强化阶段包括共同参与活动、跟共同的朋友出游或一起去旅行等。</p><p><code>整合阶段</code><br>当关系增强后，团体中的同伴会呈现一种认同，就像在社会单位中一样。在亲密关系中，情侣开始邀约，社会圈开始整合，同伴开始呈现彼此的承诺好！我们将会和你的家人一起度过感恩节。”大家开始以我们的公寓、我们的车以及我们的歌来称呼，同伴们会发展出一种独一无二的行为表现。他们甚至于会说一些个人的惯用语和句型。<br>整合阶段 是我们放弃自己旧有的人格特质，与他人建立分享认同的时刻</p><p><code>结合阶段</code><br>在结合阶段 中，团体中的人会有一些象征性的公开姿态，用来告诉全世界他们的关系是存在的。在亲密关系中，最常见的形式就是婚礼，以及随之而来的合法结合。结合阶段为关系提供社会的支持，风俗和法律两者都会将某些责任加诸在正式结合的同伴上。<br>并不是只有爱情关系才会发展到结合阶段。试想一下签署了合作契约的生意伙伴，或者兄弟会和姐妹会的结盟仪式等</p><p><code>分化阶段</code><br>结合阶段是克奈普称为“聚合期”发展阶段的顶端。但是就算是在最投人的关系中，人们也需要坚持他们独特的自我认同。分化阶段 就是“我们”这个点开始要产生变化转成“我”的时候，也就是“抱紧我”的定位点发生替换，而“放我下来”的信息开始发出的时候。交谈的焦点从“我们”周末计划要做什么转变成“我”这个周末要做什么了，曾经两人都意见一致的理性议题——例如你还是负责赚钱养家而我负责打理家务，现在成为争议之点：我比你还具备生涯发展的潜力，为什么我要被绑在家里?<br>试想一下，一个成年的子女即使想要继续与父母保持良好关系，但同时也想要保有自己独特的生活和认同。分化其实是维持期关系中必然的状态。成功的分化关键在于当我们创造一些空间去成为个体时，还能维持在关系当中的承诺。</p><p><code>各自阶段</code><br>到目前为止，我们所看到的都是成长的关系。有些关系会达到发展中的稳定水准，在一生中继续成功地维持着；有些则是经历几个衰落和瓦解的阶段。<br>在各自阶段中 ，成员的沟通品质和数量都在降低。限制和压抑是这个阶段的特征。成员们选择退缩，而非讨论一个不认同的话题（这是需要两方付出精力）。两方在心理（沉默、做白日梦和幻想）或是生理上（人们花较少的时间在一起）都会划清界线。</p><p><code>停滞阶段</code><br>如果各自持续下去，关系就会进入停滞阶段 。成员彼此用老方法相待，熟悉的方法没有什么感觉，没有成长发生，这样的关系就是空壳。我们可以看到许多在停滞阶段中失去热情的工人，<br>同样悲惨的事也发生在厌倦于同样的对话、同样的人和每天随之而来的例行公事，却没有一点愉快和新奇感的伴侣身上。</p><p><code>逃避阶段</code><br>当停滞阶段变得过分令人不愉快时，团体中的人们就会创造出一种在彼此之间的生理距离，这就是逃避阶段 。有时他们会间接地通过一些伪装的借口来表达（我最近都在生病，没办法和你见面），有时也直接的表达（别打电话给我，我现在不想见到你），这两种迹象都会使关系的前景陷入困境。<br>不成功的伴侣在讨论问题的时候会通过抗拒、间接面对和彼此较少联系的方式；相反的，那些“修补”过关系的伴侣往往以比较直接的方式沟通，他们正视彼此的问题（有时会经由咨询师的协助），花时间尽力地协调问题的解决之道。</p><p><code>结束阶段</code><br>并非所有关系都会结束，许多生涯的伙伴、友谊和婚姻，一旦建立关系之后就会延续一辈子，但是的确许多关系会走到终点而到达结束阶段 。<br>结束是最后阶段的特征，包括远离关系和想要分开的简要谈话。关系也许会通过一顿真诚的晚餐、一张留在餐桌上的纸条、一通电话或是法律文件来结束。根据个人不同的感觉，这个阶段可能非常短暂，也可能需要一段相当长的时间以远离痛苦和彼此攻击的情况.不管花的时间是长是短，结束都不是完全负向的<br>两人分手的方式也会有些不同。如果分手时的沟通是正向的（不后悔花时间在一起，想要减少难过的感觉），比较可能在分手之后维持友谊；如果结束阶段的沟通是负向时（矫揉造作，抱怨他人），想要保有友谊比较困难。</p><hr><p><code>系和自主</code><br>没有人是可以孤独存在的。认识到这个事实后，我们会寻求与他人有联系，但是同时我们也不希望失去全部的自我<br>常见的一些关系破裂的理由集中于伴侣无法满足彼此对联系感的需求上：“我们鲜少有时间在一起”、“他（她）不认同这段关系”、“我们有不同的需求”。但其他的抱怨则显示过度的联系感需求也会带来分裂：“我觉得被困住了”、“我需要自由！”有些研究发现男人比女人更加肯定关系中的自主性，而女人更看重联系和承诺。我们追求的联系与自主辩证程度会随时间改变</p><p>每个人都在重复的表现三个阶段<br>“抱紧我”、“放我下来”、“让我一个人”。<br>这个循环会开始出现在出生的第一年。当孩子从“抱紧我”的婴儿阶段转变到新的“放我下来”阶段时，他们会通过爬行、走路、触碰和品尝来探索这个世界。同一个3岁的孩子，可能在8月时坚持“我可以自己做”，却在9月第一天上幼儿园时缠着父母不放。肖孩子成为青少年时，“让我一个人”的倾向变得很明显，从前很快乐地和家人在一起的孩子现在可能会因为必须和家庭一同度假以及在同一张餐桌上用餐而痛苦呻吟。当青少年成年时，他们通常又会和家庭变得较为亲密。<br>在成人的关系中，这个亲密和距离的循环仍然重复着。在婚姻关系中，“抱紧我”通常是在结婚第一年。随着自主的需求慢慢增强，关系的紧密度也会降低，这种需求可以用各种不同方式表露，包括交朋友的需求、参与不包含配偶的活动或找工作等。这种从联系到自主的转变可能导致关系破裂，但是也可能成为循环的一部分——用新的方式来定义关系，以再次取得存在于过去甚或更加浓烈的亲密</p><p><code>循例和新奇</code><br>稳定是关系中重要的需求，但过多的稳定则会让人感到了无新意<br>虽然太多的熟悉会导致无趣和停滞的风险，但也没有人希望有一个完全没有规则可循的伴侣。太多的惊喜会威胁到建立关系的基础<br>沟通者所面临的挑战是为循例的状态注入一些新奇的需求，使关系保持新鲜和有趣，你稍稍留意便会发现人们用大量停滞来控制这种矛盾的力量。</p><p>上述相对张力的经营，呈现了沟通关系中的挑战，以下便是一些面对这些挑战的方法，有的比较管用而有的则不然。</p><p><code>关系的特性</code><br>关系是经常变动的 　关系并非注定要恶化的，但是就算最紧密的关系也无法保证长期的稳定沟通理论家理查德·康威尔（Richard Conville）描述了这种经常性的改变。这是一种逐步形成的自然关系，同伴关系会经历一些阶段性的循环，虽然到达了一个新的层次，还是会回到先前发生的阶段（如图8-4）。在这个循环中，伴侣会从安全（整合，克奈普的专用语）到瓦解（分化）、到疏离（划清界线）、到再次整合（强化与结合），一直到新层次的安全感。这个循环会不断重复。</p><p>关系需要维持<br>正向：保持关系气氛礼貌而乐观，而且避免批评。<br>▶ 开放：直接说出对于关系的看法，而且袒露自己的需要和看重的事。（第九章会详述自我袒露的细节）<br>▶ 确信：让別人知道——包括以口语和非口语两种方式——他/她对你的重要性，你重视并投入在这份关系中。<br>▶ 社会网络：跟对方沟通能够提供支持和宽慰，这有助于伴侣彼此了解并互相感激，朋友、家人、同事会在感受到陪伴时，减少关系中的压力并满足每个人的需要。<br>▶ 分工：彼此协助度过生命中的低潮，携手完成人生义务，使得生活顺心而重新肯定关系的价值</p><h3 id="对关系做沟通"><a href="#对关系做沟通" class="headerlink" title="对关系做沟通"></a>对关系做沟通</h3><p>内容与关系性信息<br>在第一章你读到的每个口语的陈述都有其内容和关系向度，最明显的大多数信息的元素是陈述他们想传达的内容，好比“这次轮到你洗碗了”或是“我礼拜六晚上好忙啊”都是显而易见的例子。<br>大多数健康的关系是以弹性的方式来决定控制性的分配比率，这会比一边倒地只由其中之一（一高一低的倾斜关系）作决定，或是完全平均分摊责任以形成不真实的平等都要好。通常伴侣之间两人轮流做决定或是两人直接交换角色，例如，维德处理修车、拟定菜单、在会场中灯光音乐等，珍妮则负责预算、如何照顾小孩、跟朋友搭讪招呼维持气氛。当一个决定对彼此都很重要时，其中一方愿意先让一步，因为他知道反正会先苦后甘，当某个议题对伴侣双方都很重要，他们会试着平均地分享权力，但是面对绝境时，两人都会各让一步以便保持整体的权力均衡。</p><h3 id="摘要-6"><a href="#摘要-6" class="headerlink" title="摘要"></a>摘要</h3><p>人们因为各种不同理由建立人际关系，有些理由和沟通者彼此的人际吸引力的程度有关。吸引力可能来自于生理外貌、察觉到的相似性、人格特质上的互补、相互间的吸引力、觉察到的能力以及自我信息的袒露、距离、接触和报酬等。<br>人际沟通在人际关系发展和维持的运作上，两种模式提供出两种不同的观点，阶段发展模式认为人们在聚合期和离散期中的各个阶段出现不同的沟通特质，而辩证张力模式认为在每个阶段中，人们都必须处理许多彼此不同又不相容的需求。两种模式都要面对一些特性，例如都会产生变动、都受文化影响、都必须维持等。当关系因为越界行为而损坏，修复策略和原谅对于双方都是重要的技巧。沟通会出现两种向度：内容和关系向度。关系向度的沟通可以同时包括口语与非口语。关系性信息通常以四种方式呈现：亲切感、即时性、尊重感和控制性。后设沟通是由沟通者之间的关系信息所组成。</p><h2 id="表达亲密感"><a href="#表达亲密感" class="headerlink" title="表达亲密感"></a>表达亲密感</h2><h3 id="关系中的亲密"><a href="#关系中的亲密" class="headerlink" title="关系中的亲密"></a>关系中的亲密</h3><p><code>亲密的向度</code><br>许多亲密关系呈现出四个向度：生理上、理性上、情感上和分享活动；有些亲密关系只呈现其中的一两种；当然还有一些关系并不是亲密关系。熟人、室友以及工作伙伴有可能无法变得亲密；在某些案例中，家庭成员建立出平稳却冷漠的关系。</p><p><code>男性和女性的亲密形态</code><br>就所交换的信息深度而论，女性和女性关系是在自我开放的列表中的最上层，男性和女性关系则位居第二；反之，男人和男人之间的关系牵涉最少的自我开放。在每个年龄阶段，女人都比男人更开放自我，而且分享的信息多半是私人性质且涉及感觉。虽然两性大都会揭露负面的信息，但男性更少分享正向的感觉。<br>男性不像女性如此重视谈话，而是借由一起做些事情建立亲密关系，男性重视实质上的协助，例如某种程度的照顾。研究上谈到大部分的男性的亲密来自于活动而非自我开放。男性对朋友下的定义是：能为你和与你一起完成事情的人。<br>同样的模式也存在于父子的沟通上。一般来说母亲会通过语言向儿子直接表达关爱，或是非语言的亲吻和拥抱；然而父亲就比较少这么直接向儿子表达关爱，他们会通过培养一些兴趣和帮助孩子面对挑战与任务来表达他们的爱</p><p>女性和男性在亲密程度上的差异，能够帮助我们了解一些在性别上所造成的压力和误解。<br>举例来说，如果一个女性认为彼此情绪表露才足以代表情感上的亲密，会将男性通过参与兴趣爱好活动和花时间共处来表达关怀的行为视为“无意义的”。修理漏水的水龙头或是爬山，看起来好像是在拒绝更加亲近，但是对这样想的男性而言却是建立亲密感的机会。<br>同样地，对于性的时间和意义的不同想法也会带来误会。许多女性认为性是一种在关系已经建立后表达亲密的方式；反之，大多数的男性则认为，性是一种创造亲密感的方式。就这种意义来说，在建立关系早期或经历一些抗争后，热衷于性交的男性并不就是男性荷尔蒙狂热的好色之徒，他只是将这样的分享活动视为建立亲密关系的方式。相反的，女性认为个人的谈话是建立关系的方式，而拒绝在情感关系建立之前就先发生肉体上的亲密行为。</p><h3 id="关系中的自我袒露"><a href="#关系中的自我袒露" class="headerlink" title="关系中的自我袒露"></a>关系中的自我袒露</h3><p>通常我们会用我们和他人分享信息的量来衡量人际关系的强度。一些人会引以为傲地声称：“我们之间没有任何的秘密。”某种程度的开放，对他们而言是重要的</p><p><code>自我袒露</code> 是郑重其事地透露与自己有关的信息的过程，这些信息是有意义的，而且不是经常为人所知的。让我们进一步看这些定义。<br>首先，自我袒露必须是郑重其事的，假如你不经意地向朋友提起你对离职或求婚的想法，那些信息并不符合所谓的自我袒露。其次，除了郑重其事以外，这些信息必须是有意义的，自愿地谈到不重要的事实、意见或感觉就像其他那些胡说八道的东西一样，很难算是自我袒露。第三个要求是，这些信息并非每个人都知道。假如你告诉某人你沮丧或是得意的事情，而所有人都知道这些事情，那这也是件没有价值的事。表9-1描述了一些人际关系中自我袒露的特征。</p><table><thead><tr><th>特征</th><th>说明</th></tr></thead><tbody><tr><td>只出现在两人关系中的袒露</td><td>一对一的自我袒露通常比在公开场合较为自在。</td></tr><tr><td>渐进式的袒露</td><td>从少量的自我袒露中增加自信，而后再开放更多重要的信息。</td></tr><tr><td>较为罕见的袒露</td><td>通常出现在关系早期阶段或是关系后期的重要关键时刻，通常较少出现在成熟的关系状态中（此时两人已经互相知之甚详）。</td></tr><tr><td>在正面的关系脉络中的袒露</td><td>用一种建设性的态度会最有效，即使是十分隐私的个人信息，正向关系将有利于这种自我揭露。</td></tr></tbody></table><p><code>自我袒露的程度</code><br>描述了两种沟通方法，可以改变你袒露的程度。<br>举例来说，你和工作伙伴的关系在自我袒露的宽度意指为你愿意表露你生活中的信息，就像你表露的工作信息一样。第二个向度是自愿开放信息的深度 ，就是从非个人的信息，转换为个人的信息。</p><p>根据分享信息的深度和宽度而言，一段关系可以被界定为偶然或亲密。在一段偶然的关系中，广度也许会很大但却无法深入；而在较为亲密一些的关系里，至少会在某一个领域中较有深度。最亲密的关系则是不但有深度也有广度的自我袒露。阿尔特曼和泰勒以模式的圆周到中心的观点来看待关系发展的过程，这样的过程时时在发生。你的每一段人际关系也许都会由不同的主题的广度和袒露的深度组合而成</p><p><code>陈腔滥调</code><br>陈腔滥调 是在社交中公式化且陈腐的回应，实际上就是自我袒露的相反面：“你好吗？”“好！”“见到你很高兴。”等等。<br>虽然听起来非常肤浅表面，但陈腔滥调实际上可以是一些我们不愿意直接表达的信息的代码。另外，在陈腔滥调中的相反信息中，还可能包含“如果你想要的话，我很愿意谈一谈”或“让我们轻松些和客套些，我现在不想袒露这么多有关我自己的事”，等等。<br>伴随着一些非语言线索，一种陈腔滥调的情况会暗示着“我不想不礼貌，你现在最好离我远一点”。在所有这些例子中，陈腔滥调是种有价值的简略表达方法，它使社交转轮保持润滑、变得容易，同时也指出未来更多深切的谈话的可能性</p><p><code>自我袒露的好处与风险</code><br><code>好处</code><br><code>宣泄：</code>有时候，你会袒露信息，努力达到“一吐胸中块金”的坦诚状况，你会愿意为过去不好的行为表达歉意。在本章后段篇幅中你将会读到袒露的原则，使你额外学到在宣泄情绪的同时不仅不破坏而且还增进关系的方法。</p><p><code>互惠：</code>从研究报告中已经获得了完整统一的结论：一个自我袒露的行为会引发另一个自我袒露行为。这并不保证你的自我袒露就一定可以引起他人的自我袒露，但你个人的诚实会使他人觉得安全，甚至于有义务去配合你的诚实层次。有时候，袒露个人的信息会促使他人也这样做。很容易想见到，告诉你的同伴你对关系的感觉（我觉得最近糟透了……）会引起同等程度的坦承。互惠不一定总是轮流进行的：今天你告诉了朋友你在工作上的问题，也许本身也会帮助她在以后对你倾吐她的家庭故事时觉得自在一点。</p><p><code>自我澄清：</code>有时候，你可以在和他人谈论这些主题时表明你的信念、意见、想法、态度和感觉。这种“把问题说出来”的情况会发生在你和心理医师谈话时，但有时却也发生在你和朋友——无论他是酒保还是理发师——谈话时。</p><p><code>自我确认：</code>假如你期待聆听者对你袒露的信息表达认同（我觉得我做了件对的事……），你就是在寻求你对自己行为的认同或信念的确认。再进一步来说，这类自我确认的袒露也是在确认什么是你的自我概念中重要的部分。经由自我袒露来获得自我确认是“出柜”行动中的重要部分，同性恋们通过这个过程确认了自己的性别偏好，并且将这种自我确认的知识跟个人、家庭和社会生活相整合。</p><p><code>认同管理：</code>有时我们会通过袒露个人信息来使自己更有吸引力。有些观察发现，自我袒露是另一种“自我销售”的形式。想象一下两个人第一次会面的情形，不难想象其中一人或两人会以分享个人的信息来展现更多的真诚、兴趣、感觉或表示对对方感兴趣。同样的原则也适用于另一种情境，售货员会说“我做生意一向诚实以对”，这只是要向你表示他和你站在同一阵线。一个刚认识的朋友也许会跟你谈论他过去的点点滴滴，来表示友善和容易亲近的感觉。</p><p><code>关系的维持和增强：</code>有大量的研究支持，自我袒露在成功的关系中所占有的角色。举例来说，自我袒露的品质和婚姻满足之间有很强的关系，同样的关系也适用于人际关系中。当祖父母和孙辈子女真诚且深度分享时，他们之间的联系就会更强。</p><p><code>社会控制：</code>袒露个人的信息会增加你对他人的控制，有时也会增加你对情况的控制。举例来说，当一个职员告诉老板另外一个公司已经跟他主动接头并有意挖墙脚时，他便可能是希望因此而获得晋升并改善工作环境</p><p>但事实上大多数的自我袒露都无法事先预谋。的确有些在谋划后通过自我袒露来达成某种结果的事例，但是如果自我袒露的隐藏动机被对方清楚地看穿，通常会导致负面的结果。<br>自我袒露的动机随着情境差异而各有不同，通常伴随许多因素，影响我们愿意自我袒露的最强烈因素似乎是我们对对方了解的程度。<br><code>当我们自我袒露的对象是朋友时</code>，最重要的理由是想要维持与增进关系。换句话说，我们对朋友自我开放是为了强化友谊关系的品质，第二重要的理由是自我澄清，厘清自己模糊的部分以便加了解自己。<br><code>对于陌生人</code>，互惠是自我袒露最常见的理由。我们提供自己的信息给陌生人，以便更加了解对方，然后才能够决定要不要及如何维持这段关系，第二重要的理由是树立形象。换句话说，我们会为了使自己看起来不错而给陌生人提供自己的信息，至少在朋友交往的初期阶段，这类信息通常都是正面的</p><ul><li>自我袒露的风险<br>A：我觉得我而言你好像不只是一个朋友而已，跟你说实话，我爱你。<br>B：我想我们不要再见面了。<br><code>负面印象：</code>即使揭露自己不会导致拒绝也可能会制造负面印象。<br>A：我一直在想我们应该再养一只狗。<br>B：跟你说句实话，我真的不喜欢狗，我之前一直没告诉你是因为我知道你非常喜欢狗。<br>A：真的吗？我无法想象跟一个不爱狗的人住在一起。<br><code>降低关系满意感：</code>除了受到别人对你所持意见的影响以外，揭露自己还可能导致降低关系的满意感。<br>A：我必须告诉你，我真的不喜欢你整天紧贴着黏在我身边。<br>B：但是我想更亲近你啊！<br><code>丧失影响力：</code>另外一个揭露自己的风险是丧失影响力。一旦你坦承了一个私密的弱点，你就不可能继续像以前一样制造形象来控制别人看待你的方式了。<br>A：（经理对雇员）我是很想让你们周六放假，但是跟你们说实话——我不是要在这里大肆批评或怎样——其实董事长才决定一切，而他根本就不尊重我的意见。<br>B：你不是开玩笑吧！我以为我知道当我需要解决问题时要找谁呢！<br><code>伤害别人：</code>揭露隐藏的信息也许会使你觉得好过一些，但却可能伤及他人，因为她们可能觉得沮丧。<br>A：我长得好丑，我想任何方法都无法改变我的长相。<br>B：这我也没办法。<br>B：你不是开玩笑吧！我以为我知道当我需要解决问题时要找谁呢！<br><code>伤害别人：</code>揭露隐藏的信息也许会使你觉得好过一些，但却可能伤及他人，因为她们可能觉得沮丧。</li></ul><hr><ul><li>自我袒露的原则<br><code>你在道德上有义务袒露吗？</code>有时候我们在道德上有义务必须袒露个人资讯，例如，调查显示大多数HIV带原者认为他们“有义务”告知医护人员和伴侣他们的状况，即使他们知道这将有损他们的形象、尊严或让他们被贴上标签。<br><code>这个人对你而言重要吗？</code>就某些方面而言，这个人对你来说也许很重要。假如你有一段正在持续且够深厚的关系，分享关于自己特别的事情也许正好可让你们现在的关系更加稳固。或者你正想亲近某个先前与你互动较少人，现在你觉得有个建立更亲密关系的机会，自我袒露或许就是帮助人际关系建立的方法。<br><code>袒露的量与方式合适吗？</code> 分享太快又太多的信息通常是个冒险的行为，研究显示：在大多数的关系中自我袒露的过程都是渐进式的，在初期阶段大多数交换的信息都流于肤浅，当双方进入强化阶段、整合阶段或结合阶段的关系中，自我袒露的比率随之增加，但也不是所有情境都一样<br>除了量的恰当与否，自我袒露必须同时兼具正面与负面信息。从头到尾只听到愁云惨雾或怨天尤人的抱怨是很煞风景的事。事实上，一直都在揭露负面信息的人通常会被视为“适应不良”。<br><code>袒露的风险合理吗?</code>即便效益是极大的，将开放自己的某些负面信息仍然会使自己碰上许多麻烦<br>在工作上袒露个人的看法和感觉是特别冒险的。为了要达到组织和个人的目标，在工作场合中沟通者很多时候都需要保留自己的想法。<br><code>袒露对于现状有重大意义吗？</code>自我袒露通常是高度个人关系中的特征而不适用于普通层次的人际关系<br>合适的自我袒露方式应该包含两人的关系而不是个人的信息。此外，最有建设性的袒露方式，是把焦点放在“此时此刻”的关系上，而不是在“那时那刻”。<br><code>有建设性的影响吗？</code> 　如果没有小心地使用自我袒露，它会变成邪恶的工具。每个人都有心理上的“地雷区”，地雷区以下的区域都是每个人最敏感的部分。攻击“地雷区”以下的区域肯定会让他人发火，因此对于关系通常伤害很大<br>诸如“我总觉得你比较笨”或者“去年我和你最好的朋友发生过性关系”，有时会建设性地解决一些老问题，但通常对于听众以及你的自尊都是伤害。<br><code>你的自我袒露是互惠的吗？</code> 　通常你袒露自我信息的量会视他人袒露多少而决定，自我袒露是条双向道路，举例来说，伴侣之间在他们开放程度最平等的时候会感到最快乐。</li></ul><p>最后，当考虑到在任何关系中揭露的恰当性后，时间是不可忽视的重要因素。假如对方已经十分疲累，或是心情奇差，不管多么重要的交谈最好都延后再说</p><h3 id="自我袒露之外的其他选择"><a href="#自我袒露之外的其他选择" class="headerlink" title="自我袒露之外的其他选择"></a>自我袒露之外的其他选择</h3><p>想一想一些熟悉的两难情况吧，然后你就会了解为什么完全的诚实并不常是简单又理想的选择了：<br>一个刚认识你的人有兴趣与你成为朋友，他邀请你这个星期参加派对。你不忙，但你并不想去，你会怎么说？<br>你的老板问你觉得他的新柜子看起来如何，你觉得便宜又俗气，你会实话实说吗？<br>你和好友的配偶相互吸引，你们两个人决定绝对不能感情用事，也不会说出任何使你朋友觉得备受威胁的话。现在你的朋友问你是不是被他的配偶所吸引，你会说真话吗？<br>你从常拜访你家的亲戚那里收到了一份礼物，那是一幅又大又丑的画，你会如何来回应“你会将画挂在哪儿”这个问题？</p><p>例子却显示诚实可能会带来不愉快的结果，要能够在这些情境自我袒露显然非常困难</p><p>当他们发现自己处在一个诚实但不舒服的情况中时，会使用常见的四个自我袒露的替代品，它们是<code>沉默、说谎、摸棱两可和暗示</code></p><ul><li><p>沉默<br>你可以留心一下自己什么时候表达和什么时候不表达自己的意见，你可以通过这个纪录来了解你依赖沉默取代袒露的程度。你可能会发现保留自己的想法和感受是你经常做的事情。</p></li><li><p>说谎</p></li></ul><ol><li><code>保住面子：</code>超过一半以上的谎言是为了防止尴尬，这类的谎言被赋予了大家认同的标签：“圆通”，并且被使用在“诚实会不仁慈，或不诚实却仁慈”的情况下。有时留住面子的谎言是留住接受者的面子，当一个派对中有人跟你打招呼时，你可能为了使他免于被你忘记的尴尬场面而假装认识他。有时候，谎言保护说话的人不至蒙羞。例如，你会掩盖你的错误而归罪于外力</li><li><code>避免紧张和冲突：</code>有时候说些小谎来避免大冲突是值得的。举例来说，你也许会说你没有因朋友的玩笑而生气，以避免你表达愤怒所引发的麻烦</li><li><code>掌控社交反应：</code>有时我们说谎是为了使每天的关系运作顺利。举例来说，你也许会假装很荣幸见到每个你根本不喜欢的人，或是假装对一同共进晚餐伙伴的故事感兴趣，使社交事件顺利点度过。孩子们通常不了解这种技术，对这类社交语言不感兴趣，而这是常让父母亲尴尬的原因。</li><li><code>增进或减少关系：</code>有些谎言被设计来使关系成长；“你要到市中心吗？我正要往那里去，我可以送你一程吗？”在一项研究中，多数的大学生（含男性和女性）会用说谎来增加他们与某个吸引人的同伴约会的机会。他们的夸张和不真诚包括了很多方面，包含他们对爱情的观点，个人的特质、收入，过去的人际关系、工作技能和聪明才智，等等，这使得他们可以和吸引他们的同伴更加相似。<br>有时我们会说谎来减少与他人的互动：“我必须要走了，我要准备明天的考试。”有些时候，人们会用谎言来彻底结束关系你很好，但我还不想定下来。”</li><li><code>得到权力：</code>有时我们会依靠说谎来使情况在我们控制之中。通过表示你很忙没有空来拒绝已经迫在眉睫才来预定的邀约，是一种可把自己放在重要位置上的方法。因为说谎而得到自信的感觉即使是有很好的理由，也都落人到为得到权力而说谎的类型中。<br><code>说谎的影响</code> 　被人发现你说谎会有什么结果呢？在人际互动关系中这种发现会带来很大伤害。<br>谎言的确会威胁到关系——虽然并非所有的谎言都会破坏关系。研究认为，说谎者的动机是否为对方所接受会造成关键性的不同。如果说谎是为了谋取说谎者个人的私利，这种谎言会被视为侵犯；相反的，假如说谎似乎是为了顾全对方的感受，获得谅解的机会就会提升。<br>沮丧和背叛的感觉是最严重的</li></ol><ul><li><p>模棱两可<br>下面是一种<code>幽默</code>的方式，借由模棱两可来回应某个雇主对一个不够格的求职者的询问，向对方提供模糊的信息：<br>对一个懒惰的人：“你很幸运啊。”<br>对一个没有天分的人：“我没有资格给予你任何对他的推荐。”<br>对一个在任何情况下都不应该雇用的人：“别浪费任何时间了（快点雇佣他吧/根本别理他）！<br><code>使接受者免于尴尬的伤害</code>。举例来说，对不感兴趣的邀约，是断然地说“不”还是说“我已经有其他计划”  即使那些计划只是待在家里或看电视？后者显然会仁慈许多。<br>虽然“我从来没有尝过这样的菜”听起来很不准确，但你真的愿意说“这道菜尝起来真糟糕”吗？如果你不愿意说谎，模棱两可以成为说谎的替代方式。<br><code>为说谎提供一个替代方式</code><br>假如一个有可能在将来会成为你的老板的人在面谈时问你关于你成绩的事，你也许会出于稳妥说“上个学期，我的平均成绩是 B”，虽然也许你的整体成绩比较接近 C。这并不是完整的回答，但是它的确是真实的</p></li><li><p>暗示<br>暗示其实比模棱两可更为直接。这是因为模棱两可的说法，不需要注意他人的行为改变，但是暗示的确需要从他人得到好的回应。</p></li></ul><table><thead><tr><th>直接陈述</th><th>保留面子的暗示</th></tr></thead><tbody><tr><td>我太忙了，实在拨不出时间和你沟通。</td><td>我知道你很忙，也许该让你先去忙你的事情，免得打扰到你。</td></tr><tr><td>请不要在这里吸烟，因为这会影响我。</td><td>这里好像是不准吸烟的。</td></tr><tr><td>我想邀请你一起共进午餐，但我不想冒着被你拒绝的危险。</td><td>嗯，快到中午用餐时间了，你有没有去过街角那家新开的意大利餐厅呢？</td></tr></tbody></table><hr><p><code>回避的伦理议题</code><br>事实上许多人就算知道对方是在说谎也会接受，而不是去挑战他们。在某些情况下，隐瞒真相被视为比毫不留情的诚实更合适的行为。举例来说，以下就有一些就算我们知道并不真实也不会去挑战陈述的情况：<br>当我们预期他人会扯点小谎的时候。（你仍然将聆听朋友或亲戚们的离奇故事当作消遣娱乐，就算你知道他们在夸大其词。）<br>当谎言对彼此都有利的时候。（一位逐利的同事也许会与你取得双赢。）<br>当谎言帮助我们免于尴尬的场面时。（你向主人保证这顿饭真是美味，虽然实际上可以说难以下咽。）<br>当谎言帮助我们避免和令人不愉快的真相正面冲突时。（一家人表现的若无其事，其实他们知道家人之中有一个酗酒者。）<br>当我们要求他人说谎时。（一个同伴告诉另一个：“假如你从未对我有过信心，那么请不要让我知道吧。”）</p><h3 id="摘要-7"><a href="#摘要-7" class="headerlink" title="摘要"></a>摘要</h3><p>人际关系的亲密感有四个向度：生理的、理性的、情绪的和活动的分享。性别和文化两者都会影响亲密的表达。亲密感可以同时出现在电子媒介沟通与面对面互动中。并不是所有的关系都与亲密有关，沟通者有必要对什么时候、在哪里、跟谁会产生亲密关系做出决定。<br>一个人际关系中重要的议题是自我袒露的合适方式和程度：诚实、袒露有关自己的信息是有意引导他人自我袒露的沟通，包含一般不能通过资源所取得的信息。社会穿透模式形容自我袒露的两个向度：深度和广度。袒露感觉通常比透露个人意见更深一些，袒露个人意见又比袒露事实更深一些。陈腔滥调是最差劲的袒露。乔哈里视窗模式通常是说明自我袒露的方法。视窗显示了两个沟通者不同程度的袒露会影响在关系中亲密感的程度。袒露个人的信息有许多的好处：宣泄、互惠、自我澄清、自我确认、认同管理、关系的发展和维持、社会影响。自我袒露的风险包括被拒绝的可能性、造成负面印象、降低关系满意感、丧失影响力以及伤害对方。<br>四个替代袒露个人感觉和意见的方法是沉默、说谎、模棱两可和暗示。没有恶意的“白色谎言”有许多功能：为发送信息者和接受信息者保留面子，避免紧张和困境，掌控社会互动，经营关系和得到权力。</p><h2 id="增进沟通气氛"><a href="#增进沟通气氛" class="headerlink" title="增进沟通气氛"></a>增进沟通气氛</h2><h3 id="沟通气氛：正向关系的关键"><a href="#沟通气氛：正向关系的关键" class="headerlink" title="沟通气氛：正向关系的关键"></a>沟通气氛：正向关系的关键</h3><p>沟通气氛的预测并不是一个十分精准的科学技术。它也不像天气一般完全不受控制，人们可以试着在他们的关系当中，改变沟通气氛。</p><ul><li><p>肯定和不肯定沟通<br>以美学的观点来说，信息属于肯定还是不肯定要取决于旁观者（听信息的人）<br>以下有三种增加正向信息的方法，它们有助于让你所传达的信息受到别人的认同。<br><code>重视表达</code><br>肯定信息最基本的动作就是重视另外一个人。尝试对别人做一些基本的回应吧，例如写信、拜访甚至是回一通电话等等。<br><code>承认</code><br>“承认”别人的观点与感受，是对于肯定的沟通一种比较有力的形式。比较积极的“承认”则包括了：问问题、确认问题、反映问题，等等。<br><code>赞同</code><br>“承认”表示你对别人的意见很有兴趣，“赞同”则表示你同意他们的意见，且觉得这些意见是重要的。<br>例如，当你无法对你的朋友突然生气产生认同的时候，或许你可以试着用“我能了解你为什么这么生气”来和他沟通。毫无保留的赞美也是表现支持一种很有力的形式，当你找到机会赞美他人的时候，你不妨试着使用它。</p></li><li><p>七种不肯定信息的类型<br><code>视若无睹</code><br>就像你刚才读到重视是最基本的肯定信息类型，相对的，无视于他人与自己沟通的尝试是“视若无睹”的特征。<br>被忽视比误解或攻击更不被肯定。<br><code>口头辱骂 </code><br>“口头辱骂”是负向反应中最常见的典型，这样的沟通可能会引起他人心理上的痛苦，尤其当口头上的辱骂出现在互动关系时。它很难成为一种单向的情绪抒发，而会对他人造成伤害。但是，不一定每次的辱骂都是直接公开的，有时可能被包装成含有敌意的幽默或讽刺，例如：<br>“胖子，过来一下。”<br>“你可真够贱的！”<br><code>概括抱怨</code><br>特定的抱怨可以使问题明朗化，但是概括性的抱怨经常是一种不肯定信息，因为其中经常隐含着对别人个性的挑剔<br>“我希望你友善一点！”<br>“你为什么不自己收拾干净？”<br>“你的态度可不可以好一点？”<br><code>插嘴</code><br>在别人尚未说完话之前就随意插话会给人不关心对方谈话内容的感觉<br><code>各说各话</code><br>谈论与他人说话内容无关的事情是一种“各说各话”的表现<br><code>岔题</code><br>在会话当中，我们用“剪接”来表现出“岔题”的现象。除了完全忽视说话者的谈话内容外，还有些人会用这种方式来转移话题，例如以下的对话：<br>A：我想知道你要到哪里去度假？如果不赶快想出来的话，可能会订不到旅馆的。<br>B：嗯……如果我的功课没完成的话，我去哪里心情都不会好的，你要不要帮我做作业？<br><code>无人情味</code><br>“无人情味”的表现总是跟随着一些陈腔滥调，并不真正对说话者的言语作回应，例如以下的对话：<br>A：我待会有点私事，下午要早点下班去处理。<br>B：喔！是啊！我们每个人都会有私事，就像时钟总是一定会有指针一样。<br><code>含糊其辞</code><br>“含糊其辞”指的是言语中不只包含一种意思，对别人的回应留下模棱两可的结果，例如以下的对话：<br>A：我想尽快见到你，星期二如何？<br>B：可能可以？A：怎么样？星期二到底能不能和我见面？<br>B：也许吧？到时再说吧！<br><code>表里不一</code><br>“表里不一”的反应包含了两个矛盾冲突的信息，通常至少有一个信息是非口语的，例如以下的对话：<br>A：亲爱的，我爱你！B：我也爱你。（咯咯地笑）</p></li></ul><hr><ul><li><p>沟通气氛如何发展<br>有研究描述螺旋如何在关系中运作，这个运作增强了“种豆得豆，种瓜得瓜”的原则。<br>例如，在一个对已婚夫的调查当中，每对配偶争执的情况都大致相同：安抚的话语（如提供支持、承担责任、表示认同等）通常会得到安抚的回应，冲动的行为（如恶意批评、敌意的质问、挑错误等）也常会引起冲动的反应。<br>同样的行为也还包括了其他种类的沟通信息，如逃避导致逃避，分析招致分析，等等</p></li><li><p>负向对应的类型例子</p></li></ul><table><thead><tr><th>类型</th><th>例子</th></tr></thead><tbody><tr><td>彼此抱怨</td><td>A：我希望你不要这么自我中心！B：好啊！不过我希望你不要这么吹毛求疵！</td></tr><tr><td>各执己见</td><td>A：为什么你对课长这么无情？她是个好老板。B：你在开玩笑吗？她是我见过最厉害的骗子！A：你去看看别人的情况，你就会知道自己遇到一个好老板！B：你也一样！</td></tr></tbody></table><p>|彼此漠不关心|A：我不管你要不要待在这里，我已经筋疲力尽了，我现在就要离开这边！B：要走就走吧！记得找到回家的路！|<br>|涉及后设沟通的争论|A：我如何在你本听的时候和你讲话？B：我如何在你不讲的肘候听你讲话？|</p><ul><li>正向对应的类型例子</li></ul><table><thead><tr><th>类型</th><th>例子</th></tr></thead><tbody><tr><td>确认对方的观点</td><td>A：这个工作真令人困惑，没有人知道我们应该怎么做。B：我可以了解它为什么这么含糊不清，让我解释一下……</td></tr><tr><td>承认相似点</td><td>A：我不相信你要去度过一个这么昂贵的假期，我们应该多存一点钱，而不是一直浪费！B：我同意我们应该节省一点，但我想我们去这一趟旅行，仍然可以存一些钱，让我算给你听……</td></tr><tr><td>支持</td><td>A：我快要被这个工作逼疯了！我当初以为这只是个暂时性的工作，我需要立刻去做一些不伺的事情！B：我可以了解你有多么讨厌它。我算一下我们要如何定下计划，让它立刻就可以结束，使你踏上正常的轨道。</td></tr></tbody></table><h3 id="防卫：原因与对策"><a href="#防卫：原因与对策" class="headerlink" title="防卫：原因与对策"></a>防卫：原因与对策</h3><ul><li><p>防卫反应的类型<br><code>口头侵犯：</code><br>有时，被批评的人会马上用口头侵犯来攻击批评者我哪里邋遢了？反而是你用牙膏把洗脸盆弄得一塌糊涂，还把整个房间弄得都是脏衣。”<br>这样的回应不但免于承认最初的批判是否真实，还马上将过错推到批评者身上。但是对方有可能会马上切断这样的话题你没有资格批评我的.脏乱，至少我都是准时交房租的！”再一次的，在不用承认攻击是否正确的情况下，解除了不一致的困扰。<br><code>讽刺：</code><br>反击有时候会以讽刺来进行掩饰，幽默的讽刺信息是一种较不直接带有侵略意味的表现。“我还真应该感谢休息的时候可以和你一起看肥皂剧和吃垃圾食物来消磨人生呢！”<br>讽刺的回应会因为机智和快速的思考而有较高的效果，不过它那具有敌意、不肯定的本质，可能会导致反击，甚至创造出一个相互破坏的防卫性螺旋。</p></li><li><p>扭曲批评的信息<br><code>合理化：</code><br>合理化是根据逻辑学所创造出来的，也就是说为自己所不能接受的行为找出另外一种不正确的解释来让它看起来较为合理。例如：“我很想帮你解决问题，不过我真的得去念书了。”你会用一种合适的方法来躲开一个你不想做的事情。<br><code>补偿：</code><br>补偿是借由强调自己较强的一面来掩盖软弱的那一面。<br>例如，一位内疚的家长总会诉说自己已经如何尽力来维持表面的尊严：“我或许不能赚很多的钱，不过我总是给孩子有足够的钱让他可以买到最好的东西。”同样地，你可能会试着用同样的方式来向自己和他人证明你是一个很好的朋友：“对不起，我忘了你的生日，不过你上次说在找工作，我这几天帮你留意了一下！”用最多的行动来补偿他人虽然是没有错的，但当这些行为的背后缺乏真诚的动机时，所能维持的只是一个虚伪的表象，并且很容易为关系带来伤害。<br><code>退化：</code><br>另外一种用来躲避面对攻击的方法就是表现出无助，声称你不能做一些事情，而事实上那些是你不想做的事情。“我想和你建立关系，但总是不成功，也许是我还没有准备好。”“我希望我能把这件事情做得更好，但我就是不行，我真的还没完全了解。”退化就是用“不行”这个字来取代“不要”。在很多例子当中，“这不是我的错”这样的话很明显只是个谎言而已</p></li><li><p>躲避刺耳的信息<br><code>压抑：</code><br>有时候我们会在心理上压抑住那些刺耳的信息。举例来说，你或许明知道应该去和朋友、老板或教练讨论一些问题，而当这些问题浮现的时候，你却让它们滞留在脑海中。这可能让你在面对批评的时候还压抑着这些问题，不断地变换话题，表现出好像你才刚刚了解的样子，甚至假装你根本没有听到这些批评……以上种种都是属于压抑行为的例子。<br><code>漠不关心：</code><br>漠不关心是另外一种躲避的回应方式，意味着承认那些令人不愉快的信息，却装出无动于衷、一点也不在意它的样子。例如，在朋友批评你的情况下，你可能依然静静地坐在那里，好像这些言论丝毫不会影响自己的心情一样。同样地，当你失去一份工作的时候，你可能也是一副毫不在乎的模样：“谁在乎？不过是一份很愚蠢的工作罢了。”<br><code>替代：</code><br>我们会对看似较不具威胁感的人或事物发泄出侵略或不友善的情感，以平衡最初我们在较具威胁感的人或事物上所受到的挫折，这就是替代。例如，你可能被你的老板给激怒，但是与其冒被炒鱿鱼的危险，倒不如选择把这样的愤怒转移到和你住在一起的人身上，对着他们大吼大叫。</p></li><li><p>防止对他人防卫<br>其实，当你心中对某人有满腹牢骚的时候，你应该学着如何去表达自己真实的面貌<br>在内容的层面上你可以表现出对他人的不满，但是在关系的层面上不管是口头还是非口头的你对他/她的重视。</p></li></ul><p>吉布的防卫性和支持性行为分类表</p><table><thead><tr><th>防卫性行为</th><th>支持性行为</th></tr></thead><tbody><tr><td>评价</td><td>描述</td></tr><tr><td>支配</td><td>问题导向</td></tr><tr><td>策略</td><td>自发性</td></tr><tr><td>中立</td><td>同理</td></tr><tr><td>优越</td><td>平等</td></tr><tr><td>确定</td><td>协商</td></tr></tbody></table><p><code>评价和描述</code><br>吉布指出，第一种唤起防卫的行为是“评价式沟通”。大部分的人会在争吵中感到生气，他将这解释为缺乏尊重的结果。有一种评价的形式是“你”这个让我们来对照一下“评价式语言”中的“你”信息和“描述式语言”中的“我”信息所反映出来的差别：<br>评价 ：你不知道你自己在说些什么！<br>描述 ：我不明白你所要表达的意思。<br>评价 ：你这地方真乱！<br>描述 ：如果你不打扫，我们的生活会很脏乱，这点让我有点生气。<br>评价 ：这笑话真令人作呕！<br>描述 ：我真的很不喜欢这些下流笑话</p><p>在描述式语言的情况下，焦点被放在说话者的想法和感受上。有些人会对你说的话、做的事表现出防卫式的反击，而描述别人的行为对你产生的影响，会比直接判定别人对你的攻击来得适当。</p><p><code>支配和问题导向</code><br>这些支配的意念会出现在文字、姿势、声调或者其他种种的渠道上，无论是经由地位、莫名的坚持、僵硬的规则还是体力上的优势，最终都要达到其控制的目的，这种控制者不管走到哪里都容易引起别人对他的敌意。<br>以下的言语就表现了这样的态度：“我知道什么对你最好，如果你照着我的话去做，事情就会成功。”<br>支配 ：你接下来两小时最好离电话远一点。<br>问题导向 ：我在等一通重要的电话，想麻烦你一下，让电话暂时保持畅通不占线。<br>支配 ：只有一个办法来解决这个问题了，那就是……<br>问题导向 ：看起来我们有点麻烦了，看看我们能不能共同找出两全其美的办法。</p><p><code>策略和自发</code><br>策略 ：你星期五下班后要做什么？<br>自发 ：我星期五下班之后要搬钢琴，你可以帮我的忙吗？策略 ：汤姆和朱迪每周都会外出晚餐。<br>自发 ：我希望我们可以偶尔外出晚餐。</p><p><code>中立与同理</code><br>中立 ：你不好好计划就会发生这种事。<br>同理 ：唔，事情的发展好像跟你预计的不一样。<br>中立 ：有时候事情就是会出错，没办法。<br>同理 ：我知道你花了好多时间和心血在这个计划上，但有时候事情确实不能顺着我们的意。</p><p><code>优越和平等</code><br>优越 ：你根本不知道自己在说什么。<br>平等 ：我用不同角度看这件事情。<br>优越 ：不，这不是这件事的正·确·作·法。<br>平等 ：如果你愿意的话，我可以告诉你我曾经用过的有效方法。</p><p><code>确定和协商</code><br>确定 ：那绝对行不通的<br>协商 ：我想你用那个方法可能会出点麻烦<br>确定 ：你不知道自己在说什么<br>协商 ：我以前没听过这个想法，你是从哪里听来的？</p><h3 id="保留面子：清晰信息处方"><a href="#保留面子：清晰信息处方" class="headerlink" title="保留面子：清晰信息处方"></a>保留面子：清晰信息处方</h3><p>用肯定的方法陈述你的需要、想法和感受，清楚直接又不至于让别人感到被评断和命令。</p><p><code>行为</code><br>下面是两个行为描述的例子：<br>例1 ：<br>“一个星期前约翰向我承诺，和我共处于相同的房间时他在抽烟之前会先获得我的同意。刚刚他没有经过我的允许，就点了一根烟。”<br>例2 ：<br>“克里斯在上星期跟往常很不一样，从上周末起我就没见过她的笑容。她不像以前那样顺道来我的住处，没有提议一起去打网球，也没有回我的电话。”<br>注意，这两个例子中的描述陈述只记录了对感觉是有益的资料。观察者没有添加任何附带的意义。在一项检验伴侣间冲突的研究显示：描述问题而没有情绪语言是具有价值的。</p><ul><li>解释<br><code>解释的陈述</code><br>例1 ：<br>解释 A：“约翰一定是忘记了我们的约定，就是有关他没有询问我之前是不能抽烟的事。我确定在他知道我特别在乎的那些事情上他不是会食言的人。”<br>解释 B：“约翰是不礼貌、不考虑别人的人。他和我约定过在问过我之前不能在我身边抽烟。他是故意在我面前抽烟的，这显示他只关心他自己——事实上，我敢打赌他是故意在做这件事，目的就是要把我逼疯。”<br>例2 ：<br>解释 A：“一定是有些事在困扰着克里斯，可能是她的家庭吧。假如我持续打扰她，她可能会感觉更糟糕。”<br>解释 B：“克里斯可能在生我的气，可能是因为我取笑她打网球时总是输球。我想我最好让她一个人冷静一下。”</li></ul><p>当发送信息者没有在他所解释的事实基础上先做行为描述时，就会发生许多问题<br>一如清楚地描述行为一样重要，解释也必须把自己推论的过程说得非常清楚，而不是只根据事实做解释而已。</p><p>“这是很明显的，假如你关心我，你就应该更常写信给我”。（只根据事实做解释 ）<br>“当我不能从你那边收到信或是卡片时，我想那是因为你不够关心我。”（把推论过程解释得更清楚 ）</p><p><code>感觉</code><br><code>结果</code><br><code>意图</code></p><ul><li>使用清晰信息处方</li></ul><ol><li>相关元素的顺序可能会乱序传达。</li><li>信息的字词要符合你的个人风格。通常我们不会说：“我解释你的行为意指……”，你可以选择说：“我想……”或“这对我来说……”或是“我有个想法……”。</li><li>适时地将两个因素联结在一个句子里。“……从那之后我一直想要告诉你”这样的陈述就同时表达了结果和意图。相应的，当你说“……在你那样说了之后，我觉得很困惑”时，你表达了结果陈述和感觉陈述。</li></ol><h3 id="对批评以不防卫回应"><a href="#对批评以不防卫回应" class="headerlink" title="对批评以不防卫回应"></a>对批评以不防卫回应</h3><ul><li>寻找更多信息<br><code>询问详情</code><br>事实上，在批评当中，那些模糊不清的攻击是没有价值的，即使你由衷地想要改变它也是徒劳无功。诸如“你不公平”或是“你从来不伸手帮忙”之类的抽象攻击是很难被了解的。在这样的例子中，询问传达者给予更详细的信息会是一个好的方法。“我在什么地方不公平了？”</li></ul><p><code>推测详情</code><br>在有些情况之下，即使你用真诚、得体的言词去表达进一步信息的渴望，仍然不见得会有成功的结果。</p><p>下面一段对话正是一位聪明的管理者是如何利用“释义”来应对一位不高兴的客人的：<br>顾客 ：你管理的方法真差！我只想告诉你，我以后再也不会来这里消费了！<br>老板 ：（反映出顾客的心情）你看起来似乎心情很不好，告诉我你的问题，好吗？<br>顾客 ：不是我的问题，是你的店员有问题。他们似乎觉得要帮顾客在这里找个东西是件很麻烦的事。<br>老板 ：所以你在找你要的东西时得不到足够的帮助，对吗？<br>顾客 ：帮助？在我终于能够和店员说话前，我已经在这里绕了将近二十分钟了。我只能说你经营的方法真是烂透了！<br>老板 ：所以你的意思是，店员忽略了客人？<br>顾客 ：对！他们正忙着招呼其他的客人。我只是认为你应该有足够的人手来应对这个时段拥挤的人潮。<br>老板 ：现在我明白了。你不满意的地方就是我没有足够的人手来迅速为你服务。<br>顾客 ：是的。我现在对于服务没有抱怨了，我比较恼怒的是要一直等在那里我总是告诉自己我可以在这里找到想要的东西，但我太忙了，没有时间等很久。<br>老板 ：谢谢你让我注意到这个缺点。我也不希望让老顾客等太久，我会尽力不再让同样的事情发生。</p><p>“释义”的两个好处：首先，通常持批评态度的人在领悟到他们的抱怨有人倾听的时候，会减少自己强硬的态度；此外，批评者通常会在他们的需要没有得到满足时，增长他们的挫败</p><p>询问批评者要的是什么在某些时候，批评你的声音很明显地传达出他们的需要。</p><ul><li>同意批评者的看法<br><code>同意事实</code><br>这是一种在争吵中比较容易了解的类型，但是它不常被使用。研究者认为这对恢复批评中被损害的声誉有很大的效果。<br>如果你和别人约了四点在某个地方见，但是到了五点你仍然没有出现，无论你对你的迟到做什么解释，你还是迟到了。<br>你就必须同意别人对你这些行为所做的解释，即使这些解释并不讨喜。<br><code>同意批评者的观感</code><br>当你承认对你的批评是根据事实时，同意批评你的人可能是一件健康的事情。<br>即使你的行为不适当仍然有可能是被理解的。当这种情形发生的时候，<br>你可以不带任何道歉的承认批评者所说的话：<br>“你是对的，我的确没有控制好我的脾气。我已经提醒过你三四次，最后我想我是用尽我的耐心了。”（再一次的，传达出解释而非防卫或反击的信息）在其他的例子中，你可以用不同的观点来看待批评当中正确的地方，而不一定要失去自己的立场。<br>“我可以了解为什么你会认为我反应过度，我知道这对你来说并没有像对我一样重要，但是我希望你可以明白，我为什么这么重视它。”</li></ul><p>有诚意的道歉是十分健康的；然而，倘若你能了解到做这样的事情并不需要卑躬屈膝，也许你会更容易去同意批评者的言论。</p><h3 id="摘要-8"><a href="#摘要-8" class="headerlink" title="摘要"></a>摘要</h3><p>每一段人际关系都会形成一股沟通气氛。正向气氛的特征是肯定的信息；反之，负向气氛通常使用不肯定的信息。沟通气氛是由人际关系发展而来的，特别是从口语和非口语的信息。在沟通气氛形成之后，相互作用的信息会创造出正向或者负向的螺旋，在这样的螺旋当中，正向以及负向信息的频率和强度会不断增长。</p><p>防卫是一种最具毁灭性的沟通类型。当潜在具有威胁性的信息出现时，使用杰克·吉布所提出的支持性行为有助于降低触发他人防卫心的可能。此外，我们可以运用清晰信息和保留面子的方法来和别人分享我们的想法和感受。完整而清晰的信息描述措词包括：以提问来描述行为，至少提出一个解释，表达说话者的感受，描述情境的结果和说话者的意图。</p><p>当你面对他人的批评时，试着借由认同评论当中的事实以及批评者的观点来了解批评当中的含义，这对你用非防卫的反应来回应这些指责有所帮助。</p><h2 id="处理人际冲突"><a href="#处理人际冲突" class="headerlink" title="处理人际冲突"></a>处理人际冲突</h2><h3 id="冲突的本质"><a href="#冲突的本质" class="headerlink" title="冲突的本质"></a>冲突的本质</h3><ul><li><p>冲突的定义<br><code>广泛的定义：</code>一种表达出来的挣扎，在至少两个相互依赖的个体之间，感觉到不相容的目标、不足的资源和达成自己目标时来自另一个个体的阻挠。<br><code>表达出来的挣扎</code> 　当两个个体察觉意见不合时冲突便成立了。例如，你持续好几个月都感到烦躁，因为邻居的立体声音响使你整晚都睡不着，但是直到邻居了解你的问题之前是没有冲突存在的。<br><code>感觉到不相容的目标</code> 　所有的冲突看起来似乎都是其中一个个体有所获得，而另一个个体有所失去。例如，想一想前面因为音乐音量而引发的分歧，不正是会有某人失去吗？假如邻居关掉这些噪音，她就会失去以大音量听音乐的快乐；但假如她继续让声音高扬，你就会睡不着并且不高兴。<br><code>知觉到不足的资源</code> 　冲突也因人们认为没有足够的资源而存在，最明显的例子就是金钱不足。金钱是许多冲突的来源。假如一个工人要求加薪，而老板宁愿维持现状，或将资金用于扩展个人事业，那么这两个人就会产生冲突。<br><code>另一个经常不足的资源是时间。</code><br>一天只有24小时，我们的家人、同事和朋友所需要的时间远超过我们所能给予的时间量，所以大家都被捆绑在冲突的紧张之中。<br><code>其他个体的阻挠</code> 　不论一个人的立场和另一个人有多么的不同，冲突也不会随随便便就发生，除非一个个体对另一个人的目标产生了阻挠。<br>也许父母看不惯孩子的穿着品位，但只有当父母要将自己的衣着理念强加于孩子身上时冲突才会爆发。</p></li><li><p>冲突可以是有益的</p></li></ul><p>不快乐的伴侣的争论方式是一种破坏性的沟通。比起问题导向的沟通，他们更在乎于防卫他们自己，他们不能仔细聆听方，在对待伴侣时完全没有同理心或只是稍微关注对方，使用“你”信息语言，忽视对方的非口语和理性的信息</p><p>满意的伴侣，则在争论时产生不同的思考和沟通。他们认为意见不同是健康的，并且认为需要直面冲突。虽然他们会发生强烈的争论，但是他们使用一些技术，像是知觉检核去发现对方在想什么，他们让对方知道他们看到争论的另外一面，并愿意去承认他们的错误，这有助于关系的和谐，也有助于去解决手边的问题。</p><h3 id="冲突的类型"><a href="#冲突的类型" class="headerlink" title="冲突的类型"></a>冲突的类型</h3><p>例子：<br>—保罗和露西亚两人如何处理问题。保罗和露西亚两人一起跑步已经一年多了，每周三次，每次花一个小时以上。这两个跑者颇为相配，他们互相挑战用更快的速度跑更远一点的距离。他们在跑步时的距离变得越来越近，慢慢地他们开始谈论一些从来不曾跟别人说过的个人事情。<br>最近露西亚开始邀请一些她的朋友加入跑步。保罗喜欢露西亚的朋友们，但是他们不是体力健壮的运动员，所以跑步的过程变得有点不过瘾，而且保罗担心会减少像之前一样和露西亚的一对一的谈心时间。<br>保罗跟露西亚谈到自己这个想法，但是露西亚不以为然，她回答说：“我看不出有什么问题，我们还是有许多时间一起在路上跑，而且你自己说过你喜欢我的朋友。”保罗于是回答说但是这不一样啊！”</p><hr><p>这个情境出现了所有冲突元素：<br>表达出来的挣扎（他们的差异已经显现，两人各持有歧见），<br>两个相互依赖的个体（他们享受彼此做伴的感觉而且一起跑比单独跑效果更好），<br>感觉到不相容的目标（露西亚想邀朋友一起跑步，而保罗只想和露西亚独处）,<br>不足的资源（他们只有这些时间可以用来跑步）。</p><p>这里有五种方法来处理保罗和露西亚的事情，每一种都呈现出某种处理冲突的取向：<br>▶ 他们可以说“那就算了吧”然后不再一起跑步。<br>▶ 保罗让步，牺牲他想要跟露西亚独处的时间和有默契的速度。或是露西亚让步，牺牲她其他的朋友只维持跟保罗的友谊。<br>▶ 其中之一发出最后通牒照我的意思，否则就不要再一起跑步。”<br>▶ 他们可以互相妥协，有些时候邀露西亚的朋友一起跑，有些时候不邀那些朋友。</p><p><code>逃避（双输）</code><br>逃避可能是生理的（在发生争执之后故意绕开他身边）或是言语的（改变话题、开玩笑或否认问题的存在）。<br>逃避反映出对冲突的悲观态度，抱持着没有好方法可以解决这个问题的信念，其中没有人会获得任何满足。</p><p>虽然逃避可以暂时保持和平，但是却最容易导致不满意的关系。</p><p>逃避也不是一无是处，假如说出来的风险太大——比如会引发一场尴尬的公开争执，或甚至让人遭受生理的伤害，再或者你认为这段关系不值得付出努力以避免冲突，那么逃避某些特定的议题或情境也许也是合理的。</p><p>并不是说成功关系的关键就是要忽视所有的冲突，相反的，反而是要将精力集中在解决重大的冲突议题中。</p><p><code>调适（一输一赢）</code><br>调适 发生在当你允许别人用其方法甚过坚持自己的方法，<br>调适者比较少关切自己却对别人比较关切，导致输一赢的结果，和“按照你的方法做”的让步。<br>例子，保罗会调整自己配合露西亚，让她的朋友加入他们的跑步活动，即使这样会使保罗减少生理的训练挑战和失去与露西亚有默契的相处，或是露西亚调整自己配合保罗，只跟保罗一个人跑步。</p><p><code>竞争（一输一赢，有时会转成双输）</code><br>调适的反面是竞争<br>这种对冲突的赢一输取向只在乎自己而忽略别人，竞争者以“我的方法”来寻求解决冲突之道。假如保罗和露西亚两人都强迫对方让步的话，可能其中之一会获胜，另一方会成为输家。</p><p>人们用这种竞争的一输一赢的方法来解决冲突，通常是因为他们感觉到一种“不是……就是”的情况：不是我拿到我想要的，就是你拿到你想要的</p><p>有些情况下竞争会促进关系。<br>例如，有些人在游戏中竞争可以获得满足（谁是比较厉害的板球高手？）</p><p>把竞争定义为正向关注而不是将竞争视为缺乏欣赏和尊重的信号。当然，如果赢的得意忘形而输的恼羞成怒，可以想见将很可能擦枪走火；而如果你在竞争中一直处于劣势，则可能不惜形成一个负面竞争的螺旋，而使关系降级成为双输的局面。</p><p>被动攻击 　当沟通者用一种含糊的方式表达敌意时就可能产生被动攻击。</p><p>在我们的场景中，露西亚可以对保罗的期待做出被动攻击反应，表面上顺从保罗可是却经常迟到以激怒保罗；保罗也可以对露西亚做出被动攻击反应，表面上接纳露西亚的朋友，然后故意拉开距离把他们甩在后面。</p><p><code>妥协（部分双输）</code><br>妥协至少给予双方少数他们想要的东西，虽然双方也都牺牲了一部分目标。当事情看起来只能达到部分满足、而且似乎最好也不过是部分满足两人时，人们通常会选择妥协</p><p>在保罗和露西亚的案例中他们就可以直接用“各取一半，轮流满足”的方式，有时只有两人一起跑，有时跟露西亚的朋友们一起跑，就不会像逃避方式两人都有所损失，都不去碰问题。</p><p>某些妥协的确使得双方都满意。你可能在销售员出的价钱和你所谈的价钱之间谈妥一辆二手车的价钱，虽然两个人都没有得到最想要的结果，但是结局仍然使得双方满意。类似的情况，你和你的同伴也许会同意一起去看一部第二优先选择的电影，以便两人可以共度一晚，为了彼此也为了一起共进晚餐</p><p><code>合作（双赢）</code><br>合作是对冲突寻找双赢的解决之道。合作表示同时高度关心自己和别人，而不是用“我的方法”或“你的方法”来解决问题，他们重视的是“我们的方法”。最佳合作状况会带来双赢的结果，大家都从中得到自己想要的</p><p>合作的目标是找到跟冲突有关的人都满意的解决之道。这不仅仅是去避免最坏的结果，而是他们相信经由共同努力，是有可能找出解决之道，超越妥协而使得每一个人都达到自己的目标。</p><p>一对新婚的夫妇发现他们经常为了怎么花钱而产生争吵。丈夫很喜欢为自己或家里摆设买一些不实际却很有趣的东西，太太却担心这些支出会破坏好不容易才建立起来的预算计划。他们的解决之道是每个月都列出一小笔钱作为“娱乐支出”，这笔金额不至于超出他们的负担，又可以给丈夫一点机会逃出紧缩的生活稍微透一口气；而太太也可以接受这样的安排，因为有一类预算单独用做“娱乐”开销，这样在丈夫买些不是预期中的东西时就能够摆脱“超出预算”的不安。这个计划成功地实行了很多年，而当两夫妻收入增加时，“娱乐支出”类的预算也随之增加。</p><p>不同的人会发现其他更符合他们的解决方法。合作的方式给你提供了一条路，让你依靠创意发现那些只适合于你独特问题的正确答案。</p><hr><p>哪一种方式最好？<br>当你决定使用哪一种适合的沟通方式时，要考虑下列几点：</p><ol><li><p>关系：当某人比你有更多的权力时，调适的沟通也许是最好的方式。假如老板告诉你“立刻”去填订单，也许没有任何异议地去完成它是比较聪明的回应。</p></li><li><p>情境：在每一段关系中，不同的情境会对应出不同的冲突。为了一部车而历经数小时的讨价还价之后，最好的方式可能是在双方的开价中折中妥协；可是在另一种情况下，你可能会碰上原则问题，而必须“坚持己见”来证明自己是对的。</p></li><li><p>对象：双赢是个不错的方式，但是有时候对方不见得愿意合作。你可能遇过一些充满火药味的人，完全无视于关系的重要性，即使是微不足道的小事都要争得面红耳赤。遇到这种人，你想要用合作性沟通成功机会将非常低。</p></li><li><p>你的目标：有时候你首要关心的是让愤怒或不安的人冷静下来，比如：家中成员也可能对你的唠叨选择安静以对，而不是去破坏感恩节晚餐。</p></li></ol><h3 id="关系系统中的冲突"><a href="#关系系统中的冲突" class="headerlink" title="关系系统中的冲突"></a>关系系统中的冲突</h3><p>冲突是相互关联在一起的，通常由个体和他人的互动所决定。举例来说，你也许想要和你的邻居以肯定的方式处理冲突，但是邻居的不合作态度驱使你用攻击的方式处理。当邻居出现肢体威吓时，你甚至会用非肯定方式去处理。冲突并不是全部依靠个人的选择而来，反而是依靠个体之间互动的方式</p><p><code>互补的、对称的和平行的形态</code><br>“攻击一逃避”的互补方式普遍存于大多数不快乐的婚姻之中。一位伴侣——多半是妻子——直接传递冲突，另一个——通常是丈夫——会退缩。显而易见的是，因为两人应对冲突的方式不同，导致了敌意增加和隔绝，而变成一种循环；彼此责备则使事情更糟。丈夫可能会说我退缩是因为她是这样批评我。”而妻子可能认为：“我批评是因为他退缩。”</p><p>一些痛苦婚姻也来自缺乏建设性的对称式沟通。假如伴侣双方以类似的敌意彼此互相对待，一个威胁或侮辱导致另一个威胁或侮辱，最终会形成螺旋式的增长。假如伴侣双方都用退缩的方式取代直面问题，关系中的满意和持久也会日渐衰落，之前的自我也将杳无踪迹。</p><p>互补和对称的两种行为，可以产生好的结果也可以产生坏的结果。</p><p>行为是正面的，那么将形成一个正向的螺旋结果</p><h3 id="建设性处理冲突的技巧"><a href="#建设性处理冲突的技巧" class="headerlink" title="建设性处理冲突的技巧"></a>建设性处理冲突的技巧</h3><p>描述你的问题和需求<br>“我有一个问题，在你没有事先打电话就顺道来访时，我正在念书（行为 ）。我不知是要邀请你进来还是请你离开（想法 ），这两#方式都让我觉得不妥当（感觉 ）。感觉好像不管我怎么做，我都是输家：我不是得把你赶出去，就是得要抛下我的功课（结果 ）。我想找到一个方式，使我可以读完我的书，但是仍然能够招待你（意图 ）。”</p><h3 id="摘要-9"><a href="#摘要-9" class="headerlink" title="摘要"></a>摘要</h3><p>冲突是每天人际关系生活的事实。冲突处理的方式在关系的品质上扮演重要的角色。当对其有建设性地管理时，冲突可以导致更强和更满意的互动，但当处理很差，关系会变得很糟。</p><p>冲突反应类型繁多，逃避、调适、竞争、妥协、合作等，每一种类型可能是用在不同的情境中，每个人都不会只用一种类型来处理所有的冲突情境，因为双方在发展出理性的冲突解决之道时会彼此互相影响，这方式可能会是互补的、对称的或平行的；它可以包括亲密和攻击因素的联结，以及建设或破坏的仪式。除了塑造关系，冲突方式也会受到每人的性别和文化背景影响。</p><p>在大多数情况下双赢是最为理想的结果，依照本书前述的步骤去沟通可以达到双赢沟通的目标。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 书本 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>重装win10</title>
      <link href="/posts/84e8.html"/>
      <url>/posts/84e8.html</url>
      
        <content type="html"><![CDATA[<p>关闭自带防火墙Windows defender<br><a href="https://pengyirui.lanzoui.com/iF5ESpt70de">https://pengyirui.lanzoui.com/iF5ESpt70de</a></p><p>office、win10激活工具<br><a href="https://pengyirui.lanzoui.com/ifev9pt70fg">https://pengyirui.lanzoui.com/ifev9pt70fg</a></p><p>开机需要启动的软件 文件夹路径</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">C:\Users\葫芦娃\AppData\Roaming\Microsoft\Windows\Start Menu\Programs\Startup</span><br></pre></td></tr></table></figure><p>葫芦娃是你的用户名</p><h3 id="时间显示秒"><a href="#时间显示秒" class="headerlink" title="时间显示秒"></a>时间显示秒</h3><p>打开注册表，输入一下路径<br><code>计算机\HKEY_CURRENT_USER\Software\Microsoft\Windows\CurrentVersion\Explorer\Advanced</code></p><p>在此路径找<code>ShowSecondsInSystemClock</code>文件，数值改为<code>1</code>（没有就新建，选DWORD32位值）</p><h3 id="一些习惯"><a href="#一些习惯" class="headerlink" title="一些习惯"></a>一些习惯</h3><h3 id="电池报告，仅限于win11"><a href="#电池报告，仅限于win11" class="headerlink" title="电池报告，仅限于win11"></a>电池报告，仅限于win11</h3><p>在终端（cmd）输入<code>powercfg /batteryreport /output &quot;C:\battery_report.html&quot;</code></p><p>如果C盘生成不了选择其他盘服</p>]]></content>
      
      
      
        <tags>
            
            <tag> 软件 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>粗读过的那些书</title>
      <link href="/posts/3a95.html"/>
      <url>/posts/3a95.html</url>
      
        <content type="html"><![CDATA[<h3 id="情绪勒索"><a href="#情绪勒索" class="headerlink" title="情绪勒索"></a>情绪勒索</h3><p>情绪勒索：对方说的话会让你产生内疚感，从而令你跟从对方所提出的要求。<br>例子：<br>养到你咁大都唔听讲。<br>唔即刻翻来就同你分手。</p><p>有时候，顾及别人感受的同时也要多多顾及自己的感受</p><p>有时候，我们可能无意识地成为了勒索者也浑然不知</p><p>那些对你很重要的人，往往只要一句话就能左右你的情绪。<br>父母（我为你好、我为你安排条路）<br>上司（我看你资质不错才给你多点东西做栽培你）<br>伴侣（为什么不回电话，快给我回来）</p><p>避免被情绪勒索：提升自我价值感</p><p>摆脱情绪勒索：<br>由察觉开始<br>当一个人习惯了你对他的好，往往就会觉得一切是理所当然的<br>当被情绪勒索的时候跟对方说：“你等一等，让我先想一想”（先停一停，不要停留在勒索情绪中，离开现场不要让对方继续勒索。最后再想想有没有必要帮对方，留意自己内心所想）<br>我们需要为自己的行为负责，但不需要为别人的情绪负责</p><p>容易成为被勒索者：<br>一直想当好人<br>习惯自我怀疑<br>过度在乎别人的感受<br>希望得到别人的肯定<br>过度孝顺<br>过度遵从权威</p><hr><h3 id="跟任何人都可以聊得來3"><a href="#跟任何人都可以聊得來3" class="headerlink" title="跟任何人都可以聊得來3"></a>跟任何人都可以聊得來3</h3><p>跟任何人都可以聊得來3     萊拉．朗德絲</p><p>第一印象<br>如果一开始没给对方留下好印象，之后的关心举动有机会造成反效果。某程度上对对方来说会造成一种压力</p><p>你们的气质要相近，但你们可以各取所需<br>性格最好能够互补，当对方喜欢这样东西，你也可以尝试去喜欢 </p><p>爱情需要公平</p><p>配合对方的自恋<br>称赞<br>如果能在对方眼里看到理想中的自己，也会有助于变得更好<br>每个人都有缺点，倒不如试着去留意及学习别人的优点</p><p>分清楚男女各不同<br>男女需要的东西不一样<br>例如：<br>女生喜欢别人猜<br>男生打机时不喜欢被吵</p><p>男生大多喜欢说自己的事&gt;听女生讲话</p><p>女生约男生吃饭反而去特别、可爱的餐厅会更有好感</p><hr>]]></content>
      
      
      
        <tags>
            
            <tag> 书本 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>如何使用IEDA</title>
      <link href="/posts/be60.html"/>
      <url>/posts/be60.html</url>
      
        <content type="html"><![CDATA[<h1 id="使用IDEA"><a href="#使用IDEA" class="headerlink" title="使用IDEA"></a>使用IDEA</h1><h2 id="创建空工程，也叫做创建空项目"><a href="#创建空工程，也叫做创建空项目" class="headerlink" title="创建空工程，也叫做创建空项目"></a>创建空工程，也叫做创建空项目</h2><h3 id="第一种方式创建空工程"><a href="#第一种方式创建空工程" class="headerlink" title="第一种方式创建空工程"></a>第一种方式创建空工程</h3><p><img src="https://raw.githubusercontent.com/pengyirui/blog_img/main/2021-06-03-01.png"><br><img src="https://raw.githubusercontent.com/pengyirui/blog_img/main/2021-06-03-02.png"><br><img src="https://raw.githubusercontent.com/pengyirui/blog_img/main/2021-06-03-03.png"><br><img src="https://raw.githubusercontent.com/pengyirui/blog_img/main/2021-06-03-04.png"></p><h3 id="第二种方式创建空工程"><a href="#第二种方式创建空工程" class="headerlink" title="第二种方式创建空工程"></a>第二种方式创建空工程</h3><p>在第一种的基础上改变<br><img src="https://raw.githubusercontent.com/pengyirui/blog_img/main/2021-06-03-05.png"></p><h2 id="在工程中创建子模块-Module"><a href="#在工程中创建子模块-Module" class="headerlink" title="在工程中创建子模块(Module)"></a>在工程中创建子模块(Module)</h2><blockquote><p>注意：模块在工程中创建，一个工程中可以创建任意多个模块<br><img src="https://raw.githubusercontent.com/pengyirui/blog_img/main/2021-06-03-06.png"><br><img src="https://raw.githubusercontent.com/pengyirui/blog_img/main/2021-06-03-07.png"><br><img src="https://raw.githubusercontent.com/pengyirui/blog_img/main/2021-06-03-08.png"></p></blockquote><h2 id="新建包"><a href="#新建包" class="headerlink" title="新建包"></a>新建包</h2><p>包Package：类似于文件夹，包中可以存放包，也可以存放Java源文件</p><p>注意：<br>1.包在src目录下创建或在指定的包中创建<br>2.包名建议编写单词，并且全部小写<br><img src="https://raw.githubusercontent.com/pengyirui/blog_img/main/2021-06-03-09.png"><br><img src="https://raw.githubusercontent.com/pengyirui/blog_img/main/2021-06-03-091.png"></p><h2 id="新建类"><a href="#新建类" class="headerlink" title="新建类"></a>新建类</h2><p>类class：类可以在src目录下创建，也可以在指定的包中创建<br><img src="https://raw.githubusercontent.com/pengyirui/blog_img/main/2021-06-03-10.png"><br><img src="https://raw.githubusercontent.com/pengyirui/blog_img/main/2021-06-03-11.png"><br><img src="https://raw.githubusercontent.com/pengyirui/blog_img/main/2021-06-03-12.png"></p><h1 id="IDEA基本设置"><a href="#IDEA基本设置" class="headerlink" title="IDEA基本设置"></a>IDEA基本设置</h1><p><img src="https://raw.githubusercontent.com/pengyirui/blog_img/main/2021-06-03-13.png" alt="设置背景"><br><img src="https://raw.githubusercontent.com/pengyirui/blog_img/main/2021-06-03-14.png"><br><img src="https://raw.githubusercontent.com/pengyirui/blog_img/main/2021-06-03-15.png"><br><img src="https://raw.githubusercontent.com/pengyirui/blog_img/main/2021-06-03-16.png"><br><img src="https://raw.githubusercontent.com/pengyirui/blog_img/main/2021-06-03-17.png"><br><img src="https://raw.githubusercontent.com/pengyirui/blog_img/main/2021-06-03-18.png"><br><img src="https://raw.githubusercontent.com/pengyirui/blog_img/main/2021-06-03-19.png"><br><img src="https://raw.githubusercontent.com/pengyirui/blog_img/main/2021-06-03-20.png"><br><img src="https://raw.githubusercontent.com/pengyirui/blog_img/main/2021-06-03-21.png"><br><img src="https://raw.githubusercontent.com/pengyirui/blog_img/main/2021-06-03-22.png"><br><img src="https://raw.githubusercontent.com/pengyirui/blog_img/main/2021-06-03-23.png"><br><img src="https://raw.githubusercontent.com/pengyirui/blog_img/main/2021-06-03-24.png"></p><p>但是上面这种设置方法，只是对当前项目(当前工程)进行设置编码格式，如果想对所有项目的编码格式都进行设置则如下：<br>File — &gt; Other Settings — &gt;Settings for New Projects<br><img src="https://raw.githubusercontent.com/pengyirui/blog_img/main/2021-06-03-25.png"><br><img src="https://raw.githubusercontent.com/pengyirui/blog_img/main/2021-06-03-26.png" alt="隐藏.iml"></p><p><img src="https://raw.githubusercontent.com/pengyirui/blog_img/main/2021-09-01-01.png" alt="对象流需要自动生成序列化版本号"></p><p>痛点：当开多个类使用会隐藏一部分，把他们全部显示出来<br>setting搜索Editor Tabs，去掉<code>Show tabs in one row</code>勾勾</p><p>方法分割线开启：<br><code>Editor -&gt; General -&gt; Appearance -&gt; Show method separators</code> 把这个勾选上</p><h1 id="常用快捷键"><a href="#常用快捷键" class="headerlink" title="常用快捷键"></a>常用快捷键</h1><p>Shift + Enter 光标切换到下一行<br>psvm回车  main方法<br>sout回车   输出语句<br>Ctrl + Shift + F10运行<br>Ctrl + Shift + F12当前窗口最大化/还原</p><p>Alt + Enter自动修正<br>Ctrl + Y删除当前行<br>Ctrl + D复制当前行<br>Ctrl + Alt + L代码格式化<br>Shift + F6重命名<br>F2  快速定位错误的地方</p><p>iter回车 foreach循环</p><p>Alt + 7查看所有方法与成员变量<br>ctrl + h 查看此类的关系（继承、实现…）</p><p>Alt + Ins 然后选择Constructor<code>构造方法、重构方法</code><br><img src="https://raw.githubusercontent.com/pengyirui/blog_img/main/2021-06-03-29.png"></p><p>Ctrl + o (光标放在类中)然后选择需要重写的类<code>重写父类方法</code></p><p>Alt + Ins 然后选择Getter、Setter 或者Getter and Setter 看需求 <code>封装</code></p><p>Alt + Ins 然后选择父类中要重写的方法equals() and hashCode()，然后选择要比较的两个项目，按回车键，则会自动在方法体中生成代码 <code>重写equals()</code></p><h1 id="包"><a href="#包" class="headerlink" title="包"></a>包</h1><p>注意事项：</p><ol><li>包在src目录下创建或者在指定的包中创建</li><li>创建包的方式有两种：<br>第一种方式：先创建包，然后再创建类<br><img src="https://raw.githubusercontent.com/pengyirui/blog_img/main/2021-06-03-27.png"><br>第二种方式：在创建类的同时创建包，其实也就是编写完整类名<br><img src="https://raw.githubusercontent.com/pengyirui/blog_img/main/2021-06-03-28.png"></li><li>包名建议：编写单词，并且全部小写</li><li>当一个类在指定的包中存放，则类的第一行必须是包的声明，否则类就存放在src目录中<br>声明包的语法格式：package 包名;</li></ol><p><img src="https://raw.githubusercontent.com/pengyirui/blog_img/main/2021-06-03-30.png" alt="方法·后的各种意义"></p><h1 id="插件"><a href="#插件" class="headerlink" title="插件"></a>插件</h1><p>官网：<a href="https://plugins.jetbrains.com/">https://plugins.jetbrains.com</a></p><h2 id="如何安装"><a href="#如何安装" class="headerlink" title="如何安装"></a>如何安装</h2><p>在线安装</p><blockquote><p>seting—&gt;Pulugins—&gt;Marketplace栏目搜索</p></blockquote><p>加载不了？</p><blockquote><p>点击Pulugins中的小齿轮—&gt;HTTP Proxy Setting.. —&gt; 选择 Auto-detect proxy settings</p></blockquote><p>离线安装</p><blockquote><p>seting—&gt;Pulugins—&gt;Marketplace—&gt;小齿轮—&gt;Install Plugin from Disk</p></blockquote><h2 id="滑词翻译"><a href="#滑词翻译" class="headerlink" title="滑词翻译"></a>滑词翻译</h2><p>translate</p><h2 id="Lombok"><a href="#Lombok" class="headerlink" title="Lombok"></a>Lombok</h2><p>github地址：<a href="https://github.com/mplushnikov/lombok-intellij-plugin">https://github.com/mplushnikov/lombok-intellij-plugin</a></p><p>作用：实体类不用写get、set、toString等<br>maven工程需要安装包</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.18.12<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>provided<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>IDEA安装<br><code>选择【File】-&gt; 【Settings】-&gt;【Plugins】 –&gt; 输入Lombok，按回车键进行搜索，单击【Install】进行安装，安装完成后点击【Apply】和【OK】，然后重启IDEA即可安装成功。</code><br><code>注意：在重启前建议勾选结开启【Annotation Processors】下的【Enable annotation processing】（Ctrl+Shift+A键，输入Annotation Processors回车搜索即可找到该选项）。</code></p><p>在要创建的实体Bean类上加注解<code>@Data</code>,包是:<code>lombok.Data</code></p><h2 id="GenerateAllSetter"><a href="#GenerateAllSetter" class="headerlink" title="GenerateAllSetter"></a>GenerateAllSetter</h2><p>new 完对象后，快速创建setter方法<br>快捷键：鼠标焦点在对象，按Alt+回车<br>选择<code>Generate all setter no default value</code></p><h2 id="GsonFormat"><a href="#GsonFormat" class="headerlink" title="GsonFormat"></a>GsonFormat</h2><p>根据json格式快速生成实体类（but2018版本不支持）</p><h2 id="Free-MyBatis-plugin"><a href="#Free-MyBatis-plugin" class="headerlink" title="Free MyBatis plugin"></a>Free MyBatis plugin</h2><p>针对于MyBatis框架提供的一个插件，可以自动完成Mapper接口和Mapper.xml之间的跳转。</p><h2 id="RestfulTool"><a href="#RestfulTool" class="headerlink" title="RestfulTool"></a>RestfulTool</h2><p>自动显示工程中的所有URL接口，进行测试（but2018版本不支持）<br>并且提供检索的功能，快捷键：<code>CtrtAlt+/</code></p><h2 id="SequenceDiagram"><a href="#SequenceDiagram" class="headerlink" title="SequenceDiagram"></a>SequenceDiagram</h2><p>以图形界面的形式显示方法的调用链<br>方法右键</p><h1 id="Maven"><a href="#Maven" class="headerlink" title="Maven"></a>Maven</h1><p>idea删除自定义的archetype</p><p>MacOS系统路径：<code>/Users/xxx/Library/Caches/IntelliJIdea2019.1/Maven/Indices/UserArchetypes.xml</code></p><p>Windows系统路径:<code>C:\Users\xxx\.IntelliJIdea2019.1\system\Maven\Indices\UserArchetypes.xml</code></p>]]></content>
      
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> 软件 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>那些 40 岁的程序员都去哪了？</title>
      <link href="/posts/e904.html"/>
      <url>/posts/e904.html</url>
      
        <content type="html"><![CDATA[<h2 id="那些-40-岁的程序员都去哪了？"><a href="#那些-40-岁的程序员都去哪了？" class="headerlink" title="那些 40 岁的程序员都去哪了？"></a>那些 40 岁的程序员都去哪了？</h2><blockquote><p>转载自微信公众号：<a href="https://mp.weixin.qq.com/s/5RwALsK4Qm7oQWwxooNR7A">https://mp.weixin.qq.com/s/5RwALsK4Qm7oQWwxooNR7A</a></p></blockquote><p>前些时候北京市政府做了一个关于 996 的调研，第一时间我参与了调研，同时发到所有读者群，让大家一起发声。</p><p>不少朋友开始热烈的讨论起来，有人很乐观认为这是改变的开始，也有人觉得这就是走一个形式。不管怎么说，也算看到政府针对这个问题开始有行动了。</p><p>其实 996 最残酷的一点是：年纪大的人很容易被无情淘汰。中国互联网的 35 岁危机是和 996 盛行分不开的。</p><p>996 对于打工人来说，绝不可能常态化！</p><p>为什么不能常态化？从生理规律上看，脑力劳动者如果不以进 ICU 为目标，那么每天能够认真投入的时间，八小时也就到极限了。人毕竟不是机器，是血肉之躯！</p><p>但中国老板普遍希望程序们 996，别激动别骂，这是残酷的现实。</p><p>同时中国老板们偏爱年轻人，为什么？很简单，老了之后，你舔活速度显然没有年轻人来的卖力，来的凶猛！长年累月的辛苦劳作，已经让你这颗螺丝钉生锈甚至发霉了！如果你是老板，这个时候你还要支付比年轻人多 2 倍的薪资，你怎么选？</p><p>更别提，年纪这么大的你，还有各种猝死风险，拿最近的 pdd 猝死事件来说，在超级大小周（996+997）的压力下，这么年轻的女孩都猝死了，更何况 40 岁的一线码农？那猝死率该得多高了？企业的商誉还要不要了？</p><p>显然，资本家一定会作出最商业最正确的选择：年轻人，甚至是刚毕业的大学生，这些最新鲜的韭菜才是他们的最爱。</p><p>所以，对于打工人尤其程序员而言，996 本身反而不是最大问题，最大问题是我们如何跨越大龄危机。</p><p>相比等待环境发生改变，不如主动思考清楚这个问题。</p><p>想起去年写过的一篇旧文，再次分享给大家，讲的是我身边五个大龄程序员的故事，绝对真实的经历分享，有洋哥的同学、朋友、下属，他们都成功的跨越了 35 岁危机，希望他们的经历对大家有一点点启发：</p><h1 id="沉迷是一种力量"><a href="#沉迷是一种力量" class="headerlink" title="沉迷是一种力量"></a>沉迷是一种力量</h1><p>第一次见 A 君是 10 年前参加人人网的面试，他是面试官，那个时候 A 君 35 岁，担任后端 leader。入职后，我发现，他用于做管理的时间不多，90% 时间在疯狂编码。</p><p>A 君基本没有社交，上班就是撸代码，下班就是回家带孩子。他对优秀的工程师容忍度极高，对差一点的完全没耐心。</p><p>偶尔能听见他训斥下属的吵闹声：“这个类写成这样，你没看代码规范吗？”、“这个线程池不能这么用，给你说多少次了！”、“是你没听清楚还是我没讲清楚？不能这么干！”。</p><p>一次下班，和他一起回家，一路上给我讲各种编程技巧和方法论，我听的津津有味。聊了差不多半小时，心想可以换个话题了，于是我问：“您周末娱乐都干些什么呢？”，他是这样回答的：“我会去看些开源代码，自己改着玩很有趣”。那一刻，空气都凝固了，这话我实在没法接下去了。</p><p>后来有一天，A 君上班拍桌子，暴怒之后冲了出去。大家一脸懵逼，后来才知道，原来是大 Boss 批评他不懂管理，只知道埋头写代码。</p><p>几年前，和他在微信聊了一次。他去了一家创业公司做技术负责人，我很好奇，很想知道这次他是怎么做管理的。</p><p>我问他：“您现在是怎么带团队的”，这一问不要紧，聊了半小时。从 Flutter 的优越性到微服务的落地，再到 Google 出了什么新技术，顺带鄙视了一些还在用落后技术的公司。一顿硬核技术科普下来，收获挺大，但是管理这两个字？嗯，不存在的。</p><p>我现在理解了，他压根就不关心管理，聚集一帮极客跟他一起成长战斗才是最开心的事情。</p><p>A 君今年快 50 了，前不久和其他人聊起他，大家都感叹，这老哥战斗力太强了，真是那种一顶十的程序员。<br>有时候，沉迷是一种力量，焦虑？不存在的…..</p><p>想起 A 君给我说的那句：“我要开心 coding 到 80！”。我真心相信他能做到。</p><h1 id="不服就是干"><a href="#不服就是干" class="headerlink" title="不服就是干"></a>不服就是干</h1><p>这次说说我的好朋友 B 君，今年 40 岁，曾经鹅场的高级工程师，7 年前，晋升失败一怒之下开启了创业之路。</p><p>我们是在 CSDN 论坛上认识的，他帮我解决了一个底层操作系统级的防劫持问题。后来经常问他一些排查线上故障的方法论、微服务怎么拆分、如何做出能抗更高并发的架构，他都非常耐心的指导我，他还有句口头禅：不服就是干！</p><p>B 君出来创业没拿融资，自己投了 100 万。团队 5 个人，挤在一个很小的民房。创业期间找他喝酒，他告诉我：“我一定要改变世界，否则我会被世界改变”。</p><p>一年后，再次去找他喝酒，这次他脸色灰暗，人也非常低迷。原来前期 100 万烧完，又投入了 50 万积蓄，项目还是没有做成。酒过半巡，他突然抱着我哭了起来，我这才得知因为积蓄全部烧完，他女朋友已经和他分手了。</p><p>再后来，他回到大厂当程序员，级别薪资跟创业前相差无几。谈起创业经历，我为他惋惜，而他并不后悔。</p><p>两年前，他开始炒比特币，炒着炒着嫌这些交易平台做得都不够好，于是空余时间动手做了一个交易平台。</p><p>去年，B 君告诉我，他的交易平台融资 500 万，再次出来创业。第二次创业，他已平和很多，没有豪言壮语，让公司活下去是最大目标。</p><p>今年听说 B 君的公司已经快 30 人了，为他祝福，相信他一定能改变世界。</p><p>有时候，我们需要点不服就是干的精神！</p><h1 id="反焦虑"><a href="#反焦虑" class="headerlink" title="反焦虑"></a>反焦虑</h1><p>这次上场的是 C 君，硕士师兄，40 岁。C 君是一名大厂总监，他花了四年时间跳了三次才来到当下的这家大厂扎根下来，带 100 人团队，每个月安安稳稳拿高薪，不用担心公司倒闭的风险。</p><p>以 C 君的专业技能和学历背景、工作经历，其实完全不需要担心没工作。可他总是莫名担忧，害怕自己没有创造更多价值。</p><p>100 人的团队不是那么好带，除了技术之外还需要精通业务产品、精通组织流程、掌握良好的沟通推动技巧、在大厂还需要明争暗斗。</p><p>一次和 C 君聊天，他感叹到：“还是写代码有安全感，做管理不仅心累还觉得自己没创造价值”，可不是，这种焦虑几年前我也感同深受。</p><p>大厂的高 P 看起来风光无比，其实要跳槽也不容易，毕竟中小公司能接得住大厂高 P 薪资期权总包的，并不多。</p><p>有时候，不是现在取得了成就就会开心，决定因素是你未来会不会更好，如果答案是否定的，不仅不会开心还有可能带来焦虑。</p><p>C 君就陷入这种焦虑当中，总是担心未来的上升空间和 40 岁以后的收入。特别是大厂还有年龄线的要求，到一定年龄不能晋升就有可能被淘汰。</p><p>有一段时间，公司领导层波动，他面临被连带的危险，甚至需要依靠抗抑郁的药物。但最终他依靠持续有规律的运动和学习新领域克服过来。</p><p>C 君给我提的最多的话：“反焦虑很重要”，是啊，真的重要，从 C 君身上我真正学到了一点：无论你是否能成功，首先要反焦虑。</p><h1 id="舍命狂奔"><a href="#舍命狂奔" class="headerlink" title="舍命狂奔"></a>舍命狂奔</h1><p>这次要说的是清华 MBA 同学 D 君，39 岁。他在通讯行业干了 10 多年，超级专家那种，带十人团队。</p><p>问起他读 MBA 的原因，他很坚定的说：“我对投资非常感兴趣，就是为了转行投资才这么大年纪了还选择读书”。</p><p>清华 MBA 课程安排的很紧张，我们都是六日班，也就周六半天周日全天，而他公司的工作非常忙，几乎 996，但从没见过他迟到过一次。</p><p>三年时光，D 君在跟时间赛跑，小组讨论、企业访谈、课程作业，他都完成的堪称完美。有一次我问他，你为什么这么拼？他说，当你笃定一件事，确定一个目标，那剩下的只有舍命狂奔。</p><p>毕业后，D 君如愿以偿加入一家投行，当上了投资人。有一次很好奇的问他投资人的收入，他告诉我刚入行薪资很低，只有之前做架构师带团队的 1/3。但他说这话的时候，一脸幸福感。</p><p>去年 D 君已经晋升为所在机构的合伙人级别，为他感到开心。</p><h1 id="接受现实"><a href="#接受现实" class="headerlink" title="接受现实"></a>接受现实</h1><p>最后上场的是老同事 E 君，41 岁。他是那种职场老黄牛。属于领导让做什么就做什么的人，任劳任怨勤勤恳恳，但个人成长一直比较缓慢。</p><p>前几年开始 E 君就不太顺了，因为编码能力一直没有达到高级或者架构师水平。他其实一直在跟年轻人拼体力，而随着年龄增大，是真拼不过了。我和他经常讨论的话题是颈椎病如何康复。</p><p>去年 E 君所在公司效益不太好，领导决定裁员，他进入了优化名单。被优化后，他休息整顿了好久，将原来 90kg 的体重减到现在的 75kg，颈椎病也恢复不少。再开始找工作，大概花了几个月时间，他终于找到了一个不那么满意的 Offer。</p><p>听到他找到下家的消息，我还挺为他开心的，因为这个过程我也帮他各种投简历，但大佬朋友们一听说 41 岁还是中级水平，都不太愿意给面试机会。</p><p>没想到过了半年，我和他吃饭，他对我说：“洋哥，我没有入职这家公司，我想明白了，继续做程序员对我来说没意义。我拿积蓄开了个小店”，刚听到消息，我非常惋惜，编码十多年最后却去做小生意，在我眼里就是逃兵。</p><p>直到最近去他小店玩，我才发现，这也是另一种好的生活。他开的是一个小型亲子游乐园，带上小孩，一边陪小孩一边工作，月收入也不差，养家完全没问题。这一瞬间，我产生了一种羡慕的情绪。</p><p>有时候，接受现实然后重新出发，未尝不是一个更好的选择。</p><h1 id="最后的话"><a href="#最后的话" class="headerlink" title="最后的话"></a>最后的话</h1><p>程序员不是一个「银发职业」，但也绝不是如某些贩卖焦虑的自媒体宣传的那样：35 岁危机，40 岁失业。</p><p>40 岁的程序员有的做了大厂中高管、有的成了小公司联创、有的成了连续创业者、还有的转行投资金融、也有人继续坚持写代码战斗在一线。</p><p>不可否认，有一部分人会被行业淘汰出局，但互联网的老年人在其他行业恐怕还是年轻人，接受现实，人生再起航完全没问题。</p><p>最重要的是，我们不能因为年纪的增长而焦虑，因为焦虑本身除了干扰我们成长，没有任何意义。</p><p>尽最大努力，做最好打算，但接受最坏的结果。在这个复杂多变的社会，反焦虑、不断提升认知，不断充实自己的专业技能将永远重要。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 自言自语 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>被讨厌的勇气</title>
      <link href="/posts/b6f2.html"/>
      <url>/posts/b6f2.html</url>
      
        <content type="html"><![CDATA[<p>作者 <em>岸见一郎 / 古贺史健</em><br><img src="https://raw.githubusercontent.com/pengyirui/blog_img/main/2021-05-24-00.png"></p><blockquote><p>本书以对话的形式解读人生的烦恼。围绕着<code>勇气</code>这一点展开。适合人生迷茫是时候再次阅读的一本书，以下是<code>葫芦</code>阅读时觉得有用的点，大家如果感兴趣十分推荐买纸质书阅读！！！<br>ps. 这些点单独拎出来看似乎有点鸡汤或可笑，那是因为部分例子没抄出来，只写了结论！</p></blockquote><blockquote><p>引用阿德勒说的：“人的烦恼皆源于人际关系。”<br>如果不懂得如何构筑良好的人际关系，有时候就会因为想要满足他人期待或者不想伤害他人而导致虽有自己主张但无法传达，最终不得不放弃自己真正想做的事情。</p></blockquote><blockquote><p>子华神说：“世界很简单，人类很复杂。”，看完此书后我认为：“世界很简单，人生也是一样！”</p></blockquote><h2 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h2><p>人并不是住在客观的世界，而是住在自己营造的主观世界里。你所看到的世界不同于我所看到的世界，而且恐怕是不可能与任何人共有的世界。<br>现在，你眼中的世界呈现出复杂怪异的一片混沌。但是，如果你自身发生了变化，世界就会恢复其简单姿态。因为，问题不在于世界如何，而在于你自己怎样。</p><h2 id="我们的不幸是谁的错？"><a href="#我们的不幸是谁的错？" class="headerlink" title="我们的不幸是谁的错？"></a>我们的不幸是谁的错？</h2><ol><li><blockquote><p>再怎么“找原因”，也没法改变一个人</p></blockquote><p> 如果一味地关注过去的原因，企图仅仅靠原因去解释事物，那就会陷入“决定论”。也就是说，最终会得出这样的结论：我们的现在甚至末来全部都由过去的事情所决定，而且根本无法改变。这就的阿德勒心理学的立场。</p><p> 所以，阿德勒心理学考虑的不是过去的“原因”，而是现在的“目的”。<br> 也就是说，你的朋友是先有了“不出去”这个目的，之后才会为了达到这个目的而制造出不安或恐惧之类的情绪。阿德勒心理学把这叫作“目的论”。</p></li><li><blockquote><p>心理创伤并不存在</p></blockquote><p> 原因论”和“目的论”的区别究竟在哪里呢？</p><p> 例子：<br> 哲人：假设你因感冒、发高烧而去看医生。如果医生只就引起感冒的原因告诉你说“你之所以会感冒是因为昨天出门的时候穿得太薄”，你对这样的话会满意吗？<br> 青年：不可能满意啊！感冒原因是穿得薄也好、淋了雨也好，这都无所谓。问题是现在正受着高烧的折磨这个事实，关键在于症状。如果是医生的话，就应该好好开药或者打针，以一些专业性的处理来进行治疗。<br> 哲人：但是，立足于原因论的人们，例如一般的生活顾问或者精神科医生，仅仅会指出“你之所以痛苦是因为过去的事情”，继而简单地安慰“所以错不在你”。所谓的心理创伤学说就是原因论的典型。</p><p> 阿德勒在否定心理创伤学说的时候说了下面这段话：<code>“任何经历本身并不是成功或者失败的原因。我们并非因为自身经历中的刺激——所谓的心理创伤——而痛苦，事实上我们会从经历中发现符合自己目的的因素。决定我们自身的不是过去的经历，而是我们自己赋予经历的意义。”</code></p><p> 所以，<code>决定我们自己的不是“经验本身”而是“赋予经验的意义”</code><br> 我们给过去的经历“赋予了什么样的意义”，这直接决定了我们的生活。人生不是由别人赋予的，而是由自己选择的，是自己选择自己如何生活。</p></li><li><blockquote><p>愤怒都是捏造出来的</p></blockquote><p> 例子：<br> 愤怒的确是一瞬间的感情。有这样一个故事，说的是有一天母亲和女儿在大声争吵。正在这时候，电话铃响了起来。“喂喂？”慌忙拿起话筒的母亲的声音中依然带有一丝怒气。但是，打电话的人是女儿学校的班主任。意识到这一点后，母亲的语气马上变得彬彬有礼了。就这样，母亲用客客气气的语气交谈了大约5分钟之后挂了电话，接着又勃然变色，开始训斥女儿。</p><p> 所谓愤怒其实只是可放可收的一种“手段”而已。它既可以在接电话的瞬间巧妙地收起，也可以在挂断电话之后再次释放出来。这位母亲并不是因为怒不可遏而大发雷霆，她只不过是为了用高声震慑住女儿，进而使其听自己的话才采用了愤怒这种感情。所谓“目的论”就是如此。</p></li><li><blockquote><p>弗洛伊德说错了</p></blockquote><p> 我们并不是在感情的支配下而采取各种行动。而且，在“人不受感情支配”这个层面上，进而在“人不受过去支配”这个层面上，阿德勒心理学正是一种与虚无主义截然相反的思想和哲学。说问题不在于“发生了什么”，而在于“如何诠释”？</p></li><li><blockquote><p>苏格拉底和阿德勒</p></blockquote><p> 急于改变并不可取，改变的第一步就是理解。<br> 为什么那么急于得到答案呢？答案不应该是从别人那里得到，而应该是自己亲自找出来，而不是去剥夺你自己发现答案的宝贵过程。从别人那里得到的答案只不过是对症疗法而己，没有什么价值。</p></li><li><blockquote><p>你想“变成别人”吗？</p></blockquote><p> 面对喜不喜欢自己这个问题，能够坦然回答“喜欢”的人几乎没有。<br> 哲人：至少我不想变成别人，也能悦纳目前的自己。<br> 哲人：<code>我还要再次引用阿德勒的话。他这么说：“重要的不是被给予了什么，而是如何去利用被给子的东西。</code></p></li><li><blockquote><p>人们常常下定决心“不改变”</p></blockquote><p> 阿德勒心理学中用“生活方式”一词来说明性格或秉性。</p><p> <code>某人如何看“世界”，又如何看“自己”，把这些“赋予意义的方式”</code>汇集起来的概念就可以理解为生活方式。从狭义上来讲可以理解为性格：从广义上来说，这个词甚至包含了某人的世界观或人生观。</p><p> 也许你之前并不了解自己的生活方式。而且，也许你连生活方式这个概念都不知道。当然，谁都无法选择自己的出身。出生在什么样的国家、什么样的时代，有什么样的父母，这一切都不是自己的选择。<br> 而且，这些都具有极大的影响力，你也许会有不满，也许会对别人的出身心生羡慕。<br> 但是，事情不可以仅止于此。问题不在于过去而在于现在。现在你了解了生活方式。如果是这样的话，接下来的行为就是你自己的责任了。无论是继续选择与之前一样的生活方式还是重新选择新的生活方式，那都在于你自己。</p><p> 尽管有些不方便、不自由，但你还是感觉现在的生活方式更好，大概是觉得一直这样不做改变比较轻松吧。<br> 如果一直保持“现在的我”，那么如何应对眼前的事情以及其结果会怎样等问题都可以根据经验进行推测，可谓是轻车熟路般的状态。即使遇到点状况也能够想办法对付过去。<br> 另一方面，如果选择新的生活方式，那就既不知道新的自己会遇到什么问题，也不知道应该如何应对眼前的事情。未来难以预测，生活就会充满不安，也可能有更加痛苦、更加不幸的生活在等着自己。<br> 也就是说，即使人们有各种不满，但还是认为保持现状更加轻松、更能安心。</p><p> <code>要想改变生活方式需要很大的“勇气”。面对变化产生的“不安”与不变带来的“不满”，你一定是选择了后者。</code></p><p> 阿德勒心理学就是勇气心理学。你之所以不幸并不是因为过去或者环境，更不是因为能力不足，你只不过是缺乏“勇气”，可以说是缺乏“获得幸福的勇气”。</p></li><li><blockquote><p>你的人生取决于“当下”</p></blockquote><p> 例子：<br> 我有一位年轻朋友，虽然梦想着成为小说家，但却总是写不出作品。他说是因为工作太忙、写小说的时间非常有限，所以才写不出来作品，也从未参加过任何比赛。<br> 但真是如此吗？<br> 实际上，他是想通过不去比赛这一方式来保留一种“如果做的话我也可以”的可能性，即不愿出去被人评价，更不愿去面对因作品拙劣而落选的现实。他只想活在“只要有时间我也可以、只要环境具备我也能写、自己有这种才能”之类的可能性中。或许再过5年或者10年，他又会开始使用“已经不再年轻”或者“也已经有了家庭”之类的借口。</p><p> 阿德勒的目的论是说：“无论之前的人生发生过什么，都对今后的人生如何度过没有影响。”决定自己人生的是活在“此时此刻”的你自己。</p></li></ol><h2 id="一切烦恼都来自人际关系"><a href="#一切烦恼都来自人际关系" class="headerlink" title="一切烦恼都来自人际关系"></a>一切烦恼都来自人际关系</h2><ol><li><blockquote><p>为什么讨厌自己？</p></blockquote><p> （有趣的对话）<br> <code>青年</code>：先生也许已经注意到了。首先要说的就是我这性格————对自己没有自信，对一切都持悲观态度；还有就是太过固执；非常注重别人的看法，而且总是活在对别人的怀疑之中；不能活得自然，总觉得像是在演戏。而且，如果只是性格倒还好，自己的长相和身材也没有一样让人满意的。</p><p> <code>哲人</code>：如果以你为例不好理解的话，那我就举一个别人的例子。我也曾在这个书房里进行过简单的心理辅导。那己经是多年前的事情了，那时来了一位女学生。是的，她当时就坐在你现在坐的这把椅子上。她的苦恼是害怕见人，一到人前就脸红，说是无论如何都想治好这种脸红恐惧症。所以我便问她：“如果这种脸红恐惧症治好了，你想做什么呢？”于是，她告诉我说自己有一个想要交往的男孩。虽然偷偷喜欢着那个男孩，但她还没能表明心意。她还说一旦治好脸红恐惧症，就马上向他告白，希望能够交往。</p><p> 事情果真如此吗？我的判断是并非如此。为什么她会患上脸红恐惧症呢？又为什么总是治不好呢？那是因为她自己“需要脸红这一症状”。你认为对她来说最害怕的事情、最想逃避的事情是什么呢？当然是被自己喜欢的男孩拒绝了。是失恋可能带来的打击和自我否定。因为青春期的失恋在这方面的特征非常明显。</p><p> 但是，只要有脸红恐惧症存在，她就可以用“我之所以不能和他交往都是因为这个脸红恐惧症”这样的想法来进行自我逃避，如此便可以不必鼓起告白的勇气或者即使被拒绝也可以说服自己；而且，最终也可以抱着“如果治好了脸红恐惧症我也可以……”之类的想法活在幻想之中。她是为了给无法告白的自己找一个借口或者是怕被拒绝才捏造了“脸红恐惧症”。</p><p> 哲人：所以，我跟她进行了下面的对话。<br> 　　“脸红恐惧症这样的病很好治。”　　“真的吗？”<br> 　　“但我不会给你治。”　　“为什么？”<br> 　　“因为你是靠着脸红恐惧症才能让自己接受对自我或者社会的不满以及不顺利的人生。你还要用’这都是因为脸红恐惧症‘之类的话来安慰自己呢。”　　“怎么……”<br> 　　“但是，如果我给你治好了脸红恐惧症，事态也没有任何变化的话，那你会怎么做呢？你一定会再次跑来对我说’请让我再患上脸红恐惧症‘吧。那我可就真的束手无策了。”</p><p> 她对自己没有自信，始终抱着“如果这样，即使告白也肯定会被拒绝，到时候就会更加没有自信”这样的恐惧心理，所以才会制造出脸红恐惧症这样的问题来。我所能做的就是首先让其接受“现在的自己”，不管结果如何，首先让其树立起向前迈进的勇气。阿德勒心理学把这叫作“鼓励”。<br> 与朋友一起和那个男孩出去玩儿，最终那个男孩先向她告白了。当然，她再也没到这个书斋来过，我也不知道她的脸红恐惧症后来如何了。但是，我想她大概不再需要了吧。</p><p> <em>—————————这是一条分界线—————————</em></p><p> 那么，接下来我们根据她的事情来考虑一下你的问题。你说你现在只能看到自己的缺点，根本无法喜欢自己。而且你还说过“谁都不愿意跟我这种乖僻的人交往”吧？就这些吧。你为什么讨厌自己呢？为什么只盯着缺点就是不肯去喜欢自己呢？那是因为你太害怕被他人讨厌、害怕在人际关系中受伤。<br> 青年：那是怎么回事呢？<br> 哲人：就像有脸红恐惧症的她害怕被男性拒绝一样，你也很害怕被他人否定。害怕被别人轻视或拒绝、害怕心灵受伤。你认为与其陷入那种窘境倒还不如一开始就不与任何人有关联。也就是说，你的“目的”是“避免在与他人的关系中受伤”。<br> 青年：……<br> 哲人：那么，如何实现这种目的呢？答案很简单。只要变成一个只看自己的缺点、极其厌恶自我、尽量不涉入人际关系的人就可以了。如此一来，只要躲在自己的壳里就可以不与任何人发生关联，而且万一遭到别人的拒绝，还可以以此为理由来安慰自己。心里就会想：因为我有这样的缺点才会遭人拒绝，只要我没有这个缺点也会很讨人喜欢。</p><p> <code>承认就是很了不起的态度。</code>但是，请你不要忘记，<code>在人际关系中根本不可能不受伤</code>。只要涉入人际关系就会或大或小地受伤，也会伤害别人。阿德勒曾说“要想消除烦恼，只有一个人在宇宙中生存”。但是，那种事情根本就无法做到。</p></li><li><blockquote><p>一切烦恼都是人际关系的烦恼。</p></blockquote><p> 之所以感觉孤独并不是因为只有你自己一个人，感觉自己被周围的他人、社会和共同体所疏远才会孤独。<br> 我们要想体会孤独也需要有他人的存在。也就是说，人只有在社会关系中才会成为“个人”。<br> 即使是在无人岛上生活，也会想到遥远的海对岸的“某人”；即使在一个人的夜晚，也会侧耳静听某人睡眠中的呼吸声。只要在某个地方存在着那个某人，孤独就会袭来。<br> <code>你由于太惧怕人际关系所以才会变得讨厌自己</code>，你是在通过自我厌弃来逃避人际关系。</p></li><li><blockquote><p>自卑感来自主观的臆造</p></blockquote><p> 困扰我们的自卑感不是“客观性的事实”而是“主观性的解释”<br> 主观有一个优点，那就是可以用自己的手去选择。把自己的身高看成是优点还是缺点，这全凭你自己主观决定。正因为如此，我才可以自由选择</p><p> <code>在德语中“自卑感”是一个关于自我价值判断的词语</code>。那么，价值究竟是指什么呢？</p><p> 例如，价格昂贵的钻石或者货币。我们会从中发现一些价值，并会说1克拉多少钱或者物价如何如何。但是，如果换种角度来看，钻石之类的东西也只不过是石块而已。</p><p> 也就是说，价值必须建立在社会意义之上。即使1美元纸币所承载的价值是一种常识（共通感觉），那它也不是客观意义上的价值。如果从印刷成本考虑的话，它根本不等于1美元。如果这个世界上只有我一个人存在，那我也许会把这1美元的纸币放入壁炉当燃料或者当卫生纸用。同样的道理，我自然也就不会再为自己的身高而苦恼。<br> 也就是说，<code>价值问题最终也可以追溯到人际关系上。</code></p><p> 这样就又可以与“一切烦恼皆源于人际关系”这种说法联系起来了</p></li><li><blockquote><p>自卑情结只是一种借口</p></blockquote><p> 人究竟为什么会有自卑感呢？</p><p> 首先，人是作为一种无力的存在活在这个世界上。并且，人<code>希望摆脱这种无力状态，继而就有了普遍欲求。阿德勒称其为“追求优越性”。</code><br> 你可以简单将其理解为“希望进步”或者“追求理想状态”。<code>例如</code>，蹒跚学步的孩子学会独自站立；他们学会语言，可以与周围的人自由沟通。我们都有想要摆脱无力状态、追求进步的普遍欲求。<code>人类史上的科学进步也是“追求优越性”的结果。</code></p><p> <code>与此相对应的就是自卑感。</code>人都处于追求优越性这一“希望进步的状态”之中，树立某些理想或目标并努力为之奋斗。同时，<code>对于无法达成理想的自己就会产生一种自卑感</code>。<code>例如</code>，越是有远大志向的厨师也许就越会产生“还很不熟练”或者“必须做出更好的料理”之类的自卑感。</p><p> 阿德勒说“无论是追求优越性还是自卑感，都不是病态，而是一种能够促进健康、正常的努力和成长的刺激”。只要处理得当，自卑感也可以成为努力和成长的催化剂。</p><p> <code>我们应该摈弃自卑感，进一步向前；不满足于现状，不断进步；要更加幸福。如果是这样的自卑感，那就没有任何问题。</code></p><ul><li><p>以下两个例子~~~<br>青年：哎呀，是啊。自卑感越强，人就会变得越消极，最终肯定会认为自己一无是处。自卑感不就是这样吗？<br>哲人：不，这不是自卑感，而是自卑情结。</p></li><li><p>自卑感也可以<code>成为促成努力和进步的契机</code>。<code>例如</code>，虽然对学历抱有自卑感，但若是正因为如此，才下定“我学历低所以更要付出加倍的努力”之类的决心，那反而成了好事</p></li><li><p>而另一方面，<code>自卑情结是指把自己的自卑感当作某种借口使用的状态</code>。具体就像“我因为学历低所以无法成功”或者“我因为长得不漂亮所以结不了婚”之类的想法。像这样在日常生活中大肆宣扬“因为有A所以才做不到B”这样的理论，这已经超出了自卑感的范畴，它是一种自卑情结。</p></li></ul><p> 阿德勒用“外部因果律”一词来进行说明。意思就是：将原本没有任何因果关系的事情解释成似乎有重大。</p></li><li><blockquote><p>越自负的人越自卑</p></blockquote><p> 拥有自卑感即感觉目前的“我”有所欠缺的状态。如此一来问题就在于如何去弥补欠缺的部分。最健全的姿态应该是想要通过努力和成长去弥补欠缺部分，例如刻苦学习、勤奋练习、努力工作等。</p><p> 但是，没有这种勇气的人就会陷入自卑情结</p><p> 拿刚才的例子来讲，就会产生“我因为学历低所以无法成功”之类的想法，并且还会进一步通过“如果有高学历自己也很容易成功”之类的话来暗示自己的能力。意思就是“现在只不过是被学历低这个因素所埋没，’真正的我‘其实非常优秀”。</p><p> <code>自卑情结有时会发展成另外一种特殊的心理状态。————优越情结</code></p><p> 表现得好像自己很优秀，继而沉浸在一种虚假的优越感之中。一个很常见的例子就是“权势张扬”<br> 例如大力宣扬自己是权力者——可以是班组领导，也可以是知名人士这些情况都属于“我”原本并不优秀或者并不特别。而通过把“我”和权势相结合，似乎显得“我”很优秀。这也就是“虚假优越感”。</p><p> 不过，借助权势的力量来抬高自己的人终究是活在他人的价值观和人生之中：例如，那些想要骄傲于自我功绩的人，那些沉迷于过去的荣光整天只谈自己曾经的辉煌业绩的人，这样的人恐怕你身边也有。这些都可以称之为优越情结。</p><p> 特意自吹自擂的人其实是对自己没有自信。<code>阿德勒明确指出“如果有人骄傲自大，那一定是因为他有自卑感”。</code></p><p> 如果真正地拥有自信，就不会自大。正因为有强烈的自卑感才会骄傲自大，那其实是想要故意炫耀自己很优秀。担心如果不那么做的话，就会得不到周围的认可。这完全是一种优越情结。也就是说，<code>自卑情结和优越情结从名称上来看似乎是正相反的，但实际上却有着密切的联系</code></p><ul><li><p>这是一种通过把自卑感尖锐化来实现异常优越感的模式。具体就是指夸耀不幸。（夸耀不幸）<code>就是说那些津津乐道甚至是夸耀自己成长史中各种不幸的人。</code>而且，即使别人想要去安慰或者帮助其改变，他们也会用“你无法了解我的心情”来推开援手。<br>  <code>例如：</code><br>  我的身高很矮。对此，心善的人会用“没必要在意”或者“人的价值并不由身高决定”之类的话来安慰我。但是，此时我如果甩出“你怎么能够理解矮子的烦恼呢！”之类的话加以拒绝的话，那谁都会再无话可说。如此一来，恐怕周围的人一定会小心翼翼地来对待我吧。</p><p>  通过这种方式，我就可以变得比他人更有优势、更加“特别”。生病的时候、受伤的时候、失恋难过的时候，在诸如此类情况下，很多人都会用这种态度来使自己变成“特别的存在”。</p></li></ul><p> 以自己的不幸为武器来支配对方弱势具有特权.<code>阿德勒说：“在我们的文化中，如果要问谁最强大，那答案也许应该是婴儿。婴儿其实总是处于支配而非被支配的地位。</code></p></li><li><blockquote><p>人生不是与他人的比赛</p></blockquote><p> 请想象一下这种情形：虽然行进距离或速度各不相同，但大家都平等地走在一个平面上。所谓“追求优越性”是指自己不断朝前迈进，而不是比别人高出一等的意思。不与任何人竞争。只要自己不断前进即可。当然，也没有必要把自己和别人相比较。</p><p> <code>健全的自卑感不是来自与别人的比较，而是来自与“理想的自己”的比较。</code></p><p> 我们都不一样。性别、年龄、知识、经验、外貌，没有完全一样的人。我们应该积极地看待自己与别人的差异。但是，我们“虽然不同但是平等”。</p><p> 无论是走在前面还是走在后面都没有关系，我们都走在一个并不存在纵轴的水平面上，我们不断向前迈进并不是为了与谁竞争。价值在于不断超越自我。当一个人想要做自己的时候，竞争势必会成为障碍。</p></li><li><blockquote><p>在意你长相的，只有你自己</p></blockquote><p> 如果在人际关系中存在“竞争”，<code>那人就不可能摆脱人际关系带来的烦恼，也就不可能摆脱不幸。</code></p><p> 因为有竞争的地方就会有胜者和败者。</p><p> 哲人：请从你自己的角度来具体考虑一下。假设你对周围的人都抱有“竞争”意识。但是，竞争就会有胜者和败者。<code>因为他们之间的关系，所以必然会意识到胜负，会产生“A君上了名牌大学，B君进了那家大企，C君找了一位那么漂亮的女朋友，而自己却是这样”之类的想法。</code><br> 如果意识到竞争或胜负，那么势必就会产生自卑感。因为常常拿自己和别人相比就会产生“优于这个、输于那个”之类的想法，而自卑情结或优越情结就会随之而生。那么，对此时的你来说，他人又会是什么样的存在呢？<code>不是单纯的的竞争对手。不知不觉就会把他人乃至整个世界都看成“敌人”。</code>也就是会认为人人都是随时会愚弄、嘲讽、攻击甚至陷害自己、绝不可掉以轻心的敌人，而世界则是一个恐怖的地方。之所以有很多人虽然取得了社会性的成功，但却感觉不到幸福，就是因为他们活在竞争之中。因为他们眼中的世界是敌人遍布的危险所在。</p><p> <code>但实际上，别人真的会那么关注你吗？会24小时监视着你，虎视眈眈地寻找攻击你的机会吗？恐怕并非如此。</code></p><p> 我有一位年轻的朋友，据说他少年时代总是长时间对着镜子整理头发。于是，他祖母对他说：“在意你的脸的只有你自己。”那之后，他便活得轻松了一些</p><p> “无法真心祝福过得幸福的他人”，那就是因为站在竞争的角度来考虑人际关系，把他人的幸福看作“我的失败”，所以才无法给予祝福。</p><p> 但是，一旦从竞争的怪圈中解放出来，就再没有必要战胜任何人了，也就能够摆脱“或许会输”的恐惧心理了，变得能够真心祝福他人的幸福并能够为他人的幸福作出积极的贡献。当某人陷入困难的时候你随时愿意伸出援手，那他对你来说就是可以称为伙伴的存在。</p><p> 关键在于下面这一点。如果能够体会到“人人都是我的伙伴”，那么对世界的看法也会截然不同。不再把世界当成危险的所在，也不再活在不必要的猜忌之中，你眼中的世界就会成为一个安全舒适的地方。人际关系的烦恼也会大大减少。</p></li><li><blockquote><p>人际关系中的“权力斗争”与复仇</p></blockquote><p> 我们有时候会对社会问题感到愤怒。但是，这并不是突发性的感情，而是合乎逻辑的愤慨。<code>个人的愤怒（私愤）和对社会矛盾或不公平产生的愤怒（公愤）不属于同一种类。</code>个人的愤怒很快就会冷却，而公愤则会长时间地持续。因私愤而流露的发怒只不过是为了让别人屈服的一种工具而己。</p><p> 私愤和公愤完全不同。因为公愤超越了自身利害。</p><p> <code>如果遭人当面辱骂，我就会考虑一下那个人隐藏的“目的”。不仅仅是直接性的当面辱骂，当被对方的言行激怒的时候，也要认清对方是在挑起“权力之争”。</code>例如，孩子有时候会通过恶作剧来捉弄大人。在很多情况下，其目的是为了吸引大人的注意力，他们往往会在大人真正发火之前停止恶作剧。但是，如果在大人真正生气的时候孩子依然不停止恶作剧，那么其目的就是“斗争”本身了。</p><p> <code>为什么要斗争呢？</code>假设你和朋友正在谈论时下的政治形势，谈着谈着你们之间的争论越来越激烈，彼此都各不相让，于是对方很快就上升到了人格攻击，骂你说：“所以说你是个大傻瓜，正因为有你这种人存在我们国家才不能发展。”对方只是想要责难挑衅你，通过权力之争来达到让不顺眼的你屈服的目的。这个时候你如果发怒的话，那就是正中其下怀，关系会急剧转入权力之争。<code>所以，我们不能上任何挑衅的当。</code>假设你压制住了争论，而且彻底认输的对方爽快地退出。但是，权力之争并没有就此结束。败下阵来的对方会很快转入下一个阶段。<code>复仇”阶段。</code>尽管暂时败下阵来，但对方会在别的地方以别的形式策划着复仇、等待着进行报复。</p><p> 而且，人际关系一旦发展到复仇阶段，那么当事人之间几乎就不可能调和了。为了避免这一点，在受到争权挑衅时绝对不可以上当。</p><p> 关于权力之争，还有一点需要注意。那就是无论认为自己多么正确，也不要以此为理由去责难对方。这是很多人都容易陷落进去的人际关系圈套。</p></li><li><blockquote><p>承认错误，不代表你失败了</p></blockquote><p> 首先希望你能够理解这样一个事实，<code>那就是发怒是交流的一种形态，而且不使用发怒这种方式也可以交流。</code>我们即使不使用怒气，也可以进行沟通以及取得别人的认同。如果能够从经验中明白这一点，那自然就不会再有怒气产生了。</p><p> <code>人在人际关系中一旦确信”我是正确的“，那就已经步入了权力之争。</code>我是正确的，也就是说对方是错误的。一旦这样想，辩论的焦点便会从”主张的正确性“变成了”人际关系的方式“。也就是说，”我是正确的“这种坚信意味着坚持”对方是错误的“，最终就会演变成”所以我必须获胜“之类的胜负之争。这就是完完全全的权力之争吧？</p><p> <code>原本主张的对错与胜负毫无关系</code>。如果你认为自己正确的话，那么无论对方持什么意见都应该无所谓。但是，很多人都会陷入权力之争，试图让对方屈服。正因为如此，才会认为”承认自己的错误“就等于”承认失败.因为不想失败，所以就不愿承认自己的错误，结果就会选择错误的道路。承认错误、赔礼道歉、退出权力之争，这些都不是”失败“。</p><p> <code>追求优越性并不是通过与他人的竞争来完成的。</code></p></li><li><blockquote><p>人生的三大课题：交友课题、工作课题以及爱的课题</p></blockquote><p> 阿德勒心理学关于人的<code>行为方面</code>和<code>心理方面</code>都提出了相当明确的目标。</p><ul><li><code>行为方面</code>的目标有以下两点：<br>  ①自立。②与社会和谐共处。</li><li>支撑这种行为的<code>心理方面</code>的目标也有以下两点：<br>  ①”我有能力“的意识。②”人人都是我的伙伴“的意识。</li></ul><p> <code>人际关系有距离和深度。</code>为了强调这一点，阿德勒也曾使用”三大羁绊“这样的表达方式。<br> 原则上来说，根本不可能存在不需要与他人合作完成的工作。</p><p> <code>如果从距离和深度这一观点来考虑的话，工作上的人际关系可以说门槛最低。</code>工作上的人际关系因为有着成果这一简单易懂的共通目标，即使有些不投缘也可以合作或者说必须合作；而且，因”工作“这一点结成的关系，在下班或者转行后就又可以变回他人关系。而在这个阶段的人际关系方面出现问题的，就是那些被称为自闭的人。</p><p> 但核心问题就是人际关系。<code>例如</code>为了求职而发出简历，面试了却没被任何公司录取，自尊心受到极大伤害，思来想去便开始怀疑工作的意义。或者，在工作中遭遇重大失败，由于自己的失误致使公司遭受巨额损失，眼前一片黑暗，于是开始讨厌再去公司上班。这些情况都不是讨厌工作本身，而是讨厌因为工作而受到他人的批评和指责，讨厌被贴上”你没有能力“或者”你不适合这个工作“之类的无能标签，更讨厌无可替代的我的尊严受到伤害。也就是说，一切都是人际关系的问题。</p></li><li><blockquote><p>浪漫的红线和坚固的锁链</p></blockquote><p>交友课题：<code>这是指脱离了工作的、更广泛意义上的朋友关系。正因为没有了工作关系那样的强制力，所以也就更加难以开始和发展。很多人认为朋友越多越好，但果真如此吗？朋友或熟人的数量没有任何价值。我们应该考虑的是关系的距离和深度。</code><br>爱的课题： <code>这一点可以分成两个阶段：一个就是所谓的恋爱关系，而另一个就是与家人的关系，特别是亲子关系。在工作、交友和爱这三大课题中，爱之课题恐怕是最难的课题。</code></p><p><code>例如</code>，当由朋友关系发展成恋爱关系的时候，一些在朋友之间被允许的言行就不再被允许了。具体说来，例如不可以跟异性朋友一起玩儿，有时候甚至仅仅因为跟异性朋友打电话，恋人就会吃醋。像这样，距离近了，关系也深了。</p><p>阿德勒不同意束缚对方这一点。如果对方过得幸福，那就能够真诚地去祝福，这就是爱。相互束缚的关系很快就会破裂。</p><p>并不是积极地去肯定花心。请你这样想，如果在一起感到苦闷或者紧张，那即使是恋爱关系也不能称之为爱。当人能够感觉到”与这个人在一起可以无拘无束“的时候，才能够体会到爱。既没有自卑感也不必炫耀优越性，能够保持一种平静而自然的状态。真正的爱应该是这样的。<code>另一方面，束缚是想要支配对方的表现，也是一种基于不信任感的想法。</code>与一个不信任自己的人处在同一个空间里，那就根本不可能保持一种自然状态。阿德勒说：”如果想要和谐地生活在一起，那就必须把对方当成平等的人。“</p><p>不过，恋爱关系或夫妻关系还可以选择”分手“。即使常年一起生活的夫妻，如果难以继续持关系的话，也可以选择分手。但是，亲子关系原则上就不可以如此假如恋爱是用红色丝线系起来的关系的话，那亲子关系就是用坚固的锁链联结起来的关系。而且，自己手里只有一把小小的剪刀。亲子关系难就难在这里。</p></li><li><blockquote><p>“人生谎言”教我们学会逃避</p></blockquote><p>在恋爱或夫妻关系中，过了某个时期之后，有时候对方的任何言行都会让你生气。吃饭的方式让你不满意，在房间里的散漫姿态令你生厌，甚至就连对方睡眠时的呼吸声都让你生气，尽管几个月前还不是这样。</p><p><code>这是因为那个人已经下定决心要找机会”结束这种关系“，继而正在搜集结束关系的材料，所以才会那样感觉。</code>对方其实没有任何改变，只是自己的”目的“变了而已。人就是这么任性而自私的生物，一旦产生这种想法，无论怎样都能发现对方的缺点。即使对方是圣人君子一样的人物，也能够轻而易举地找到对方值得讨厌的理由。正因为如此，世界才随时可能变成危险的所在，人们也就有可能把所有他人都看成”敌人</p><p>阿德勒把这种企图设立种种借口来回避人生课题的情况叫作”人生谎言”。但是，为什么要把那判定为撒谎呢？因为决定你的生活方式（人生状态）的不是其他任何人，而是你自己这一事实。</p></li></ol><h2 id="让干涉你生活的人见鬼去"><a href="#让干涉你生活的人见鬼去" class="headerlink" title="让干涉你生活的人见鬼去"></a>让干涉你生活的人见鬼去</h2><ol><li><blockquote><p>自由就是不再寻求认可？</p></blockquote><p> 阿德勒心理学否定寻求他人的认可。</p></li><li><blockquote><p>要不要活在别人的期待中？</p></blockquote><p> 比如，假设你在工作单位捡了垃圾。<br> 但是，周围的人根本没人注意到这一点；或者即使注意到了，也没有人说一句感谢或表扬的话。<br> 那么，你以后还会继续检垃圾吗？</p><p> 青年：捡垃圾是“为了大家”。为了大家流汗受累，却连一句感谢的话都得不到。如果这样的话也许就不想再做下去了吧。</p><p> <code>认可欲求的危险就在这里。人究竟为什么要寻求别人的认可呢？其实，很多情况下都是因为受赏罚教育的影响。</code></p><p> 在<code>赏罚式教育</code>之下会产生这样一种错误的生活方式，那就是“如果没人表扬，我就不去做好事”或者是“如果没人惩罚，我也做坏事”。是先有了希望获得表扬这个目的，所以才去捡垃圾<br> 其实，<code>我们“并不是为了满足别人的期待而活着”。你不是为了满足别人的期待而活着，我也不是为了满足别人的期待而活着。我们没必要去满足别人的期待。</code></p><p> 假如你不为自己而活的话，那谁会为你而活呢？<code>我们最终还是为自己活着。</code>没理由不可以这样想。<code>如果一味寻求别人的认可、在意别人的评价，那最终就会活在别人的人生中。</code><br> 过于希望得到别人的认可，就会按照别人的期待去生活。也就是舍弃真正的自我，活在别人的人生之中。而且，请你记住，假如说你“不是为了满足他人的期待而活”，那他人也“不是为了满足你的期待而活”。当别人的行为不符合自己的想法的时候也不可以发怒。这也是理所当然的事情</p><p> 并不是旁若无人地任意横行。要理解这一点，需要先了解阿德勒心理学中的“课题分离”这一主张。</p></li><li><blockquote><p>把自己和别人的“人生课题”分开来</p></blockquote><p> 基本上，一切人际关系矛盾都起因于对别人的课题妄加干涉，或者自己的课题被别人妄加干涉。只要能够进行课题分离，人际关系就会发生巨大改变。</p><p> 辨别究竟是谁的课题的方法非常简单，<code>只需要考虑一下“某种选择所带来的结果最终要由谁来承担？”</code>如果孩子选择“不学习”这个选项，那么由这种决断带来的后果一一例如成绩不好、无法上好学校等——最终的承担者不是父母，而是孩子。也就是说，学习是孩子的课题。</p><p> 世上的父母总是说“为你着想”之类的话。但是，父母们的行为有时候很明显是为了满足自己的目的——面子和虚荣又或者是支配欲。也就是说，不是“为了你”而是“为了我”，正因为察觉到了这种欺骗行为，孩子才会反抗。</p><p> 阿德勒心理学并不是推崇放任主义。放任是一种不知道也不想知道孩子在做什么的态度。而阿德勒心理学的主张不是如此，而是在了解孩子干什各的基础上对其加以守护。<code>如果就学习而言，告诉孩子这是他自己的课题，在他想学习的时候父母要随时准备给予帮助，但绝不对孩子的课题妄加干涉。在孩子没有向你求助的时候不可以指手画脚。</code></p><p> 阿德勒心理学中的心理咨询辅导以及对别人的一切援助都遵循这个要求。倘若无视本人的意愿而强迫其“改变”，那结果只会是日后产生更加强烈的反作用。</p></li><li><blockquote><p>即使父母也得放下孩子的课题</p></blockquote><p> 苦恼于与孩子之间的关系的父母往往容易认为：孩子就是我的人生。总之就是把孩子的课题也看成是自己的课题，总是只考虑孩子，而当意识到的时候，他们已经失去了自我。但即使父母再怎么背负孩子的课题，孩子依然是独立的个人，不会完全按照父母的想法去生活。孩子的学习、工作、结婚对象或者哪怕是日常行为举止都不会完全按照父母所想。当然，我也会担心甚至会想要去干涉。但是，刚才我也说过：“别人不是为了满足你的期待而活。”<code>即使是自己的孩子也不是为了满足父母的期待而活。</code></p><p> <code>信任这一行为也需要进行课题分离。信任别人，这是你的课题。但是，如何对待你的信任，那就是对方的课题了。如果不分清界限而是把自己的希望强加给别人的话，那就变成粗暴的“干涉”了</code></p><p> 即使对方不如自己所愿也依然能够信任和爱吗？阿德勒所说的“爱的课题”就包括这种追问。</p><p> 干涉甚至担负起别人的课题这会让自己的人生沉重而痛苦。如果你正在为自己的人生而苦恼——这种苦恼源于人际关系——那首先请弄清楚“这不是自己的课题”这一界限；然后，请丢开别人的课题。<code>这是减轻人生负担，使其变得简单的第一步。</code></p></li><li><blockquote><p>放下别人的课题，烦恼轻轻飞走</p></blockquote><p> 关于自己的人生你能够做的就只有<code>“选择自己认为最好的道路”。</code>另一方面，别人如何评价你的选择，那是别人的课题，你根本无法左右。别人如何看自己，无论是喜欢还是讨厌，那都是对方的课题而不是自己的课题<code>分离就是这么回事。</code>你太在意别人的视线和评价，所以才会不断寻求别人的认可。</p><p> 请你想想前面那位老婆婆说的“在意你的脸的只有你自己”那句话。<code>她的话一语道破了课题分离的核心。看到你的脸的别人怎么想，那是别人的课题，你根本无法左右。</code></p><p> “人生的谎言”是与阿德勒心理学的根本原则紧密相关的讨论。如果生气的话，就根本无法冷静思考</p><p> <code>更加具体的方法</code>首先要思考一下“这是谁的课题”。然后进行课题分离——哪些是自己的课题，哪些是别人的课题，要冷静地划清界限。而且，<code>不去干涉别人的课题也不让别人干涉自己的课题</code>这就是阿德勒心理学给出的具体而且有可能彻底改变人际关系烦恼的具有划时代意义的观点。</p></li><li><blockquote><p>砍断“格尔迪奥斯绳结”</p></blockquote><p> 课题分离并不是人际关系的最终目标，而是入口</p><p> 例如:<br> 读书的时候如果离得太近就会什么都看不见。同样，要想构筑良好的人际关系也需要保持一定的距离。如果距离太近，贴在一起，那就无法与对方正面对话。虽说如此，但距离也不可以太远。父母如果一味训斥孩子，心就会疏远。如果这样的话，孩子甚至都不愿与父母商量，父母也不能提供适当的援助。伸伸手即可触及，但又不踏入对方领域，保持这种适度距离非常重要。</p><p> 如果对方为自己做了什么—-即使那不是自己所期望的事情——-自己也必须给予报答。这其实并非是不辜负好意，而仅仅是受回报思想的束缚。无论对方做什么，决定自己应该如何做的都应该是自己。<code>如果人际关系中有“回报思想”存在，那就会产生“因为我为你做了这些，所以你就应该给予相应回报”这样的想法。</code>当然，这是一种与课题分离相悖的思想。<code>我们既不可以寻求回报，也不可以受其束缚。</code></p><p> 但是，<code>有些情况下不进行课题分离而是干涉别人的课题会更加容易</code>。例如孩子总是系不上鞋带，对繁忙的母亲而言，直接帮孩子系上要比等着孩子自己系上更快。但是，这种行为是一种干涉，是在剥夺孩子的课题。而且，反复干涉的结果会是孩子什么也学不到，最终还会失去面对<code>人生课题的勇气</code>。阿德勒说：“没有学会直面困难的孩子最终会想要逃避一切困难。”</p><p> 阿德勒心理学中有反常识的方面：<code>否定原因论、否定精神创伤、采取目的论</code>；认为人的烦恼全都是关于人际关系的烦恼；此外，不寻求认可或者课题分离也全都是反常识的理论。</p></li><li><blockquote><p>对认可的追求，扼杀了自由</p></blockquote><p> 是选择别人的认可还是选择得不到认可的自由之路，这是非常重要的问题</p><p> 咱们一起来思考一下，在意别人的视线、看着别人的脸色生活、为了满足别人的期望而活着，这或许的确能够成为一种人生路标，但这却是极其不自由的生活方式。那么，为什么要选择这种不自由的生活方式呢？<br> “认可欲求”:总而言之就是不想被任何人讨厌<br> 的确没有希望惹人厌的人。但是，请你这样想：<code>为了不被任何人厌恶需要怎么做呢？答案只有一个。那就是时常看着别人的脸色并发誓忠诚于任何人。如果周围有10个人，那就发誓忠诚于10个人。如果这样的话，暂时就可以不招任何人讨厌了。</code>但是，此时有一个大矛盾在等着你。因为一心不想招人讨厌，所以就发誓忠诚于全部10个人，这就像陷入民粹主义的政治家一样，做不到的事情也承诺“能做到”，负不起的责任也一起包揽。当然，<code>这种谎言不久后就会被拆穿，然后就会失去信用使自己的人生更加痛苦。</code>自然，继续撒谎的压力也超出想象。这一点请你一定好好理解。为了满足别人的期望而活以及把自己的人生托付给别人，这是一种对自己撒谎也不断对周围人撒谎的生活方式。</p><p> 分离课题并不是以自我为中心，相反，干涉别人的课题才是以自我为中心的想法</p><p> 父母强迫孩子学习甚至对其人生规划或结婚对象指手画脚，这些都是以自我为中心的想法。选择了不自由生活方式的大人看着自由活在当下的年轻人就会批判其“享乐主义”。</p></li><li><blockquote><p>自由就是被别人讨厌</p></blockquote><p> “没有人愿意故意招人厌”这可以说是一种非常敏锐的洞察。虽说如此，<code>但不管我们怎么努力，都既会有讨厌我的人也会有讨厌你的人，这也是事实</code>也就是本能性的欲望、冲动性的欲望。“倾向性自由就是被别人讨厌”这是你行使自由以及活得自由的证据，也是你按照自我方针生活的表现</p><p> 如果想要行使自由，那就需要付出代价。而在人际关系中，自由的代价就是被别人讨厌。我是说不要害怕被人讨厌并不是说要去故意惹人讨厌或者是去作恶。这一点请不要误解。<code>既不是自以为是，也不是将错就错，只是分离课题。</code></p><p> 即使有人不喜欢你，那也并不是你的课题.<code>不畏惧被人讨厌而是勇往直前，不随波逐流而是激流勇进，这才是对人而言的自由</code>比起别人如何看自己，我更关心自己过得如何。也就是想要自由地生活。<code>获得幸福的勇气也包括“被讨厌的勇气”。</code>一旦拥有了这种勇气，你的人际关系也会一下子变得轻松起来。</p></li><li><blockquote><p>人际关系“王牌”，握在你自己手里</p></blockquote><p> <code>例子：</code><br> 这也是我和父母之间关系的事情。我自幼就与父亲关系不好，几乎从未进行过真正的对话。我20多岁的时候母亲去世了，之后我与父亲的关系就更加恶化。对，这种情况一直持续到我邂逅阿德勒心理学并理解了阿德勒思想。</p><p> 我记忆中有被父亲殴打的印象。具体为什么不记得了，只记得我被打得逃到桌子底下又被父亲拽出来狠狠地打，并且不是一次而是很多次。</p><p> 在邂逅阿德勒心理学之前我也是这么理解的。因为父亲是一个沉默寡言、不好接近的人。但是，认为“因为那时候被打所以关系不和”是弗洛伊德式的原因论的想法。如果站在阿德勒目的论的立场上，因果律的解释就会完全倒过来。也就是说，我“为了不想与父亲搞好关系，所以才搬出被打的记忆”。</p><p> 青年：也就是说先生您是先有不想与父亲和好这一“目的”？</p><p> 是的。对我来说，不修复与父亲之间的关系更合适，因为如果自己的人生不顺利就可以归咎于父亲。这其中有对我来说的“善”，也许还有对封建的父亲的“报复”可以从“人际关系之卡”这个观点来进行考虑。只要是按照原因论认为“因为被打所以才与父亲不和”，那么现在的我就只能束手无策了。但是，如果认为“因为不想与父亲和好所以才搬出被打的记忆”，那“关系修复之卡”就会握在自己手中。因为只要我改变“目的”，事情就能解决。</p><p> 青年：虽然作为道理能够明白，但感觉上还是无法接受。</p><p> 还是课题分离。的确，父亲和我的关系很复杂。实际上，父亲是个非常固执的人，他的心不会轻易发生变化；不止如此，很可能就连对我动过手的事情都忘记了。但是，当我下定修复关系之“决心”的时候，父亲拥有什么样的生活方式、怎么看我、对我主动靠近他这件事持什么态度等，这些与我都毫无关系了。即使对方根本不想修复关系也无所谓。问题是我有没有下定决心，“人际关系之卡”总是掌握在自己手中。</p><p> 多人认为人际关系之卡由他人掌握着。正因为如此才非常在意“那个人怎么看我”，选择满足他人希望的生活方式。但是，如果能够理解课题分离就会发现，其实一切的卡都掌握在自己手中这会是全新的发现。</p><p> 我的变化不是“为了改变父亲”。那是一种想要操纵别人的错误想法。我改变了，发生变化的只是“我”。作为结果，对方会怎样我不知道，也无法左右，这也是课题分离。</p><p> <code>总之，把改变自己当成操纵他人的手段是一种极其错误的想法。</code></p></li></ol><h2 id="要有被讨厌的勇气"><a href="#要有被讨厌的勇气" class="headerlink" title="要有被讨厌的勇气"></a>要有被讨厌的勇气</h2><ol><li><blockquote><p>个体心理学和整体论</p></blockquote><p> 阿德勒反对把精神和身体、理性和感情以及意识和无意识等分开考虑的一切二元论的价值观。</p><p> 你现在是把自己的线和他人的线乱糟糟地缠在一起来看世界。红、蓝、黄、绿，一切颜色都混杂在一起，这种状态叫”缠绕“，而不是”联系“</p><p> 联系：相反，分离课题是人际关系的出发点。今天我们来深入讨论一下阿德勒心理学是如何看待整个人际关系的以及我们应该与他人缔结什么样的人际关系</p></li><li><blockquote><p>人际关系的终极目标</p></blockquote><p> 人际关系的”终点“在哪里呢?如果只回答结论的话，那就共同体感觉.</p><p> 在这里我们再深入考虑一下。如果他人是伙伴，我们生活在伙伴中间，那就能够从中找到自己的”位置“，而且还可以认为自己在为伙伴们一一也就是共同体——做着贡献。像这样把他人看作伙伴并能够从中感到”自己有位置“的状态，就叫共同体感觉。</p><p> 社会的最小单位. ”我和你“。只要有两个人存在，就会产生社会、产生共同体。</p><p> 首先可以以”我和你“为起点把对自己的执著（selfinterest）变成对他人的关心（socialinterest）。</p></li><li><blockquote><p>“拼命寻求认可”反而是以自我为中心？</p></blockquote><p> 这里我们把“对自己的执著”这个词换成更容易理解的“以自我为中心”，实际上，不能进行“课题分离”、一味拘泥于认可欲求的人也是极其以自我为中心的人。</p></li><li><blockquote><p>你不是世界的中心，只是世界地图的中心</p></blockquote><p> 自己人生的主人公是“我”。这种认识并没有问题。但是，这并不意味着“我”君临于世界的中心。</p><p> <code>只关心自己的人. 他们超越了“人生的主人公”，进而越位到“世界的主人公”。因此，在与他人接触的时候总是会想：“这个人给了我什么？”</code></p><p> 因此，当期待落空的时候，他们往往会大失所望并感觉受到了极大的屈辱，而且还会非常愤慨，产生诸如“那个人什么也没有为我做，”那个人辜负了我的期望“或者”那个人不再是朋友而是敌人“之类的想法。抱着自己位于世界中心这种信念的人很快就会失去”朋友“。</p><p> <code>例如，</code>在法国使用的世界地图上，美洲大陆位于左端，右端则是亚洲，被绘制在地图中心的是欧洲，是法国。另一方面，如果是中国使用的地图，那么中国就会被绘制在中心位置，美洲大陆在右端、欧洲在左端。也许法国人在看中国版世界地图的时候会产生一种难以名状的不协调感，认为自己被非常不当地赶到了边缘，仿佛世界被任意切割了一样</p><p> 但是，在地球仪上看世界的时候又会如何呢？如果是地球仪，既可以把法国看作中心，也可以把中国看作中心，还可以把巴西看作中心。一切地方都是中心，同时一切地方又都不是中心。根据看的人所处的位置或角度可以产生无数个中心。这就是地球仪。</p><p> <code>不是考虑”这个人会给我什么“，而是要必须思考一下”我能给这个人什么“。这就是对共同体的参与和融入。</code></p><p> <code>归属感不是生来就有的东西，要靠自己的手去获得。</code></p></li><li><blockquote><p>在更广阔的天地寻找自己的位置</p></blockquote><p> 请让我整理一下。首先，人际关系的起点是”课题分离“，终点是”共同体感觉“。而且，共同体感觉是指”把他人看成朋友，并在其中能够感受到有自己的位置“。这些都还容易理解，也能够接受。</p><p> 在这里希望你能关注的是”还有更多别的共同体“，特别是”还有更大的共同体”。</p><p> 在学校之外，还有更加广阔的世界。而且，我们都是那个世界的一员。如果学校中没有自己位置的话，还可以从学校”外面“找到别的位置，可以转学，甚至可以退学。一张退学申请就可以切断联系的共同体终归也就只是那种程度的联系。</p><p> 如果了解了世界之大，就会明白自己在学校中所受的苦只不过是”杯中风暴“而己。只要跳出杯子，猛烈的风暴也会变成微风。闷在自己房间里就好比停留在杯子里躲在一个小小的避难所里一样。即使能够临时避雨，但暴风雨却不会停止。</p><p> 有时候去做的确不简单。这里有需要记住的行动原则。<code>当我们在人际关系中遇到困难或者看不到出口的时候，首先应该考虑的是”倾听更大共同体的声音“这一原则。</code></p><p> 假设在你的学校教师是绝对的权力主导者，但那种权力或权威只是通用于学校这个小的共同体的一种常识，其他什么都不是。如果按照”人的社会“这个共同体来考虑的话，你和教师都是平等的”人“。如果被提出不合理的要求，那就可以正面拒绝。</p><p> <code>这也可以拿”我和你“的关系来进行说明，如果是因为你的反对就能崩塌的关系，那么这种关系从一开始就没有必要缔结，由自己主动舍弃也无所谓。</code>活在害怕关系破裂的恐惧之中，那是为他人而活的一种不自由的生活方式。</p><p> 既要拥有共同体的感觉，又要选择自由</p><p> 没必要固执于眼前的小共同体。更多其他的”我和你“、更多其他的”大家“、更多大的共同体一定存在。</p></li><li><blockquote><p>批评不好……表扬也不行？</p></blockquote><p> 在教育孩子或是培养部下的时候，一般都认为有两个方法：批评教育法和表扬教育法。</p><p> 那句”不错嘛，你做得很好“中所包含的俯视般的语感让人不愉快。</p><p> <code>表扬这种行为含有”有能力者对没能力者所做的评价“这方面的特点</code></p><p> 无意之中就营造了一种上下级关系</p><p> 人表扬他人的目的就在于”操纵比自己能力低的对方“，其中既没有感谢也没有尊敬。</p><p> 我们表扬或者批评他人只有”用糖还是用鞭子“的区别，其背后的目的都是操纵。阿德勒心理学之所以强烈否定赏罚教育，就因为它是为了操纵孩子。</p><p> <code>是平等即”横向“关系。</code>例如，有些男人会骂家庭主妇”又不挣钱！“或者”是谁养着你呀？“之类的话，也听到过有人说”钱随便你花，还有什么不满的呀？“之类的话，这都是多么无情的话呀！经济地位跟人的价值毫无关系。公司职员和家庭主妇只是劳动场所和任务不同，完全是”虽不同但平等“</p></li><li><blockquote><p>有鼓励才有勇气</p></blockquote><p> 援助的大前提是课题分离和横向关系</p><p> 既不表扬也不批评。<code>阿德勒心理学把这种基于横向关系的援助称为”鼓励</code></p><p> 人害怕面对课题并不是因为没有能力</p><p> 纯粹是<code>缺乏直面课题的‘勇气’</code>。如果是这样的话，那就首先应该找回受挫的勇气。</p><p> <code>如果以获得表扬为目的，那最终就会选择迎合他人价值观的生活方式</code></p><p> 首先应该进行课题分离，然后应该在接受双方差异的同时建立平等的横向关系。”鼓励“则是这种基础之上的一种方法。</p></li><li><blockquote><p>有价值就有勇气<br> 具体应该如何鼓励呢？</p></blockquote><p> 如果考虑一下平等的伙伴给你提供工作帮助的时候，答案自然就出来了。例如，当朋友帮助你打扫房间的时候，你会说什么呢？应该会说”谢谢“</p><p> 最重要的是不”评价“他人，评价性的语言是基于<code>纵向关系</code>的语言 .<br> 另一方面，”谢谢“不是一种评价，而是更加纯粹的感谢之词。人在听到感谢之词的时候，就会知道自己能够对别人有所贡献。</p><p> 心理学认为”贡献“这个词非常沉重<br> 我们在讨论自卑感的时候，不是说过这是主观价值问题吗？是认为”自己有价值“？还是认为”自己是没有价值的存在“  如果能够认为”自己有价值“的话，那个人就能够接纳自我并建立起直面人生课题的勇气。人只有在可以体会到”我对共同体有用“的时候才能够感觉到自己的价值</p><p> 也就是他人服务能够体会到”我对别人有用“，不是被别人评价说”很好“，<code>而是主观上就能够认为”我能够对他人做出贡献“，只有这样我们才能够真正体会到自己的价值。</code></p><p> 对别人寄予关心、建立横向关系、使用鼓励法，这些都能够带给自己”我对别人有用“这一实际感受，继而就能增加生活的勇气</p></li><li><blockquote><p>只要存在着，就有价值</p></blockquote><p> 很多人现在是在用”行为“标准来看待他人，也就是那个人”做了什么“这一次元。<br> 的确，按照这个标准来考虑的话，卧病在床的老人只能靠别人照顾，看上去似乎是没有什么用。因此，请不要用”行为“标准而是用”存在“标准去看待他人；不要用他人”做了什么“去判断，而应对其存在本身表示喜悦和感谢</p><p> 如果按照存在标准来考虑的话，我们仅仅因为”存在于这里“，就己经对他人有用、有价值了，这是不容怀疑的事实。</p><p> <code>对于自己，不要用”行为“标准去考虑，而要首先从”存在“标准上去接纳。</code></p></li><li><blockquote><p>无论在哪里，都可以有平等的关系</p></blockquote><p>如果你与某人建立起了纵向关系，那你就会不自觉地从”纵向“去把握所有的人际关系</p><p>尊敬长者非常重要。如果是公司组织，职责差异自然也会存在。<code>并不是说将任何人都变成朋友或者像对待朋友一样去对待每一个人，不是这样的，重要的是意识上的平等以及坚持自己应有的主张。</code></p><p>无论是爱还是交友，都与年龄没有关系：交友课题需要一定的勇气，这也是事实。关于你和我的关系，我们可以逐渐缩短距离，<code>保持既不靠得太近但又伸手可及的距离。</code></p></li></ol><h2 id="认真的人生”活在当下”"><a href="#认真的人生”活在当下”" class="headerlink" title="认真的人生”活在当下”"></a>认真的人生”活在当下”</h2><ol><li><blockquote><p>不是肯定自我，而是接纳自我</p></blockquote><p> 首先我们来讨论一下你刚才说到的”受自我意识羁绊，不能无拘无束行动“的问题</p><p> 建立起共同体感觉。这需要从以下三点做起：<code>”自我接纳“”他者信赖“和”他者贡献“。</code></p><p> ”自我接纳“:<br> 我们既不能丢弃也不能更换”我“这个容器。但是，重要的是”如何利用被给予的东西“来改变对”我“的看法和利用方法。<code>不是自我肯定而是自我接纳。</code>这两者有明显差异。<code>自我肯定是明明做不到但还是暗示自己说”我能行“或者”我很强“</code>，也可以说是一种容易导致优越情结的想法，<code>是对自己撒谎的生活方式</code>。而另一方面，自我接纳是指假如做不到就诚实地接受这个”做不到的自己“，然后尽量朝着能够做到的方向去努力，不对自己撒谎。</p><p> 说得更明白一些就是，对得了60分的自己说”这次只是运气不好，真正的自己能得100分“，这就是自我肯定；与此相对，在诚实地接受60分的自己的基础上努力思考”如何才能接近100分“，这就是自我接纳。</p><p> <code>人都处于”想要进步的状态“。反过来说也就是，根本没有满分的人。这一点必须积极地承认。</code></p><p> 上帝，请赐予我平静，去接受我无法改变的给予我勇气，去改变我能改变的；赐我智慧，分辨这两者的区别。<br> 这是广为流传的“尼布尔的祈祷文”，是一段非常有名的话</p></li><li><blockquote><p>信用和信赖有何区别</p></blockquote><p> 还要把“对自己的执著”变成<code>“对他人的关心”</code>，这就是绝对不可以缺少的第二个关键词——<code>“他者信赖”。</code></p><p> <code>这里的信赖是指什么呢？</code><br> 在相信他人的时候不附加任何条件。即使没有足以构成信用的客观依据也依然相信，不考虑抵押之类的事情，无条件地相信。这就是信赖</p><p> 也许会被欺骗、被利用。但是，请你站在背叛者的立场上去想一想。如果有人即使被你背叛了，也依然继续无条件地相信你，无论遭受了什么样的对待依然信赖你。你还能对这样的人屡次做出背信弃义的行为吗？</p><p> 信赖的反面是什么？<br> <code>是怀疑</code>。假设你把人际关系的基础建立在“怀疑”之上。怀疑他人、怀疑朋友、甚至怀疑家人或恋人，生活中处处充满怀疑。<br> 那么，这样究竟会产生什么样的关系呢？对方也能够瞬时感觉到你怀疑的目光，会凭直觉认为“这个人不信赖我”。你认为这样还能建立起什么积极的关系吗？只有我们选择了无条件的信赖，才可以构筑更加深厚的关系。</p><p> 阿德勒心理学的观点很简单。你现在认为“无条件地信赖别人只会遭到背叛”。<code>但是，决定背不背叛的不是你，那是他人的课题。你只需要考虑“我该怎么做”</code>。“如果对方讲信用我也给予信任”，这只不过是一种基于抵押或条件的信用关系。</p><p> 就像我反复提到的一样，如果能够进行课题分离，那么人生就会简单得令你吃惊。但是，即使理解课题分离的原理和原则比较容易，实践起来也非常困难。这一点我也承认。</p><p> <code>如果你并不想与那个人搞好关系的话，也可以用手中的剪刀彻底剪断关系，因为剪断关系是你自己的课题。</code></p><p> 你好像还没能理解信赖的目的。例如，假设你在恋爱关系中怀疑“她可能不专一”。并且还积极寻找对方不专一的证据。你认为结果会怎样呢？<br> 对方无意的言行、与别人通电话时的语气、联系不上的时间……如果用怀疑的眼光去看，所有的事情看上去都会成为“不专一的证据”，哪怕事实并非如此。</p><p> 你现在一味地担心“被背叛”，也只关注因此受到的伤痛。但是，如果不敢去信赖别人，那最终就会与任何人都建立不了深厚的关系。</p><p> <code>悲伤的时候尽管悲伤就可以。</code>因为，正是想要逃避痛苦或悲伤才不敢付渚行动，以至于与任何人都无法建立起深厚的关系。请你这样想。<code>我们可以相信也可以怀疑；并且，我们的目标是把别人当作朋友。如此一来，是该选择信任还是怀疑，答案就非常明显了</code></p></li><li><blockquote><p>工作的本质是对他人的贡献</p></blockquote><p> <code>对他人寄予信赖也就是把他人看成伙伴。</code>正因为是伙伴，所以才能够信赖。如果不是伙伴，也就做不到信赖。</p><p> 如果把他人看作伙伴，那你也就能够在所属的共同体中找到自己的位置，继而也就能够获得“可以在这里”的归属感</p><p> 并且，视他人为敌的人既做不到自我接纳，也无法充分做到他者信赖。<br> 共同体感觉并不是仅凭自我接纳和他者信赖就可以获得的。这里还需要第三个关键词——“他者贡献”。</p><p> <code>对作为伙伴的他人给予影响、作出贡献，这就是他者贡献。</code></p><p> <code>他者贡献并不是舍弃“我”而为他人效劳，它反而是为了能够体会到“我”的价值而采取的一种手段。</code></p><p> 最容易理解的他者贡献就是工作一到社会上去工作或者做家务。劳动并不是赚取金钱的手段，我们通过劳动来实现他者贡献、参与共同体、体会“我对他人有用”，进而获得自己的存在价值。</p><p> 当然，赚钱也是一个重大要素。正如你之前查到的陀思妥耶夫斯基所说的“被铸造的自由”一样。但是，<code>有些富豪已经拥有了一生也花不完的巨额财产，但他们中的多数人至今依然继续忙碌工作着。为什么要工作呢？是因为无底的欲望吗？不是。这是为了他者贡献继而获得“可以在这里的”归属感。获得巨额财富之后便致力于参加慈善活动的富豪们，也为了能够体会自我价值、确认“可以在这里”的归属感而进行着各种各样的活动。</code></p></li><li><blockquote><p>年轻人也有胜过长者之处</p></blockquote><p> <code>在视他人为“敌人”的状态下所作出的贡献也许是伪善的。</code>但是，如果他人是“伙伴”，所有的贡献也就不会是伪善了。你之所以一直纠结于伪善这个词，那是因为还没能理解共同体感觉</p><p> 前面我一直按照<code>自我接纳、他者信赖、他者贡献</code>这种顺序来进行说明。<code>但是，这三者是缺一不可的整体</code></p><p> 正因为接受了真实的自我————也就是“自我接纳”————才能够不惧背叛地做到“他者信赖”；而且，正因为对他人给予无条件的信赖并能够视他人为自己的伙伴，才能够做到“他者贡献”；同时，正因为对他人有所贡献，才能够体会到“我对他人有用”进而接受真实的自己，做到“自我接纳”</p><p> <code>可以迷路也可以走偏，只要不再从属于纵向关系，不畏惧惹人讨厌地自由前行就可以。</code>如果所有人都能够认为“年轻人更超前”的话，世界就会发生重大改变。</p></li><li><blockquote><p>“工作狂”是人生谎言</p></blockquote><p> 常常使用“大家”“总是”或者“一切”之类词语的人。“大家都讨厌自己”“总是只有自己受损失”或者“一切都不对”等。如果你常常说这种一般化的词语，那就需要注意了。</p><p> 阿德勒心理学认为这种生活方式是缺乏<code>“人生和谐”</code>的生活方式，<code>是一种只凭事物的一部分就来判断整体的生活方式。</code></p><p> <code>例子：</code><br> 犹太教教义中有这么一段话：“假如有10个人，其中势必会有1个人无论遇到什么事都会批判你。他讨厌你，你也不喜欢他。而且，10个人中也会有2个人能够成为与你互相接纳一切的好朋友。剩下的7个人则两者都不是。”<br> 这种时候，是关注讨厌你的那个人呢？还是聚焦于非常喜欢你的那2个人？抑或是关注其他作为大多数的7个人？缺乏人生和谐的人就会只关注讨厌自己的那个人来判断“世界”</p><p> 将焦点聚集到微不足道的一个方面并企图以此来评价整个世界。这就是缺乏人生和谐的错误生活方式。</p><p> <code>此相对，工作狂则是只关注人生特定的侧面。</code><br> 也许他们会辩解说：“因为工作忙，所以无暇顾及家庭。”但是，这其实是人生的谎言。只不过是以工作为借口来逃避其他责任。本来家务、育儿、交友或兴趣应该全都给予关心，阿德勒不认可任何一方面突出的生活方式。</p><p> 在某种意义上来说，这是一种不敢正视人生课题的生活方式。<code>“工作”并不仅仅是指在公司上班。家庭里的工作、育儿、对地域社会的贡献、兴趣等，这一切都是“工作”，公司等只不过是一小部分而已。</code>只考虑公司的工作，那是一种缺乏人生和谐的生活方式。</p><p> 只能靠“行为标准”来认可自己价值的父亲。认为自己工作了这些时间、挣了足以养活家人的钱、也得到了社会的认可，所以自己就是家里最有价值的人。但是，任何人都有自己不再是生产者的时候。例如，上了年纪退休之后不得不靠退休金或孩子们的赡养生活；或者虽然年轻但因为受伤或生病而无法劳动。这种时候，只能用“行为标准”来接受自己的人总会受到非常严重的打击。</p><p> 是按照“行为标准”来接受自己还是按照“存在标准”来接受自己，这正是一个有关“获得幸福的勇气”的问题。</p></li><li><blockquote><p>从这一刻起，就能变得幸福</p></blockquote><p> 对人而言，最大的不幸就是不喜欢自己。对于这种现实，阿德勒准备了极其简单的回答————“我对共同体有益”或者“我对他人有用”这种想法就足以让人体会到自己的价值。</p><p> <code>判断你的贡献是否起作用的不是你，那是他人的课题，是你无法干涉的问题。是否真正作出了贡献，从原理上根本无从了解。也就是说，进行他者贡献时候的我们即使作出看不见的贡献，只要能够产生“我对他人有用”的主观感觉即“贡献感”也可以。</code>也就是“幸福即贡献感”。这就是幸福的定义。</p><p> <code>所有的人都能够获得幸福。但是，这并不等于“所有的人都幸福”，</code>你必须首先理解这一点。无论是用行为标准还是存在标准，都需要“感受”到自己对他人有用，也就是贡献感。</p><p> <code>获得贡献感的手段一旦成了“被他人认可”，最终就不得不按照他人的愿望来过自己的人生。</code>通过认可欲求获得的贡献感没有自由。但我们人类是在选择自由的同时也在追求幸福。</p><p> 因为即使不特意去寻求他人的认可，也可以体会到“我对他人有用”。也就是说，受认可欲求束缚的人不具有共同体感觉，还不能做到自我接纳、他者信赖和他者贡献。</p><p> <code>总结</code>一下哲人的主张，就是这样：人只有在能够感觉到“我对别人有用”的时候才能体会到自己的价值。但是，这种贡献也可以通过看不见的形式实现。只要有“对别人有用”的主观感觉，即“贡献感”就可以。并且，哲人还得出了这样的结论：<code>幸福就是“贡献感”。</code>的确，这也是真理的一面。但是，幸福就仅止于此吗？我所期待的幸福并不是这样的！</p></li><li><blockquote><p>追求理想者面前的两条路</p></blockquote><p> 问题行为<br> <code>希望特别优秀的愿望无法实现的时候————例如学习或运动进展不顺利的时候——就会转而“希望特别差劲”。</code></p><p> 无论是希望特别优秀还是希望特别差劲，其目的都一样——引起他人的关注、脱离“普通”状态、成为“特别的存在”。这就是他们的目的。</p><p> 也就是陷入问题行为的孩子却可以在不付出这种健全努力的情况下也获得他人的关注。阿德勒心理学称之为“廉价的优越性追求”。</p><p> <code>例如</code>，有些问题儿童在上课的时候通过扔橡皮或者是大声说话来妨碍上课，如此一来肯定会引起同学或老师的注意，此刻其就可以成为特别的存在。但这是“廉价的优越性追求”，是一种不健全的态度</p><p> <code>“复仇”和“廉价的优越性追求”很容易联系起来。这就是在让对方烦恼的同时还想成为“特别的存在”。</code></p></li><li><blockquote><p>甘于平凡的勇气</p></blockquote><p> 做人为什么非要“特别”呢？这是因为无法接受“普通的自己”。所以，在“特别优秀”的梦想受挫之后便非常极端地转为“特别差劲”。</p><p> 但是，普通和平凡真的不好吗？有什么不好呢？<code>实际上谁都是普通人。没有必要纠结于这一点。</code></p><p> 拒绝普通的你也许是把“普通”理解成了“无能”吧。<code>普通并不等于无能，我们根本没必要特意炫耀自己的优越性。</code></p><ol start="9"><li><blockquote><p>人生是一连串的刹那</p></blockquote></li></ol><p> 阿德勒心理学的立场与此不同。把人生当作登山的人其实是把自己的人生看成了一条“线”。自降生人世那-瞬间便己经开始的线，画着大大小小形形色色的曲线到达顶点，最终迎来“死”这一终点。但是，这种把人生理解为故事的想法与弗洛伊德式的原因论紧密相关，而且会把人生的大半时光当作“在路上”。</p><p> 请不要把人生理解为一条线，而要理解成点的连续。</p><p> 如果拿放大镜去看用粉笔画的实线，你会发现原本以为的线其实也是一些连续的小点。看似像线一样的人生其实也是点的连续，也就是说人生是连续的刹那。</p><p> 不了解这一点的大人们总是想要强迫年轻人过“线”一样的人生。在他们看来，上好大学、进好企业、拥有稳定的家庭，这样的轨道才是幸福的人生。但是，人生不可能是一条线。</p><p> <code>计划式的人生不是有没有必要，而是根本不可能。</code></p></li><li><blockquote><p>舞动人生</p></blockquote><p>潜在性和现实性<br>旅行的目的是什么？例如你要去埃及旅行。这时候你会想尽早尽快地到达胡夫金字塔，然后再以最短的距离返回吗？<br>如果是这样的话，那就不能称为旅行。跨出家门的那一瞬间，“旅行”已经开始，朝着目的地出发途中的每一个瞬间都是旅行。当然，即使因为某些事情而没能够到达金字塔，那也并非没有旅行。这就是现实性的人生。</p><p><code>如果登山的目的是登上山顶，那它就是潜在性的行为。</code>说得极端点儿，乘坐电梯登上山顶，逗留5分钟，然后再乘电梯回来也可以。当然，如果没能到达山顶的话，其登山活动就等于失败。但是，<code>如果登山的目的不是登顶而是登山本身</code></p><p><code>那就可以说是现实性的活动。最终能不能登上山顶都没有关系。</code></p></li><li><blockquote><p>最重要的是“此时此刻”</p></blockquote><p>人生是连续的刹那，根本不存在过去和未来。<code>你是想要通过关注过去或未来为自己寻找免罪符。</code>过去发生了什么与你的“此时此刻”没有任何关系，未来会如何也不是“此时此刻”要考虑的问题</p><p>把人生当作故事是很有趣的事情。但是，在故事的前面部分就能看到“模糊的将来”；<code>并且，人们还会想要按照这个故事去生活。我的人生就是这样，所以我只能照此生活，错不在我而在于过去和环境。这里搬出来的过去无非是一种免罪符，是人生的谎言。</code></p><p><code>聚焦“此时此刻”是认真而谨慎地做好现在能做的事情。</code></p></li><li><blockquote><p>对决“人生最大的谎言”</p></blockquote><p><code>例如，</code>虽然想上大学但却不想学习，这就是没有认真过好“此时此刻”的态度。当然，考试也许是很久之后的事情，也不知道该学到什么程度，所以也许会感到麻烦。但是，每天进步一点点也可以，解开一个算式或者记住一个单词都可以。也就是要不停地跳舞。如此一来，势必会有“今天能够做到的事情”。今天这一天就为此存在，而不是为遥远的将来的考试而存在。</p><p>你自己的人生也同样。为遥远的将来设定一个目标，并认为现在是其准备阶段。一直想着“真正想做的是这样的事情，等时机到了就去做”，<code>是一种拖延人生的生活方式。</code>只要在拖延人生，我们就会无所进展，只能每天过着枯燥乏味的单调生活。<code>因为在这种情况下，人就会认为“此时此刻”只是准备阶段和忍耐阶段。</code></p><p>但是，为了遥远将来的考试而努力学习的“此时此刻”却是真实的存在。</p><p><code>人生很简单，并不是什么深刻的事情。如果认真过好了每一个刹那，就没有什么必要令其过于深刻</code></p></li></ol><pre><code>`人生中最大的谎言就是不活在“此时此刻”。`纠结过去、关注未来，把微弱而模糊的光打向人生整体，自认为看到了些什么。你之前就一直忽略“此时此刻”，只关注根本不存在的过去和未来。对自己的人生和无可替代的刹那撒了一个大大的谎言。</code></pre><ol start="13"><li><blockquote><p>人生的意义，由你自己决定</p></blockquote><p>人生的意义是什么？人为了什么而活？当有人提出这个问题的时候，阿德勒的回答是：“并不存在普遍性的人生意义。”</p><p>“人生的意义是由你自己赋予自己的”，就正是这个意思。人生没有普遍性的意义。但是，你可以赋予这样的人生以意义，而能够赋予你的人生以意义的只有你自己。</p><p><code>无论你过着怎样的刹那，即使有人讨厌你，只要没有迷失“他者贡献”这颗引导之星，那么你就不会迷失，而且做什么都可以。即使被讨厌自己的人讨厌着也可以自由地生活。</code></p><p><code>世界很简单，人生也是一样！</code></p></li></ol><h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p>把阿德勒思想当作自己的思想去实践并没有那么容易。想要排斥的地方、难以接受的言论、令人费解的建议，这些都可能会存在。</p><p>因为哲学真正的意义不在于”知识“而在于”热爱知识“，想要了解不了解的事物以及获得知识的过程非常重要</p><p>希望认真生活非常重要，但仅仅如此还不够。阿德勒说：”人的烦恼皆源于人际关系。“如果不懂得如何构筑良好的人际关系，有时候就会因为想要满足他人期待或者不想伤害他人而导致虽有自己主张但无法传达，最终不得不放弃自己真正想做的事情。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 书本 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>健身环一周目感受</title>
      <link href="/posts/f312.html"/>
      <url>/posts/f312.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>于2020双十一500rmb购入，断断续续锻炼，于2021.4完成一周目<br>先放图。<br><img src="https://raw.githubusercontent.com/pengyirui/blog_img/main/2021-05-23-01.png" alt="ps：我身高168（好矮。。。）"></p></blockquote><p>其实健身环还是挺有效的，尤其是我这种不怎么出门的死宅，可以在家锻炼使身体不那么肥胖。而且游戏+健身结合的缘故，也让我对锻炼身体没有那么抵触，任天堂就是世界的主宰！！！😎</p><p><code>每日运动小知识</code>在我的相册里面就能在下查看<br>下面的链接是下载本地看的（备份）<br><a href="https://pengyirui.lanzoui.com/ida1Lpdniwb">https://pengyirui.lanzoui.com/ida1Lpdniwb</a></p><p><img src="https://raw.githubusercontent.com/pengyirui/blog_img/main/2021-05-23-02.jpg" alt="加个好友一起玩呀"></p><p>以下是一些游戏截图<br><img src="https://raw.githubusercontent.com/pengyirui/blog_img/main/2021-05-23-03.jpg"><br><img src="https://raw.githubusercontent.com/pengyirui/blog_img/main/2021-05-23-04.jpg"><br><img src="https://raw.githubusercontent.com/pengyirui/blog_img/main/2021-05-23-05.jpg"><br><img src="https://raw.githubusercontent.com/pengyirui/blog_img/main/2021-05-23-06.jpg"><br><img src="https://raw.githubusercontent.com/pengyirui/blog_img/main/2021-05-23-07.jpg"><br><img src="https://raw.githubusercontent.com/pengyirui/blog_img/main/2021-05-23-08.jpg"><br><img src="https://raw.githubusercontent.com/pengyirui/blog_img/main/2021-05-23-09.jpg"><br><img src="https://raw.githubusercontent.com/pengyirui/blog_img/main/2021-05-23-010.jpg"><br><img src="https://raw.githubusercontent.com/pengyirui/blog_img/main/2021-05-23-011.jpg"><br><img src="https://raw.githubusercontent.com/pengyirui/blog_img/main/2021-05-23-012.jpg"></p>]]></content>
      
      
      
        <tags>
            
            <tag> 自言自语 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>非暴力沟通</title>
      <link href="/posts/3716.html"/>
      <url>/posts/3716.html</url>
      
        <content type="html"><![CDATA[<h2 id="非暴力沟通"><a href="#非暴力沟通" class="headerlink" title="非暴力沟通"></a>非暴力沟通</h2><p>作者 <em>马歇尔·卢森堡</em></p><p><img src="https://raw.githubusercontent.com/pengyirui/blog_img/main/2021-05-18-00.jpg"></p><p>也许我们并不认为自己的谈话方式是“暴力”的，但我们的语言确实常常引发自己和他人的痛苦。</p><p>非暴力沟通的四个要素：<code>观察；感受；需要；请求</code></p><p>首先，留意发生的事情。我们此刻观察到什么？不管是否喜欢，只是说出人们所做的事情。要点是，清楚地表达观察结果，而不判断或评估。<br>接着，表达感受，例如受伤、害怕、喜悦、开心、气愤等等。然后，说出哪些需要导致那样的感受。一旦用非暴力沟通诚实地表达自己，前三个要素就会得到体现。<br>但需要牢记的是，非暴力沟通不是固定的公式，它可以适应不同的情况，并根据个人风格及文化环境做出调整。</p><h2 id="是什么蒙蔽了爱"><a href="#是什么蒙蔽了爱" class="headerlink" title="是什么蒙蔽了爱"></a>是什么蒙蔽了爱</h2><p>我们大多数的人使用的语言倾向于<code>评判、比较、命令和指责</code>，而不是鼓励我们倾听彼此的<code>感受和需要</code>。<br>我相信，异化的沟通方式的基础是<code>性恶论</code>。<br>长期以来，我们强调人性本恶以及通过教育来控制天性。这导致了我们对自己的感受和需要常常心存疑虑，以致不愿去体会自己的内心世界。</p><p>人天生热爱生命，乐于互助。可是，<code>异化的沟通方式使我们难以体会到心中的爱</code>。道德评判就是其中的一种，它将不符合我们价值观的人看作是不道德的或邪恶的。进行比较也是一种评判，它会蒙蔽对人对己的爱意。异化的沟通方式还淡化了我们对自己的思想、情感和行为的责任意识。此外，强人所难也会造成心灵的隔阂。</p><h2 id="区分观察和评论"><a href="#区分观察和评论" class="headerlink" title="区分观察和评论"></a>区分观察和评论</h2><p><code>不带评论的观察</code>是人类智力的最高形式。然而，他们运用的不是非暴力沟通，而是无声的抗议。</p><p>非暴力沟通的第一个要素是观察。<code>将观察和评论混为一谈，别人就会倾向于听到批评</code>，并反驳我们。非暴力沟通是动态的语言，<code>不主张绝对化的结论</code>。它提倡在特定的时间和情境中进行观察，并清楚地描述观察结果。</p><p>例如：它会说“欧文在过去的5场比赛中没有进一个球”，而不是说“欧文是个差劲的前锋”。<br>例子：（观察）一些人滴溜溜转着眼睛；另一些人故意打着哈欠；还有个人直盯着手表。</p><p>我的反应有几种可能。其中之一是认为自己确实有问题。我知道，一旦我想为自己辩护或开脱，我就默认了自己有问题。另一种反应是把对方的话视为攻击而给予反击。这一次，我既没有辩解也没有指责对方，而用心理解为什么他会这么说。</p><p>步骤：猜测他的观察结果；请他澄清；了解他的感受和需要后，我开始关注他的请求；了解他的观察、感受、需要和请求后，我问自己是否愿意满足他的请求。</p><h2 id="体会和表达感受"><a href="#体会和表达感受" class="headerlink" title="体会和表达感受"></a>体会和表达感受</h2><p><code>示弱</code>有助于解决冲突</p><p>当我们说“我觉得”，我们常常并不是在表达感受，而是在表达想法。<br>例如，有时我们会说：“我觉得这不公平。”<code>在这句话中，“我觉得”,换成“我认为”也许更恰当</code></p><p>A：“我觉得我被误解了”<br>“被误解”一词反映了我认为别人不理解我。此时，我可能会很着急。<br>B：“我觉得我被忽略了。”<br>“被忽略”是我们的<code>判断</code>。此时，如果想独处，我们就会很高兴;反之，如果想参加活动，就会感到难过。</p><p>(1)下列词语可用来表达我们的<code>需要</code>得到满足时的感受:<br>兴奋    宜悦    欣喜    甜蜜    精力充沛    兴高采烈感激    感动    乐观    自信    振作    振奋    开心<br>高兴    快乐    愉快    幸福    陶醉    满足    欣慰    心旷神怡喜出望外<br>平静    自在    舒适    放松    踏实    安全    温暖    放心    无忧无虑</p><p>(2)下列词语可用来表达我们的<code>需要</code>没有得到满足时的感受：<br>害怕    担心    焦虑    忧虑    羞包    紧张    心神不宁    心烦意乱<br>忧伤    沮丧    灰心    气馁    泄气    绝望    伤感    凄凉    悲伤<br>恼怒    愤怒    烦恼    苦恼    生气    厌烦    不满    不快    不耐烦不高兴<br>震惊    失望    困惑    茫然    寂寞    孤独    郁闷    难过    悲观沉重    麻木    精疲力尽    委靡不振疲惫不堪    昏昏欲睡<br>无精打米    尴尬    惭愧    内疚    妒忌    遗憾    不舒服</p><h2 id="感受的根源"><a href="#感受的根源" class="headerlink" title="感受的根源"></a>感受的根源</h2><p>听到不中听的话时，我们有四种选择。</p><p>第一种是认为自己犯了错。<br>例如，有人气愤地说：“我从没见过像你这么自私的人！”这时，我们可能会自责：”哦，我没有考虑别人的感受，真是太自私了！”这会导致我们内疚、惭愧，甚至厌恶自己。</p><p>第二种是指责对方。这时，我们也许会驳斥对方：”你没有权利这么说！我一直都很在乎你的感受。你才自私！”在争吵时，我们一般会感到恼怒。</p><p>第三种是了解我们的感受和需要。这时，我们可能会发现我们有些伤心，因为我们看重信任和接纳。</p><p>第四种是用心体会他人的感受和需要。这时，我们也许就会想“他伤心可能是因为他需要体贴和支持”。</p><p>如果我们想<code>利用</code>他人的内疚，我们通常采取的办法是，<code>把自己不愉快的感受归咎于对方</code>。家长也许会和孩子说：“你成绩不好让爸爸妈妈伤透了心！”言下之意是，他们快乐或不快乐是孩子的行为造成的。看到父母的痛苦，孩子可能会感到内疚，并因此调整行为来迎合他们。<br>遗憾的是，这种调整只是为了避免内疚，而非出自对学习的热爱。</p><p>我们可以通过<code>“我（感到）……因为我……”</code>这种表达方式来认识感受与自身的关系。<br>例如：<br>1)“看到公司海报出现拼写错误，我很不高兴。因为我重视公司的形象。”<br>2)“你没把饭吃完，妈妈感到失望。因为妈妈希望你能健康成长。”<br>3)“老板说话不算数，我很生气。因为我想有个长假去看弟弟。</p><p>根据我长期以来的经验，<code>一旦人们开始谈论需要，而不指责对方，他们就有可能找到办法来满足双方的需要。</code>如果我们不看重自己的需要，别人可能也不会。实际上，如果直接说出需要，获得积极回应的可能性就会增加。</p><h2 id="请求帮助"><a href="#请求帮助" class="headerlink" title="请求帮助"></a>请求帮助</h2><p><code>提出具体的请求,我们提出的请求越具体越好。</code>如果我们的意思含糊不清，别人就难以了解我们到底想要什么。</p><blockquote><p>例子：<br>我：“你想要得到什么呢？”她：“我不知道我想要什么。”<br>我：“我猜你会这样说。”她：“为什么？”<br>我：“我认为，我们感到沮丧是因为我们未能实现自己的愿望。可是，我们努力去实现梦想了吗？社会总是期待我们成为好男孩或好女孩、好父亲或好母亲。如果我们依照社会的期待去做，我们感到沮丧也就不是什么令人吃惊的事情了。沮丧是我们为了迎合社会而付出的代价。如果你要过得快乐些，我想请你想想，为了改善你的生活，你希望他人做些什么？”<br>她：“我只是希望有人关心我。这没有什么不合理，不是吗？”<br>我：“这是一个好的开始。现在我想请你谈谈其他人怎么做才是关心你。例如，我现在可以做些什么吗？”<br>她：“哦，你知道的……”<br>我：“可是，我并不清楚你具体期待什么。我希望你告诉我，我或别的人怎么做，才是按你期待的方式来关心你?”<br>她：“这很难说清楚。”<br>我：“是的，说清楚我们的请求有时是很困难的。可是，让我们想想,如果我们都不清楚自己想要什么，那对别人来说，就更难了！”<br>她：“我开始明白我希望别人怎么关心我，不过，我不太好意思说出来。”<br>我：“是的，这经常是令人尴尬的。你愿意告诉我你期待我或别的人做什么吗？”<br>她：“当我说需要别人的关心时，我实际想要的是，即使我还没有察觉到自己的需要，其他人就能考虑到我的需要。而且，我希望我总是能得到这样的照顾。”<br>我：“谢谢。如果是这样，我相信你巳经明白了你的愿望很难实现。”许多来向我求助的人后来发现，他们感到沮丧或灰心，很大程度上是因为他们不清楚自己对他人究竟有什么样的期待。</p></blockquote><p><code>明确谈话的目的</code>：然而，如果一个人提出了明确的请求，却没有提及感受和需要，也有可能导致交流的困难</p><p><code>请求反馈</code><br>当对方给予反馈，表达我们的感激。<br>如果对方不愿反馈，倾听他的感受和需要</p><p>例如:<br>“你没有听明白”“这不是我的意思”“你听错了”这样的表达，很可能会让托尼觉得老师在<code>批评</code>他。<br>因为托尼很坦率地作出反馈，这位老师先向托尼表达了她的谢意。她说：“谢谢你给我反馈。我想我说得不够清楚。我的意思是，放学后，我给你讲讲我上次布置的作业。”</p><h2 id="请求与命令"><a href="#请求与命令" class="headerlink" title="请求与命令"></a>请求与命令</h2><p>一旦人们认为不答应我们就会受到责罚，他们就会把我们的请求看作是命令。<br>听到命令时，一个人只能看到两种选择：服从或反抗。</p><p>如何区分命令和请求：请求没有得到满足时，提出请求的人如果批评和指责，那就是命令；如果想利用对方的内疚来达到目的，也是命令。</p><p><code>我们越是将他人的不顺从看作是对我们的排斥，我们所表达的愿望就越有可能被看作是命令</code>。这将导致恶性循环，因为一旦人们认为我们是在强迫他们，他们就会不太想满足我们的愿望。</p><p>如果我们愿意去体会是什么使他们无法说是。那么，根据我的定义，我们提出的就是请求而非命令。选择通过请求而非命令来表达愿望，并不意味着，一旦人们说“不”我们就不再去满足自己的需要。</p><h2 id="目的"><a href="#目的" class="headerlink" title="目的"></a>目的</h2><p>我们告诉人们，为了改善生活，我们希望他们做什么。我们避免使用抽象的语言，而借助具体的描述，来提出请求。非暴力沟通的目的不是为了改变他人来迎合我们。相反，非暴力沟通重视每个人的需要，它的目的是帮助我们在诚实和倾听的基础上与人联系。</p><h2 id="全身心倾听"><a href="#全身心倾听" class="headerlink" title="全身心倾听"></a>全身心倾听</h2><p>本章我们将探讨如何倾听他人，了解他们的观察、感受、需要和请求，并给予反馈。</p><p>遭遇他人的痛苦时，我们常常急于提<code>建议</code>，<code>安慰</code>或<code>表达</code>我们的态度和感受。可是，倾听意味着全心全意地体会他人的信息一一这为他人充分表达痛苦创造了条件。</p><p>如果一个人想要别人了解他的处境，听到的却是安慰和建议，那么，他就有可能觉得不太舒服。</p><blockquote><p>例子<br>我的朋友霍利·汉弗里（Holley Humphrey）举了一些例子，来说明哪些行为会<code>妨碍</code>我们体会他人的处境。<br>建议：“我想你应该……”<br>比较：“这算不了什么。你听听我的经历……”<br>说教：“如果你这样做……你将会得到很大的好处。”<br>安慰：“这不是你的错；你已经尽最大努力了。”<br>回忆：“这让我想起……”<br>否定：“高兴一点。不要这么难过。”<br>同情：“哦，你这可怜的人……”<br>询问：“这种情况是什么时候开始的？”<br>辩解：“我原想早点打电话给你，但昨晚……”<br>纠正：“事情的经过不是那样的。”</p></blockquote><p>事实上，<code>试图分析问题</code>妨碍了我们与他人的联系。<br>如果我们只关心别人说了什么，并考虑他的情况符合哪种理论，<code>我们是在诊断人，我们并没有倾听他们。</code></p><p>在倾听他人的观察、感受、需要和请求之后，我们可以主动表达我们的理解。</p><p>非暴力沟通建议我们使用<code>疑问句来给予他人反馈。</code>这将便于他人对我们的理解作出必要的补充。</p><blockquote><p>我们的问题可以集中于以下几个方面：<br>1.他人的观察：“上周我有三个晚上不在家，你说的是这回事？”<br>2.他人的感受及需要：“你很灰心？你希望得到肯定是吗？”<br>3.他人的请求：“你是不是想请我帮你预订酒店？”</p></blockquote><p><code>什么时候需要给别人反馈呢？</code>首先，在对自己的理解没有把握时，我们需要对方的确认。然而，即使确信自己已经明白了，我们可能还会发现别人正期待我们的反馈。<br>一般来说，如果一个人在说话时有明显的情绪，他一般会期待得到他人的反馈.</p><p>有时，我们认为自己受到了指责，实际上，那些话是他人表达需要和请求的方式。如果意识到这一点，我们就不会认为自己的人格受到了伤害。反之，如果一心分析自己或对方的过错，我们就会认为自己被贬低了。</p><p>如果人们常常怀疑我们的诚意，那么，我们就需要好好<code>审视自己的动机</code>。也许，我们只是在机械地运用非暴力沟通，而忘记其目的。<br>这时，我们就可以问自己，我们关心的是加深与人的联系，还是以“标准的”非暴力沟通方式来说话。</p><h3 id="保持关注"><a href="#保持关注" class="headerlink" title="保持关注"></a>保持关注</h3><p>我建议，在解决问题或询问他人的请求前，为他人的充分表达创造条件。<br>如果过早地提及他人的请求，我们也许就无法传达我们的关心;甚至还会被看作是应付。<br>而且，在谈话刚开始时，人们所表达的感受往往是<code>冰山之一角</code>，有许多相关的感受一通常是更为强烈的情感，并没有得到表达。<br>倾听将为他们探究和表达内心深处的感受创造条件。<br>反之，如果急于了解他们的请求或表达自己，就会妨碍这个过程。</p><h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><p>当他人遭遇不幸时，我们常常急于提建议，安慰，或表达我们的态度和感受。<br>为了倾听他人，我们需要先放下已有的想法和判断，全心全意地体会对方。<br>倾听他人有助于对他人的理解和接纳。与此同时，不论别人用怎样的词语表达自己，我们都可以用心体会他们的观察、感受、需要和请求。<br>有时，我们可以主动表达我们的理解，来帮助对方了解我们在何种程度上明白了他的意思。在交流的过程中，我们保持持续的关注，为对方的充分表达创造条件。</p><p>当我们痛苦得无法倾听他人时，我们需要<br>(1)体会自己的感受和需要<br>(2)大声地提出请求<br>(3)换一个环境</p><h2 id="倾听的力量"><a href="#倾听的力量" class="headerlink" title="倾听的力量"></a>倾听的力量</h2><p>倾听使身心痊愈<br>一个人如果有机会倾诉，会是怎样的感觉呢？卡尔•罗杰斯（Carl Rogers）这样写道：“如果有人倾听你，不对你评头论足，不替你担惊受怕，也不想改变你，这多美好啊……每当我得到人们的倾听和理解，我就可以用新的眼光看世界，并继续前进……这真神奇啊！一旦有人倾听，看起来无法解决的问题就有了解决办法，千头万绪的思路也会变得清晰起来。”</p><p>在组织机构中，我们在听到上级的意见时，通常会把它看作是命令或指示。<br>倾听同事或下级比倾听上级要容易得多。<br>在上级面前，我们有时可能会有点紧张，以致无法静下心来体会他们的感受和需要，并给予反馈。</p><p>在一个生气的人面前，永远不要用‘不过’‘可是’‘但是’之类的词语。</p><ul><li><p>如果别人说“不！”<br>  当别人说”不”的时候，我们常常会认为他们是在拒绝我们。<br>  有时，我们甚至还会觉得自己受到了伤害。<br>  然而，如果我们能够体会他人的感受和需要，我们也许就会发现是什么使他们无法答应我们的请求。</p></li><li><p>使谈话生动有趣<br>  有的时候，谈话的气氛很沉闷。<br>  我们体会不到说话的人有怎样的感受和需要，也不知道他对我们有什么期待。<br>  这样的谈话是很累人的。它只是在浪费我们的时间，而无法帮助我们与他人加深联系。<br>  这种局面的出现往往是因为说话的人并不清楚自己的感受、需要和请求。</p></li><li><p>建议：<br>  尽快提醒说话的人留意自己的感受和需要。等得越久，也就越难做到这一点。<br>  我们这样做并不是要以自我为中心，而是请求他人体会自身的状态。</p><blockquote><p>例如：<br>  如果一位邻居又一次讲到她20年前痛苦的经历——她丈夫拋弃了她和两个年幼的孩子，我们也许就可以插话说：“听起来，你现在还是愤愤不平。你很需要关心和体贴?”人们常常没有意识到，他们需要的是别人的理解和接纳。他们也没有意识到，直接表达自己的感受和需要，与讲故事相比，更容易得到他们所期待的联系。<br>你也许会想，打断另一个人的谈话，是不礼貌的。<br>  我曾经做过一个非正式的调查。<br>  我的问题是：“如果你说的话别人不想听，你是希望对方假装在听还是直接打断你？”<br>  我问了许多人，只有一个人不希望被打断。听到他们的回答，我更确信，打断别人比假装在听，更符合对方的愿望。<br>  所有的人都希望自己的话对人有益，而不想被人当作负担。</p></blockquote></li></ul><p>倾听使我们勇于面对自己的弱点。它还可以帮助我们预防潜在的暴力，使谈话生动有趣，并了解“不！”和沉默所反映的感受和需要。一次又一次，我见证了，倾听帮助人们治愈心灵的创伤。</p><h2 id="愛目己"><a href="#愛目己" class="headerlink" title="愛目己"></a>愛目己</h2><ul><li><p>当我们的表现不完美<br>如果自我评价使我们羞愧并改变行为，我们也就允许自我憎恨来引导自己的成长和学习。羞愧是自我憎恨的一种形式，出于羞愧的行为不是自由而快乐的行为。</p><p>除了<code>“应该”</code>这个词，我们还用别的方式教训自己.</p><blockquote><p>例如：<br>“我真受不了自己现在这个样子。我必须改改了。”想一想那些强迫自己的人。<br>他们中有的人说：“我真的应该戒烟了。”<br>另一些人说：“我必须加强锻炼。”<br>他们不断地说他们“必须“做什么，与此同时，又不停地找借口不那么做，因为没有人想成为奴隶。<br>当然，我们也不是命中注定要去服从“应该”或“不得不”的指挥，不论它们是来自外部，还是来自我们自身。一旦顺从了这些命令，生活也就会失去乐趣。</p></blockquote></li><li><p>为什么会自责？</p><blockquote><p>非暴力沟通鼓励我们直面人生的苦难:在遇到挫折时，充分体会人生的悲哀和内心的渴望。<br>是的，感到遗憾是难免的。但它能帮助我们从经历中学习，而无须责备自己。<br>我们意识到过去的行为违背了自己的需要及价值观，并允许这种觉察引发的情感充分流淌。<br>一旦专注于尚未满足的需要，我们就会考虑如何满足它。<br>反之，如果用苛刻的语言指责自己，我们不仅难以找到解决办法，而且容易陷于自我惩罚的痛苦中。</p></blockquote><blockquote><p>接着，我们试图理解自己过去的所作所为</p></blockquote><blockquote><p>通过聆听自己的心声，我们就能发现心灵深处的需要。<br>此时，我们就可以原谅自己。我们意识到，尽管过去的选择并不理想，但它也是为了实现内心的渴望。</p></blockquote><blockquote><p>爱惜自己的关键之一是同时包容那两个不同的“我”：一方面包容对过去的某种行为感到后悔的“我”另一方面包容采取那种行为的“我”。</p></blockquote></li></ul><p>让我们的行动基于对生命的爱，而非恐惧、内疚、羞愧或义务</p><ul><li>如何做<blockquote><p>用“选择做”代替“不得不”<br><code>第一步</code><br>在日常生活中，你觉得哪些事情没意思，却又认为自己不得不做?请将它们列在一张纸上。当我第一次审视自己的清单时，仅仅是它的长度就让我明白为什么我活得很不开心。我终于意识到，有许多事情，我之所以日复一日地去做，是因为我相信那是不得不做的事情。<br>我清单上的第一项是“写临床报告”。我讨厌写那些报告，然而，每天我至少要折磨自己一个小时。第二项则是“开车送小孩上学”。<br><code>第二步</code><br>列好清单后，向自己坦白：你做这些事情是因为你选择了做它们，而不是因为你不得不做。在你所列的每个项目前，加上“我选择做”。当时，我对这一步骤有些抗拒。我反复强调：“写临床报告不是我的选择！我不得不做！我是一个临床心理医生。我不得不写这些报告。”<br><code>第三步</code><br>一旦承认某一行为是你的选择，就填写以下的声明来了解你为什么要那么做：“我选择做是因为我想要。”</p></blockquote></li></ul><blockquote><p>起初，我怎么也想不清楚我到底为什么要写临床报告。几个月前，我已经确信，对我的病人来说，临床报告用处并不大，花那么多时间是不值得的。既然如此，为什么我一直费尽苦心准备这些报告呢？<br>  最后，我终于明白了，我选择写临床报告，是因为我想从中得到收入。于是,从35年前的那一刻起，我就再也没有写过一份临床报告。想到自己少写了无数的临床报告，我的快乐真是无法形容！当认识到钱是我的主要动机时，我马上就想到我可以用别的方式来获得收入；而事实上，我宁可在垃圾箱中觅食，也不愿再写一份临床报告。我清单上的第二项是开车送孩子上学。当我琢磨自己为何要这么做时，我发现，我很欣赏我的孩子从他们现在的学校得到的教育。虽然他们可以步行到附近的学校上学，但他们所在的学校提供的教育更符合我的价值观。想到这一点，在开车送孩子上学时，我的感受就不一样了。<br>  在这以前，我会说：“倒霉！今天又不得不幵车送孩子上学。”<br>  而在这之后，我理解自己为什么要这么做——那是为了孩子们能够得到我所看重的教育。当然，有的时候，在路上我需要提醒自己两三次开车送孩子上学的意义。</p></blockquote><p>不论你选择做什么，了解自己为什么要那样</p><p>像钱一样，来自他人的赞同也是一种回报。受社会化的影响，我们渴望得到奖励。</p><p>上学时，学校使用外在的手段来激励我们学习。<br>在家里，做一个好男孩或好女孩，我们就会得到礼物；反之，如果大人认为我们调皮捣蛋，我们就会受罚。于是，等我们长大成人，我们误以为生活的目的就是为了获得回报。</p><p>我们迫切地希望得到人们的微笑，听到一点鼓励，盼着人们夸我们是“好人”“好家长”“好市民”“好员工”以及“好朋友”等等。</p><p>为了讨人喜欢，我们努力迎合他人；为了避免招人嫌恶，我们不做那些不受人欢迎的事情。</p><p>于是，为了博得他人的喜爱，我们费尽心思、委曲求全。这是很可悲的。<br>实际上，如果我们的行为只是出于对生命的爱，人们自然会心存感激。<br>他们的感激也是在给我们确认：我们的行为有益于他们的生活。一旦如愿活出对生命的爱，我们所体会到的欢乐是他人的赞同永远无法给予的。</p><p><code>最危险的行为也许是：“因为别人的要求”我们不得不做...</code></p><p>同时，在日常生活中，我们主动根据需要和价值观来选择生活。我们的行为不再是为了屨行职责、获得回报、逃避惩罚或避免感到内疚和羞愧。通过深入理解我们行为的动机，并用“选择做”来取代“不得不”，我们的生活将变得和谐并充满欢乐。</p><h2 id="充分表达愤怒"><a href="#充分表达愤怒" class="headerlink" title="充分表达愤怒"></a>充分表达愤怒</h2><p>愤怒驱使我们去惩罚他人，而不是去满足需要。当意识到自己被指责时，绝大多数的人都无法把注意力放在对方的需要上。</p><p>表达愤怒的步骤：<br>1、停下来。呼吸。<br>2、留意我们的指责（指责反映我们的想法）。<br>3、体会我们的需要。<br>4、表达感受和尚未满足的需要。有意识地用 <code>“我生气是因为我需要……”  取代  “我生气是因为他们……”</code></p><p>例子：<br>其中有个练习是请他们写下某件激怒他们的事情。一位名叫约翰的犯人写道：“三个星期前，我向监狱的官员提出一个请求，至今他们仍没反馈。”很明显，他写下了他的观察。<br>接着，我请他解释他生气的原因：“发生这个事情后，为什么你会生气呢？”<br>“我刚才已经和你说了，”他大声地说道：“我生气是因为他们没有回应我的请求。”看来，他把外在刺激等同于内存的原因，并认为监狱管员的行为让他生气。如果在一个社会中，内疚被运用来控制人，那么，指责他人就容易成为一种习惯。同时，为了使这种手段奏效，我们可能就会认为一个可以主导另一个人的情绪。</p><p>专注于我们的需要，比评判他人是什么人更有益于生活。</p><p>愤怒是我们的思维方式造成的。它的核心是尚未满足的需要<br>然而，做一到这一点并不容易。因为愤怒驱使我们去惩罚他人，而不是去满足需要<br>为此我<code>建议</code>，与其沉浸于“合理的愤怒不如倾听自己和他人的需要。这也许需要一个过程，但通过不断地实践，我们将会有意识地用“我生气是因为我需要……”来取代“我生气是因为他们……”。</p><blockquote><p>作者例子：<br>我曾在威斯康星州的一所学校提供咨询服务，连续两天，在劝架时，我的鼻子都挨了重生一击，有一天，我的鼻子被一个孩子的肘部击中了。我差点就一拳打了回去。在我小时候，只要受到轻微的伤害，我都会给予回击。第二天，又有两个小孩子吵架，我的鼻子被一个小孩子打中了，这次痛得更厉害，血流得更多，但我并没有生气。当我回想到那两天的经历时，我发现，我一开始就把第一个孩子看作是“被宠坏的孩子”。所以，他打到我时，我极为恼怒。我心理想：“这家伙太猖狂了！”我对第二个孩子的看法则不同，我把他看作是“软弱的孩子”。由于我比较担心这个孩子，当我的鼻子被他打伤时，我并没有责怪他。这段经历帮助我认识到，我生气的原因不在于别人做了什么，而在于我怎么看待对方及其行为</p></blockquote><p>如果人们认为自己的痛苦是由其他人造成的，并将认为那些人应该爱到谴责或惩罚，那么，就象这位年轻的囚犯那样，他们播下了暴力的种子.<br>批评和指责使人倾向于自我 保护并变得更有攻击性。这样，就长期而言，我们给自己增添了更多的麻烦。</p><p>现在让我们看看非暴力沟通表达愤怒的四个步骤。<code>首先，停下来，除了呼吸，什么也别做。我们避免采取行动去指责或惩罚对方。我们只是静静地体会自己。接着，想一想是什么想起使我们生气了。</code></p><blockquote><p>例子：<br>为了充分地表达自己，我们现在需要张开嘴，说出我们的愤怒——怒火此时已被转化为需要以及与需要相联系的情感。<br>然而，表达此时的感受也许需要很大的勇气。对我来说，生气并冲着人们嚷“你们这是种族歧视”是很容易的。事实上，我甚至还会觉得高兴。但是，倾听心底深处的感受和需要却很可能引发不安。为了充分表达愤怒，我们也许会对那个人说：“你走进房间后，和其他人打了招呼，却没有和我说话，现在你又在议论白种人，注意到这些，我的胃有些不舒适，而且很害怕，因为我很看重平等。我想请你告诉我，听到我说这些，你的感觉怎么样？”</p></blockquote><p>如何做<br><code>先倾听他人</code><br>然而，在大多数的情况下，在表达自己之前，我们需要先倾听他人。如果对方还处于某种情绪中，他们就很难静下心来体会我们的感受和需要。一旦我们用心倾听他们，并表达我们的理解，在得到倾听和理解之后，他们一般也就会开始留意我们的感受和需要。</p><p>于是，我想先去了解他，倾听他的心声，并表达我对他的理解和尊重<br>虽然，我极不认同他的想法，但是我的经历告诉我，如果我不强调我与他的观念不同，我就较容易接纳他们。<br>特别是当我遇到一个有象他那样想法的人时，倾听他们的感受和需要，而不纠缠于他们的想法，我的生活将会变得愉快得多。</p><p><code>给自己时间</code><br>我们需要有足够的耐心来学习和运用非暴力沟通。在与人交往的过程中，我们的第一反应常常是习惯性的反应，因此，运用非暴力沟通有时是很别扭的事。然而，如果我们想要实现自己的人生选择，我们就要给自己充分的时间。</p><p>因此，在刚开始运用非暴力沟通时，我们可以把节奏放慢些，在说话前先想一想，有时，我们甚至停下来，什么也不说。</p><h2 id="用强制力避免伤害"><a href="#用强制力避免伤害" class="headerlink" title="用强制力避免伤害"></a>用强制力避免伤害</h2><p>如果我们<code>威胁他人</code>和<code>实施惩罚</code>，对方常常产生敌意和抵触心理，彼此的关系将会疏远。</p><p>惩罚还可能使人忽视事情本身的意义，而把注意力放在不服从的后果上。<code>体罚是最常见的惩罚</code>，指责或否定、不给孩子好处也是一种惩罚。<br>当你不喜欢他的行为时，请问自己两个问题：我希望他怎么做？我希望他基于什么原因做我希望他做的事情？</p><p>如果冲突双方都能充分表达观察、感受、需要和请求，并得到对方的理解，那么，双方的需要通过可以同时得到满足。至少，他们可以求同存异。</p><p>相反，在使用惩罚性的强制力时，我们认为某些人是邪恶的，为了让他们悔改，必须给他们一点颜色看看。<br>此时，我们希望痛苦能让他们：<br>1）意识到自己的过错；<br>2）感到懊悔；<br>3）改变行为。<br>然而，在实际生活中，惩罚往往加强了对方的敌意和抵触心理，使双方的关系更加疏远</p><p>惩罚的代价:惩罚导致关系的疏远。一旦我们被看作是施暴的人，我们就很难得到友善的回应。</p><h2 id="重获生活的热情"><a href="#重获生活的热情" class="headerlink" title="重获生活的热情"></a>重获生活的热情</h2><p>倾听内心的声音<br>在情绪低落的时候，我们也许会怨天尤人。然而，如果我们以苛刻的态度对人对己，我们的心情也好不到哪里去。通过运用非暴力沟通，我们不再试图分析自己或他人有什么毛病，而是用心去了解我们的需要和他人的需要，这样，我们的内心将逐渐变得平和。然而，对于大多数人来说，倾听和表达自己的需要并不容易。一般来说，我们的文化倾向于把个人需要看作是消极的、具有破坏性的。如果一个人公开表达自己的需要，就很可能被看作是自私的。通过鼓励我们区分观察和评论，认识情感的根源在于个人的需要和想法，并以建设性的语言提出明确的请求，非暴力沟通帮助我们认识社会文化对个体的消极影响。</p><p>解决内心的冲突<br>沮丧是因为一个人处于激烈的内心冲突之中，无所适从。我们内心中也许有一种声音说，“我想这样做”；但又有一种声音说，“不，你不应该那样做”。这样，我们就陷入了僵局。沮丧意味着，我们不了解自己的需要——我们不知道到底想到什么以及如何满足愿望。一位朋友建议她在心 情极度沮丧时以对话的形式记录内心的挣扎。<br>于是，她就用非暴力沟通的四个要求来表达“职业女性”的心声：“为了照顾孩子，我放弃了工作，留在家里（观察）；我有点心灰意冷（感受）；因为我看重成就感（需要）。我想，我现在可以去找份兼职（请求）。接着，她用非暴力沟通的四个要求来表达“负责任的母亲”的心声：“当我想到上班的事情时（观察），我好害怕（感受）， 因为我要确保孩子们能得到很好的照顾（需要）。我想，在上班时，我需要一位好保姆来照顾他们。下班后，我还要确保有时间和精力好好陪孩子。<br>当这位女士用非暴力沟通的方式说出心里话后，她大大松了一口气。她没有再批评和指责自己，而把注意力放在了自己的感受和。虽然，她还有实际的问题需要处理，例如找个好保姆、寻求先生的支持，但她已经察觉到自己的需要，并能静下心来采取必要的行动。</p><p>心灵环保<br>我知道，在开车时，保持良好的心态有多困难。那时，如果有人以我不喜欢的方式开车，我的头脑中常常会冒出以下的想法：“这家伙有毛病！开车都不看路？”带着这样的想法，我就会想好好教训那些我认为不守规矩的司机。可是，我又没法惩罚他们，于是，就更加恼怒了。后来，我终于学会了关注自己的感受和需要。“是的，看到他们这样开车，我真的很害怕：我希望，他们在开车时能注意安全。”哇！我感到惊讶的是，只要我不再批评和指责他人，而把注意力放在自己的感受和需要，我的心情就放松了许多。”</p><p>用非暴力沟通代替诊断<br>我告诉他们，我不会去分析病人有什么毛病，而是问自己以下的问题：“她现在是什么心情？她有什么需要？和她在一起，我是什么样的心情？我的心情反映了我怎样的需要？我想请她作出什么决定或采取什么行动，以使她能快乐些？”在回答这样的问题时，我们将会提示自己的内心活动以及个人需要。同作诊断相比，这是很不容易的，因为在这个过程中，我们也会深深体会到我们作为人的弱点。</p><h2 id="表达感激"><a href="#表达感激" class="headerlink" title="表达感激"></a>表达感激</h2><p>非暴力沟通鼓励我们充分表达感激。在表达感激时，我们说出：1）对我们有益的行为；2）我们的哪些需要得到了满足；3）我们的需要得到满足后，我们是什么样的心情。<br>当别人以这样的方式表达对我们的感激时，我们可以与对方一起庆祝生命的美——即不自大，也不假谦虚。</p><p>赞扬的动机<br>不过，请注意：在赞扬他人时，我们很少提示内心活动，而把自己放在了裁判的位置。所以，我认为，赞扬并不总是有助于深化彼此的联系。一旦意识到经理和老师赞扬的目的是为了操纵他们，员工和学生很可能就会产生逆反心理。发现这些赞扬的潜在之后， 们对于由衷的感激也会心存疑虑。我们只是为了庆祝他人的行为提升了我们的生活品质，而不是想得到任何回报。</p><p>非暴力沟通表达感激的方式<br>非暴力沟通表达感激的方式包含三个部分：<br>1.对方做了什么事情使我们的生活得到了改善；<br>2.我们有哪些需要得到了满足；<br>3.我们的心情怎么样？<br>在表达感激时，这三个部分的先后次序并不重要；</p><p>在别人表达感激时，人们通常有两咱截然不同的反应。一种是自我膨胀，相信我们比别人优越；另一种是假谦虚，否定别人的欣赏，耸耸肩说：“哦，这没什么。”。如果我意识到我的能力是生命赋予我的，我就能够同 时避免自我膨胀和假谦虚。</p><h2 id="附：非暴力沟通模式"><a href="#附：非暴力沟通模式" class="headerlink" title="附：非暴力沟通模式"></a>附：非暴力沟通模式</h2><p>附：非暴力沟通模式</p><p>1.诚实地表达自己，而不批评、指责<br>1）观察    我所观察（看、听、回忆、想）到的有助于（或无助于）我的福祉的具体行为：“当我（看、听、想到我看到的/听到的……”<br>2）感受    对于这些行为，我有什么样的感受（情感而非思想）：“我感到……”3）需要    什么样的需要或价值（而非偏好或某种具体的行为）导致我那样的感受：“因为我需要/看重……”<br>4）请求    清楚地请求（而非命令）那些能丰富我生命的具体行为：“你是否愿意……”</p><p>2.关切地倾听他人，而不解读为批评或指责<br>1）观察    你所观察（看、听、回忆、想）到的有助于（或无助于）你的福祉的具体行为：“当你（看、听、想到我看到的/听到的……”<br>2）感受    对于这些行为，你有什么样的感受（情感而非思想）：“你感到……”<br>3）需要    什么样的需要或价值（而非偏好或某种具体的行为）导致你那样的感受：“因为你需要/看重……”<br>4）请求    清楚地请求（而非命令）那些能丰富你生命的具体行为：“你是否愿意……</p>]]></content>
      
      
      
        <tags>
            
            <tag> 书本 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>學校</title>
      <link href="/posts/2c7.html"/>
      <url>/posts/2c7.html</url>
      
        <content type="html"><![CDATA[<h2 id="學校"><a href="#學校" class="headerlink" title="學校"></a>學校</h2><blockquote><p>转自『彭彭声』公众号</p></blockquote><p>人脈資源高度集中地就係學校。尤其係什麼市重點、省重點嘅學校。一個學校少則千幾，多則幾千學生。學生家長嘅職業、背景可以話有效全面覆蓋。無論係公檢法抑或醫療、新聞、金融、餐飲、運輸等等行業，從公務員到企事業單位再到一般打工仔，可以話全面覆蓋齊全。而作為什麼班主任、級長、教務主任乃至校長，只要講一聲，無邊一個範疇係搵唔到關係嘅。所以，當日所謂『全國最牛司機』，即係可以喺長沙街頭，乃至步行街口隨便停車嘅嗰位，我記得好似係個校長（或者係班主任）。大把學生家長喺後面支持、鼓勵，平時就係為所欲為。長期畀啲家長好似朝聖一樣圍住參拜，各種不可一世嘅狀態就會培養出來。加上分唔清自己嘅位置，單一進行有效模仿。見到有啲人係點做嘅，係幾有效、幾有威嚴嘅，就以為自己可以有樣學樣。見到有啲人可以和諧曬啲消息，就以為自己可以做到。見到啲友仔點樣敷衍啲家屬嘅，自己又係學到足。但係，重點無搞清楚。重點唔係『點樣做』，而係『邊個做』。當然，件事搞大咗，一系列嘅操作之後，好容易就會大事化小小事化了。提醒一下嗰啲傷心難過嘅家屬，真係要收拾好心情喇，更多時間要面對嘅，係大量嘅二次傷害。什麼抹黑吖、所謂起底吖、『關心』吖等等，一定接踵而來。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 自言自语 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>明天，是毒撚們生命中重要的一天</title>
      <link href="/posts/9c87.html"/>
      <url>/posts/9c87.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>向西闻记其中一节</p></blockquote><h2 id="明天，是毒撚們生命中重要的一天"><a href="#明天，是毒撚們生命中重要的一天" class="headerlink" title="明天，是毒撚們生命中重要的一天"></a>明天，是毒撚們生命中重要的一天</h2><p>畢業後的三年間，你每一分鐘也在後悔選讀了Computing &amp;  IT，你知道這未免有點遲，其實你讀電腦的決心，好應該在2000年時隨著科網股泡沫爆破而一同幻滅，有些人覺得你在中資銀行當一個IT  Support算是一份穩定的職業，但當你身處辦公室內每一角落也是老屎忽的電腦部門時，你明白到你的晉升機會相當渺茫，加上自己的人工升幅從來沒有一年 可以跟貼通脹，與其說工作穩定，不如說沒有前途，在這個沒有矽谷只有矽膠的城市，IT人每一步也走得很困難。</p><p>你嘗試找機會衝擊自己平淡的生活，找一點生意來做，但以你的頭腦和資本，其實可以做的事不多，最突破的幾次，就是參與炒iphone、炒 ipad、炒Lady Gaga飛等投機活動。起初錢容易賺，直至你上星期炒濃Lady  Gaga飛時，親身感受到一收工就要撲入機場博覽館大門口，割價兜售賣剩的黃牛飛的慘況，你覺得你還是不適合承擔任何類型的風險。</p><p>一事無成的事業，平庸的外表，加上沉默內向的性格，這幾年間，你也一直被別人標籤成一個書呆子，不，這個名詞已經過時，他們只稱呼你做一個｢毒撚｣，當你知道你一旦跟毒撚這個名號掛勾時，你心儀的女生總是會無視你的存在，上司同事朋友則不斷對你差遣和勞役，日日如是，今天也不例外。</p><p>這個早上，那個block了整棟大樓的員工上facebook，但容許自己用枱頭的電腦上141的電腦部主管，又再對你呼喝：｢Rene好撚煩 呀，你快D去搞掂佢啦!｣對你來說，Rene一點都不煩，整棟大樓之中她的樣貌已算清秀，加上一年四季風月不改的黑絲，對你這個毒男來說其實很吸引。</p><p>跟她成為了同事的兩年間，你從來不介意親自幫她解決關於電腦上的疑難，而你也一直很想令她更加留意你這個屬於不同部門的同事，可借你矮小刻板的外型再加上欠缺品味的衣著，實在難以在她面前突出自己，你曾想過利用一些奇怪的方法，例如無撚端端地在臉上粘上兩粒墨來標其立異，不過你還是沒有勇氣這樣做，一個都市人往往因為太習慣打字反而導致執筆忘字，但一個簡簡單單的醜字你依然懂得怎樣寫。</p><p>你稍為把自己的頭髮梳撥整齊，然後離開了自己的坐位，去找Rene，在經過兩條走廊三道玻璃門的中途，你不斷構想你的開場白，如果準備不充足，你會很容易因為緊張而結巴，可是當你徐徐走近她所在的坐位時，你跟Rene之間的眼神接觸又再使你的腦海一片空白，幸好的是，急於修理電腦的她很快便主動打破這個靜寂的冷場：｢喂呀，我個keyboard又好似壞壞地呀，右邊打數字D制一時按到一時按唔到，好奇怪呀。｣</p><p>你從來沒有期望過身邊的女性會看TED  talks，又或者對科技發展有濃厚興趣和抱有獨特的見解，但至少她們好應該對日常電腦知識有最基本的概念——如知道keyboard右手邊數字鍵其實有 一個像你一樣經常被別人忽視的按鈕，名叫Num  Lock。你當然沒有當面直斥她的愚笨，因為她是你的心上人：｢可能你唔小心按到呢個制，你再按到一次就無問題架喇，keyboard  o既設計本身係存有好多問題。｣ ｢哈哈，原來係咁簡單..｣她一笑置之，開始工作，沒有再理會你，你也準備回到自己的崗位。</p><p>這個你用了兩秒來解決的電腦技術問題，背後你有個深刻的體會，你覺得，如果她的角色換作是一個內向無知的毒男，然後問這種白痴的基本問題，一定會遭人白眼，受人非議，但如果對方是位美女，就算不是你去修理電腦，其他人也一定像你一樣對她百般包容和維護。的而且確，在你生存的世界中，毒男與外貌標緻一點的女性之間永遠存在徹底的不公平，有什麼過錯他們總容易嘻嘻哈哈帶過，毒男有什麼合理解釋都都總會被取笑被奚落被欺壓，不是嗎?有毒男在愚人節時在上高登開玩笑說在時代廣場放了TNT就要被拘捕，Angelababy在微博上揚然要炸飛機則逍遙法外，這是公平嗎?你個人認為，這條八婆就算唔畀人拉，她的餐廳都應該需要被查封，一個人面皮厚到搵自己個樣來做主題餐廳，其實是十分可疑，內裏一定有什麼耐人尋味的秘密。 </p><p>你一向消極，單單因為這件發生於早上的小事，你就心情低落了一整天，你有個習慣，就是每次失落的時候，便會收工後獨個兒到深水埗食晚飯。到深水埗，有兩個原因，第一個原因是因為那裏有間傷心酸辣粉，這間食店，聽說是因為吃過的人都會辣得流下眼淚，故而得名，你到這裡，是因為你想找個地方大哭一場來發洩，其 實你完全不怕辣，所以你在這間食店吃著粉的時候，總是裝作辣得流下眼淚口水鼻涕，但實情是你瑟縮在一角為自己這個失敗的人而嗚咽。在整間傷心酸辣粉內，其實只有你真正嘗到傷心的味道。</p><p>你很想身邊有個女朋友可以給你安慰，但拍拖對你來說太過遙遠，你邊吃辣粉邊哭邊回憶你剛才收工坐地鐵時遇過的每一對情侶，從你的觀察所見，她們大多數都以貌取人，總是找個俊俏高大時尚的男朋友，你覺得這些女人只看表面，沒有深度也沒有內涵，雖然當中還有其餘的女人，她們的男朋友的外表有些比你更平庸，但你則覺得這些女人肯定是為了錢。</p><p>就算不用別人可憐和安慰，你也需要一個女人來滿足你對性的好奇，無錯，你對女人的胴體仍只局限於好奇的階段，因為你二十幾歲人什麼也未試過，每朝上班當你擠在地鐵車廂時，你總是東張西望地在猜想你會否是整架列車內幾百人裏面唯一的處男，有時候，當你的目光在車廂無意中掠過一些豐滿的胸部時，你內心會極其渴望可以一試其質感，但你明白這是沒有可能發生的事情，所以你會嘗試安慰自己，女人的胸部應該不會太好摸，也不會令你的雙手舒適爽快，想一過手癮的話，不如到黃金高登買個為專業玩家而設附合人體工學的gaming  mouse，和那些質感無與倫比打落啪啪啪啪聲的機械式keyboard，雖然這些都很貴，隨時每件過千，但你覺得它們是值得的，每件你都可以返工渣到收工，收工後再給你撫弄到訓覺，這是女人的波不可以媲美的。你這樣游說自己。 </p><p>故此，除了去傷心酸辣粉，你到深水埗的原因，就是尋找更高質素的mouse和keyboard來幫你舒壓，你在黃金高登購物的過程中，手機突然傳來whatsapp的訊息音效，令你意外的是，那個訊息是Rene給你的，但你沒有點興奮，｢我有D關於砌機o既問題想問你呀…｣她其實間中會主動找你，但基本上每一次她只是問你關於電腦的問題，今次也沒有例外，你覺得，你這條毒撚永遠只能在這個範疇中滿足到她，她也只是在利用你，你邊想邊激動得又再掉下幾滴眼淚：｢砌機!砌機!又係砌機!我除左識砌機，仲識砌女架!｣或許你已壓抑得太久，你不禁站在商場的走廊中緊握著手機咆哮了出來，通道兩旁賣打印機賣手提電腦的promoter們，也忍不著對你竊笑，把你當成瘋子看待。</p><p>你麻木了，不想理會他們的目光，也不懂得尷尬，你認為，其實當個瘋子也不錯，至少可活於自己幻想出來的世界，那個什麼來自美國三藩市福青幫第二把 交椅龍心438就是一個好例子，不單周圍搗亂拍片自我陶醉，還收了一堆毒撚做信徒，你其實曾經花了幾小時把他上載到youtube的影片續一看完，某程度來說你也是他的小粉絲。</p><p>你沒有心情，離開黃金商場空手而回，在你準備乘小巴回家之際，你的電話響起，是Rene打來：｢做咩咁衰唔覆我whatsapp呀?我屋企部機壞左，我想你幫我砌機呀…｣你聽著她甜美的聲線，一時語塞，她再道：｢黎啦，聽日黎我屋企砌啦，我最多煮飯畀你黎報答你啦，我屋企無人，唔洗怕醜喎。｣ 你沒有意識過她原來是這麼主動的女人，她的一句｢唔洗怕醜喎｣，帶給你無盡的幻想，你頓時覺得，生命中的黎明終於來臨，只要你上了她的屋企，｢毒撚｣、 ｢青頭仔｣等一直牽伴你一生的字眼在明日之後將會永遠成為過去式，你望望手錶，打算牢記著這個必需要紀念的日子，但你赫然發現，今天是五月十四日，換言之，明天是五月十五日，這一天，你有一件更重要的事，令你無法赴會，無法跟自己的貞操告別：｢Rene，你o既好意我心領喇，對唔住，我聽日咩都唔想砌  !｣你斷然地拒絕了她，這是你一世人做過最瀟灑的事，你覺得，你是一位浪子。</p><p>雖然你放棄了在明天破處，但你跟她掛了線後，回頭細想，也沒有太過失落。你站在長沙灣道跟欽州街的交界，暖風輕送，沙塵撲面，你只是淡然地苦笑了一下，你心想，天意的確弄人，Diablo3選擇了在明天全球發售，或許，這就是毒撚的宿命。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 自言自语 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>面向对象概念</title>
      <link href="/posts/79ba.html"/>
      <url>/posts/79ba.html</url>
      
        <content type="html"><![CDATA[<p>面向对象编程——将解决问题的过程抽象为多个对象协同作战的过程</p><p>面向对象编程则是把构成问题的事务分解成各个 对象，而建立对象的目的也不是单纯为了完成一个个步骤，而是为了描述某个事物在解决整个问题的过程中所发生的行为，对象中可能不只一个行为(函数)，还会有其他的用于描述或者解决其他问题的属性、行为。</p><p>面向对象的设计则是从另外的思路来解决问题。整个五子棋可以分为：</p><ol><li>棋子对象，这两方的行为是一模一样的，</li><li>棋盘对象，负责绘制画面，</li><li>规则对象，负责判定诸如犯规、输赢等。</li></ol><h3 id="面向对象三大特性：封装、继承、多态"><a href="#面向对象三大特性：封装、继承、多态" class="headerlink" title="面向对象三大特性：封装、继承、多态"></a>面向对象三大特性：封装、继承、多态</h3><ul><li>封装：将类的某些信息隐藏在类内部，不允许外部程序直接访问，而是通过该类提供的方法来实现对隐藏信息的操作和访问。</li><li>继承：继承是类与类的一种关系，子类拥有父类的所有属性和方法（除了private修饰的属性不能拥有）从而实现了实现代码的复用。</li><li>多态：主要指引用多态、方法多态。<ul><li>引用多态是指：父类引用可以指向本类对象，也可指向子类对象；</li><li>方法多态：子类中可以重写父类的方法，在调用方法时根据引用指向的子类对象决定调用哪个具体的方法。</li></ul></li></ul><h3 id="面向对象五大基本原则"><a href="#面向对象五大基本原则" class="headerlink" title="面向对象五大基本原则"></a>面向对象五大基本原则</h3><ul><li>单一职责原则：一个类的功能要单一，不能包罗万象。</li><li>开放封闭原则：一个模块在扩展性方面应该是开放的而在更改性方面应该是封闭的，比如：一个网络模块，原来只服务端功能，而现在要加入客户端功能，那么应当在不用修改服务端功能代码的前提下，就能够增加客户端功能的实现代码，这要求在设计之初，就应当将服务端和客户端分开，公共部分抽象出来。</li><li>里氏替换原则：子类应当可以替换父类并出现在父类能够出现的任何地方。比如：公司搞年度晚会，所有员工可以参加抽奖，那么不管是老员工还是新员工，也不管是总部员工还是外派员工，都应当可以参加抽奖，否则这公司就不和谐了。</li><li>依赖倒置原则：具体依赖抽象，上层依赖下层。比如：假设B是较A低的模块，但B需要使用到A的功能，这个时候，B不应当直接使用A中的具体类： 而应当由B定义一抽象接口，并由A来实现这个抽象接口，B只使用这个抽象接口：这样就达到了依赖倒置的目的，B也解除了对A的依赖，反过来是A依赖于B定义的抽象接口。通过上层模块难以避免依赖下层模块，假如B也直接依赖A的实现，那么就可能 造成循环依赖。一个常见的问题就是编译A模块时需要直接包含到B模块的cpp文件，而编译B时同样要直接包含到A的cpp文件。</li><li>接口分离原则：模块间要通过抽象接口隔离开，而不是通过具体的类强耦合起来。</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>计划任务</title>
      <link href="/posts/232e.html"/>
      <url>/posts/232e.html</url>
      
        <content type="html"><![CDATA[<p>计划任务服务crond</p><p>作用：解放我们的双手，解放我们的时间</p><ul><li>计划任务，让系统在将来的指定时间点执行某些任务（程序）</li><li>计划任务，可以周期性执行也可以仅仅执行一次</li><li>Linux系统中的计划任务<code>at</code>和<code>crong</code>服务是操作系统内置的2个服务，默认情况是安装好的。</li></ul><p>编写<code>配置文件</code>方法：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost etc]# cat /etc/crontab</span><br><span class="line">SHELL=/bin/bash</span><br><span class="line">PATH=/sbin:/bin:/usr/sbin:/usr/bin</span><br><span class="line">MAILTO=root</span><br><span class="line"></span><br><span class="line"># For details see man 4 crontabs</span><br><span class="line"></span><br><span class="line"># Example of job definition:</span><br><span class="line"># .---------------- minute (0 - 59)</span><br><span class="line"># |  .------------- hour (0 - 23)</span><br><span class="line"># |  |  .---------- day of month (1 - 31)</span><br><span class="line"># |  |  |  .------- month (1 - 12) OR jan,feb,mar,apr ...</span><br><span class="line"># |  |  |  |  .---- day of week (0 - 6) (Sunday=0 or 7) OR sun,mon,tue,wed,thu,fri,sat</span><br><span class="line"># |  |  |  |  |</span><br><span class="line"># *  *  *  *  * user-name  command to be executed</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">前5个字段分别表示：</span><br><span class="line">分钟：0-59</span><br><span class="line">小时：0-23</span><br><span class="line">日期：1-31</span><br><span class="line">月份：1-12</span><br><span class="line">星期：0-7（0表示周日或者7表示周日）</span><br></pre></td></tr></table></figure><hr><p>使用<code>命令</code>编辑自己的定时任务:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">crontab</span><br><span class="line">-e 设置计时器</span><br><span class="line">-l 列出当前计时器的设置</span><br><span class="line">-r 删除计时器的设置(不建议使用)</span><br></pre></td></tr></table></figure><h3 id="日志切割参考"><a href="#日志切割参考" class="headerlink" title="日志切割参考"></a>日志切割参考</h3><p><a href="https://pengyirui.gitee.io/posts/f708.html">https://pengyirui.gitee.io/posts/f708.html</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>红帽8修改网卡</title>
      <link href="/posts/fe5d.html"/>
      <url>/posts/fe5d.html</url>
      
        <content type="html"><![CDATA[<h2 id="使用nmcli修改ip地址"><a href="#使用nmcli修改ip地址" class="headerlink" title="使用nmcli修改ip地址"></a>使用nmcli修改ip地址</h2><p>修改ip地址<br><code>[root@rhel8 ~]# nmcli connection modify ens160 ipv4.addresses 192.168.159.100/24 ipv4.gateway 192.168.159.2 ipv4.dns 8.8.8.8</code><br>ens160：网卡名称</p><p>如果修改失败尝试修改配置文件<br><code>vi /etc/sysconfig/network-scripts/ifcfg-ens160</code><br>重载配置<br><code>[root@rhel8 ~]# nmcli connection reload ens160</code></p><p>激活链接<br><code>[root@rhel8 ~]# nmcli connection up ens160</code></p><h2 id="SELinux"><a href="#SELinux" class="headerlink" title="SELinux"></a>SELinux</h2><p>关闭selinux<br>查看：getenforce<br>关闭：setenforce 0</p><p>或者 修改配置文件<br><code>vi /etc/selinux/config</code><br>修改<code>SELINUX</code>的值为<code>disabled</code>即可</p><h2 id="关闭防火墙"><a href="#关闭防火墙" class="headerlink" title="关闭防火墙"></a>关闭防火墙</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">暂时关闭防火墙</span><br><span class="line">[root@localhost ~]# systemctl stop firewalld.service</span><br><span class="line"></span><br><span class="line">查看状态</span><br><span class="line">[root@localhost ~]# systemctl status firewalld.service</span><br><span class="line">● firewalld.service - firewalld - dynamic firewall daemon</span><br><span class="line">   Loaded: loaded (/usr/lib/systemd/system/firewalld.service; disabled; vendor preset: en&gt;</span><br><span class="line">   Active: inactive (dead)</span><br><span class="line">     Docs: man:firewalld(1)</span><br><span class="line"></span><br><span class="line">设置开机关闭</span><br><span class="line">[root@localhost ~]# systemctl disable firewalld.service</span><br><span class="line"></span><br><span class="line">查看是否开机启动</span><br><span class="line">[root@localhost ~]# systemctl list-unit-files | grep firewall</span><br><span class="line">firewalld.service                          disabled</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>软件包篇</title>
      <link href="/posts/b6fd.html"/>
      <url>/posts/b6fd.html</url>
      
        <content type="html"><![CDATA[<h3 id="二进制包"><a href="#二进制包" class="headerlink" title="二进制包"></a>二进制包</h3><p>已经编译好了的软件包，只需要直接安装就可以使用。<br>命名方式一般为：xlockmore-5.31-2.el6.×86_64.rpm</p><blockquote><p>xlockmore:软件包名字<br>5.31-2：版本号<br>el6：操作系统版本<br>x86_64：计算机cpu架构<br>rpm：rpm包</p></blockquote><h3 id="源码包（推荐使用）"><a href="#源码包（推荐使用）" class="headerlink" title="源码包（推荐使用）"></a>源码包（推荐使用）</h3><p>指的是程序员写的原始的程序代码文件，不能够直接在计算机上运行。需要编译后才能使用<br>命名方式一般为：<br>软件包名.tar.gz<br>软件包名.tar.bz2<br>软件包名.tar.xz<br>软件包名.zip</p><p>获取rpm包<br>1.推荐网站<br><a href="http://rpmfind.net/">http://rpmfind.net</a><br><a href="http://rpm.pbone.net/">http://rpm.pbone.net</a></p><p>2.相关软件官方网站（例如）<br><a href="https://www.mysql.com/">https://www.mysql.com</a><br><a href="http://nginx.org/packages">http://nginx.org/packages</a></p><h3 id="配置本地yum仓库"><a href="#配置本地yum仓库" class="headerlink" title="配置本地yum仓库"></a>配置本地yum仓库</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">第一步：挂载镜像到本地系统</span><br><span class="line">[root@RedHat8 ~]mount -o -ro /dev/sr0 /mnt</span><br><span class="line"></span><br><span class="line">查看是否挂载成功 并 查看BaseOS和Appstream内容</span><br><span class="line">[root@RedHat8 ~]ls /mnt/BaseOS/</span><br><span class="line">Packages  repodata</span><br><span class="line">[root@RedHat8 ~]ls /mnt/AppStream/</span><br><span class="line">Packages  repodata</span><br></pre></td></tr></table></figure><hr><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">第二步：修改配置文件指向本地存储库</span><br><span class="line">[root@RedHat8 yum.repos.d]# pwd</span><br><span class="line">/etc/yum.repos.d</span><br><span class="line"></span><br><span class="line">[root@RedHat8 yum.repos.d]# cat local.repo</span><br><span class="line">//说明：local.repo是自己新增的，只要是以.repo结尾即可，默认是redhat.repo</span><br><span class="line">[BaseOS]</span><br><span class="line">name=BaseOS</span><br><span class="line">baseurl=file:///mnt/BaseOS</span><br><span class="line">gpgcheck=0</span><br><span class="line">enable=1</span><br><span class="line"></span><br><span class="line">[AppStream]</span><br><span class="line">name=AppStream</span><br><span class="line">baseurl=file:///mnt/AppStream</span><br><span class="line">gpgcheck=0</span><br><span class="line">enable=1</span><br></pre></td></tr></table></figure><hr><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">第三步：查看是否成功</span><br><span class="line">[root@RedHat8 yum.repos.d]# yum clean all</span><br><span class="line"># 清空缓存</span><br><span class="line">[root@RedHat8 yum.repos.d]# yum makecache</span><br><span class="line"># 创建缓存</span><br><span class="line">[root@RedHat8 yum.repos.d]# yum repolist</span><br><span class="line"># 查看仓库</span><br><span class="line">标识            名称            状态</span><br><span class="line">AppStream       AppStream       4672</span><br><span class="line">BaseOS          BaseOS          1658</span><br></pre></td></tr></table></figure><hr><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">第四步：使用yum安装软件</span><br><span class="line">安装</span><br><span class="line">yum -y install 软件包1 软件包2</span><br><span class="line">yum -y groupinstall &quot;包组名&quot;</span><br><span class="line"></span><br><span class="line"># -y 是取消交互的意思</span><br></pre></td></tr></table></figure><p>第五步：检查是否安装成功<br><code>yum list installed | grep 软件包名</code></p><p>卸载软件包</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">yum -y remove 软件包1 软件包2</span><br><span class="line">yum -y groupremove &quot;包组名&quot;</span><br></pre></td></tr></table></figure><p>升级软件包 (不推荐使用)<br><code>yum update 软件包名</code></p>]]></content>
      
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>批量提取文件名</title>
      <link href="/posts/f1d5.html"/>
      <url>/posts/f1d5.html</url>
      
        <content type="html"><![CDATA[<p>将以下代码复制到记事本，把后缀名改为<code>.bat</code>。放入当前路径 并且 双击运行即可把当前目录下的文件写入进<code>list.txt </code>下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">@echo off </span><br><span class="line">dir /a-d /b &gt;./list.txt </span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 软件 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux文件权限</title>
      <link href="/posts/e80b.html"/>
      <url>/posts/e80b.html</url>
      
        <content type="html"><![CDATA[<h1 id="基础"><a href="#基础" class="headerlink" title="基础"></a>基础</h1><p>创建用户：useradd<br>修改用户：usermod<br>修改密码：passwod<br>删除用户：userdel</p><p>创建组：groupadd<br>删除组：groupdel<br>管理组：gpasswd</p><p>相关文件/etc/passwd, /etc/shadow, /etc/group</p><p>修改默认权限：umask<br>永久配置 默认权限 需要修改配置文件<br>相关文件/etc/bashrc, ~/.bashrc</p><hr><h1 id="文件目录"><a href="#文件目录" class="headerlink" title="文件目录"></a>文件目录</h1><p><img src="https://raw.githubusercontent.com/pengyirui/blog_img/main/2021-04-08-01.jpg" alt="文件构成"></p><hr><h1 id="高级权限"><a href="#高级权限" class="headerlink" title="高级权限"></a>高级权限</h1><p>冒险位:<br>指文件操作者（用户)<code>临时拥有</code>文件<code>拥有者</code>的权限<br>一般针对的是<code>命令</code>或者<code>脚本</code>文件<br>用字母表示是<code>s</code>或<code>S</code>；数字表示是<code>4</code><br>冒险位的设置：<code>chmod u+s 文件名</code> 或者 <code>chmod 4xxx 文件名</code></p><p>强制位:<br>一般针到的是<code>目录</code><br>如果一个目录拥有强制位，那么<code>任何用户</code>在该目录里所创建的任何文件的<code>属组</code>都会继承<code>该目录的属组</code>。<br>用字母表示是<code>s</code>或<code>S</code>；数字表示是<code>2</code><br>强制位的设置：<code>chmod g+s 文件名</code> 或者 <code>chmod 2xxx 文件名</code></p><p>粘滞位:<br>一般针对的是<code>公共目录</code><br>如果一个公共目录拥有粘滞位，那么该目录下的文件，只有<code>root</code>和<code>文件的创建者</code>可以删除，其他人只能自己管理自己。（A用户不能删除B用户创建的文件）<br>用字母表示是<code>t</code>域<code>T</code>；数字表示是<code>1</code><br>粘滞位的设置：<code>chmod o+t 文件名</code> 或者 <code>chmod 1xxx 文件名</code><br>例：<code>chmod o+t /data/code/</code></p><h1 id="ACL访问控制策略"><a href="#ACL访问控制策略" class="headerlink" title="ACL访问控制策略"></a>ACL访问控制策略</h1><p>设置例子：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">setfacl -m u:用户:rwx /home/redhat/file1    # 给单个用户单独添加权限</span><br><span class="line">setfacl -m u:组名:rwx /home/redhat/file1    # 给单个组单独添加权限</span><br></pre></td></tr></table></figure><p>删除例子：<br><code>setfacl -x u:tank test                      #清除tank用户，对test文件acl规则</code></p><p>查看文件设置了哪些acl:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]# getfacl test </span><br><span class="line"># file: test</span><br><span class="line"># owner: root</span><br><span class="line"># group: root</span><br><span class="line">user::rwx</span><br><span class="line">group::r--</span><br><span class="line">other::r--</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>网速，内存，CPU监控软件</title>
      <link href="/posts/30fd.html"/>
      <url>/posts/30fd.html</url>
      
        <content type="html"><![CDATA[<p>TrafficMonitor<br>详细介绍：<a href="https://zhuanlan.zhihu.com/p/39542454">https://zhuanlan.zhihu.com/p/39542454</a><br>官方下载链接：<a href="https://github.com/zhongyang219/TrafficMonitor">https://github.com/zhongyang219/TrafficMonitor</a><br>蓝奏云备份：<a href="https://pengyirui.lanzous.com/iSrohnp5zqj">https://pengyirui.lanzous.com/iSrohnp5zqj</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> 软件 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>与时间做朋友</title>
      <link href="/posts/f5c4.html"/>
      <url>/posts/f5c4.html</url>
      
        <content type="html"><![CDATA[<h1 id="与时间做朋友"><a href="#与时间做朋友" class="headerlink" title="与时间做朋友"></a>与时间做朋友</h1><p>作者 <em>李笑来</em></p><ul><li><p>最善于利用人类这一天性的商业机构也许就是银行了。想住大房子？好！我给你办贷款，慢慢还，不着急，30年之内还清就好。想买新轿车？行！我给你办贷款，慢慢还，不着急，5年之内还清就行。房子有了，车子有了，还想要什么？说出来，没关系。没有钱可以办信用卡，先透支嘛，给你10万信用额度，想买什么就买什么吧！这是一个“享受在先”的时代，并且人人如此。至于银行最终如何对付那些欠债不还的人，可从来不会在广告上提及，也尽量不对外公开。</p></li><li><p>总的来说，一方面是自己的无限欲望，一方面是要完成的事情太多，一方面是自我满意度的不断下降——这就是人们总是不由自主地期望速成的根源。出路肯定存在，但这出路只有一个起点——接受现实。告诉自己：我有不足，我需要时间，我没办法一蹴而就。</p></li><li><p>积累多的人之所以稳健，是因为对他来说，“我要”的欲望可以用“我有”的东西来满足。即便“我有”的暂时不够，他也能借助已经拥有的足够的努力和勤奋（抑或投机取巧的方法和经验），只需假以时日，定能如愿以偿。一旦得偿所愿，不仅“我有”的更多，“我要”的也更容易获得，如此形成良性循环。</p></li><li><p>生活中类似的死循环非常多。比如，找工作的时候，招聘方要求应聘者有三年以上工作经验，应聘者因为没有工作经验而无法获得这份工作，进而他就没有工作经验……好像永远无法找到工作；再比如，你到银行贷款，银行说贷款你得有抵押，有东西可供抵押的意思是，你是有资产的人，而你很可能恰恰因为没有资产才急需贷款……好像永远无法获得贷款……</p></li><li><p>生活的本质就是这样，你想要什么，它偏不给你什么。摆脱这个死循环的方法只有一个——给我什么我就用好什么，积累到一定程度再去换能换的东西。要不断想办法运用心智的力量去识别那些死循环和恶性循环，然后在好像不可能的情况下跳出去。出者存，困者亡。</p></li></ul><ul><li>与外界的无谓比较，让每个人凭空多出了一个根本不属于自己的目标，动辄被自己的理想绑架。很多人（应该是绝大多数人）的工作态度本质上是“骑驴找马”。基于种种原因（主要是概率问题），人们往往对自己正在从事的职业并不满意。很多人都心怀梦想，有一个“无论如何早晚都要从事的梦想职业”，而不幸的是，很多人正因如此最终沦为平庸之辈（有例外，但这例外太少，几乎可以忽略）。</li></ul><ul><li>心怀“梦想”的时间越长，它的沉没成本就越高。很多人都在无意之间被自己的“梦想”所绑架，所以，很多时候，对很多人来说，所谓“梦想”也许只是陷阱。</li></ul><ul><li>正确的方法究竟是什么稍后再说，这里先说说什么是正确的事情。最可怕的不是效率不高，而是干脆做错了事。如果做的事情是错误的，效率越高，结果越糟。如果做的事情是正确的，效率低一点也没关系，因为做一点是一点，多收获一点，多进步一点，动力就会更强一点，进而更容易持续地做下去。怎样判断所做的事情是否正确？核心的判断只有一个：看它是否现实。</li><li>几乎一切愚蠢的行为都来自否定现实、逃避现实。只有接受现实，才可能脚踏实地，避免心浮气躁、好高骛远。如果我们把成功朴素地定义为“用正确的方法做正确的事情，并在最后期限之前漂亮地完成”的话，那么，大多数所谓的“时间管理技巧”实际上发挥不了多大的作用，只不过是花拳绣腿。真正有用的往往是简单而又朴素的道理，例如“现实只能接受”。</li></ul><h1 id="管理"><a href="#管理" class="headerlink" title="管理"></a>管理</h1><ol start="2"><li>及时行动</li></ol><p>接受任务之后，什么时候开始执行才好呢？比“越早开始越好”更切实的答案是“现在就开始”。所谓做事拖延，不是拖延着做事，而是拖延着不开始做事。明知自己拖延的人很痛苦，因为他们不是不知道该做什么，而是不知道为什么“无法进入状态”——这是他们能够想出来的对自己的行为最拿得出手的描述。</p><p>就一定会出问题。这是现实。无论何人，无论何事。如果在做事的过程中没有出现任何问题，那肯定不是在做事，而是在做梦。所以不要害怕做错事！！！</p><p>人在小时候没什么事情可做，就愈发感觉时间过得慢；随着年龄增加，要做的事情越来越多，当然就愈发感觉时间过得飞快，稍纵即逝</p><ol start="3"><li>直面困难</li></ol><p>合理的时间安排应该是这样的：迅速做完简单的部分，把节约出来的时间放在困难部分的处理上。然而，很多人会下意识地回避困难，于是乎，他们的时间安排是这样的：用几乎全部时间处理简单的部分，至于困难的部分，干脆“掩耳盗铃”，视而不见，暗地里希望困难自动消失……</p><p>现实中，这种现象无处不在。比如学习上，准备托福考试时只做阅读和听力但不练习口语和写作；比如工作上，做项目计划时只讨论做什么却从不提及怎么做；比如生活上，总是把“我爱你”挂在嘴边却从来不花时间想想恋人真正需要的是什么……这些问题都源自同一个习惯：专做简单的，回避困难的。</p><ol start="4"><li>关注步骤</li></ol><p>做任何事情，学会思考方式最为重要。</p><p>要学着像一个项目管理者那样思考——他们更多地关注“方法”，他们会花费比别人更多（多出许多倍）的时间去落实每一个步骤，在确认无误之后，他们才会有效地分配任务，团队才能够切实可靠地完成任务。</p><ol start="5"><li>并行串行</li></ol><p>说白了就是一心两用</p><p>例子：</p><blockquote><p>烧水泡茶：参见《统筹方法平话及补充》，华罗庚著，中 国工业出版社，1966。<br>▷ 办法甲：洗好水壶，灌上凉水，放在火上。在等待水开的时候洗茶壶、洗茶杯、拿茶叶。等到水开，泡茶喝。<br>▷ 办法乙：先做好一些准备工作，包括洗水壶、洗壶杯、拿茶叶。一切就绪，灌水、烧水，坐待水开了泡茶喝。<br>▷ 办法丙：洗净开壶，灌上凉水，放在火上，坐待水开。水开了之后急急忙忙找茶叶、洗茶壶、茶杯，泡茶喝。</p></blockquote><p>哪一种办法更省时间呢？</p><p>谁都能看出第一种办法好。原因很简单：有些任务被并行处理了。可以如此优化的前提是“大任务被划分成足够多又不太多的小任务”。有了这样的前提，你才有能力分辨哪些任务可以并行——所谓的“优化”，其实是很简单的。</p><p>如果不做划分——事实上大多数人真的如此——那么就只有一个任务，那就是“喝茶”。然而，如果能粗略划分一下的话，就知道起码可以划分为两个子任务，也就是“烧水”和“泡茶”。但这样还不够，因为划分之后的两个子任务是串行关系，先后顺序明了，没有可以优化的余地。如果再继续划分子任务的话，就得找出有“并行”关系的任务，进而提高效率。</p><h1 id="计划"><a href="#计划" class="headerlink" title="计划"></a>计划</h1><p>我们更常面临的尴尬是：如果不开始行动，根本就无从判断目标是不是确实可行，或者反过来，目标是不是确实不可行。于是，往往只有开始行动之后，才能做出正确的判断。在行动过程中，如果发现既定的目标确实是不现实、不可行的，那么“半途而废”不仅不意味着失败，反而意味着决策者的无比理智。</p><p>我曾尝试制定年度计划，却无能力完成。于是，在再次平静接受自己天分平平这一事实的同时，我一口气把计划期限缩短到一个星期。通过实践发现：如果一个计划的期限只有一个星期，我是很容易坚持下来，并且往往可以出色完成的。这个发现令我非常开心，因为我发现自己还是可以做一些事情的。而随着时间的推移，我发现自己竟然可以慢慢把计划期限延长，两个星期、一个月，后来甚至可以制定一个季度的计划！</p><p>当然，有些时候，有些行动必须拖延。比如，决定买个新潮手机的时候，故意拖延三个月，会享受到更低的价格；决定买辆非常中意的高级轿车的时候，故意拖延上一年，也许会意识到当初的审美观其实很有问题。我个人的经验是，对我个人来讲，所有的大额消费活动，乃至其他一切涉及金钱的活动，诸如投资之类，“马上行动”的建议肯定不适用。相反，这种情况下，一定要拖延，拖得越久越好——再次强调，这仅是我个人的经验。</p><h1 id="验收"><a href="#验收" class="headerlink" title="验收"></a>验收</h1><p>托马斯·叟的类比特别精巧：“在茫茫而又无限的未知空间里，我们的‘知识’只不过像其中的星球一样，而星球与星球之间的空隙比那些星球本身不知道大出多少倍。”所以，我们需要“信仰”、“希望”、“爱”、“奇迹”，甚至“怪力乱神”等被学者们称为“必要之幻觉(Necessary Fiction)”的东西去填补这些空隙才能心安。</p><p>建立每日清单，记录时最好只写过程，不写当时的感受。</p><h1 id="经验局限"><a href="#经验局限" class="headerlink" title="经验局限"></a>经验局限</h1><p>人类如果不会阅读、不会记录、不会表达、不会思考，会是什么样子呢？下面这个故事流传颇广：</p><blockquote><p>这个故事经查证，应该只是一个寓言而已。大卫·加德纳（David Gardner）在愚人网上的评价颇有意味：丹最近听说了一个来自“心理学101”的实验故事“，心理学101”的故事都相当有趣、发人深省，而且得出了重要的结论。我和丹都无法确证这个故事的真实性，然而，即使它从未发生过（我更乐于认为它曾经发生过），它仍然包含了精神上的真理。我与其他亲爱的愚人网友们一样，将这种精神上的真理视为更深层次的东西，相对于科学真理来说，它有属于自己 的轨道。</p></blockquote><blockquote><p>把五只猴子关在一个笼子里，笼子顶上挂着一串香蕉。实验人员准备了冰水，一旦有猴子碰到香蕉，马上就会有冰水浇向所有猴子。首先有只猴子想去拿香蕉，导致所有猴子都被冰水浇，之后每只猴子经历过几次同样的尝试后，发现莫不如此。于是，猴子们不再试图去拿香蕉了。</p></blockquote><blockquote><p>然后，实验人员把其中的一只猴子换出，换进一只新猴子。这只新猴子看到香蕉，自然马上想要去拿。结果还没等浇水，其他四只猴子就对那只新来的猴子一顿暴打。新猴子挨了几次打之后，也不再试图去拿香蕉了——怕挨打。</p></blockquote><blockquote><p>如此，实验人员再把第一次实验中留下的四只猴子中的一只换出，换进另一只新猴子。这只新猴子看到香蕉，也是迫不及待想要去拿，当然，一切如前，等待它的是其他四只猴子的一顿暴打。最后，这只新来的猴子也不敢去碰香蕉了。</p></blockquote><blockquote><p>最有趣的是，上次挨打的猴子，这次出手最重——其他猴子也许是出于自卫，但这只猴子肯定是出于报复，因为它并没有被水浇过。</p></blockquote><blockquote><p>一段时间后，最初的五只猴子都被换走了，剩下的五只猴子并不知道冰水的存在，它们只知道一件事情——谁要敢碰那串香蕉，就要遭到一顿暴打。当然，它们的行为与自卫无关，全都是出于报复！</p></blockquote><p>这个故事据说是用来说明传统是如何形成的。其实，这个实验只能部分说明某些荒谬的传统是如何形成的。很多今天看起来没什么道理的传统，当初确实曾经正确或者曾经最接近正确。这个故事真正让我们看到的是，在知识正确传播的过程中，语言、文字以及逻辑思维有多么重要。</p><p>让我们就着这个故事继续联想：如果猴子们可以讲话，那么它们就不用打架；如果猴子们能够写字，那么无论换多少次、多少只，新来的猴子都不用挨打（更不会无辜地被打）；如果猴子们能完整地使用逻辑，或许它们最终会想出办法躲避冰水并吃掉香蕉，进而可能对那些做实验的人心存鄙视。<br>、<br>因为没有足够精巧的语言，也没有可以使用的文字，那些猴子无法进行有效的交流和讨论，也不大可能有机会发展出完整的逻辑思维能力，更不用说“正确地思考”了，所以，猴子们最终都不可能搞清楚香蕉和冰水是什么关系，只是得到了一个结论——香蕉是不能碰的——至于为什么不能碰，却被完全曲解了。只看结果，不究原因，或者乱解原因，是一种多么危险的想法和做法啊！正所谓“经验主义害死人”。</p><p>谈到这里，我们已经触及所有学习过程（或者说知识传递过程）中最大的障碍——经验主义。所有的人或多或少都是经验主义者，原因就是前文已经提到的：所有的人获取知识最为基础的手段就是“体验”。“经验”在一定的层面上是适用的，不能否定它的重要价值，但与此同时，必须认清“经验主义”的局限。</p><h1 id="思考"><a href="#思考" class="headerlink" title="思考"></a>思考</h1><p>（独立思考）</p><p>遇到问题动脑子想一想其实是根本不费力气的事情，可偏偏很多人最常说的一句话是“想那么多累不累啊？”这话相当古怪，特别是从一个“人”——作为地球上唯一拥有庞大大脑额叶的物种的成员——的口中说出来。</p><p>思考，更准确地说，独立思考，只不过是从别人那里知道一个结论的时候，自己动脑重新推演一遍，看看得出结论的过程有没有漏洞，有没有不合理的地方，衡量一下结论到底有多少道理的过程。这个过程没那么复杂，也没什么玄妙， 不过是一个正常的有脑子的人应该做的事情而已</p><h1 id="确定性"><a href="#确定性" class="headerlink" title="确定性"></a>确定性</h1><p>拒绝接受不确定性的一个根源在于害怕复杂、奢望简单。谁不希望一切都是简单的呢？可现实往往就是复杂的。</p><h1 id="对立论证"><a href="#对立论证" class="headerlink" title="对立论证"></a>对立论证</h1><p>一个很常见的例子是，工作中总有一些人抱怨老板或者上司愚蠢。可是，上司真的愚蠢吗？我们并不排除在有些情况下，上司确实很愚蠢的可能性——没有人十全十美。然而，另外一个解释可能更合理：</p><p>在大多数情况下，一个人如果不做事，是不会暴露自己的缺点的，因为人只有在做事的时候才会暴露缺点。这也是大多数人并不自知的一个重要原因——他们正在做的事情往往是别人要求他们做的。在任何一个部门或团队里，上司做的事情全都是显性的，是所有下属或者成员都看得见的；而下属之间、成员之间往往并不清楚对方正在做什么。于是，下属们更容易“共同”看到上司的缺点。</p><p>仔细观察一下就会发现，那些不停抱怨“上司的愚蠢”的人基本上有一个共同点：他们不过是把“上司很愚蠢”作为自己偷懒的借口。他们并不清楚自己的可笑与可悲：既然上司那么“愚蠢”，自己又为什么要用宝贵生命中的大部分时间为这个“愚蠢”的上司打工？那些少数能够提出建设性意见的人是不会抱怨“上司很愚蠢”的，他们要么想办法帮助上司解决问题，要么在爱莫能助的时候自行离开。</p><p><img src="https://raw.githubusercontent.com/pengyirui/blog_img/main/2021-03-02-01.png"></p><h1 id="辅助工具"><a href="#辅助工具" class="headerlink" title="辅助工具"></a>辅助工具</h1><p>在很多领域，有些“思维训练”其实只是需要更改语言习惯。以下一些句式最好经常使用，因为它们特别有助于独立思考习惯的养成，并且也有刺激思考的作用：</p><pre><code>▷……是一回事，而……是另外一回事。▷……和……其实根本不是一回事。▷……不一定……▷……。可是，这并不意味着……▷……也许还有另外一种可能性（解释）。▷……看起来像……，可是……▷……。而事实却可能远比看起来的更为复杂（简单）。▷……。然而，（这个论断）反过来（陈述）却不一定成立……▷……其实很可能与……根本就没有任何关系。▷……和……之间不一定是单纯的因果关系，它们也可能互为因果。▷……和……之间的比较也许没有任何意义。▷……其实不过是表面现象，其背后的本质是……▷……有一个通常被忽略的前提。▷……尽管听起来很有道理，然而却完全不现实。▷……也许有人会说……，但是这种质疑却……</code></pre><p>而另外一些句式，则要刻意回避。比如这句话：</p><pre><code>……难道就没有一点可取之处吗？</code></pre><h1 id="倾听"><a href="#倾听" class="headerlink" title="倾听"></a>倾听</h1><p>为了让自己听得更有效率，我们要牢牢记住这个简单而又实用的原则：就算需要质疑，也一定要等到对方把话说完。</p><h1 id="说话"><a href="#说话" class="headerlink" title="说话"></a>说话</h1><p>每一句话，其实都是有归属的。“赶紧睡觉！”通常只有父母对不太听话的小孩子说。“好好干！”一般是长辈或领导说给新人听的。“亲爱的”一般不是普通朋友之间的招呼方式……</p><p>比如，如果不是班里学习最好的学生在大讲特讲学习方法，很多同学会不屑于听。再比如，如果不是公认最冷静、最善于思考的人，那么他说出来的话就算是对的，也很可能会被低估。</p><p>一般来说，我们可能获得的建议是这样的：得知道什么话能说，什么话不能说。这个建议的意思是，要根据自己的情况选择能说的话、该说的话、说出来别人能听的话。</p><h1 id="讨论"><a href="#讨论" class="headerlink" title="讨论"></a>讨论</h1><p>瓦茨拉夫·哈维尔先生制定的《对话守则》：<br>1.对话的目的是寻求真理，不是为了斗争。<br>2.不做人身攻击。<br>3.保持主题。<br>4.辩论时要用证据。<br>5.不要坚持错误不改。<br>6.要分清对话与只准自己讲话的区别。<br>7.对话要有记录。<br>8.尽量理解对方。</p><p>日常生活中，我们很少看到有意义的讨论。大多数人由于种种原因并不重视“共同遵守理性讨论基本原则”，动不动就忽视、放弃、违背这些原则。有多少次，我们会听到这样的话：“本来就是这样的！”“就算道理是那样，我也无法接受！”“滚！”“放屁！”“傻屄！”“你自己看着办吧！”“行行行，就你最聪明！”“我不管了！”……</p><p>如果我们作为讨论的一方，发现对方已经不再“遵守理性讨论基本原则”，那么就马上停止讨论吧，因为我们已经失去了讨论的对象.</p><h1 id="复述"><a href="#复述" class="headerlink" title="复述"></a>复述</h1><p>在沟通的过程中，当我们听对方（这里仅限于面对面沟通，不讨论书面沟通）说完之后，应该自觉避免自以为是地认为自己肯定理解对了。我们不妨套用以下句式进行验证、反馈：<br>“你的意思是……，是吗？”<br>或<br>“你的意思是……，我理解得对吗？”</p><h1 id="反思"><a href="#反思" class="headerlink" title="反思"></a>反思</h1><ul><li>深刻了解经验的局限</li><li>时时刻刻保持警惕</li><li>使用记录，使自己能够记住更多的经验</li><li>通过观察和阅读汲取他人的经验</li><li>经常试用类比来跨越未知与已知的障碍</li><li>耐心等待以获得不能跨越时间的经验</li></ul><p><img src="https://raw.githubusercontent.com/pengyirui/blog_img/main/2021-03-02-02.png"></p><h1 id="兴趣"><a href="#兴趣" class="headerlink" title="兴趣"></a>兴趣</h1><p>往往并不是有兴趣才能做好，而是做好了才有兴趣。 人们总是搞错顺序，并对这样的错误毫不知晓。虽然并非绝对，但完成大多数事情，确实都需要熟能生巧。做得多了，自然就能擅长；擅长了，自然就做得比别人好；做得比别人好了，兴趣就浓起来了，而后就更喜欢做、更擅长……进入良性循环。可同样的，做得多，就需要大量的时间投入，所谓“没兴趣”，往往不过是结果，如果将它当作“不去做好”的理由，最终的惩罚就是大量时间白白流逝。</p><h1 id="痛苦"><a href="#痛苦" class="headerlink" title="痛苦"></a>痛苦</h1><p>上了岁数的人遥望过去的时候，那些曾经让他们痛苦万分的事情早就被他们忘干净了，或者，他们早已无所谓了，然而，那些美好的事情他们却都能记得清清楚楚——他们当然会怀旧！所以说，怀旧是一种错觉，甚至更可能只是幻觉。曾有人这样比喻：“如果说记忆本身是葡萄，那么回忆的过程就是发酵。每个人都有努力使自己的历史变得更加清白、更加美好的倾向，所以，人往往会不自觉地给自己的记忆进行各种形式的修补、甚至进一步精加工，然后才会觉得心满意足。”</p><p>大脑拥有遗忘痛苦的功能，这对整个人类顺利繁衍具有重大意义。可以想见，生育分娩是一个女人一生中可能面临的最大的肉体痛苦——只要她不是那么不幸地生活在刘胡兰或张志新所处的时代。然而，在体会如此惊人的痛苦经历后不到两年，她就会萌发生育下一个子女的愿望。人们往往对自己大脑的运转机制并无认识，所以，如果你有机会遇到这样一位女性，可以试着好奇地问她：“你不记得那有多疼了吗？”她保准会愣一下（因为她突然意识到那时确实疼得要死，但现在却无所谓了，可是也没仔细想过为什么），然后在下意识的慌乱中给你一个莫名其妙的答案：“你又没生过孩子，你不懂啦！”</p><h1 id="比较"><a href="#比较" class="headerlink" title="比较"></a>比较</h1><p>生活无法彻底回避比较，但是，无须比较就可以获得的快乐和幸福也同样很多，只不过它们常常被人们忽略。于是，无数人花费大量的时间去追求必须通过比较才能获得的快乐和幸福，而他们最终获得的，只有更多的痛苦。可是，时间却不会仅仅因为结果无法被人们承受而倒流，时间的属性决定了每个人都不可能真正拥有从头再来的机会。有些人仅仅因为这样就开始寄希望于来生来世，这是相当可悲的。当然，还有更可悲的——有些人寄希望于下一代，而不顾自己的经验完全是“错误的经验”，只是单纯而又愚蠢地认为自己的经验毕竟是“多年的经验”……</p><p>其实，比成功更重要的是成长。如果“成功”是与他人比较的话，那么“成长”则是与自己比较——今天的我和昨天的我、明天的我和今天的我之间的比较。后一种比较显然比前一种对个体来说意义更大，也能够带来更加踏实的幸福感。</p><h1 id="运气"><a href="#运气" class="headerlink" title="运气"></a>运气</h1><p>另外还有一个非常有趣的心理学现象：如果一个人相信好运气，那么他的生活并不会因此变得更好或者更差；可是，反过来，如果一个人觉得自己是个倒霉蛋，那他的生活一定会因此变得更糟。所以，尽管生活不应该盲目乐观，但一定不能失望悲观。神奇的是，乐观生活、坚持努力，往往真的会改变一个人的运气。大约2500年前，塞内卡就把这件事说得非常清楚：“所谓幸运就是当你准备好了的时候机会来了。”</p><p>世间所有骗子下手的时候，第一步就是想尽一切办法让受骗者相信“机不可失，时不再来”；而受骗者一旦相信这是一个“不可多得、不容错过”的机会，就会在这种想法带来的压力下做出非理性的选择。所以，千万不要相信“机不可失，时不再来”。当一个人没有准备好的时候，对他来讲，不存在任何机会。机会时时刻刻都会出现在我们身边，关键在于，我们有没有足够努力，做到“万事俱备，只欠东风”。而当一个人准备好了的时候，随处都是机会，而且所有的机会都是切实的、可以把握的。</p><p>我们也恰恰因此而崇尚努力。尽管法兰克·奈特曾提出一个相当正确的观点：“努力”相对于另外两个因素——出身和运气——是最无足轻重的。但是，我们仍然可以看到很多现实的例子：有相当数量的人都确实通过“努力”改变了他们自己的“运气”，进而改变了他们后代的“出身”。</p><h1 id="人脉"><a href="#人脉" class="headerlink" title="人脉"></a>人脉</h1><p>第一，承认自己能力有限；第二，不怕在别人面前露怯；第三，敢于不去证明自己是“好人”……<br>一个人的能力越是渺小，他的欲望就会显得越发强烈。这些人的特征非常明显，其中之一是：他们会在生活中经常有意无意地用亲密的方式提及大家仰望的人物，无论他们与这些“大人物”是否真的存在私交密往</p><p>专心做可以提升自己的事情，学习并拥有更多、更好的技能，成为一个值得他人交往的人。</p><p>学会独善其身，以不给他人制造麻烦为美德，用自己的独立赢得尊重。</p><h1 id="自卑"><a href="#自卑" class="headerlink" title="自卑"></a>自卑</h1><p>愿望中的自己 ≠ 真实的自己 ≠ 感觉中的自己</p><p>一个人的外表，即相貌与身材，是其最容易产生感知扭曲的方面。其原因也简单——人与人之间最容易分辨的差别就是外表。可是，通过感觉却没那么容易获得关于外表的真实信息。因为，在外表审美的过程中，每个人或多或少都会受到“补偿心理”的影响。比如，一个胖男人往往更喜欢所谓的骨感美女，一个瘦女人也常常更容易对体格粗壮的男人产生好感。这种扭曲直接产生的一个有趣现象是，在明星圈子里，那些被普遍认为相貌出众的人之间所谓“美”与“丑”的差异，并不比普通人之间的小，甚至可能更大。</p><p>最后一个方法是“适当地放纵一下自己”。</p><h1 id="鼓励"><a href="#鼓励" class="headerlink" title="鼓励"></a>鼓励</h1><p>在这种意义上讲，我的成长过程非常孤独。年纪不大的时候我就发现，我的脑子里要是蹦出了一个新鲜的主意，最好别说出来。一旦我忍不住说出来，必然惨遭来自各个方向的“冷水”的“袭击”，并且还是反复“袭击”。更重要的一点是，我从小就对自己的缺点格外敏感，导致我对自己的缺点几乎一清二楚，所以，我又很难用幻觉支撑自信。我为此痛苦了很久。终于有一天，我发现，大多数人是以“泼冷水”为乐的。他们原本跟我一样——他们也“跟大多数人不一样”。他们或许也曾像我一样，挣扎着试图与其他人一样。结果，我们当然都无一例外地失败了。但是，我比较老实（或者说情商不够也行），失败了就承认。而相当数量的人，失败了却假装成功，甚至装到连自己都相信的地步。</p><p>他们一定要给他们眼中的“异类”泼冷水。泼冷水的愿望之强烈，令人无法想象。那种强烈借助了太多的力量——怀疑、嫉妒、恐惧、愤怒，而在表现的过程中却又披上了　另外一层“皮”——关怀、爱护、友好、帮助。</p><p>看清这些后，我做了个决定：从此鼓励身边所有的人，哪怕他并不是我的朋友。支持我这么做的另一个理由也来自我的观察。我发现，敢做惊天动地的事情的人，不仅是少数，还是极少数中的极少数。所以，鼓励一个人是没有什么风险的。</p><h1 id="效率"><a href="#效率" class="headerlink" title="效率"></a>效率</h1><p>记住，任何人都不可能100%地有效率，至少不可能总是100%地有效率。</p><p>有些时候，我们会非常有效率，但是，这种情况不可能永远维持。如果一个人强迫自己一定要如此，他必会像那些始终用100%的功率运转的机器一样，由于损耗太大而提前报废。</p><h1 id="节奏"><a href="#节奏" class="headerlink" title="节奏"></a>节奏</h1><p>我们应该把自己的生活节奏调整得慢一点。</p><p>很多人的计划之所以无法坚持，是因为他们的计划实际上是“超人计划”——不可能完成的任务。我经常看到学生的计划表上写着“每天背200个单词”、“每天写5篇英语作文”之类的内容。这种强度和节奏，对刚起步的人来讲，只不过是“貌似可行”而已。在一个所有人都匆匆忙忙的世界里，想放慢节奏实在是一件非常难的事情。但是，我们应该记住的是：凡是值得做的事情，都值得慢慢去做，做很久很久。</p><p>“理论上讲，一个人积累脂肪花了多长时间，那想把那些脂肪消耗掉，大致也要花同样的时间。”所以，如果一个人25岁开始发胖，35岁来健身房的时候身上有40斤脂肪，然后要求教练帮他在3个月之内减掉脂肪、回归标准身材，简直就是痴人说梦。当然，努力一点，可以把10年缩短为5年，甚至两三年，但这个时间肯定要比那些打算一蹴而就的人想象的时间长出许多。</p><p>所以，正确的策略应该是：想办法提前预知自己需要掌握哪些技能，再确定它们是自己可以通过练习真正熟练掌握的技能，而后制定长期计划，一点一点稳步执行。这根本不是，也不可能是我一个人的独特见解，同样的道理已经有很多人讲过——“不要等机会来了，才发现自己没有准备好”，“机会总是眷顾那些准备好了的人”。切实懂得这样的道理之后，我们才会真正审视生活，然后开始醒悟。任何人一旦醒悟，再看身边忙忙碌碌却又庸庸无为的人，就会知道他们其实有多可笑了——他们一生都在追求实际上根本得不到的东西。最后，他们只有这样的出路：要么对人生失望，要么选择某个宗教而后寄希望于来世。</p><h1 id="睡眠"><a href="#睡眠" class="headerlink" title="睡眠"></a>睡眠</h1><p>不减少自己的睡眠时间。因为人和人是有区别的，就好像车和车有区别一样。有的车耗油多，有的车耗油少。打个比方，一天需要8小时睡眠的人要比一天需要4小时睡眠的人“油耗”多1倍。而自己究竟是什么样的车，好像并不是我们可以选择的，就好像“当初姑娘生了我们，我们没有说愿意”。所以，当我发现自己的“油耗”非常大的时候，我只能选择接受现实。</p><p>不过，面对这个貌似“无解”的问题，我仍然没有放弃尝试，并最终开心地找到了可堪一用的解决方案：我把自己夜间的睡眠时间缩短到4小时；然后，在中午12点左右，想办法找个合适的地点打盹30分钟；到下午18点左右，再找个地点打盹30分钟。这样，我削减了3小时的睡眠时间，同样精力充沛。</p><p>实践这个方案的一个小窍门是：在打盹之前喝一小杯咖啡，然后迅速睡过去。这样，在30分钟后醒来时，大脑就会处于清晰的状态，这种感觉真的很棒。按时打盹，按时清醒，是需要锻炼的。我差不多花了两个月的时间，才学会了这种本事。关于咖啡的建议，也并不适用于所有的人，因为我知道有些人哪怕喝一点点咖啡，也会导致接连几天睡眠质量不佳。</p><p><img src="https://raw.githubusercontent.com/pengyirui/blog_img/main/2021-03-02-03.png"></p><h1 id="自我证明"><a href="#自我证明" class="headerlink" title="自我证明"></a>自我证明</h1><p>证明自己是大多数人自然的愿望。“证明自己”本身没有任何错误，但是，很多人实际上是挣扎着想“证明自己给别人看”。殊不知，“证明自己给别人看”恰恰是最浪费生命的一种行为。如果某个人本身是出色的，那么不需要他去证明自己是出色的，别人自然会看到。如果某个人本身是平庸的，那么也不需要他去证明自己是平庸的，别人同样会看到。如果某个人出色，却仍然要刻意证明，可能招致不必要的麻烦，比如引来小人的嫉妒——天下最可怕的事情之一。如果某个人平庸，估计他不愿意向别人证明自己有多么平庸——事实上，他更可能会想尽一切办法证明自己其实并不平庸，那么，别人看到的就只是一个“小丑”而已。</p><p>如果你想不开，一定要让别人承认自己比他们强，那就听我的劝告，记住一件事：你比别人强一点根本没用，真正有用的是你比别人强很多很多。</p><p>可是，你是否知道，当你最终竟然在某一方面比别人强很多的时候会面临什么境遇？哈哈，可能会出乎你的意料——你身边的人不再在这方面跟你比了，他们会自动转向，跟你比你不如他们的地方！还别说，事实上他们这么做也有一定道理。因为根据木桶理论来看，某一方面并不能决定全部。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 书本 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux常用命令</title>
      <link href="/posts/f446.html"/>
      <url>/posts/f446.html</url>
      
        <content type="html"><![CDATA[<p>行搜索  grep xxx （一般配合其他命令使用）<br>搜索文件    find / -name ‘xxx’<br>查看进程    ps -ef<br>查看磁盘    df -lh<br>查看监听端口 netstat -lntp<br>列出当前系统打开文件的工具 lsof<br>查看文件大小    du -sh *<br>查看端口是否启用    netstat -antp | grep mysql | grep LISTEN</p><p>查看服务  yum list|grep mysql<br>查看服务配置文件  rpm -qc mysql</p><p>设置时间  date -s “2020-11-11 11:11:11”</p><p>计划任务  crond</p><hr><p><strong>管道</strong><br>命令管道：mkfifo<br>将上一条命令所执行的结果作为下一条命令的参数：xargs</p><hr><p>动态<strong>进程</strong>：top<br>静态进程：ps<br>调整优先级：renice<br>指定运行时优先级：nice<br>控制状态：kill</p><hr><p><strong>测试端口链接情况</strong><br>ssh ip地址 -p 端口号 -v<br>    中间有established字样表示链接成功<br>telnet ip地址 端口号<br>nmap ip地址 -p 端口号</p><p>查看服务：systemctl</p><hr><h3 id="查询文本内容"><a href="#查询文本内容" class="headerlink" title="查询文本内容"></a>查询文本内容</h3><h4 id="more"><a href="#more" class="headerlink" title="more"></a>more</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">more 文件名 #查看文件</span><br><span class="line"></span><br><span class="line">又或者</span><br><span class="line"></span><br><span class="line">netstat -tpnl |more  #常用方式，分页显示</span><br></pre></td></tr></table></figure><ul><li>按 Space 键：显示文本的下一屏内容。</li><li>按 Enter 键：只显示文本的下一行内容。</li><li>按斜线符|：接着输入一个模式，可以在文本中寻找下一个相匹配的模式。</li><li>按H键：显示帮助屏，该屏上有相关的帮助信息。</li><li>按B键：显示上一屏内容。</li><li>按Q键：退出more命令。</li></ul><h4 id="less"><a href="#less" class="headerlink" title="less"></a>less</h4><p>比more更强大</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">less test.php </span><br><span class="line"></span><br><span class="line">又或者</span><br><span class="line"></span><br><span class="line">netstat -tpnl |less</span><br></pre></td></tr></table></figure><p>-e：文件内容显示完毕后，自动退出；<br>-f：强制显示文件；<br>-g：不加亮显示搜索到的所有关键词，仅显示当前显示的关键字，以提高显示速度；<br>-l：搜索时忽略大小写的差异；<br>-N：每一行行首显示行号；<br>-s：将连续多个空行压缩成一行显示；<br>-S：在单行显示较长的内容，而不换行显示；<br>-x&lt;数字&gt;：将TAB字符显示为指定个数的空格字符。</p><p>命令内部操作<br>按键功能如下：<br>b 向后翻一页<br>d 向后翻半页<br>h 显示帮助界面<br>Q 退出less 命令<br>u 向前滚动半页<br>y 向前滚动一行<br>空格键 滚动一页<br>回车键 滚动一行 </p><h4 id="head"><a href="#head" class="headerlink" title="head"></a>head</h4><p>head 文件(功能描述：默认查看文件头10行内容)<br>head -n 5 文件(功能描述：查看文件头5行内容，5可以是任意行数)</p><h4 id="tail"><a href="#tail" class="headerlink" title="tail"></a>tail</h4><p>tail 文件（功能描述：默认查看文件尾10行内容）<br>tail -n 5 文件（功能描述：查看文件尾5行内容，5可以是任意行数）<br>tail -f 100 文件名（功能描述：动态刷新文件尾 100行，一般用于linux实时看日志）</p><h3 id="文件、权限"><a href="#文件、权限" class="headerlink" title="文件、权限"></a>文件、权限</h3><p>chmod是更改文件的权限<br>chown是更改文件的属主与属组<br>chgrp只是更改文件的属组<br>例子：<br>chown -R mysql:mysql /usr/local/mysql<br>chmod -R 0755 /usr/local/mysql</p><p>阻止删除<br>    [root@test tmp]# chattr +i test<br>    [root@test tmp]# lsattr<br>    ↑ 查看有冇 +i<br>    chattr +i 后 rm -rf 无法删除，还原需要-i</p><h3 id="文件"><a href="#文件" class="headerlink" title="文件"></a>文件</h3><p>黑洞文件  /dev/null</p><p>自动挂载  /etc/rc.local   #详细例子查看 配置本地软件仓库  </p><h3 id="远程拷贝：scp"><a href="#远程拷贝：scp" class="headerlink" title="远程拷贝：scp"></a>远程拷贝：scp</h3><p>将本地文件拷贝到远端（push）<br><code>scp [选项] 本地文件 远程服务器ip:/路径</code><br>例子：<code>scp -P 22 ./1.txt 192.168.46.100:/tmp/</code></p><p>将远程服务器上的文件拷贝到本地（pull）<br><code>scp [选项] 远程服务器ip:/etc/passwd /backup/</code><br>例子：<code>scp -P 22 peng@192.168.46.100:/etc/passwd /backup/</code></p><p>注！ 如果链接得慢  可修改hosts文件<br>格式是IP  主机名（hostname）  别名（自己设）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]# vim /etc/hosts</span><br><span class="line">192.168.46.100 rhel8.peng.cc peng</span><br></pre></td></tr></table></figure><h3 id="时间同步服务（ntp和chrony）"><a href="#时间同步服务（ntp和chrony）" class="headerlink" title="时间同步服务（ntp和chrony）"></a>时间同步服务（ntp和chrony）</h3><p>查看可以提供时间同步的服务器：<a href="http://www.ntp.org.cn/pool.php">http://www.ntp.org.cn/pool.php</a><br>别人整理的：<a href="https://blog.csdn.net/weixin_42588262/article/details/82501488">https://blog.csdn.net/weixin_42588262/article/details/82501488</a></p><p>修改配置文件制定ntp服务器同步<br><code>vim /etc/chrony.conf</code></p><h3 id="搭建服务常用套路"><a href="#搭建服务常用套路" class="headerlink" title="搭建服务常用套路"></a>搭建服务常用套路</h3><p>1.关闭防火墙和SE Linux（实验）<br>2.配置软件仓库<br>3.安装三部曲<br>  安装软件<br>  确认是否安装成功<br>  查看软件文件列表（配置文件、程序本身、man手册）<br>4.了解配置文件（man 5 xxx.conf）<br>5.根据需求通过修改配置文件来完成服务搭建<br>6.启动服务，开机自己动<br>7.测试验证</p><h3 id="查询相关链接"><a href="#查询相关链接" class="headerlink" title="查询相关链接"></a>查询相关链接</h3><p>Linux命令搜索引擎：<a href="https://wangchujiang.com/linux-command">https://wangchujiang.com/linux-command</a></p><p>Linux命令手册：<a href="http://linux.51yip.com/">http://linux.51yip.com</a></p><p><a href="https://www.linuxcool.com/">https://www.linuxcool.com</a></p><p><a href="https://tldr.linux.cn/">https://tldr.linux.cn</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>心里不深理 30 Day</title>
      <link href="/posts/d79b.html"/>
      <url>/posts/d79b.html</url>
      
        <content type="html"><![CDATA[<h1 id="Day1（神经病才学心理学吗？）"><a href="#Day1（神经病才学心理学吗？）" class="headerlink" title="Day1（神经病才学心理学吗？）"></a>Day1（神经病才学心理学吗？）</h1><ol><li>学习心理学的目地是为了了解自己，通过自省更深入清晰剖析自己，从而去提升自我。</li><li>心理免疫力一般是由所处大环境造成，每个人都不一样。</li><li>学心理学可以增强我们的心理免疫力，可以帮到我们保持平稳，保持正面的一个情绪，提升我们沟通的一个成效，从影响自我到影响身边的人，造就良性的循环系统。</li></ol><h1 id="Day2（世界上并不存在“心理医生”这个职业）"><a href="#Day2（世界上并不存在“心理医生”这个职业）" class="headerlink" title="Day2（世界上并不存在“心理医生”这个职业）"></a>Day2（世界上并不存在“心理医生”这个职业）</h1><ol><li>精神科医生是会开药的，心理咨询师不会开药的。</li><li>精神科医生通常是一个月或两个星期去见一次，见的时候需要你自己告诉医生现在的状况是怎样，吃了药后觉得怎样，医生判断药是否要加减，再给下个疗程，一般都能令病人的状况有所好转。</li><li>心理咨询师会和客户聊天，找出他当前状态的源头和原因，靠临床来判断他的情绪、心理处于哪一种状态，从而为客户找到新的方向和新的方法，令到他的生活有所提高。</li></ol><h1 id="Day3（心理病和精神病是一样的吗？）"><a href="#Day3（心理病和精神病是一样的吗？）" class="headerlink" title="Day3（心理病和精神病是一样的吗？）"></a>Day3（心理病和精神病是一样的吗？）</h1><ol><li>心理病只是状态不好，但不是病，可以调节。精神病通常伴随着反社会，反家庭的行为，有可能会发生伤害自己或他人的行为。</li><li>如何辨别是否出现心理问题。第一，是否开心；第二，是否有方向；第三，是否认同自己或认同别人。</li><li>心理问题，可以找朋友聊天或者找心理咨询师，或者找些心理课程学习，这样可以舒缓心理问题，重新建立心理免疫力。如果已经出现幻听，幻视，自残，性情大变，那就最好去医院，通过药物控制，再进行心理咨询的帮助。</li></ol><h1 id="Day4（潜意识你要识）"><a href="#Day4（潜意识你要识）" class="headerlink" title="Day4（潜意识你要识）"></a>Day4（潜意识你要识）</h1><ol><li>潜意识负责什么？第一，保存记忆；第二，压缩情绪和记忆；第三，帮助运行身体的一切。</li><li>潜意识三大功能。第一，对每一件事都非常个人化；第二，潜意识是对人不对事的；第三，潜意识不能处理负面资讯的。</li><li>潜意识其他作用。第一，潜意识会维持我们的本能，所以只有重复做才能维持一个新的习惯；第二，意识和潜意识都在同一个平面上才能最大能力发挥潜能或能力。</li></ol><h1 id="Day5（火爆型的人如何控制情绪？）"><a href="#Day5（火爆型的人如何控制情绪？）" class="headerlink" title="Day5（火爆型的人如何控制情绪？）"></a>Day5（火爆型的人如何控制情绪？）</h1><p>火爆，容易发脾气，容易对人或对事产生不满情绪，嫌尖、挑剔，希望事情按自己的想法来<br>火爆型的人多属于凌驾性格，控制欲好强，担心出问题，担心不是按其想法进行<br>原因：<br>怕错，怕人吾听话，于是一发现有不受控的情况，就会爆发<br>发泄情绪<br>火爆型的人处理情绪的方法：</p><ol><li>搞清楚不满事OR不满人;<br> 不满人：学识沟通，稳到岩的表达方法，让对方清晰方向<br> 不满事：有无讲清楚究竟要做到点，表达是否对方容易接受的方式</li><li>如果忍吾到火爆，请爆发，爆发完后，重新稳对方讲你要什么，或者写低爆发的原因</li><li>发脾气并不代表错误，其实系因为在意、紧张。</li></ol><h1 id="Day6（常常觉得抑郁，怎么办？）"><a href="#Day6（常常觉得抑郁，怎么办？）" class="headerlink" title="Day6（常常觉得抑郁，怎么办？）"></a>Day6（常常觉得抑郁，怎么办？）</h1><ol><li>抑郁分为先天和后天。先天是脑是有缺陷的，内分泌出现问题，且并不长命。大部分是后天抑郁，经常不开心，想的都是负面的信息。</li><li>抑郁有两种状态。是感觉沮丧，还是抑郁症。感觉沮丧只是一瞬间的状态，情绪过后又会开心起来。抑郁症有10个基本症状，这些症状持续两个星期以上且影响到生活了，就算是抑郁症了。</li><li>重估状态：<br> 初期，喜欢自己一人，不喜欢与人交流。中期，否定自己。后期，价值观崩坏，陷入不断循环的负面漩涡。这个状态肯定有一个点的转折，有迹可循的不是空穴来风。需要找到这个点，需要学习处理这个状态。</li><li>如何处理？<br> 直接去医院，吃药。心里咨询师，学习课程。<br> 列出以前喜欢的事情，逼自己做。离开目前环境，换一个空间。</li></ol><h1 id="Day7（不着睡不着，为什么会老失眠？）"><a href="#Day7（不着睡不着，为什么会老失眠？）" class="headerlink" title="Day7（不着睡不着，为什么会老失眠？）"></a>Day7（不着睡不着，为什么会老失眠？）</h1><ol><li>定义：不易入眠或者难以进入深眠状态（易醒、多梦、睡眠时间短）。</li><li>分为两部分<br> 生理：酒精、尼古丁、咖啡因、过量运动、手机蓝光、内分泌（甲状腺或者肝脏）<br> 心里：压力、放不下某些事、担心/惊</li><li>方法：适当运动，晒太阳（让身体区分白天和夜晚），药物（需要咨询专业的医生）</li></ol><h1 id="DAY8（见亲父母都觉得不耐烦，点算？）"><a href="#DAY8（见亲父母都觉得不耐烦，点算？）" class="headerlink" title="DAY8（见亲父母都觉得不耐烦，点算？）"></a>DAY8（见亲父母都觉得不耐烦，点算？）</h1><ol><li>不耐烦：你越对谁不满，其实是对他更在意而已，越恨一个人，其实对他更爱而已（个人觉得需要具体问题具体分析）</li><li>与父母关系不好的影响：<br> 第一，影响人际关系沟通，不会表达。<br> 第二，影响工作，容易对上司不满。<br> 第三，影响两性关系，出现安全感不足，控制欲过强，容易挑刺。</li><li>解决方法：在不耐烦的时候，无论对方说什么，都要用正面，接纳的态度，当对方得到认同感时，反问对方解决方法，亲和感就开始建立，可以用轻的怀疑的态度反问对方（例如：那么可以怎么做呢？这样做可能有这些问题…），对方也会反思可能自己也有些问题，最后，多谢对方给出的意见和方法。同样可以用在上司身上。</li></ol><h1 id="Day9（社交恐惧如何克服？）"><a href="#Day9（社交恐惧如何克服？）" class="headerlink" title="Day9（社交恐惧如何克服？）"></a>Day9（社交恐惧如何克服？）</h1><ol><li>症状：人多又关注你的时候，你会出现面红，口吃，严重点会心跳加速，打颤，流汗，再严重点会晕倒。</li><li>出现的原因：由于自我否定，经常会出现社交恐惧的症状，可能由于从小处在被否定的环境里，导致自己也会经常否定自己，然而产生社交恐惧。</li><li>解决方法：<br> 第一：找个对你认可的人，做完某件事的时候去找对方给你认同感，认可你，鼓励你，让自己的潜意识知道原来每做完一件事都有人会鼓励你的，不是每次都否定你的，这需要一段时间去改变的。<br> 第二：自己也要去认可他人，认可他人自己也能得到更大的能量。<br> 第三：第一第二步都做完之后，可以尝试从人少到人多，找自己的临界点和瓶颈，停留在那里继续练习。</li></ol><h1 id="Day10（如何防备那些麻烦的亲戚们？）"><a href="#Day10（如何防备那些麻烦的亲戚们？）" class="headerlink" title="Day10（如何防备那些麻烦的亲戚们？）"></a>Day10（如何防备那些麻烦的亲戚们？）</h1><ol><li>什么是麻烦的亲戚：你一定要见，但又会令你觉得不舒服的亲戚，会要求你去做事情，要听他们说话，会攻击你，会令你觉得有压力。</li><li>这种亲戚属于凌驾性格的亲戚。</li><li>方法：首先清楚自己的底线，例如问你不舒服的问题<br> 第一种，可以直接回敬；<br> 第二种，先接受再请教；<br> 第三种，比对方还积极，不断请教方法，令佢觉得你烦；<br> 第四种，做受害者。</li></ol><h1 id="Day11（父母关系与职场关系）"><a href="#Day11（父母关系与职场关系）" class="headerlink" title="Day11（父母关系与职场关系）"></a>Day11（父母关系与职场关系）</h1><p>1.父母关系和职场关系在心理学来说是一样的，父母如同上司，同事如同兄弟姐妹或堂兄妹，下属团队如同孩子。<br>2.在家与父母关系如何跟在职场上司关系也差不多，这种叫做“投射”。如果跟父母关系不好，通常与上司的关系也会不好，造成家庭和职场都不如意，所以一定要尽快解决。<br>3.对待父母时，要把他们当成“普通人”，不要有太多情绪，太多要求。只有处理好与父母的关系，才能更好地与上司沟通，把工作做好。</p><h1 id="Day12（渣渣判别术）"><a href="#Day12（渣渣判别术）" class="headerlink" title="Day12（渣渣判别术）"></a>Day12（渣渣判别术）</h1><ol><li>渣的定义：用一些套路，让你慢慢地靠近，然后再离开你，令你变得不开心。</li><li>如何判断：跟你一起之后，不仅慢慢开始对你不好，还会要求你做离谱的事情。认识圈套的步骤：<ul><li>第一步，建立一个积极向上，认真努力，前途无可限量的形象，与家人不和，完全靠自己，曾经因为钱被抛弃，刚开始不会跟你发生关系，尊重你。</li><li>第二步，开始颠覆自己的形象，以前的形象都是骗你的，我以前都遇到渣，所以才会为了保护自己而欺骗了你，我曾经也很不开心，很不幸的，你还是不要喜欢我了，我不配。用自毁的方法继续博取你的关注，你的好感。如果你同情他了，就掉进他的圈套了。</li><li>第三步，跟你建立契约，我很不幸的，希望你不要再骗我，继续博取关注，这个世界我只相信你，只有你了，当你怜悯他，承诺会对他好的时候。</li><li>第四步，撕毁契约，因为一些鸡毛蒜皮的事情大发脾气，说你承诺过会对我好而没做到，反过来会令你自己去求他原谅。</li><li>第五步，对方就会开始开条件了，当你都听他的时候，你已经完全掉进圈套里了。<br>如果五步都遇到了，那就要小心了，如果只是遇到两三步，有可能是对方不懂如何处理两性关系而已。</li></ul></li><li>哪种人容易遇到渣的人：<ul><li>第一种，在朋友堆中经常是陪衬的角色。</li><li>第二种，本身自信心低，自尊低的人，不懂得拒绝，同情心重的人，在原生家庭里面容易成为照顾他人，容易被情绪勒索的人。</li><li>特别注意：形象太完美，对你过份的好，短期内，突然间，会发生巨变，突然欠债，有亲人生病，要钱。当发现这些情况，一定要告诉身边的人，听大家的分析，因为自己可能已经陷进去，无法思考了。</li></ul></li></ol><h1 id="Day13（你会偷看另一半手机吗？）"><a href="#Day13（你会偷看另一半手机吗？）" class="headerlink" title="Day13（你会偷看另一半手机吗？）"></a>Day13（你会偷看另一半手机吗？）</h1><ol><li>偷睇手机属于没有安全感，无自信的表现，背后的安全感源于家庭关系，直接影响长大同伴侣相处。要确保对方唔会伤害自己，潜意识自我保护。</li><li>揾蛛丝马迹出来，就是为了更好的控制另外一半。睇对对方手机，其实系心里面就已经定左对方有嘢。一定要揾到对方有问题为止，去认证自己的想法。</li><li>两性关系唔用正面和积极沟通的方法，出轨和分开嘅几率达到65%，基于自己的安全感唔足够，把呢段关系推去悬崖。不如把时间去谂点样可以令到呢段关系开心嘅状态。用另外一个角度去睇，唔好比情绪左右自己，其实所有野都可以睇得好清。</li><li>如果已经有看对方手机的习惯，不如想下下次跟对方去哪里玩，做些什么，可以怎样找回跟对方拍拖时候的感觉。别被情绪左右自己，互相信任才能长远地走下去。 </li></ol><h1 id="Day14（什么是本能性格系统）"><a href="#Day14（什么是本能性格系统）" class="headerlink" title="Day14（什么是本能性格系统）"></a>Day14（什么是本能性格系统）</h1><ol><li>本能性格系统：看清楚人是怎样处理事情的，分成几个性格组别，分别是目标性格，角色性格，障碍性格，行为模式性格等等，可以令我们知道自己发生什么事情，为什么会开心，为什么会生气之类的。</li><li>本能性格系统系无分性别，政治，人种，宗教。从人嘅角度方向出发，睇清楚人系点处事。可以了解自己与他人的性格，可以更好的与人沟通。</li><li>是一个可以协助我们去了解我们先天性格和后天经历产生的其他性格的非常好的工具。</li></ol><h1 id="Day15（本能性格的主要分类）"><a href="#Day15（本能性格的主要分类）" class="headerlink" title="Day15（本能性格的主要分类）"></a>Day15（本能性格的主要分类）</h1><ol><li>目标性格：做了某些事就会感到快乐和满足的。<br> 角色性格：在人群中如何展现自己。（有些人讲话不停；有些人只说不做；有些人只做不说；有些人先天懂得策划）<br> 障碍性格：与人产生距离、自己感到恐惧或生气时，如何表现。<br> 行为模式：有些人恶但讲道理；有些人恶且不讲理，还不断进攻别人；有些人恶但讲规矩守规矩。<br> 中轴性格：社会中多人出现的性格（凌驾性格、智者性格、战士性格、自毁性格等）。</li><li>性是里面的，情绪的，想法上面的，是看不到的，是潜意识层面的，只要没有表达出来，你都看不到。<br> 格就是一个外在框架，是我们做出来的行为。</li><li>本能性格系统讲的就是怎样从一个外在行为来知道内里究竟需要什么，满足内里的需要，外在行为自然也会改变或减弱。</li></ol><h1 id="Day16（凌驾性格）"><a href="#Day16（凌驾性格）" class="headerlink" title="Day16（凌驾性格）"></a>Day16（凌驾性格）</h1><ol><li>凌驾性格：是一个非常容易见到和察觉，喜欢发脾气，喜欢赢的人，注重面子，忍不住，有气势，听到有比赛就会好开心。</li><li>凌驾性格需要的是控制，担心失控，外在表现一般比较恶，用这种行为保护自己。凌驾过量发挥，会不饶人，不听其他意见，还要逼迫其他人接受他的意见。凌驾的好处，自信心强，目标清晰，会为目标努力争取，主动，负责任。</li><li>当遇到凌驾性格的人，最好是认同他，那么他的凌驾也会降低，也会用一个平心静气的态度跟你沟通的，这样你也能慢慢地发表你的意见，他们也会听你说的。</li></ol><h1 id="Day17-智者性格"><a href="#Day17-智者性格" class="headerlink" title="Day17(智者性格)"></a>Day17(智者性格)</h1><ol><li>特点：很会说话，也很需要认同感。过量发挥，秘密当人情，就会产生别人不认同我，我就否定自己，会完全守不住秘密。优点：是一位很好的信息传达者，在沟通过程中能令人开心，接收信息之余还能反馈更多的认同感。</li><li>如果你想智者性格再说多一点，除了给认同感，还可以夸赞一下他，他很容易把秘密都说出来。如果自己是智者性格，千万不要轻易承诺，很容易只说不做，轻信于人。</li><li>遇到智者性格，你可以继续沿用他说的话问细节问题，因为智者多数都只会表面说，没有深入了解细节，很容易他自己会说不下去，你可以在他停顿的时候说你自己想说的。但不是每个人都只有一个性格，智者性格加上其他性格配合得好的话，他学习能力会很强，不会只懂得表面的东西的。</li></ol><h1 id="Day18（战士性格）"><a href="#Day18（战士性格）" class="headerlink" title="Day18（战士性格）"></a>Day18（战士性格）</h1><ol><li>特点：心比较急，行动上也很急，一想到就要做，经常搞到自己很忙碌，有时会失去目标。原则性比较强，只按自己的思路去做，不听取其他意见，也会有拖延症，只做自己喜欢的，不喜欢的会在最后一刻才赶着做，会高效，但可能结果不会太好。也算是有强迫症。</li><li>战士性格的人会让自己一直忙，时常会怀疑自己忙碌的意义，又不能停下来，所以会经常过于劳累</li><li>当即是战士性格又是凌驾性格的人，除了自己心急，很容易去逼迫其他人去做事，容易得罪人。当其他人不做的时候，自己会去做完，也会导致自己过劳，需要注意身体健康。</li><li>解决方法：最好每天定下自己要做的5件事，做好一件就打勾，5件做好了再增加，这样自己能得到更好的满足感。</li></ol><h1 id="Day19（自毁性格）"><a href="#Day19（自毁性格）" class="headerlink" title="Day19（自毁性格）"></a>Day19（自毁性格）</h1><ol><li>自毁性格的人需要关注，他们会用负面的方法去沟通，甚至会将自己变成一个受害者，自毁型的格是破坏式的，是负面的。</li><li>自毁型的人会用一种不好的态度，不好的语气来获取你正面的关注，当然这样不会获得的，所以自毁型的人最好先了解清楚自己需要的是什么，直接讲出来，当人家拒绝你时，你把需要的原因讲清楚，还是得不到的话，可以尝试自己去实现，不一定需要对方给予的。</li><li>面对自毁型的人有几种方法：第一种，完全无视；第二种，可怜他，哄他；第三种，讲自己的问题比他严重，问他有什么方法给自己。自毁型的好处愿意作出牺牲，缺点就是经常抱怨。</li></ol><h1 id="Day20（三观不合所以要分手？）"><a href="#Day20（三观不合所以要分手？）" class="headerlink" title="Day20（三观不合所以要分手？）"></a>Day20（三观不合所以要分手？）</h1><ol><li>三观：世界观，人生观，价值观。<br> 不同的社会地位，观察问题的角度不同，形成不同的世界观，人生观是世界观决定的，在实际生活过程中逐步产生的和发展起来的。价值观简单一点。</li><li>由于人是完全在各自原生家庭的独立个体，所以三观不一致是正常的。三观不合其实只是没有好好沟通而已，到最后只是不爱而已，三观不合只是一个借口。<br> 三观不合系果，沟通是一个因。要用沟通模式解决问题。</li><li>两个不同的原生家庭的人，两个一起建立起共同的潜意识，到最后共同的潜意识你是否喜欢。性格不合好难一起，但性格太合很容易分开。所以还是需要通过沟通来了解双方需要的是什么，只是由于沟通不够的因才导致三观不合的果。</li></ol><h1 id="Day21（感情中的情绪勒索）"><a href="#Day21（感情中的情绪勒索）" class="headerlink" title="Day21（感情中的情绪勒索）"></a>Day21（感情中的情绪勒索）</h1><ol><li>情绪勒索：如果你不做什么，我就怎么怎么样，这就是情绪勒索最常见的模式。</li><li>从源头了解，通常都是出于恐惧，担心，还有控制，没有安全感，才会出现这种表现。主要处理负面情绪勒索。</li><li>解决方法：先听话，再沟通，给对方安全感，协调所勒索的行为是否有商量的余地。如果对方愿意改变，那就一起努力，如果对方不愿意改，那你要好好考虑自己是否接受。这比较需要时间慢慢解决。</li></ol><h1 id="Day22（为什么TA有这么多的坏习惯）"><a href="#Day22（为什么TA有这么多的坏习惯）" class="headerlink" title="Day22（为什么TA有这么多的坏习惯）"></a>Day22（为什么TA有这么多的坏习惯）</h1><ol><li>坏习惯有包括凌驾性格，他做这事是为了想控制自己的场景；自毁性格，做出负面的影响博得关注。骂他的人也是凌驾性格，想控制他别做坏习惯；智者性格，话多，开骂；自毁性格，骂他博得关注。</li><li>当他有坏习惯的时候，你可以先不理，不给关注，当发现他有轻微改善的时候，只夸赞改善的部分，还有些坏习惯的暂时不理。如果他有负面行为你给他负面关注，这只会是个恶性循环，只有你不关注他的负面行为，只关注他的正面行为，他也会向正面行为改善。</li><li>当方法改变，对方的情绪会改变，行为也会改变。最后，最大得益者也是自己，对方也会开心，双方关系也会提升。所以，长期指责别人，自己不去改变，其实也是一种不负责任的表现来的。</li></ol><h1 id="Day23（吸引你的TA是一个坑吗？）"><a href="#Day23（吸引你的TA是一个坑吗？）" class="headerlink" title="Day23（吸引你的TA是一个坑吗？）"></a>Day23（吸引你的TA是一个坑吗？）</h1><ol><li>个人感情和原生家庭有关，父母的相处模式很容易影响到子女对于另一半的相处模式。</li><li>我们的潜意识中会模仿父母，父母关系如何，我们长大了也会像父母那样发展，对于另一半的认知，态度也是从原生家庭而来的。潜意识是个磁石，吸引到自己的人，系自己从小到大对另外一半的认知。</li><li>所以并不是你的另一半是个坑，而是试着改变自己，认清楚自己究竟需要什么样的人，了解对方的性格（可以以本能性格系统的性格来对比），能更清楚发现双方的问题，更好地去解决。</li></ol><h1 id="Day24（如何养出熊孩子）"><a href="#Day24（如何养出熊孩子）" class="headerlink" title="Day24（如何养出熊孩子）"></a>Day24（如何养出熊孩子）</h1><ol><li>熊孩子：用负面的行为引起父母的关注，令到父母不舒服，不开心而又没办法处理的。</li><li>父母分几种：第一种，无法陪伴，但肯为小朋友花钱；第二种，肯为小朋友花时间；第三种，为了孩子去学习，了解自身的问题；第四种，为孩子去做改变。</li><li>当父母把这几种方法都用了，孩子还是熊孩子，那证明你的方法用错了。</li></ol><h1 id="Day25（亲子关系常犯错误（1）"><a href="#Day25（亲子关系常犯错误（1）" class="headerlink" title="Day25（亲子关系常犯错误（1）"></a>Day25（亲子关系常犯错误（1）</h1><ol><li>第一个，“否定式”和“鼓励式”：<br> 否定式：关键词：不可以、不准、不能。好处是让孩子碰壁的几率减小，坏处是导致孩子没有尝试和经历，会丧失判断力，无法处理危机，犹豫不决和畏首畏尾。<br> 鼓励式：关键词：可以试试。帮助孩子分析行为可能出现的情况，及时给予帮助，有利于提升孩子的分析力，养成良好的思维模式。<br> 小朋友的学习不是一次的，你需要重复再重复让他养成了一个习惯，让他自己想清楚去到那里会产生什么，有事应该找谁帮忙，有机会发生危险的，自己需要注意什么的这种思维模式，对小朋友非常重要。</li><li>第二种，妈宝，由小到大都会被父母情绪勒索，做事不够大胆，需要其他人同意才敢去做，没有主见。好处是小朋友会永远以父母为中心，如果有一天，你不在他的世界里，他会彻底地崩溃的。所以需要鼓励式沟通解决这种现象。</li><li>第三种，不要以自己的过去来判断孩子的未来，因为年代不同，对小朋友完全不公平的，让他知道他与你是不同的，你有好的美德可以传承，其他的还是让他自己去闯荡吧。</li></ol><h1 id="Day26（亲子关系常犯错误（2）"><a href="#Day26（亲子关系常犯错误（2）" class="headerlink" title="Day26（亲子关系常犯错误（2）"></a>Day26（亲子关系常犯错误（2）</h1><ol><li>第四种，我是你父母，我说的都对。小朋友很容易出现自我否定的思维，长久会形成行为模式。还是尽量让小朋友试错会比较好。</li><li>第五种，父母在街外用居高临下的态度骂小朋友，会令到小朋友很害怕的。这也是自毁性格的人出现这些负面行为，其实也是为了得到关注，父母骂小朋友，小朋友得到你强烈的关注，他以后会继续出现更多的负面行为的。因此，以后遇到这种负面行为，别理他，平和地跟他说对在哪里，错在哪里就行了。</li><li>第六种，总拿孩子和别人作比较，我们的成长过程中，都在被父母比较，也许这样会让孩子明白，什么是好的，但孩子在父母这里得不到认可，他只会变得自卑没自信，或者叛逆。</li></ol><h1 id="Day27（亲子关系常犯错误（3）"><a href="#Day27（亲子关系常犯错误（3）" class="headerlink" title="Day27（亲子关系常犯错误（3）"></a>Day27（亲子关系常犯错误（3）</h1><ol><li>第七种，父母经常问小孩“点解”，小孩无论回答什么都是错的。所以不要问为什么（开放性提问），可以问你觉得这件事好不好（选择性提问），你开心不开心，如果不开心，你做是为了什么呢？如果开心，你做是想得到什么呢？是否想父母关心你，注意你，带你去哪玩，这些都可以直接说出来。</li><li>第八种，手机与小孩。很多时候父母拿着手机的时候，会叫小孩不要吵他，他在忙，导致小孩会觉得我没有手机重要，小孩也会模仿大人，当小孩拿起手机的时候，也会觉得你不重要。如果大人真的在忙的时候，可以跟小孩说明，忙完会回来陪你，请小朋友安静地等一下父母，可以吗？这样询问小朋友给他应有的尊重，让他觉得他也是很重要的。</li><li>第九种，不只一个小朋友的时候，偏心与公平，经常需要大的要照顾小的，忽略了大的情绪。而公平对待除了是物质方面的，更重要的是精神方面的，让孩子觉得，哪怕有弟弟妹妹，哥哥姐姐，我得到的关注和尊重也并没有少。</li><li>第十种，体罚。特别是父母打完又后悔，把孩子抱着说其实我是爱你的。这样给孩子的带来错误的认知，会令小朋友觉得打我就是爱我的表现，长大后会将爱与攻击放在一起。那长大后，他对待亲密关系和亲子关系也会这样，出现家暴或被家暴的行为。</li></ol><h1 id="Day28（这样说话，孩子更受乐）"><a href="#Day28（这样说话，孩子更受乐）" class="headerlink" title="Day28（这样说话，孩子更受乐）"></a>Day28（这样说话，孩子更受乐）</h1><ol><li>方法就是前几节课讲的10个问题，改变并做好正面沟通，才会变得越来越好。</li><li>把对孩子的情绪与自己的情绪分开。不仅关注孩子的情绪，也要关注自己的情绪。不要被孩子影响到自己，也不要自己的情绪影响到孩子。</li><li>每个人心中都有完美父母的形象，但实际上可能表现出来的是自己原生父母的形象，尝试改变自己，把自己变成自己心目中完美的父母吧。</li></ol><h1 id="Day29（婆媳关系如何破-向上管理）"><a href="#Day29（婆媳关系如何破-向上管理）" class="headerlink" title="Day29（婆媳关系如何破/向上管理）"></a>Day29（婆媳关系如何破/向上管理）</h1><ol><li>对婆媳关系的相处，其中夫妻俩是最关键的，婆婆对于儿媳妇多少都会有一点觉得你来抢走她儿子的感受。</li><li>孩子自己养比父母养要好，父母养比保姆养要好，因为孩子在8岁前会形成潜意识，尽量令孩子在家人身边。</li><li>婆媳关系，婆婆如果经常说你的不是，可能存在凌驾或自毁的性格，面对这种性格，媳妇可以先认同婆婆，再请教婆婆有什么方法解决，提出自己的担忧和后果，让婆婆了解到你为什么这样做的动机。最重要的是，在事情结束后，再次对婆婆提出的建议表示认可和肯定，婆婆以后不仅不会批评你，还会去帮你。</li><li>男士对于婆媳关系不能什么都不做，因为另一半嫁到自己家经常面对的是男方的家人，不同的成长环境肯定会产生一些矛盾，男方应该主动跟家里人沟通有什么不满跟你说，不要跟女方说，也要主动了解另一半在家里有什么困难，一起去调整，解决，不要偏袒，也不要忍，别让家庭矛盾继续扩大。</li></ol><h1 id="DAY30（课程总结，运用提醒）"><a href="#DAY30（课程总结，运用提醒）" class="headerlink" title="DAY30（课程总结，运用提醒）"></a>DAY30（课程总结，运用提醒）</h1><p>以上的技巧需要学会运用，不能单单只听、看！！！</p>]]></content>
      
      
      
        <tags>
            
            <tag> 自言自语 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>你拍了拍2021，掉落了2020大事记</title>
      <link href="/posts/bdd7.html"/>
      <url>/posts/bdd7.html</url>
      
        <content type="html"><![CDATA[<h1 id="你拍了拍2021，掉落了2020大事记"><a href="#你拍了拍2021，掉落了2020大事记" class="headerlink" title="你拍了拍2021，掉落了2020大事记"></a>你拍了拍2021，掉落了2020大事记</h1><ul><li><p>1.13 澳大利亚森林烈火已烧四个月</p></li><li><p>1.18 84岁高龄的钟南山临危受命</p></li><li><p>1.20 全民抗疫大幕拉开</p></li><li><p>1.23 武汉封城</p></li><li><p>1.26 科比去世</p></li></ul><hr><ul><li><p>2.5 火神山医院建成</p></li><li><p>2.6 李文亮去世</p></li><li><p>2.11 全球蝗灾</p></li><li><p>2.24 禁野生动物交易</p></li><li><p>2.28 孙杨被禁赛</p></li></ul><hr><ul><li><p>3.9 意大利全国封城</p></li><li><p>3.16 夕阳老人照片刷屏</p></li><li><p>3.17 41支国家医疗队支援返程</p></li><li><p>3.19 美股熔断</p></li><li><p>3.31 西昌大火送走19名消防员</p></li></ul><hr><ul><li><p>4.8 武汉解封</p></li><li><p>4.10 鲍毓明性侵</p></li><li><p>4.26 香港台湾零确诊</p></li><li><p>4.30 丰巢超时收费</p></li></ul><hr><ul><li><p>5.12 女子翼装飞行身亡</p></li><li><p>5.17 深圳离婚排号</p></li><li><p>5.26 弗洛伊德死亡</p></li><li><p>5.29 美国将终止与世卫组织合作</p></li><li><p>5.29 艺人自曝学历造假</p></li></ul><hr><ul><li><p>6.3 农家女被冒名顶替上大学</p></li><li><p>6.20 中国加入《武器贸易条约》</p></li><li><p>6.28 全球新冠确诊病例超1000万例</p></li><li><p>6.29 印度禁用59款中国APP</p></li></ul><hr><ul><li><p>7.3 林丹宣布退役</p></li><li><p>7.4 南方水灾</p></li><li><p>7.7 安顺公交车坠江事件</p></li><li><p>7.21 特朗普首度戴口罩公开亮相</p></li><li><p>7.29 《平安经》</p></li></ul><hr><ul><li><p>8.3 三十而已</p></li><li><p>8.6 杭州杀妻案</p></li><li><p>8.11 授予钟南山人民英雄称号</p></li><li><p>8.24 字节跳动对美禁令提出诉讼</p></li><li><p>8.28 暴风集团被终止上市</p></li></ul><hr><ul><li><p>9.2 张玉环提出国家赔偿2234余万</p></li><li><p>9.19 “谭母案”凶手被重判六年</p></li><li><p>9.22 科学家找到抑制狂犬病毒关键开关</p></li><li><p>9.23 四所高校应届生可直接落户上海</p></li><li><p>9.23 罗永浩 《真还传》</p></li></ul><hr><ul><li><p>10.2 特朗普和第一夫人新冠阳性</p></li><li><p>10.13 假靳东</p></li><li><p>10.20 长沙78栋别墅无人认领</p></li><li><p>10.22 新冠疫苗预约开放</p></li><li><p>10.30 张玉环拿到496万赔偿</p></li></ul><hr><ul><li><p>11.1 双十一提前开始</p></li><li><p>11.11 丁真走红</p></li><li><p>11.15 中国加入RCEP</p></li><li><p>11.20 华晨破产</p></li><li><p>11.24 嫦娥五号发射成功</p></li></ul><hr><ul><li><p>12.3 我国首次在月球独立展示国旗</p></li><li><p>12.7 霹雳舞、滑板正式入奥</p></li><li><p>12.11 世界首座高铁悬索桥通车</p></li><li><p>12.12 全球新冠确诊病例破7000万</p></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> 自言自语 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>从mi6到mi10u的升级使用感受</title>
      <link href="/posts/b4c0.html"/>
      <url>/posts/b4c0.html</url>
      
        <content type="html"><![CDATA[<h4 id="从mi6到mi10u的升级使用感受"><a href="#从mi6到mi10u的升级使用感受" class="headerlink" title="从mi6到mi10u的升级使用感受"></a>从mi6到mi10u的升级使用感受</h4><p>讲真，本希望在今年（2021）买台新手机，让mi6安心地退休去。但万万没想到骁龙888这个芯片会喷火（笑），放在冬季都这么烫了，如果时间到了夏季岂不是不能用了（笑</p><p>所以我果断从往年的旗舰中选台，最后我选择了mi10u<br>小米10至尊纪念版吸引我的购买地方有两个<br>第一个是120W的充电，目前还是在售中最高功率的充电了，也是目前小米最快的充电<br><img src="https://raw.githubusercontent.com/pengyirui/blog_img/main/2021-01-31-01.jpg"><br>第二个是相机，相机硬件放在2021年我觉得依旧很能打，小米目前最强的拍照了，拍照体验是我目前使用过的手机中最棒的<br><img src="https://raw.githubusercontent.com/pengyirui/blog_img/main/2021-01-31-02.jpg"><br>小米10至尊纪念版的盒子着放在现在来说是极其不环保了，里面还送了充电器。<br>手机盒长长的光线反射下『布灵布灵』像奖杯一样，我一直把它立在我桌子上 盒子中心是十年周年特别设计的，2010的上半部分和2020 的下半部分，中间以『XIAOMI 10 TH』来过度<br><img src="https://raw.githubusercontent.com/pengyirui/blog_img/main/2021-01-31-03.jpg"><br>重量：不得不说，当时买mi6的时候本以为不会有比陶瓷重的手机吧，知道把mi10u拿再手上，带上套，半斤机妥妥的。不过重量这方便应该很快能适应（当年从mi4到mi6的感觉和现在差不多）。</p><p>手感：后盖是亮面玻璃的缘故（说是说陶瓷，其实是玻璃），没有AG磨砂玻璃的质感（带上套，管他什么玻璃（笑）。现在拿起其他手机都感觉很轻呀。</p><p>外观：辨识度是有了的（羊驼应该有发功）。mi10u硕大的摄像头模组，潜望式长焦的『易拉罐拉环』设计和『120X』的字样让它的背面非常有辨识度，我个人是很喜欢mi10u的背面设计的 闪光灯和背面的光线传感器从原来的小米10/10Pro在摄像头下方的位置移到了摄像头右侧，解决了经常的在拿手机的时候手指挡住了导致背部的光线传感器误判和闪光灯被挡住了。</p><p><img src="https://raw.githubusercontent.com/pengyirui/blog_img/main/2021-01-31-05.jpg"></p><p>mi10u的背面logo从以往的下方居中的位置改为左下角横置（顺便吐槽下mi11从原来的mi logo改成 xiaomi logo 感觉好丑呀）</p><p>正面是一块6.67英寸曲面挖孔全面屏（在屏下摄像头技术还没成熟前，先用着挖孔屏妥协着先吧。怎么也比刘海屏好）</p><p><img src="https://raw.githubusercontent.com/pengyirui/blog_img/main/2021-01-31-04.jpg"></p><p>相机：不管是在相机参数上还是实际使用中都是小米有史以来中最好的了，日常我用的最多的是主摄和5倍潜望式长焦。我的相册从2021后基本都是用这个相机来拍摄的啦，观看样张跳转链接。</p><p>5G：说实话，这个升级感知并不强。。。</p><p>充电续航：120W感知超强，以前的习惯是睡觉前必须充电，现在充电30+分钟基本妥妥能用一天。不过这充电头也很大，等氮化镓120w出了必入手，哈哈哈哈。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 自言自语 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>几种卸载补丁的方法</title>
      <link href="/posts/8307.html"/>
      <url>/posts/8307.html</url>
      
        <content type="html"><![CDATA[<p>微软历代补丁下载链接<br><a href="http://www.catalog.update.microsoft.com/Home.aspx">http://www.catalog.update.microsoft.com/Home.aspx</a></p><h1 id="dism卸载补丁"><a href="#dism卸载补丁" class="headerlink" title="dism卸载补丁"></a>dism卸载补丁</h1><p>可用于windows正常能使用的情况下</p><ul><li><p>以管理员权限打开cmd输入以下指令可看到安装了哪些补丁<br>  <code>dism /Online  /get-packages /format:table</code><br>  <img src="https://raw.githubusercontent.com/pengyirui/blog_img/main/2021-01-12-01.png"></p></li><li><p>找到需要卸载的包，这里以刚刚安装的kb976932为例子<br>  <img src="https://raw.githubusercontent.com/pengyirui/blog_img/main/2021-01-12-02.png"><br>  cmd里输入以下指令（packagename冒号后的包名根据实际情况填写）<br>  <code>dism /Online /remove-package /packagename:Package_for_KB976932~31bf3856ad364e35~amd64~~6.1.1.17514</code></p></li><li><p>卸载完后按Y重启，操作完成<br>  <img src="https://raw.githubusercontent.com/pengyirui/blog_img/main/2021-01-12-03.png"></p></li></ul><h1 id="dism-工具"><a href="#dism-工具" class="headerlink" title="dism++工具"></a>dism++工具</h1><p>如果windows不能写正常启动的情况下（安全模式也可以使用dism++和控制面板卸载补丁，以下演示的是进入PE情况下卸载）</p><p>PE进入卸载补丁，选择dism++工具<br><img src="https://raw.githubusercontent.com/pengyirui/blog_img/main/2021-01-12-04.png"></p><p>点击C盘卸载补丁（系统盘）<br><img src="https://raw.githubusercontent.com/pengyirui/blog_img/main/2021-01-12-05.png"></p><p>然后点击更新管理，勾选需要卸载的补丁，点击删除。<br><img src="https://raw.githubusercontent.com/pengyirui/blog_img/main/2021-01-12-06.png"></p><p>等待补丁删除完毕<br><img src="https://raw.githubusercontent.com/pengyirui/blog_img/main/2021-01-12-07.png"></p><p>状态会改变为准备就绪，返回桌面重启即可<br><img src="https://raw.githubusercontent.com/pengyirui/blog_img/main/2021-01-12-08.png"></p>]]></content>
      
      
      
        <tags>
            
            <tag> 运维记录 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>虚拟机进入PE</title>
      <link href="/posts/f6bb.html"/>
      <url>/posts/f6bb.html</url>
      
        <content type="html"><![CDATA[<h1 id="制作PE"><a href="#制作PE" class="headerlink" title="制作PE"></a>制作PE</h1><p>这里我选择IT天空的 优启动 做PE</p><p>官方下载链接：<br><a href="https://www.itsk.com/thread-412828-1-1.html">https://www.itsk.com/thread-412828-1-1.html</a></p><p>个人备份链接：<br><a href="http://software.pengyirui.space/EasyU_3.6.2020.1015.7z">http://software.pengyirui.space/EasyU_3.6.2020.1015.7z</a></p><p>如果物理机 与 虚拟机拖动不了文件，请安装vm-tool<br><a href="https://pengyirui.lanzous.com/iTxivka5h9g">https://pengyirui.lanzous.com/iTxivka5h9g</a></p><ul><li>插入U盘并且打开软件，软件会识别U盘<br>  <img src="https://raw.githubusercontent.com/pengyirui/blog_img/main/2021-01-11-01.png" alt="其他选项默认即可，然后点击全新制作。"></li></ul><p><img src="https://raw.githubusercontent.com/pengyirui/blog_img/main/2021-01-11-02.png" alt="点击确定"></p><p><img src="https://raw.githubusercontent.com/pengyirui/blog_img/main/2021-01-11-03.png" alt="等待制作"></p><p><img src="https://raw.githubusercontent.com/pengyirui/blog_img/main/2021-01-11-04.png" alt="制作成功"></p><h1 id="虚拟机进入PE"><a href="#虚拟机进入PE" class="headerlink" title="虚拟机进入PE"></a>虚拟机进入PE</h1><p>插入刚刚好制作的U盘<br>点击设置，添加硬盘（就是刚刚制作好的U盘）<br><img src="https://raw.githubusercontent.com/pengyirui/blog_img/main/2021-01-11-05.png"><br><img src="https://raw.githubusercontent.com/pengyirui/blog_img/main/2021-01-11-06.png"><br><img src="https://raw.githubusercontent.com/pengyirui/blog_img/main/2021-01-11-07.png" alt="注意！！！这里选择IDE类型"></p><p><img src="https://raw.githubusercontent.com/pengyirui/blog_img/main/2021-01-11-08.png" alt="使用物理硬盘"></p><ul><li>设备选择第几快磁盘，具体要到磁盘管理查看（一般都是第二个），一般情况都是使用整个磁盘。<br>  <img src="https://raw.githubusercontent.com/pengyirui/blog_img/main/2021-01-11-09.png"></li></ul><p><img src="https://raw.githubusercontent.com/pengyirui/blog_img/main/2021-01-11-10.png" alt="随便选取一个位置即可"></p><p><img src="https://raw.githubusercontent.com/pengyirui/blog_img/main/2021-01-11-11.png" alt="开机这里需要注意，选取进入固件"></p><p><img src="https://raw.githubusercontent.com/pengyirui/blog_img/main/2021-01-11-12.png" alt="进入后选取刚刚IDE开机"></p><p><img src="https://raw.githubusercontent.com/pengyirui/blog_img/main/2021-01-11-13.png" alt="F10保存且重启"></p><p><img src="https://raw.githubusercontent.com/pengyirui/blog_img/main/2021-01-11-14.png" alt="选择一或者二都可以"></p><p><img src="https://raw.githubusercontent.com/pengyirui/blog_img/main/2021-01-11-15.png" alt="注意！！！这个PE需要等待加载完成再操作"></p><p>至此成功进入</p>]]></content>
      
      
      
        <tags>
            
            <tag> 运维记录 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>文章嵌入B站视频</title>
      <link href="/posts/2f12.html"/>
      <url>/posts/2f12.html</url>
      
        <content type="html"><![CDATA[<ul><li><p>获取分享<br>点击分享获取嵌入分享代码<br><img src="https://raw.githubusercontent.com/pengyirui/blog_img/main/2020-12-30-01.png" alt="得出"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;iframe src=&quot;//player.bilibili.com/player.html?aid=455240382&amp;bvid=BV1W5411t742&amp;cid=175645682&amp;page=1&quot; scrolling=&quot;no&quot; border=&quot;0&quot; frameborder=&quot;no&quot; framespacing=&quot;0&quot; allowfullscreen=&quot;true&quot;&gt; &lt;/iframe&gt;</span><br></pre></td></tr></table></figure></li><li><p>使用<br>但是显示效果不是很理想，样式不是我们希望的，需要调整一下。<br>这是大佬给出的模板，已经适配移动端和PC端，以后只需要修改<code>cid</code>和<code>adi</code>即可</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;div style=&quot;position: relative; padding: 30% 45%;&quot;&gt;</span><br><span class="line">&lt;iframe style=&quot;position: absolute; width: 100%; height: 100%; left: 0; top: 0;&quot; src=&quot;https://player.bilibili.com/player.html?cid=175645682&amp;aid=455240382&amp;page=1&amp;as_wide=1&amp;high_quality=1&amp;danmaku=0&quot; frameborder=&quot;no&quot; scrolling=&quot;no&quot;&gt;&lt;/iframe&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure><div style="position: relative; padding: 30% 45%;"><iframe style="position: absolute; width: 100%; height: 100%; left: 0; top: 0;" src="https://player.bilibili.com/player.html?cid=175645682&aid=455240382&page=1&as_wide=1&high_quality=1&danmaku=0" frameborder="no" scrolling="no"></iframe></div></li><li><p>配置<br>height= 填入高度<br>width= 填入高度</p></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> 博客 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>搭建图床</title>
      <link href="/posts/e5f3.html"/>
      <url>/posts/e5f3.html</url>
      
        <content type="html"><![CDATA[<h2 id="搭建图床"><a href="#搭建图床" class="headerlink" title="搭建图床"></a>搭建图床</h2><blockquote><p>之前一直使用的是<code>码云</code>仓库当作图床，用过一段时间之后发现 当图片占用空间过大之后便显示404，原来他它对大小作出了限制，便有了自己搭建图床的需求。<br>搭建需要大家首先做两方面的准备工作：</p></blockquote><ol><li>有一个自己的已备案域名，早期这个不是必须的，但是现在这个是必须的。当我们在七牛云上申请好存储之后，会生成一个临时的二级域名，这个二级域名有效期 1 个月，所以我们得提前准备好一个自己的域名。</li><li>准备一个七牛云账户，并且实名认证下。</li></ol><p>好了，这两样准备好之后，我们就可以开始搭建我们的图床了。</p><p>首先在七牛云网站首页点击 管理控制台 进入到管理控制台页面，然后选择第一个对象存储，点击立即添加。</p><p><img src="https://raw.githubusercontent.com/pengyirui/blog_img/main/2020-11-27-01.png"></p><p>然后给新的存储空间取一个名字，选择合适的存储区域，由于我们是要搭建自己的图床，所以最后一项访问控制选择公开，切勿选错。</p><p><img src="https://raw.githubusercontent.com/pengyirui/blog_img/main/2020-11-27-02.png"></p><p>创建完成后，接下来，我们再来配置域名。</p><p>首先点击左边菜单栏的 CDN，然后再点击域名管理。</p><p><img src="https://raw.githubusercontent.com/pengyirui/blog_img/main/2020-11-27-03.png"></p><p>默认情况下，只有一个测试域名，我们点击上方的 添加域名，添加自己的域名进来，这里如果没有特殊需求，配置一下域名地址即可，其他都使用默认即可：</p><p><img src="https://raw.githubusercontent.com/pengyirui/blog_img/main/2020-11-27-04.png"></p><p>其他的选项，大家可以根据实际情况配置，我就不挨个说了，至少配置一个域名，后面就可以用了。配置完成之后，保存。</p><p>保存之后，这里会给你一个 CNAME，其实就是一个临时的二级域名：<br><img src="https://raw.githubusercontent.com/pengyirui/blog_img/main/2020-11-27-05.png"><br>把这个 CNAME 复制下来，然后打开自己的域名服务商控制台，添加一条 CNAME 解析记录，像下面这样：<br><img src="https://raw.githubusercontent.com/pengyirui/blog_img/main/2020-11-27-06.png"></p><p>这里的配置大家注意：</p><ul><li>由于一开始添加域名的时候，我配置的是 <a href="http://img.pengyirui.com,所以这里的主机记录就是/">http://img.pengyirui.com，所以这里的主机记录就是</a> img，不要写错了</li><li>记录类型就是 CNAME，这个不能改</li><li>线路类型默认即可</li><li>记录值就是你复制的 CNAME</li></ul><p>其他都默认，配置完成之后，保存即可。</p><p>OK，这些事情全部做完之后，等待一会，十分钟左右，在 空间管理-&gt;空间概览 里边，看到 CDN 加速域名的状态为成功时，我们的所有配置就算都 OK 了。</p><p>接下来点到 空间管理-&gt;空间概览 ，点击文件上传，就可以上传文件了。文件上传成功后，点击右边的更多，就可以复制文件链接了。</p><h2 id="PicGo-上传工具"><a href="#PicGo-上传工具" class="headerlink" title="PicGo 上传工具"></a>PicGo 上传工具</h2><p>下载地址：<a href="https://github.com/Molunerfinn/PicGo/releases">https://github.com/Molunerfinn/PicGo/releases</a><br>官网主页：<a href="https://molunerfinn.com/PicGo/">https://molunerfinn.com/PicGo/</a><br>个人备份2.2.2版本（win10）：<a href="https://pengyirui.lanzous.com/iQ0tKitrs8f">https://pengyirui.lanzous.com/iQ0tKitrs8f</a></p><p>安装好之后，在图床配置里边，配置一下七牛图床：<br><img src="https://raw.githubusercontent.com/pengyirui/blog_img/main/2020-11-27-07.png"></p><p>AccessKey、SecretKey 在个人中心→密钥管理中复制即可<br>存储空间名是一开始创建的存储空间名字<br>域名是自己绑定的域名如图<br>存储区域是我们创建的时选择的，根据情况填写简称<br><img src="https://raw.githubusercontent.com/pengyirui/blog_img/main/2020-11-27-08.png"></p><p>拖拽上去就能完成上传，方便又快捷（真棒.jpg）<br><img src="https://raw.githubusercontent.com/pengyirui/blog_img/main/2020-11-27-09.png"></p>]]></content>
      
      
      
        <tags>
            
            <tag> 博客 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vim常用命令</title>
      <link href="/posts/564b.html"/>
      <url>/posts/564b.html</url>
      
        <content type="html"><![CDATA[<p>vim常用命令<br>跳转指定行数：vim 文件名 +行数</p><p>左下上右：h,j,k,l</p><p>向后移动一个单词：w<br>向前移动一个单词：b<br>行首：0（零）<br>行尾：$<br>行首非空白字符：^</p><p>文件顶部：gg<br>文件末尾：G<br>移动到数字对应行数：数字G</p><p>向上翻页：Ctrl +b<br>向下翻页：Ctrl +f<br>屏幕顶部：H<br>屏幕中间：M<br>屏幕底部：L</p><p>上一段:{<br>下一段:}</p><p>括号内切换：%</p><p>标记<br>添加标记x，x是a-z或者A-Z之间的任意一个字母：<br>mx<br>返回标记x的地方：’x</p><p>v     可视模式    从光标位置开始按照正常模式选择文本<br>V     可视行模式    选中光标经过的完整行<br>ctrt+v     可视块模式    垂直方向选中文本</p><p>撤销：u<br>恢复撤销：ctrl + r</p><p>剪切：x<br>删除：d<br>删除行：dd<br>删除至末尾：D</p><p>复制：y<br>复制行：yy<br>粘贴：p</p><p>替换<br>r    替换当前字符        命令模式<br>R    替换当前行光标后的字符  替换模式</p><p><code>&gt;&gt;</code>    向右增加缩进<br><code>&lt;&lt;</code>    向左减少缩进<br>.    重复上次命令</p><p>查找/str    /str<br>下一个寻找    n<br>上一个寻找    N<br>向下查找当前光标所在单词    *<br>向上查找当前光标所在单词    #</p><p>全局查找并替换<br>:%s/旧文本/新文本/g</p><p>可视区域查找并替换<br>:s/旧文本/新文本/g</p><p>确认替换<br>:%s/旧文本/新文本/gc<br>y 替换<br>n 不替换<br>a 替换所有<br>q 退出替换</p><p>i 在当前字符前插入文本<br>I 在行首插入文本</p><p>a在当前字符后添加文本</p><p>A在行末添加文本</p><p>O在当前行前面插入一空行常用<br>o在当前行后面插入一空行常用</p><p>分屏<br>:sp 文件名    横向增加分屏<br>:vsp 文件名    纵向增加分屏</p><p>ctrl+<br>w        切换到下一个窗口</p><p>r        互换窗口</p><p>c        关闭当前窗口，但是不能关闭最后一个窗口<br>q        退出当前窗口，如果是最后一个窗口，则关闭<br>o        关闭其他窗口</p>]]></content>
      
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>往期爬虫归档</title>
      <link href="/posts/c73c.html"/>
      <url>/posts/c73c.html</url>
      
        <content type="html"><![CDATA[<h3 id="三大妈网图"><a href="#三大妈网图" class="headerlink" title="三大妈网图"></a>三大妈网图</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">网址：</span></span><br><span class="line"><span class="string">https://www.3dmgame.com/bagua/2192.html</span></span><br><span class="line"><span class="string">https://www.3dmgame.com/bagua/2216.html</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">如果图片过期，更改以下列表便可以更替</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line">list_head_url = [<span class="string">&#x27;https://www.3dmgame.com/bagua/2216&#x27;</span>,<span class="string">&#x27;https://www.3dmgame.com/bagua/2192&#x27;</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> list_head_url:</span><br><span class="line">        <span class="comment"># head_url = &#x27;https://www.3dmgame.com/bagua/1570&#x27;</span></span><br><span class="line">        head_url = <span class="built_in">str</span>(i)</span><br><span class="line">        tail_url = <span class="string">&#x27;.html&#x27;</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">5</span>):</span><br><span class="line">                <span class="keyword">if</span> i == <span class="number">1</span>:</span><br><span class="line">                        url = head_url + tail_url</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                        url = head_url + <span class="string">&#x27;_&#x27;</span> + <span class="built_in">str</span>(i) + tail_url</span><br><span class="line"></span><br><span class="line">                head = &#123;<span class="string">&#x27;User-Agent&#x27;</span>: <span class="string">&#x27;Mozilla/5.0 (Windows NT 6.1; W…) Gecko/20100101 Firefox/68.0&#x27;</span>&#125;</span><br><span class="line"></span><br><span class="line">                re_url = requests.get(url)</span><br><span class="line">                bs_url = BeautifulSoup(re_url.text, <span class="string">&#x27;html.parser&#x27;</span>)</span><br><span class="line">                items = bs_url.find_all(<span class="string">&#x27;p&#x27;</span>, align=<span class="string">&#x27;center&#x27;</span>)</span><br><span class="line"></span><br><span class="line">                <span class="keyword">for</span> i <span class="keyword">in</span> items:</span><br><span class="line">                        p = i.find(<span class="string">&#x27;img&#x27;</span>)[<span class="string">&#x27;src&#x27;</span>]</span><br><span class="line">                        <span class="comment"># print(p)</span></span><br><span class="line">                        res = requests.get(<span class="built_in">str</span>(p)).content</span><br><span class="line">                        photo = <span class="built_in">open</span>(<span class="built_in">str</span>(p[-<span class="number">10</span>:-<span class="number">4</span>])+<span class="string">&#x27;.jpg&#x27;</span>, <span class="string">&#x27;wb&#x27;</span>)</span><br><span class="line">                        photo.write(res)</span><br><span class="line">                        photo.close()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">input</span>(<span class="string">&#x27;爬取完成，任意键退出&#x27;</span>)</span><br></pre></td></tr></table></figure><h3 id="彼岸图"><a href="#彼岸图" class="headerlink" title="彼岸图"></a>彼岸图</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">爬取网址：http://pic.netbian.com/4kfengjing/</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">第9行改地址</span></span><br><span class="line"><span class="string">第23行改页数</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line">list_head_url = [<span class="string">&#x27;http://pic.netbian.com/4kyingshi/&#x27;</span>] </span><br><span class="line"></span><br><span class="line">first_head_url = <span class="string">&#x27;http://pic.netbian.com&#x27;</span> <span class="comment"># 第二层需要用到的头部</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># headers = &#123;&#x27;Accept&#x27;: &#x27;text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3&#x27;, &#x27;Accept-Encoding&#x27;: &#x27;gzip, deflate&#x27;, &#x27;Accept-Language&#x27;: &#x27;zh-CN,zh;q=0.9&#x27;, &#x27;Cache-Control&#x27;: &#x27;max-age=0&#x27;, &#x27;Connection&#x27;: &#x27;keep-alive&#x27;, &#x27;Host&#x27;: &#x27;pic.netbian.com&#x27;, &#x27;Referer&#x27;: &#x27;http://pic.netbian.com/4kmeinv/&#x27;, &#x27;Upgrade-Insecure-Requests&#x27;: &#x27;1&#x27;, &#x27;User-Agent&#x27;: &#x27;Mozilla/5.0 (Windows NT 6.1; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/75.0.3770.90 Safari/537.36&#x27;&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># proxies = &#123;</span></span><br><span class="line"><span class="comment"># &quot;http&quot; : &quot;183.3.218.34&quot; # 代理ip</span></span><br><span class="line"><span class="comment"># &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> list_head_url:</span><br><span class="line">    head_url = <span class="built_in">str</span>(i)</span><br><span class="line">    tail_url = <span class="string">&quot;.html&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">20</span>):</span><br><span class="line">        <span class="keyword">if</span> i == <span class="number">1</span>:</span><br><span class="line">            url = head_url</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            url = head_url + <span class="string">&#x27;index_&#x27;</span> + <span class="built_in">str</span>(i) + tail_url</span><br><span class="line"></span><br><span class="line">        <span class="built_in">print</span>(url)</span><br><span class="line">        re_url = requests.get(url)</span><br><span class="line">        <span class="comment"># re_url = requests.get(url, headers=headers, proxies = proxies)</span></span><br><span class="line">        <span class="built_in">print</span>(re_url.status_code)</span><br><span class="line">        bs_url = BeautifulSoup( re_url.text, <span class="string">&#x27;html.parser&#x27;</span>)</span><br><span class="line"></span><br><span class="line">        items = bs_url.find_all(<span class="string">&#x27;ul&#x27;</span>, class_=<span class="string">&#x27;clearfix&#x27;</span>)</span><br><span class="line"></span><br><span class="line">        <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">        提取第一个链接，然后拼接</span></span><br><span class="line"><span class="string">        &#x27;&#x27;&#x27;</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> items:</span><br><span class="line">            list_a = i.find_all(<span class="string">&#x27;a&#x27;</span>)</span><br><span class="line">            <span class="keyword">for</span> first_tail_urls <span class="keyword">in</span> list_a:</span><br><span class="line">                <span class="comment"># print(first_tail_url[&#x27;href&#x27;])</span></span><br><span class="line"></span><br><span class="line">                first_tail_url = first_tail_urls[<span class="string">&#x27;href&#x27;</span>]</span><br><span class="line">                first_url = first_head_url + first_tail_url</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">                <span class="comment">#    first_url</span></span><br><span class="line">                <span class="comment">#第一条连接提取</span></span><br><span class="line">                re_second_url = requests.get(first_url)</span><br><span class="line">                <span class="comment"># re_second_url = requests.get(first_url, headers=headers, proxies = proxies)</span></span><br><span class="line">                bs_second_url = BeautifulSoup(re_second_url.text, <span class="string">&#x27;html.parser&#x27;</span>)</span><br><span class="line">                second_items = bs_second_url.find_all(<span class="string">&#x27;div&#x27;</span>, class_ = <span class="string">&#x27;photo-pic&#x27;</span>)</span><br><span class="line">                <span class="comment"># print(second_items)</span></span><br><span class="line"></span><br><span class="line">                <span class="keyword">for</span> i <span class="keyword">in</span> second_items:</span><br><span class="line">                    second_tail_url = i.find(<span class="string">&#x27;img&#x27;</span>)[<span class="string">&#x27;src&#x27;</span>]</span><br><span class="line">                    <span class="comment"># 提取第二层连接</span></span><br><span class="line">                    second_url = first_head_url + second_tail_url</span><br><span class="line">                    res = requests.get(<span class="built_in">str</span>(second_url)).content</span><br><span class="line">                    <span class="comment"># res = requests.get(str(second_url), headers=headers, proxies = proxies).content</span></span><br><span class="line">                    photo = <span class="built_in">open</span>(<span class="built_in">str</span>(second_url[-<span class="number">10</span>:-<span class="number">4</span>] + <span class="string">&#x27;.jpg&#x27;</span>), <span class="string">&#x27;wb&#x27;</span>)</span><br><span class="line">                    photo.write(res)</span><br><span class="line">                    photo.close()</span><br><span class="line">                    <span class="built_in">print</span>(<span class="string">&#x27;下载了一张&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;全部下载完成&#x27;</span>)</span><br></pre></td></tr></table></figure><h3 id="摄影作品"><a href="#摄影作品" class="headerlink" title="摄影作品"></a>摄影作品</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line"><span class="keyword">from</span> requests.packages.urllib3.exceptions <span class="keyword">import</span> InsecureRequestWarning</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">chiphell</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self,page</span>):</span><br><span class="line">        self.page = page</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get_forumaddr</span>(<span class="params">self</span>):</span><br><span class="line">        requests.packages.urllib3.disable_warnings(InsecureRequestWarning)</span><br><span class="line">        self.forumaddr = []</span><br><span class="line">        self.cookiesdict = []</span><br><span class="line">        self.proxies = &#123;<span class="string">&#x27;http&#x27;</span>: <span class="string">&#x27;127.0.0.1:8888&#x27;</span>, <span class="string">&#x27;https&#x27;</span>: <span class="string">&#x27;127.0.0.1:8888&#x27;</span>&#125;</span><br><span class="line">        self.headers = \</span><br><span class="line">            &#123;<span class="string">&quot;User-Agent&quot;</span>: <span class="string">&quot;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/76.0.3809.100 Safari/537.36&quot;</span>,</span><br><span class="line">             <span class="string">&quot;referer&quot;</span>:<span class="string">&quot;https://www.chiphell.com/forum-62-1.html&quot;</span>&#125;</span><br><span class="line">        self.address = <span class="string">&quot;https://www.chiphell.com/forum.php&quot;</span></span><br><span class="line">        self.params = &#123;<span class="string">&quot;mod&quot;</span>:<span class="string">&quot;forumdisplay&quot;</span>,</span><br><span class="line">                       <span class="string">&quot;fid&quot;</span>:<span class="string">&quot;62&quot;</span>,</span><br><span class="line">                       <span class="string">&quot;filter&quot;</span>:<span class="string">&quot;typeid&quot;</span>,</span><br><span class="line">                       <span class="string">&quot;orderby&quot;</span>:<span class="string">&quot;lastpost&quot;</span>,</span><br><span class="line">                       <span class="string">&quot;typeid&quot;</span>:<span class="string">&quot;277&quot;</span>,</span><br><span class="line">                       <span class="string">&quot;page&quot;</span>:<span class="string">&quot;1&quot;</span>&#125;</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,self.page+<span class="number">1</span>):</span><br><span class="line">            self.params[<span class="string">&#x27;page&#x27;</span>] = i</span><br><span class="line">            resdata = requests.get(self.address, headers=self.headers, params=self.params,cookies = self.cookiesdict)</span><br><span class="line">            self.cookiesdict = <span class="built_in">dict</span>(self.cookiesdict, **requests.utils.dict_from_cookiejar(resdata.cookies))</span><br><span class="line">            data = BeautifulSoup(resdata.text, <span class="string">&#x27;html.parser&#x27;</span>).find(<span class="string">&#x27;ul&#x27;</span>, class_=<span class="string">&#x27;ml&#x27;</span>).find_all(<span class="string">&#x27;li&#x27;</span>)</span><br><span class="line">            <span class="keyword">for</span> ii <span class="keyword">in</span> data:</span><br><span class="line">                self.forumaddr.append(<span class="string">&#x27;https://www.chiphell.com/&#x27;</span> + ii.find(<span class="string">&#x27;h3&#x27;</span>, class_=<span class="string">&#x27;xw0&#x27;</span>).find(<span class="string">&#x27;a&#x27;</span>)[<span class="string">&#x27;href&#x27;</span>])</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get_forum_picture</span>(<span class="params">self,address</span>):</span><br><span class="line">        <span class="built_in">print</span>(address)</span><br><span class="line">        dic=address[address.find(<span class="string">&#x27;viewthread&amp;tid=&#x27;</span>)+<span class="number">15</span>:address.find(<span class="string">&#x27;&amp;extra=page&#x27;</span>)]</span><br><span class="line">        <span class="keyword">if</span> os.path.exists(<span class="string">&#x27;output&#x27;</span>) == <span class="literal">True</span>:</span><br><span class="line">            <span class="keyword">pass</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            os.makedirs(<span class="string">&#x27;output&#x27;</span>)</span><br><span class="line">        <span class="keyword">if</span> os.path.exists(<span class="string">&#x27;.\output\\&#x27;</span>+dic)== <span class="literal">True</span>:</span><br><span class="line">            <span class="keyword">pass</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            os.makedirs(<span class="string">&#x27;.\output\\&#x27;</span>+dic)</span><br><span class="line">        self.get_picture_headers = \</span><br><span class="line">            &#123;<span class="string">&quot;User-Agent&quot;</span>: <span class="string">&quot;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/76.0.3809.100 Safari/537.36&quot;</span>,</span><br><span class="line">             <span class="string">&quot;referer&quot;</span>:<span class="string">&quot;https://www.chiphell.com/forum.php?mod=forumdisplay&amp;fid=62&amp;filter=typeid&amp;typeid=277&quot;</span>&#125;</span><br><span class="line">        self.get_picture_address = address</span><br><span class="line">        resdata = requests.get(self.get_picture_address, headers=self.get_picture_headers, cookies=self.cookiesdict)</span><br><span class="line">        data = BeautifulSoup(resdata.text, <span class="string">&#x27;html.parser&#x27;</span>).find(<span class="string">&#x27;div&#x27;</span>, class_=<span class="string">&#x27;t_fsz&#x27;</span>).find_all(<span class="string">&#x27;img&#x27;</span>,class_=<span class="string">&#x27;zoom&#x27;</span>)</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> data:</span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                <span class="keyword">if</span> i[<span class="string">&#x27;zoomfile&#x27;</span>] == <span class="literal">None</span>:</span><br><span class="line">                    <span class="keyword">pass</span></span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    <span class="built_in">print</span>(i[<span class="string">&#x27;zoomfile&#x27;</span>])</span><br><span class="line">                    filename = i[<span class="string">&#x27;zoomfile&#x27;</span>][i[<span class="string">&#x27;zoomfile&#x27;</span>].rfind(<span class="string">&#x27;/&#x27;</span>) + <span class="number">1</span>:]</span><br><span class="line">                    <span class="built_in">print</span>(filename)</span><br><span class="line">                    pic = requests.get(i[<span class="string">&#x27;zoomfile&#x27;</span>], headers=self.get_picture_headers, cookies=self.cookiesdict)</span><br><span class="line">                    <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;.\output\\&#x27;</span> + <span class="string">&#x27;.\\&#x27;</span> + dic + <span class="string">&#x27;\\&#x27;</span> + filename, <span class="string">&#x27;wb&#x27;</span>) <span class="keyword">as</span> file:</span><br><span class="line">                        file.write(pic.content)</span><br><span class="line">            <span class="keyword">except</span>:</span><br><span class="line">                <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">Start</span>(<span class="params">self</span>):</span><br><span class="line">        self.get_forumaddr()</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> self.forumaddr:</span><br><span class="line">            self.get_forum_picture(i)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">a = chiphell(<span class="number">10</span>)</span><br><span class="line">a.Start()</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SQL查询</title>
      <link href="/posts/28b2.html"/>
      <url>/posts/28b2.html</url>
      
        <content type="html"><![CDATA[<h3 id="查询前准备"><a href="#查询前准备" class="headerlink" title="查询前准备"></a>查询前准备</h3><blockquote><p>创建数据库、数据表</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">-- 创建数据库</span><br><span class="line">create database python_test_1 charset=utf8;</span><br><span class="line"></span><br><span class="line">-- 使用数据库</span><br><span class="line">use python_test_1;</span><br><span class="line"></span><br><span class="line">-- students表</span><br><span class="line">create table students(</span><br><span class="line">    id int unsigned primary key auto_increment not null,</span><br><span class="line">    name varchar(20) default &#x27;&#x27;,</span><br><span class="line">    age tinyint unsigned default 0,</span><br><span class="line">    height decimal(5,2),</span><br><span class="line">    gender enum(&#x27;男&#x27;,&#x27;女&#x27;,&#x27;中性&#x27;,&#x27;保密&#x27;) default &#x27;保密&#x27;,</span><br><span class="line">    cls_id int unsigned default 0,</span><br><span class="line">    is_delete bit default 0</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">-- classes表</span><br><span class="line">create table classes (</span><br><span class="line">    id int unsigned auto_increment primary key not null,</span><br><span class="line">    name varchar(30) not null</span><br><span class="line">);</span><br></pre></td></tr></table></figure><blockquote><p>准备数据</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">-- 向students表中插入数据</span><br><span class="line">insert into students values</span><br><span class="line">(0,&#x27;小明&#x27;,18,180.00,2,1,0),</span><br><span class="line">(0,&#x27;小月月&#x27;,18,180.00,2,2,1),</span><br><span class="line">(0,&#x27;彭于晏&#x27;,29,185.00,1,1,0),</span><br><span class="line">(0,&#x27;刘德华&#x27;,59,175.00,1,2,1),</span><br><span class="line">(0,&#x27;黄蓉&#x27;,38,160.00,2,1,0),</span><br><span class="line">(0,&#x27;凤姐&#x27;,28,150.00,4,2,1),</span><br><span class="line">(0,&#x27;王祖贤&#x27;,18,172.00,2,1,1),</span><br><span class="line">(0,&#x27;周杰伦&#x27;,36,NULL,1,1,0),</span><br><span class="line">(0,&#x27;程坤&#x27;,27,181.00,1,2,0),</span><br><span class="line">(0,&#x27;刘亦菲&#x27;,25,166.00,2,2,0),</span><br><span class="line">(0,&#x27;金星&#x27;,33,162.00,3,3,1),</span><br><span class="line">(0,&#x27;静香&#x27;,12,180.00,2,4,0),</span><br><span class="line">(0,&#x27;郭靖&#x27;,12,170.00,1,4,0),</span><br><span class="line">(0,&#x27;周杰&#x27;,34,176.00,2,5,0);</span><br><span class="line"></span><br><span class="line">-- 向classes表中插入数据</span><br><span class="line">insert into classes values (0, &quot;python_01期&quot;), (0, &quot;python_02期&quot;);</span><br></pre></td></tr></table></figure><h3 id="常规查询操作"><a href="#常规查询操作" class="headerlink" title="常规查询操作"></a>常规查询操作</h3><ul><li>查询所有字段  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">select * from 表名;</span><br><span class="line">例：</span><br><span class="line">select * from students;</span><br></pre></td></tr></table></figure></li><li>查询指定字段  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">select 列1,列2,... from 表名;</span><br><span class="line">例:</span><br><span class="line">select name from students;</span><br></pre></td></tr></table></figure></li><li>使用 as 给字段起别名  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">例如：</span><br><span class="line">select id as 序号, name as 名字, gender as 性别 from students;</span><br></pre></td></tr></table></figure></li><li>可以通过 as 给表起别名  <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 如果是单表查询 可以省略表明</span></span><br><span class="line"><span class="keyword">select</span> id, name, gender <span class="keyword">from</span> students;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 表名.字段名</span></span><br><span class="line"><span class="keyword">select</span> students.id,students.name,students.gender <span class="keyword">from</span> students;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 可以通过 as 给表起别名 </span></span><br><span class="line"><span class="keyword">select</span> s.id,s.name,s.gender <span class="keyword">from</span> students <span class="keyword">as</span> s;</span><br></pre></td></tr></table></figure></li></ul><h3 id="消除重复行"><a href="#消除重复行" class="headerlink" title="消除重复行"></a>消除重复行</h3><ul><li>在<code>select</code>后面列前使用distinct可以消除重复的行  <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="keyword">distinct</span> 列<span class="number">1</span>,... <span class="keyword">from</span> 表名;</span><br><span class="line">例：</span><br><span class="line"><span class="keyword">select</span> <span class="keyword">distinct</span> gender <span class="keyword">from</span> students;</span><br></pre></td></tr></table></figure></li></ul><h3 id="条件（where）"><a href="#条件（where）" class="headerlink" title="条件（where）"></a>条件（where）</h3><p>使用where子句对表中的数据筛选，结果为true的行会出现在结果集中</p><ul><li>语法如下：<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">select * from 表名 where 条件;</span><br><span class="line">例：</span><br><span class="line">select * from students where id=1;</span><br></pre></td></tr></table></figure></li><li>where后面支持多种运算符，进行条件的处理<ul><li>比较运算符</li><li>逻辑运算符</li><li>模糊查询</li><li>范围查询</li><li>空判断</li></ul></li></ul><h4 id="比较运算符"><a href="#比较运算符" class="headerlink" title="比较运算符"></a>比较运算符</h4><ul><li>等于: <code>=</code></li><li>大于: <code>&gt;</code></li><li>大于等于: <code>&gt;=</code></li><li>小于: <code>&lt;</code></li><li>小于等于: <code>&lt;=</code></li><li>不等于: <code>!=</code> 或 <code>&lt;&gt;</code></li></ul><p>例1：查询编号大于3的学生</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select * from students where id &gt; 3;</span><br></pre></td></tr></table></figure><p>例2：查询编号不大于4的学生</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select * from students where id &lt;= 4;</span><br></pre></td></tr></table></figure><p>例3：查询姓名不是“黄蓉”的学生</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select * from students where name != &#x27;黄蓉&#x27;;</span><br></pre></td></tr></table></figure><p>例4：查询没被删除的学生</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select * from students where is_delete=0;</span><br></pre></td></tr></table></figure><h4 id="逻辑运算符"><a href="#逻辑运算符" class="headerlink" title="逻辑运算符"></a>逻辑运算符</h4><ul><li>and</li><li>or</li><li>not</li></ul><p>例5：查询编号大于3的女同学</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select * from students where id &gt; 3 and gender=0;</span><br></pre></td></tr></table></figure><p>例6：查询编号小于4或没被删除的学生</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select * from students where id &lt; 4 or is_delete=0;</span><br></pre></td></tr></table></figure><h4 id="模糊查询"><a href="#模糊查询" class="headerlink" title="模糊查询"></a>模糊查询</h4><ul><li>like</li><li><code>%</code>表示任意多个任意字符</li><li><code>_</code>表示一个任意字符</li></ul><p>例7：查询姓黄的学生</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select * from students where name like &#x27;黄%&#x27;;</span><br></pre></td></tr></table></figure><p>例8：查询姓黄并且“名”是一个字的学生</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select * from students where name like &#x27;黄_&#x27;;</span><br></pre></td></tr></table></figure><p>例9：查询姓黄或叫靖的学生</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select * from students where name like &#x27;黄%&#x27; or name like &#x27;%靖&#x27;;</span><br></pre></td></tr></table></figure><h4 id="范围查询"><a href="#范围查询" class="headerlink" title="范围查询"></a>范围查询</h4><ul><li><p><code>in</code>表示在一个非连续的范围内<br>  例10：查询编号是1或3或8的学生</p>  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select * from students where id in(1,3,8);</span><br></pre></td></tr></table></figure></li><li><p><code>between ... and ...</code>表示在一个连续的范围内<br>  例11：查询编号为3至8的学生</p>  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select * from students where id between 3 and 8;</span><br></pre></td></tr></table></figure><p>  例12：查询编号是3至8的男生</p>  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select * from students where (id between 3 and 8) and gender=1;</span><br></pre></td></tr></table></figure></li></ul><h4 id="空判断"><a href="#空判断" class="headerlink" title="空判断"></a>空判断</h4><ul><li>注意：null与’’是不同的</li><li>判空<code>is null</code><br>  例13：查询没有填写身高的学生  <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> students <span class="keyword">where</span> height <span class="keyword">is</span> <span class="keyword">null</span>;</span><br></pre></td></tr></table></figure></li><li>判非空<code>is not null</code><br>  例14：查询填写了身高的学生  <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> students <span class="keyword">where</span> height <span class="keyword">is</span> <span class="keyword">not</span> <span class="keyword">null</span>;</span><br></pre></td></tr></table></figure>  例15：查询填写了身高的男生  <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> students <span class="keyword">where</span> height <span class="keyword">is</span> <span class="keyword">not</span> <span class="keyword">null</span> <span class="keyword">and</span> gender<span class="operator">=</span><span class="number">1</span>;</span><br></pre></td></tr></table></figure></li></ul><h4 id="优先级说明"><a href="#优先级说明" class="headerlink" title="优先级说明"></a>优先级说明</h4><ul><li>优先级由高到低的顺序为：小括号，not，比较运算符，逻辑运算符</li><li>and比or先运算，如果同时出现并希望先算or，需要结合()使用</li></ul><h3 id="排序（order-by）"><a href="#排序（order-by）" class="headerlink" title="排序（order by）"></a>排序（order by）</h3><p>为了方便查看数据，可以对数据进行排序</p><p>语法：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> 表名 <span class="keyword">order</span> <span class="keyword">by</span> 列<span class="number">1</span> <span class="keyword">asc</span><span class="operator">|</span><span class="keyword">desc</span> [,列<span class="number">2</span> <span class="keyword">asc</span><span class="operator">|</span><span class="keyword">desc</span>,...]</span><br></pre></td></tr></table></figure><p>说明：</p><ul><li>将行数据按照列1进行排序，如果某些行列1的值相同时，则按照列2排序，以此类推</li><li>默认按照列值从小到大排列（asc）</li><li><code>asc</code>从小到大排列，即升序</li><li><code>desc</code>从大到小排序，即降序</li></ul><p>例1：查询未删除男生信息，按学号降序</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> students <span class="keyword">where</span> gender<span class="operator">=</span><span class="number">1</span> <span class="keyword">and</span> is_delete<span class="operator">=</span><span class="number">0</span> <span class="keyword">order</span> <span class="keyword">by</span> id <span class="keyword">desc</span>;</span><br></pre></td></tr></table></figure><p>例2：查询未删除学生信息，按名称升序</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> students <span class="keyword">where</span> is_delete<span class="operator">=</span><span class="number">0</span> <span class="keyword">order</span> <span class="keyword">by</span> name;</span><br></pre></td></tr></table></figure><p>例3：显示所有的学生信息，先按照年龄从大–&gt;小排序，当年龄相同时 按照身高从高–&gt;矮排序</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> students  <span class="keyword">order</span> <span class="keyword">by</span> age <span class="keyword">desc</span>,height <span class="keyword">desc</span>;</span><br></pre></td></tr></table></figure><h3 id="常用的聚合函数"><a href="#常用的聚合函数" class="headerlink" title="常用的聚合函数"></a>常用的聚合函数</h3><p>为了快速得到统计数据，经常会用到如下5个聚合函数。<br><code>特点</code>：多个数据输入，返回的是单个数据。</p><h4 id="总数"><a href="#总数" class="headerlink" title="总数"></a>总数</h4><ul><li><code>count</code>(*)表示计算总行数，括号中写星与列名，结果是相同的<br>  例1：查询学生总数  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select count(*) from students;</span><br></pre></td></tr></table></figure></li></ul><h4 id="最大值"><a href="#最大值" class="headerlink" title="最大值"></a>最大值</h4><ul><li><code>max</code>(列)表示求此列的最大值<br>  例2：查询女生的编号最大值  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select max(id) from students where gender=2;</span><br></pre></td></tr></table></figure></li></ul><h4 id="最小值"><a href="#最小值" class="headerlink" title="最小值"></a>最小值</h4><ul><li><code>min</code>(列)表示求此列的最小值<br>  例3：查询未删除的学生最小编号  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select min(id) from students where is_delete=0;</span><br></pre></td></tr></table></figure></li></ul><h4 id="求和"><a href="#求和" class="headerlink" title="求和"></a>求和</h4><ul><li><code>sum</code>(列)表示求此列的和<br>  例4：查询男生的总年龄  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">select sum(age) from students where gender=1;</span><br><span class="line"></span><br><span class="line">-- 平均年龄</span><br><span class="line">select sum(age)/count(*) from students where gender=1;</span><br></pre></td></tr></table></figure></li></ul><h4 id="平均值"><a href="#平均值" class="headerlink" title="平均值"></a>平均值</h4><ul><li><code>avg</code>(列)表示求此列的平均值<br>  例5：查询未删除女生的编号平均值  <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="built_in">avg</span>(id) <span class="keyword">from</span> students <span class="keyword">where</span> is_delete<span class="operator">=</span><span class="number">0</span> <span class="keyword">and</span> gender<span class="operator">=</span><span class="number">2</span>;</span><br></pre></td></tr></table></figure></li></ul><h4 id="集合查询"><a href="#集合查询" class="headerlink" title="集合查询"></a>集合查询</h4><p><code>union all</code>用于把两个或者多个select查询的结果集合并成一个（前提是列相同）</p><blockquote><p>当使用union  时，mysql 会把结果集中重复的记录删掉，而使用union  all ，mysql 会把所有的记录返回，且效率高于union</p></blockquote><p>例子：一条语句，返回老师与学生的姓名与id信息</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> uname,uid <span class="keyword">from</span> student</span><br><span class="line"><span class="keyword">union</span> <span class="keyword">all</span></span><br><span class="line"><span class="keyword">select</span> uname,uid <span class="keyword">from</span> teacher</span><br></pre></td></tr></table></figure><h3 id="分页-（limit）"><a href="#分页-（limit）" class="headerlink" title="分页 （limit）"></a>分页 （limit）</h3><p>分页的出现是为了当数据量过大时，在一页中查看数据是一件非常麻烦的事情</p><ul><li><p>语法</p>  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">select * from 表名 limit start,count;</span><br><span class="line"></span><br><span class="line">从start开始，获取count条数据</span><br></pre></td></tr></table></figure></li><li><p>例1：查询前3行男生信息</p>  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select * from students where gender=1 limit 0,3;</span><br></pre></td></tr></table></figure></li><li><p>算法<br>  pageIndex：当前页<br>  size：获取的数据量</p>  <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">limit (pageIndex <span class="operator">-</span> <span class="number">1</span>) <span class="operator">*</span> size , size;</span><br><span class="line"></span><br><span class="line">第<span class="number">1</span>页:<span class="number">0</span> <span class="number">3</span></span><br><span class="line">第<span class="number">2</span>页:<span class="number">3</span> <span class="number">3</span></span><br><span class="line">第<span class="number">3</span>页:<span class="number">6</span> <span class="number">3</span></span><br><span class="line">第<span class="number">4</span>页:<span class="number">9</span> <span class="number">3</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="分组-（group-by）"><a href="#分组-（group-by）" class="headerlink" title="分组 （group by）"></a>分组 （group by）</h3><ol><li>group by的含义:将查询结果按照1个或多个字段进行分组，字段值相同的为一组</li><li>group by可用于单个字段分组，也可用于多个字段分组</li></ol><p>例子：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> students;</span><br><span class="line"><span class="operator">+</span><span class="comment">----+-----------+------+--------+--------+--------+-----------+</span></span><br><span class="line"><span class="operator">|</span> id <span class="operator">|</span> name      <span class="operator">|</span> age  <span class="operator">|</span> height <span class="operator">|</span> gender <span class="operator">|</span> cls_id <span class="operator">|</span> is_delete <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+-----------+------+--------+--------+--------+-----------+</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">1</span> <span class="operator">|</span> 小明      <span class="operator">|</span>   <span class="number">18</span> <span class="operator">|</span> <span class="number">180.00</span> <span class="operator">|</span> 女     <span class="operator">|</span>      <span class="number">1</span> <span class="operator">|</span>           <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">2</span> <span class="operator">|</span> 小月月    <span class="operator">|</span>   <span class="number">18</span> <span class="operator">|</span> <span class="number">180.00</span> <span class="operator">|</span> 女     <span class="operator">|</span>      <span class="number">2</span> <span class="operator">|</span>          <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">3</span> <span class="operator">|</span> 彭于晏    <span class="operator">|</span>   <span class="number">29</span> <span class="operator">|</span> <span class="number">185.00</span> <span class="operator">|</span> 男     <span class="operator">|</span>      <span class="number">1</span> <span class="operator">|</span>           <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">4</span> <span class="operator">|</span> 刘德华    <span class="operator">|</span>   <span class="number">59</span> <span class="operator">|</span> <span class="number">175.00</span> <span class="operator">|</span> 男     <span class="operator">|</span>      <span class="number">2</span> <span class="operator">|</span>          <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">5</span> <span class="operator">|</span> 黄蓉      <span class="operator">|</span>   <span class="number">38</span> <span class="operator">|</span> <span class="number">160.00</span> <span class="operator">|</span> 女     <span class="operator">|</span>      <span class="number">1</span> <span class="operator">|</span>           <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">6</span> <span class="operator">|</span> 凤姐      <span class="operator">|</span>   <span class="number">28</span> <span class="operator">|</span> <span class="number">150.00</span> <span class="operator">|</span> 保密   <span class="operator">|</span>      <span class="number">2</span> <span class="operator">|</span>          <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">7</span> <span class="operator">|</span> 王祖贤    <span class="operator">|</span>   <span class="number">18</span> <span class="operator">|</span> <span class="number">172.00</span> <span class="operator">|</span> 女     <span class="operator">|</span>      <span class="number">1</span> <span class="operator">|</span>          <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">8</span> <span class="operator">|</span> 周杰伦    <span class="operator">|</span>   <span class="number">36</span> <span class="operator">|</span>   <span class="keyword">NULL</span> <span class="operator">|</span> 男     <span class="operator">|</span>      <span class="number">1</span> <span class="operator">|</span>           <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">9</span> <span class="operator">|</span> 程坤      <span class="operator">|</span>   <span class="number">27</span> <span class="operator">|</span> <span class="number">181.00</span> <span class="operator">|</span> 男     <span class="operator">|</span>      <span class="number">2</span> <span class="operator">|</span>           <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">10</span> <span class="operator">|</span> 刘亦菲    <span class="operator">|</span>   <span class="number">25</span> <span class="operator">|</span> <span class="number">166.00</span> <span class="operator">|</span> 女     <span class="operator">|</span>      <span class="number">2</span> <span class="operator">|</span>           <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">11</span> <span class="operator">|</span> 金星      <span class="operator">|</span>   <span class="number">33</span> <span class="operator">|</span> <span class="number">162.00</span> <span class="operator">|</span> 中性   <span class="operator">|</span>      <span class="number">3</span> <span class="operator">|</span>          <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">12</span> <span class="operator">|</span> 静香      <span class="operator">|</span>   <span class="number">12</span> <span class="operator">|</span> <span class="number">180.00</span> <span class="operator">|</span> 女     <span class="operator">|</span>      <span class="number">4</span> <span class="operator">|</span>           <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">13</span> <span class="operator">|</span> 周杰      <span class="operator">|</span>   <span class="number">34</span> <span class="operator">|</span> <span class="number">176.00</span> <span class="operator">|</span> 女     <span class="operator">|</span>      <span class="number">5</span> <span class="operator">|</span>           <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">14</span> <span class="operator">|</span> 郭靖      <span class="operator">|</span>   <span class="number">12</span> <span class="operator">|</span> <span class="number">170.00</span> <span class="operator">|</span> 男     <span class="operator">|</span>      <span class="number">4</span> <span class="operator">|</span>           <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+-----------+------+--------+--------+--------+-----------+</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> gender <span class="keyword">from</span> students <span class="keyword">group</span> <span class="keyword">by</span> gender;</span><br><span class="line"><span class="operator">+</span><span class="comment">--------+</span></span><br><span class="line"><span class="operator">|</span> gender <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">--------+</span></span><br><span class="line"><span class="operator">|</span> 男     <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> 女     <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> 中性   <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> 保密   <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">--------+</span></span><br></pre></td></tr></table></figure><blockquote><p>根据<code>gender</code>字段来分组，gender字段的全部值有4个’男’,’女’,’中性’,’保密’，所以分为了4组 当group by单独使用时，只显示出每组的第一条记录, 所以group by单独使用时的实际意义不大</p></blockquote><h4 id="group-by-group-concat"><a href="#group-by-group-concat" class="headerlink" title="group by + group_concat()"></a>group by + group_concat()</h4><ol><li><code>group_concat</code>(字段名)可以作为一个输出字段来使用，</li><li>表示分组之后，根据分组结果，使用group_concat()来放置每一组的某字段的值的集合</li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> gender <span class="keyword">from</span> students <span class="keyword">group</span> <span class="keyword">by</span> gender;</span><br><span class="line"><span class="operator">+</span><span class="comment">--------+</span></span><br><span class="line"><span class="operator">|</span> gender <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">--------+</span></span><br><span class="line"><span class="operator">|</span> 男     <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> 女     <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> 中性   <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> 保密   <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">--------+</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> gender,group_concat(name) <span class="keyword">from</span> students <span class="keyword">group</span> <span class="keyword">by</span> gender;</span><br><span class="line"><span class="operator">+</span><span class="comment">--------+-----------------------------------------------------------+</span></span><br><span class="line"><span class="operator">|</span> gender <span class="operator">|</span> group_concat(name)                                        <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">--------+-----------------------------------------------------------+</span></span><br><span class="line"><span class="operator">|</span> 男     <span class="operator">|</span> 彭于晏,刘德华,周杰伦,程坤,郭靖                                 <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> 女     <span class="operator">|</span> 小明,小月月,黄蓉,王祖贤,刘亦菲,静香,周杰                        <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> 中性   <span class="operator">|</span> 金星                                                       <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> 保密   <span class="operator">|</span> 凤姐                                                       <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">--------+-----------------------------------------------------------+</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> gender,group_concat(id) <span class="keyword">from</span> students <span class="keyword">group</span> <span class="keyword">by</span> gender;</span><br><span class="line"><span class="operator">+</span><span class="comment">--------+------------------+</span></span><br><span class="line"><span class="operator">|</span> gender <span class="operator">|</span> group_concat(id) <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">--------+------------------+</span></span><br><span class="line"><span class="operator">|</span> 男     <span class="operator">|</span> <span class="number">3</span>,<span class="number">4</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">14</span>       <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> 女     <span class="operator">|</span> <span class="number">1</span>,<span class="number">2</span>,<span class="number">5</span>,<span class="number">7</span>,<span class="number">10</span>,<span class="number">12</span>,<span class="number">13</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> 中性   <span class="operator">|</span> <span class="number">11</span>               <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> 保密   <span class="operator">|</span> <span class="number">6</span>                <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">--------+------------------+</span></span><br></pre></td></tr></table></figure><h4 id="group-by-集合函数"><a href="#group-by-集合函数" class="headerlink" title="group by + 集合函数"></a>group by + 集合函数</h4><ol><li>通过<code>group_concat()</code>的启发，我们既然可以统计出每个分组的某字段的值的集合，那么我们也可以通过集合函数来对这个<code>值的集合</code>做一些操作<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> gender,group_concat(age) <span class="keyword">from</span> students <span class="keyword">group</span> <span class="keyword">by</span> gender;</span><br><span class="line"><span class="operator">+</span><span class="comment">--------+----------------------+</span></span><br><span class="line"><span class="operator">|</span> gender <span class="operator">|</span> group_concat(age)    <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">--------+----------------------+</span></span><br><span class="line"><span class="operator">|</span> 男     <span class="operator">|</span> <span class="number">29</span>,<span class="number">59</span>,<span class="number">36</span>,<span class="number">27</span>,<span class="number">12</span>       <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> 女     <span class="operator">|</span> <span class="number">18</span>,<span class="number">18</span>,<span class="number">38</span>,<span class="number">18</span>,<span class="number">25</span>,<span class="number">12</span>,<span class="number">34</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> 中性   <span class="operator">|</span> <span class="number">33</span>                   <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> 保密   <span class="operator">|</span> <span class="number">28</span>                   <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">--------+----------------------+</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">分别统计性别为男<span class="operator">/</span>女的人年龄平均值</span><br><span class="line"><span class="keyword">select</span> gender,<span class="built_in">avg</span>(age) <span class="keyword">from</span> students <span class="keyword">group</span> <span class="keyword">by</span> gender;</span><br><span class="line"><span class="operator">+</span><span class="comment">--------+----------+</span></span><br><span class="line"><span class="operator">|</span> gender <span class="operator">|</span> <span class="built_in">avg</span>(age) <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">--------+----------+</span></span><br><span class="line"><span class="operator">|</span> 男     <span class="operator">|</span>  <span class="number">32.6000</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> 女     <span class="operator">|</span>  <span class="number">23.2857</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> 中性   <span class="operator">|</span>  <span class="number">33.0000</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> 保密   <span class="operator">|</span>  <span class="number">28.0000</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">--------+----------+</span></span><br><span class="line"></span><br><span class="line">分别统计性别为男<span class="operator">/</span>女的人的个数</span><br><span class="line"><span class="keyword">select</span> gender,<span class="built_in">count</span>(<span class="operator">*</span>) <span class="keyword">from</span> students <span class="keyword">group</span> <span class="keyword">by</span> gender;</span><br><span class="line"><span class="operator">+</span><span class="comment">--------+----------+</span></span><br><span class="line"><span class="operator">|</span> gender <span class="operator">|</span> <span class="built_in">count</span>(<span class="operator">*</span>) <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">--------+----------+</span></span><br><span class="line"><span class="operator">|</span> 男     <span class="operator">|</span>        <span class="number">5</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> 女     <span class="operator">|</span>        <span class="number">7</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> 中性   <span class="operator">|</span>        <span class="number">1</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> 保密   <span class="operator">|</span>        <span class="number">1</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">--------+----------+</span></span><br></pre></td></tr></table></figure></li></ol><h4 id="group-by-having"><a href="#group-by-having" class="headerlink" title="group by + having"></a>group by + having</h4><ol><li><code>having</code> 条件表达式：用来分组查询后指定一些条件来输出查询结果</li><li>having作用和where一样，但having只能用于group by<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> gender,<span class="built_in">count</span>(<span class="operator">*</span>) <span class="keyword">from</span> students <span class="keyword">group</span> <span class="keyword">by</span> gender <span class="keyword">having</span> <span class="built_in">count</span>(<span class="operator">*</span>)<span class="operator">&gt;</span><span class="number">2</span>;</span><br><span class="line"><span class="operator">+</span><span class="comment">--------+----------+</span></span><br><span class="line"><span class="operator">|</span> gender <span class="operator">|</span> <span class="built_in">count</span>(<span class="operator">*</span>) <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">--------+----------+</span></span><br><span class="line"><span class="operator">|</span> 男     <span class="operator">|</span>        <span class="number">5</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> 女     <span class="operator">|</span>        <span class="number">7</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">--------+----------+</span></span><br></pre></td></tr></table></figure></li></ol><h4 id="group-by-with-rollup"><a href="#group-by-with-rollup" class="headerlink" title="group by + with rollup"></a>group by + with rollup</h4><ol><li>with rollup的作用是：在最后新增一行，来记录当前列里所有记录的总和<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">select gender,count(*) from students group by gender with rollup;</span><br><span class="line">+--------+----------+</span><br><span class="line">| gender | count(*) |</span><br><span class="line">+--------+----------+</span><br><span class="line">| 男     |        5 |</span><br><span class="line">| 女     |        7 |</span><br><span class="line">| 中性   |        1 |</span><br><span class="line">| 保密   |        1 |</span><br><span class="line">| NULL   |       14 |</span><br><span class="line">+--------+----------+</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">select gender,group_concat(age) from students group by gender with rollup;</span><br><span class="line">+--------+-------------------------------------------+</span><br><span class="line">| gender | group_concat(age)                         |</span><br><span class="line">+--------+-------------------------------------------+</span><br><span class="line">| 男     | 29,59,36,27,12                            |</span><br><span class="line">| 女     | 18,18,38,18,25,12,34                      |</span><br><span class="line">| 中性   | 33                                        |</span><br><span class="line">| 保密   | 28                                        |</span><br><span class="line">| NULL   | 29,59,36,27,12,18,18,38,18,25,12,34,33,28 |</span><br><span class="line">+--------+-------------------------------------------+</span><br></pre></td></tr></table></figure></li></ol><h3 id="连接查询-（inner-left-right-join-…-on）"><a href="#连接查询-（inner-left-right-join-…-on）" class="headerlink" title="连接查询 （inner \ left \ right join … on）"></a>连接查询 （inner \ left \ right join … on）</h3><p>当查询结果的列来源于多张表时，需要将多张表连接成一个大的数据集，再选择合适的列返回<code>类似集合</code></p><ul><li>例1：使用内连接查询班级表与学生表<br>  <code>将两张表都作为主表，然后将两张表相等列的数据进行合并。</code><br>  <code>只返回两个表中联结字段相等的行</code>  <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> </span><br><span class="line">    students <span class="keyword">inner</span> <span class="keyword">join</span> classes </span><br><span class="line"><span class="keyword">on</span></span><br><span class="line">    students.cls_id <span class="operator">=</span> classes.id;</span><br></pre></td></tr></table></figure></li><li>例2：使用左连接查询班级表与学生表<br>  此处使用了as为表起别名，目的是编写简单<br>  <code>以左边的表为主表，右边的表为从表，查询出的结果集始终会将左边的表的所有数据都查出来</code><br>  <code>返回包括左表中的所有记录和右表中联结字段相等的记录</code>  <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> </span><br><span class="line">    students <span class="keyword">as</span> s <span class="keyword">left</span> <span class="keyword">join</span> classes <span class="keyword">as</span> c </span><br><span class="line"><span class="keyword">on</span> </span><br><span class="line">    s.cls_id <span class="operator">=</span> c.id;</span><br></pre></td></tr></table></figure></li><li>例3：使用右连接查询班级表与学生表<br>  <code>以右边的表为主表，左边的表为从表，查询出的结果集始终会将右边的表的所有数据都查出来</code><br>  <code>返回包括右表中的所有记录和左表中联结字段相等的记录</code>  <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span></span><br><span class="line">    students <span class="keyword">as</span> s <span class="keyword">right</span> <span class="keyword">join</span> classes <span class="keyword">as</span> c </span><br><span class="line"><span class="keyword">on</span> </span><br><span class="line">    s.cls_id <span class="operator">=</span> c.id;</span><br></pre></td></tr></table></figure></li><li>例4：查询学生姓名及班级名称  <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> s.name,c.name <span class="keyword">from</span> </span><br><span class="line">    students <span class="keyword">as</span> s <span class="keyword">inner</span> <span class="keyword">join</span> classes <span class="keyword">as</span> c </span><br><span class="line"><span class="keyword">on</span></span><br><span class="line">    s.cls_id <span class="operator">=</span> c.id;</span><br></pre></td></tr></table></figure></li></ul><h3 id="子查询"><a href="#子查询" class="headerlink" title="子查询"></a>子查询</h3><blockquote><p>在一个 select 语句中,嵌入了另外一个 select 语句, 那么被嵌入的 select 语句称之为子查询语句</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 语法：</span></span><br><span class="line"><span class="keyword">select</span> (子查询)</span><br><span class="line"><span class="keyword">from</span> (子查询)</span><br><span class="line"><span class="keyword">where</span> (子查询)</span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span></span><br><span class="line"><span class="keyword">having</span> (子查询)</span><br></pre></td></tr></table></figure><ul><li><p>主查询</p><ul><li>主要查询的对象,第一条 <code>select</code> 语句</li></ul></li><li><p>主查询和子查询的关系</p><ul><li>子查询是<em>嵌入</em>到主查询中</li><li>子查询是辅助主查询的,要么充当条件,要么充当数据源</li><li>子查询是可以独立存在的语句,是一条完整的 select 语句</li></ul></li><li><p>子查询分类</p><ul><li>标量子查询: 子查询返回的结果是一个数据(一行一列)使用率最高的。</li><li>列子查询: 返回的结果是一列(一列多行)</li><li>行子查询: 返回的结果是一行(一行多列)</li></ul></li><li><p>标量子查询</p><ul><li>查询班级学生平均年龄</li><li>查询大于平均年龄的学生</li></ul></li></ul><p>查询班级学生的平均身高</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> students <span class="keyword">where</span> age <span class="operator">&gt;</span> (<span class="keyword">select</span> <span class="built_in">avg</span>(age) <span class="keyword">from</span> students);</span><br></pre></td></tr></table></figure><ul><li><p>列级子查询</p><ul><li>查询还有学生在班的所有班级名字<ul><li>找出学生表中所有的班级 id</li><li>找出班级表中对应的名字<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> name <span class="keyword">from</span> classes <span class="keyword">where</span> id <span class="keyword">in</span> (<span class="keyword">select</span> cls_id <span class="keyword">from</span> students);</span><br></pre></td></tr></table></figure></li></ul></li></ul></li><li><p>行级子查询</p><ul><li>需求: 查找班级年龄最大,身高最高的学生</li><li>行元素: 将多个字段合成一个行元素,在行级子查询中会使用到行元素<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> students <span class="keyword">where</span> (height,age) <span class="operator">=</span> (<span class="keyword">select</span> <span class="built_in">max</span>(height),<span class="built_in">max</span>(age) <span class="keyword">from</span> students);</span><br></pre></td></tr></table></figure></li></ul></li><li><p>子查询中特定关键字使用</p><ul><li>in 范围<ul><li>格式: 主查询 where 条件 in (列子查询)</li></ul></li></ul></li></ul><h3 id="字符串函数"><a href="#字符串函数" class="headerlink" title="字符串函数"></a>字符串函数</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line">concat()：字符串拼接</span><br><span class="line">例子：<span class="keyword">select</span> concat(&quot;名字：&quot;,name) <span class="keyword">from</span> students;</span><br><span class="line"></span><br><span class="line"><span class="comment">---</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">lower</span>()：转小写</span><br><span class="line">    <span class="keyword">select</span> <span class="built_in">lower</span>(<span class="string">&#x27;HELLO&#x27;</span>) <span class="keyword">from</span> dual;</span><br><span class="line"></span><br><span class="line"><span class="comment">---</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">upper</span>()：转大写</span><br><span class="line">    <span class="keyword">select</span> <span class="built_in">upper</span>(<span class="string">&#x27;hello&#x27;</span>) <span class="keyword">from</span> dual;</span><br><span class="line"></span><br><span class="line"><span class="comment">---</span></span><br><span class="line"></span><br><span class="line">rpad()：向右字符串补充</span><br><span class="line">    <span class="keyword">select</span> rpad(name,<span class="number">10</span>,&quot;#&quot;) <span class="keyword">from</span> students;</span><br><span class="line"></span><br><span class="line"><span class="comment">---</span></span><br><span class="line"></span><br><span class="line">lpad()：向左字符串补充</span><br><span class="line">    <span class="keyword">select</span> lpad(name,<span class="number">10</span>,&quot;#&quot;) <span class="keyword">from</span> students;</span><br><span class="line"></span><br><span class="line"><span class="comment">---</span></span><br><span class="line"></span><br><span class="line">length()：字符串长度</span><br><span class="line">    <span class="keyword">select</span> length(name) <span class="keyword">from</span> students; <span class="operator">/</span><span class="operator">/</span>名字的字符长度</span><br><span class="line"></span><br><span class="line"><span class="comment">---</span></span><br><span class="line"></span><br><span class="line">reverse()：字符串反转</span><br><span class="line">    <span class="keyword">select</span> reverse(&quot;hello&quot;) <span class="keyword">from</span> dual; <span class="operator">/</span><span class="operator">/</span>olleh</span><br><span class="line"></span><br><span class="line"><span class="comment">---</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">trim</span>()：去除前后两端的空格</span><br><span class="line">    <span class="keyword">select</span> length(<span class="string">&#x27;   hello    &#x27;</span>) <span class="keyword">from</span> dual;</span><br><span class="line"></span><br><span class="line"><span class="comment">---</span></span><br><span class="line"></span><br><span class="line">rtrim()：去除右边的空格</span><br><span class="line">    <span class="keyword">select</span> length(rtrim(<span class="string">&#x27;   hello    &#x27;</span>)) <span class="keyword">from</span> dual;</span><br><span class="line"></span><br><span class="line">ltrim()：去除左边的空格</span><br><span class="line">    <span class="keyword">select</span> length(ltrim(<span class="string">&#x27;   hello    &#x27;</span>)) <span class="keyword">from</span> dual;</span><br><span class="line"></span><br><span class="line"><span class="comment">---</span></span><br><span class="line">replace()：替换字符串</span><br><span class="line">    <span class="keyword">select</span> replace(name,<span class="string">&#x27;S&#x27;</span>,<span class="string">&#x27;*&#x27;</span>) <span class="keyword">from</span> students; <span class="operator">/</span><span class="operator">/</span>name字段的&quot;s&quot;全部替换成&quot;*&quot;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">substr()：截取字符串 下标从<span class="number">1</span>开始</span><br><span class="line">    <span class="keyword">select</span> substr(<span class="string">&#x27;hello&#x27;</span>,<span class="number">2</span>,<span class="number">3</span>) <span class="keyword">from</span> dual; <span class="operator">/</span><span class="operator">/</span> ell</span><br></pre></td></tr></table></figure><h3 id="数字函数"><a href="#数字函数" class="headerlink" title="数字函数"></a>数字函数</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">ceil</span>(n)：返回大于n的最小值。</span><br><span class="line">    <span class="keyword">select</span> <span class="built_in">ceil</span>(<span class="number">10.1</span>) <span class="keyword">from</span> dual; <span class="operator">/</span><span class="operator">/</span><span class="number">11</span></span><br><span class="line"></span><br><span class="line"><span class="comment">---</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">floor</span>(n)：返回小于n的最大值</span><br><span class="line">    <span class="keyword">select</span> <span class="built_in">floor</span>(<span class="number">10.9</span>) <span class="keyword">from</span> dual; <span class="operator">/</span><span class="operator">/</span><span class="number">10</span></span><br><span class="line"></span><br><span class="line">round(n,m)：保留n的指定的小数位,有四舍五入</span><br><span class="line">    <span class="keyword">select</span> round(<span class="number">3.14159265357</span>,<span class="number">4</span>) <span class="keyword">from</span> dual; <span class="operator">/</span><span class="operator">/</span><span class="number">3.1416</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">truncate</span>(n,m):保留n的指定的小数位，没有四舍五入</span><br><span class="line">    <span class="keyword">select</span> <span class="keyword">truncate</span>(<span class="number">3.14159265357</span>,<span class="number">4</span>) <span class="keyword">from</span> dual;  <span class="operator">/</span><span class="operator">/</span> <span class="number">3.1415</span></span><br><span class="line"></span><br><span class="line">rand()：随机产生<span class="number">0</span>到<span class="number">1</span>的随机数</span><br><span class="line">    <span class="keyword">select</span> rand() <span class="keyword">from</span> dual;</span><br></pre></td></tr></table></figure><h3 id="日期函数"><a href="#日期函数" class="headerlink" title="日期函数"></a>日期函数</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">now()：返回当前时间</span><br><span class="line">    <span class="keyword">select</span> now() <span class="keyword">from</span> dual;</span><br><span class="line"></span><br><span class="line">curdate():返回当前日期</span><br><span class="line">    <span class="keyword">select</span> curdate() <span class="keyword">from</span> dual;   <span class="operator">/</span><span class="operator">/</span><span class="number">2021</span><span class="number">-09</span><span class="number">-03</span></span><br><span class="line"></span><br><span class="line">curtime():返回当前日期</span><br><span class="line">    <span class="keyword">select</span> curtime() <span class="keyword">from</span> dual;  <span class="operator">/</span><span class="operator">/</span> <span class="number">17</span>:<span class="number">59</span>:<span class="number">16</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">year</span>(<span class="type">date</span>)：返回<span class="type">date</span>时间指定的年份</span><br><span class="line">    <span class="keyword">select</span> <span class="keyword">year</span>(hiredate) <span class="keyword">from</span> emp;</span><br><span class="line"></span><br><span class="line"><span class="keyword">month</span>(<span class="type">date</span>)：返回<span class="type">date</span>时间指定的月份</span><br><span class="line">    <span class="keyword">select</span> <span class="keyword">month</span>(hiredate) <span class="keyword">from</span> emp;</span><br><span class="line"></span><br><span class="line"><span class="keyword">day</span>(<span class="type">date</span>)：返回<span class="type">date</span>时间指定的日</span><br><span class="line">    <span class="keyword">select</span> <span class="keyword">day</span>(hiredate) <span class="keyword">from</span> emp;</span><br><span class="line"></span><br><span class="line"><span class="comment">---</span></span><br><span class="line"></span><br><span class="line">timestempdiff(<span class="type">interval</span>,date1,date2)：计算两个日期之间相隔的日期</span><br><span class="line"></span><br><span class="line"><span class="type">interval</span>可以是：<span class="keyword">year</span> <span class="keyword">month</span> <span class="keyword">day</span> <span class="keyword">hour</span> <span class="keyword">minute</span> <span class="keyword">second</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">select</span> timestampdiff(<span class="keyword">day</span>,<span class="string">&#x27;1999-10-02&#x27;</span>,now()) <span class="keyword">from</span> dual;   <span class="operator">/</span><span class="operator">/</span> <span class="number">8007</span></span><br><span class="line"></span><br><span class="line"><span class="comment">---</span></span><br><span class="line"></span><br><span class="line">date_format(<span class="type">date</span>,parrent)：设置日期的格式。</span><br><span class="line">    <span class="keyword">select</span> date_format(now(),<span class="string">&#x27;%Y年%m月%d日 %H时%i分%s秒&#x27;</span>) <span class="keyword">from</span> dual;  <span class="operator">/</span><span class="operator">/</span><span class="number">2021</span>年<span class="number">09</span>月<span class="number">03</span>日 <span class="number">18</span>时<span class="number">01</span>分<span class="number">10</span>秒</span><br></pre></td></tr></table></figure><h3 id="其他函数"><a href="#其他函数" class="headerlink" title="其他函数"></a>其他函数</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">空判断</span><br><span class="line">    ifnull(v1,v2)：如果v1为空则返回v2</span><br><span class="line"></span><br><span class="line">if判断</span><br><span class="line">if(f,v1,v2)：如果f为真，返回v1 否则返回v2</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> database()：查看当前操作的数据库;</span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> <span class="keyword">user</span>();查看当前使用的账户</span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> version(); 查看当前数据库的版本;</span><br></pre></td></tr></table></figure><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>完整的select语句</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">select distinct *</span><br><span class="line">from 表名</span><br><span class="line">where ....</span><br><span class="line">group by ... having ...</span><br><span class="line">order by ...</span><br><span class="line">limit start,count</span><br></pre></td></tr></table></figure><p>执行顺序为：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">from 表名</span><br><span class="line">where ....</span><br><span class="line">group by ...</span><br><span class="line">select distinct *</span><br><span class="line">having ...</span><br><span class="line">order by ...</span><br><span class="line">limit start,count</span><br></pre></td></tr></table></figure><p>实际使用中，只是语句中某些部分的组合，而不是全部</p><h3 id="逗号分割行转列"><a href="#逗号分割行转列" class="headerlink" title="逗号分割行转列"></a>逗号分割行转列</h3><p>转载自<a href="https://www.cnblogs.com/jackszc/p/7448322.html">https://www.cnblogs.com/jackszc/p/7448322.html</a></p><p>由于很多业务表因为历史原因或者性能原因，都使用了违反第一范式的设计模式。即同一个列中存储了多个属性值（具体结构见下表）。</p><p>这种模式下，应用常常需要将这个列依据分隔符进行分割，并得到列转行的结果。</p><table><thead><tr><th align="left">ID</th><th align="left">Value</th></tr></thead><tbody><tr><td align="left">1</td><td align="left">tiny,small,big</td></tr><tr><td align="left">2</td><td align="left">small,medium</td></tr><tr><td align="left">3</td><td align="left">tiny,big</td></tr></tbody></table><p>期望得到结果：</p><table><thead><tr><th align="left">ID</th><th align="left">Value</th></tr></thead><tbody><tr><td align="left">1</td><td align="left">tiny</td></tr><tr><td align="left">1</td><td align="left">small</td></tr><tr><td align="left">1</td><td align="left">big</td></tr><tr><td align="left">2</td><td align="left">small</td></tr><tr><td align="left">2</td><td align="left">medium</td></tr><tr><td align="left">3</td><td align="left">tiny</td></tr><tr><td align="left">3</td><td align="left">big</td></tr></tbody></table><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">#需要处理的表</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> tbl_name (ID <span class="type">int</span> ,mSize <span class="type">varchar</span>(<span class="number">100</span>));</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> tbl_name <span class="keyword">values</span> (<span class="number">1</span>,<span class="string">&#x27;tiny,small,big&#x27;</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> tbl_name <span class="keyword">values</span> (<span class="number">2</span>,<span class="string">&#x27;small,medium&#x27;</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> tbl_name <span class="keyword">values</span> (<span class="number">3</span>,<span class="string">&#x27;tiny,big&#x27;</span>);</span><br><span class="line"></span><br><span class="line">#用于循环的自增表</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> incre_table (AutoIncreID <span class="type">int</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> incre_table <span class="keyword">values</span> (<span class="number">1</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> incre_table <span class="keyword">values</span> (<span class="number">2</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> incre_table <span class="keyword">values</span> (<span class="number">3</span>);</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> a.ID,substring_index(substring_index(a.mSize,<span class="string">&#x27;,&#x27;</span>,b.AutoIncreID),<span class="string">&#x27;,&#x27;</span>,<span class="number">-1</span>) </span><br><span class="line"><span class="keyword">from</span> </span><br><span class="line">tbl_name a</span><br><span class="line"><span class="keyword">join</span></span><br><span class="line">incre_table b</span><br><span class="line"><span class="keyword">on</span> b.AutoIncreID <span class="operator">&lt;=</span> (length(a.mSize) <span class="operator">-</span> length(replace(a.mSize,<span class="string">&#x27;,&#x27;</span>,<span class="string">&#x27;&#x27;</span>))<span class="operator">+</span><span class="number">1</span>)</span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span> a.ID;</span><br></pre></td></tr></table></figure><p>总结：<br>这种方法的缺点在于，我们需要一个拥有连续数列的独立表（这里是incre_table)。并且连续数列的最大值一定要大于符合分割的值的个数。</p><p>例如有一行的mSize 有100个逗号分割的值，那么我们的incre_table 就需要有至少100个连续行。</p><p>当然，mysql内部也有现成的连续数列表可用。如mysql.help_topic： help_topic_id 共有504个数值，一般能满足于大部分需求了。</p>]]></content>
      
      
      
        <tags>
            
            <tag> SQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>定时执行工具</title>
      <link href="/posts/6711.html"/>
      <url>/posts/6711.html</url>
      
        <content type="html"><![CDATA[<h1 id="crontab"><a href="#crontab" class="headerlink" title="crontab"></a>crontab</h1><ul><li>Linux crontab是用来<code>定期执行程序的命令</code>。<br>当安装完成操作系统之后，默认便会启动此任务调度命令。<br><code>crond</code> 命令每分锺会定期检查是否有要执行的工作，如果有要执行的工作便会自动执行该工作。</li><li>注意：新创建的 <code>cron</code> 任务，不会马上执行，至少要过 2 分钟后才可以，当然你可以重启 cron 来马上执行。</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"># 常用参数</span><br><span class="line">-e 设置计时器</span><br><span class="line">-l 列出当前计时器的设置</span><br><span class="line"></span><br><span class="line">*    *    *    *    *      执行命令</span><br><span class="line">-    -    -    -    -</span><br><span class="line">|    |    |    |    |</span><br><span class="line">|    |    |    |    +----- 星期中星期几 (0 - 6) (星期天 为0)</span><br><span class="line">|    |    |    +---------- 月份 (1 - 12) </span><br><span class="line">|    |    +--------------- 一个月中的第几天 (1 - 31)</span><br><span class="line">|    +-------------------- 小时 (0 - 23)</span><br><span class="line">+------------------------- 分钟 (0 - 59)</span><br></pre></td></tr></table></figure><p>例子：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">#列出当前计时器的设置</span><br><span class="line">[root@localhost ~]# crontab -l</span><br><span class="line"></span><br><span class="line">#编写定时器</span><br><span class="line">[root@localhost ~]# crontab -e</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 常用的定义时间问题</span><br><span class="line"></span><br><span class="line"># 每分钟执行</span><br><span class="line">* * * * *</span><br><span class="line"></span><br><span class="line"># 每五分钟执行</span><br><span class="line">*/5 * * * *</span><br><span class="line"></span><br><span class="line"># 每小时执行</span><br><span class="line">0 * * * *</span><br><span class="line"></span><br><span class="line"># 每天执行</span><br><span class="line">0 0 * * *</span><br><span class="line"></span><br><span class="line"># 每周执行</span><br><span class="line">0 0 * * 0</span><br><span class="line"></span><br><span class="line"># 每月执行</span><br><span class="line">0 0 1 * *</span><br><span class="line"></span><br><span class="line"># 每年执行</span><br><span class="line">0 0 1 1 *</span><br><span class="line"></span><br><span class="line"># 工作日9点到下午六点每小时提醒一次</span><br><span class="line">0 9-18 * * 1-5 /opt/drink_water.sh</span><br></pre></td></tr></table></figure><h1 id="重启使其立即生效"><a href="#重启使其立即生效" class="headerlink" title="重启使其立即生效"></a>重启使其立即生效</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">/bin/systemctl restart crond.service</span><br><span class="line">或</span><br><span class="line">systemctl restart crond</span><br></pre></td></tr></table></figure><h1 id="切割日志问题延伸"><a href="#切割日志问题延伸" class="headerlink" title="切割日志问题延伸"></a>切割日志问题延伸</h1><p>详细日志切割解释<code>https://pengyirui.gitee.io/posts/f708.html</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">比如我需要使用`/etc/logrotate.d`下的`catalina`切割文件，但不支持每小时切割</span><br><span class="line">此时不能直接 crontab -e 编写</span><br><span class="line">logrotate -vf /etc/logrotate.d/catalina</span><br><span class="line">而是需要</span><br><span class="line">/usr/sbin/logrotate -vf /etc/logrotate.d/catalina</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>windows资源管理器</title>
      <link href="/posts/de7.html"/>
      <url>/posts/de7.html</url>
      
        <content type="html"><![CDATA[<p>推荐一款windows好用的资源管理器：<strong>QTTabBar</strong></p><p>它能像浏览器一样方便管理你需要的文件，不需要打开一个又一个页面</p><p>官网地址：<a href="http://qttabbar.wikidot.com/">http://qttabbar.wikidot.com/</a><br>备用地址：<a href="https://pengyirui.lanzous.com/i95ZTguoc6d">https://pengyirui.lanzous.com/i95ZTguoc6d</a></p><p>简体汉化地址：<a href="https://pengyirui.lanzous.com/i7ihXguoc8f">https://pengyirui.lanzous.com/i7ihXguoc8f</a><br>繁体汉化地址：<a href="https://pengyirui.lanzous.com/iubnzguoq4f">https://pengyirui.lanzous.com/iubnzguoq4f</a><br><code>下载后需要把.txt后缀删掉</code></p><ul><li><p>主要功能展示<br><img src="https://raw.githubusercontent.com/pengyirui/blog_img/main/2020-09-22-01.png"></p></li><li><p>启动工具<br><img src="https://raw.githubusercontent.com/pengyirui/blog_img/main/2020-09-22-00.png"></p></li><li><p>打开设置（Alt+O）<br><img src="https://raw.githubusercontent.com/pengyirui/blog_img/main/2020-09-22-02.png" alt="更换语言包，和探索跟高级功能"></p></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> 软件 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>mysql三大日志</title>
      <link href="/posts/f81f.html"/>
      <url>/posts/f81f.html</url>
      
        <content type="html"><![CDATA[<p>日志是 mysql 数据库的重要组成部分，记录着数据库运行期间各种状态信息。mysql日志主要包括错误日志、查询日志、慢查询日志、事务日志、二进制日志几大类。</p><p>作为开发，我们重点需要关注的是二进制日志( binlog )和事务日志(包括redo log 和 undo log )，本文接下来会详细介绍这三种日志。</p><h3 id="binlog"><a href="#binlog" class="headerlink" title="binlog"></a>binlog</h3><p>binlog 用于记录数据库执行的写入性操作(不包括查询)信息，以二进制的形式保存在磁盘中。binlog 是 mysql的逻辑日志，并且由 Server 层进行记录，使用任何存储引擎的 mysql 数据库都会记录 binlog 日志。</p><ul><li>逻辑日志：可以简单理解为记录的就是sql语句 。</li><li>物理日志：mysql 数据最终是保存在数据页中的，物理日志记录的就是数据页变更 。</li></ul><p>binlog 是通过追加的方式进行写入的，可以通过max_binlog_size 参数设置每个 binlog文件的大小，当文件大小达到给定值之后，会生成新的文件来保存日志。</p><h4 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h4><p>在实际应用中，<code>binlog</code>的主要使用场景有两个，分别是 <strong>主从复制</strong> 和 <strong>数据恢复</strong> 。</p><ol><li>主从复制 ：在 <code>Master</code> 端开启<code>binlog</code> ，然后将 <code>binlog</code>发送到各个 <code>Slave</code>端， <code>Slave</code> 端重放 <code>binlog</code> 从而达到主从数据一致。</li><li>数据恢复 ：通过使用 <code>mysqlbinlog</code> 工具来恢复数据。</li></ol><h4 id="刷盘时机"><a href="#刷盘时机" class="headerlink" title="刷盘时机"></a>刷盘时机</h4><p>对于<code>InnoDB</code>存储引擎而言，只有在事务提交时才会记录<code>biglog</code> ，此时记录还在内存中，那么<code>biglog</code>是什么时候刷到磁盘中的呢？<br><code>mysql</code>通过 <code>sync_binlog</code> 参数控制 <code>biglog</code> 的刷盘时机，取值范围是 <code>0-N</code>：</p><ul><li>0：不去强制要求，由系统自行判断何时写入磁盘；</li><li>1：每次 commit 的时候都要将 binlog 写入磁盘；    </li><li>N：每N个事务，才会将 binlog 写入磁盘。</li></ul><p>从上面可以看出，<code>sync_binlog</code>最安全的是设置是 <code>1</code> ，这也是<code>MySQL 5.7.7</code>之后版本的默认值。但是设置一个大一些的值可以提升数据库性能，因此实际情况下也可以将值适当调大，牺牲一定的一致性来获取更好的性能。</p><h4 id="binlog日志格式"><a href="#binlog日志格式" class="headerlink" title="binlog日志格式"></a>binlog日志格式</h4><p><code>binlog</code> 日志有三种格式，分别为 <code>STATMENT</code> 、 <code>ROW</code> 和 <code>MIXED</code>。</p><blockquote><p>在 MySQL 5.7.7 之前，默认的格式是 STATEMENT ， MySQL 5.7.7 之后，默认值是 ROW。日志格式通过 binlog-format 指定。</p></blockquote><ul><li><p>STATMENT：基于SQL 语句的复制( statement-based replication, SBR )，每一条会修改数据的sql语句会记录到binlog 中  。</p><ul><li><p>优点：不需要记录每一行的变化，减少了 binlog 日志量，节约了  IO  , 从而提高了性能；</p></li><li><p>缺点：在某些情况下会导致主从数据不一致，比如执行sysdate() 、  slepp()  等 。</p></li></ul></li><li><p>ROW：基于行的复制(row-based replication, RBR )，不记录每条sql语句的上下文信息，仅需记录哪条数据被修改了 。</p><ul><li><p>优点：不会出现某些特定情况下的存储过程、或function、或trigger的调用和触发无法被正确复制的问题 ；</p></li><li><p>缺点：会产生大量的日志，尤其是<code>alter table</code> 的时候会让日志暴涨</p></li></ul></li><li><p>MIXED：基于STATMENT 和 ROW 两种模式的混合复制(mixed-based replication, MBR )，一般的复制使用STATEMENT 模式保存 binlog ，对于 STATEMENT 模式无法复制的操作使用 ROW 模式保存 binlog</p></li></ul><h3 id="redo-log"><a href="#redo-log" class="headerlink" title="redo log"></a>redo log</h3><h4 id="为什么需要"><a href="#为什么需要" class="headerlink" title="为什么需要"></a>为什么需要</h4><p>我们都知道，事务的四大特性里面有一个是 <strong>持久性</strong> ，具体来说就是<strong>只要事务提交成功，那么对数据库做的修改就被永久保存下来了，不可能因为任何原因再回到原来的状态。</strong><br>那么 <code>mysql</code>是如何保证一致性的呢？<br>最简单的做法是在每次事务提交的时候，将该事务涉及修改的数据页全部刷新到磁盘中。但是这么做会有严重的性能问题，主要体现在两个方面：</p><ol><li>因为 Innodb 是以 页 为单位进行磁盘交互的，而一个事务很可能只修改一个数据页里面的几个字节，这个时候将完整的数据页刷到磁盘的话，太浪费资源了！</li><li>一个事务可能涉及修改多个数据页，并且这些数据页在物理上并不连续，使用随机IO写入性能太差！<br>因此 <code>mysql</code> 设计了 <code>redo log</code> ， 具体来说就是只记录事务对数据页做了哪些修改，这样就能完美地解决性能问题了(相对而言文件更小并且是顺序IO)。<h4 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h4><code>redo log</code> 包括两部分：一个是内存中的日志缓冲( redo log buffer )，另一个是磁盘上的日志文件( redo logfile)。<br><code>mysql</code> 每执行一条 DML 语句，先将记录写入 redo log buffer，后续某个时间点再一次性将多个操作记录写到 redo log file。这种 <strong>先写日志，再写磁盘</strong>的技术就是 MySQL里经常说到的 WAL(Write-Ahead Logging) 技术。</li></ol><p>在计算机操作系统中，用户空间(<code>user space</code>)下的缓冲区数据一般情况下是无法直接写入磁盘的，中间必须经过操作系统内核空间( kernel space )缓冲区( OS Buffer )。</p><h3 id="undo-log"><a href="#undo-log" class="headerlink" title="undo log"></a>undo log</h3><p>数据库事务四大特性中有一个是<code>原子性</code>，具体来说就是 原子性是指对数据库的一系列操作，要么全部成功，要么全部失败，不可能出现部分成功的情况。<br>实际上， 原子性 底层就是通过 undo log 实现的。undo log主要记录了数据的逻辑变化，比如一条 INSERT 语句，对应一条DELETE 的 undo log ，对于每个 UPDATE 语句，对应一条相反的 UPDATE 的 undo log ，这样在发生错误时，就能回滚到事务之前的数据状态。<br>同时， undo log 也是 MVCC(多版本并发控制)实现的关键。</p>]]></content>
      
      
      
        <tags>
            
            <tag> SQL </tag>
            
            <tag> 运维记录 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>shell随机数</title>
      <link href="/posts/5e38.html"/>
      <url>/posts/5e38.html</url>
      
        <content type="html"><![CDATA[<h2 id="1-如何生成随机数？"><a href="#1-如何生成随机数？" class="headerlink" title="1. 如何生成随机数？"></a>1. 如何生成随机数？</h2><p><strong>系统变量</strong>：<strong>RANDOM</strong>，默认会产生0~32767的随机整数</p><p><strong>前言：</strong>要想调用变量，不管你是什么变量都要给钱，而且是美元:heavy_dollar_sign:</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">打印一个随机数</span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$RANDOM</span></span><br><span class="line">查看系统上一次生成的随机数</span><br><span class="line"><span class="comment"># set|grep RANDOM</span></span><br><span class="line">RANDOM=<span class="number">28325</span></span><br><span class="line"></span><br><span class="line">产生<span class="number">0</span>~<span class="number">1</span>之间的随机数</span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$</span>[<span class="variable">$RANDOM</span>%<span class="number">2</span>]</span><br><span class="line"></span><br><span class="line">产生<span class="number">0</span>~<span class="number">2</span>之间的随机数</span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$</span>[<span class="variable">$RANDOM</span>%<span class="number">3</span>]</span><br><span class="line"></span><br><span class="line">产生<span class="number">0</span>~<span class="number">3</span>之间的随机数</span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$</span>[<span class="variable">$RANDOM</span>%<span class="number">4</span>]</span><br><span class="line"></span><br><span class="line">产生<span class="number">0</span>~<span class="number">9</span>内的随机数</span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$</span>[<span class="variable">$RANDOM</span>%<span class="number">10</span>]</span><br><span class="line"></span><br><span class="line">产生<span class="number">0</span>~<span class="number">100</span>内的随机数</span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$</span>[<span class="variable">$RANDOM</span>%<span class="number">101</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">产生<span class="number">50</span><span class="literal">-100</span>之内的随机数</span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$</span>[<span class="variable">$RANDOM</span>%<span class="number">51</span>+<span class="number">50</span>]</span><br><span class="line"></span><br><span class="line">产生三位数的随机数</span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$</span>[<span class="variable">$RANDOM</span>%<span class="number">900</span>+<span class="number">100</span>]</span><br></pre></td></tr></table></figure><h2 id="2-实战案例"><a href="#2-实战案例" class="headerlink" title="2. 实战案例"></a>2. 实战案例</h2><h3 id="㈠-随机产生以139开头的电话号码"><a href="#㈠-随机产生以139开头的电话号码" class="headerlink" title="㈠ 随机产生以139开头的电话号码"></a>㈠ 随机产生以139开头的电话号码</h3><p><strong>具体需求1：</strong></p><p>写一个脚本，产生一个phonenum.txt文件，随机产生以139开头的手机号1000个，每个一行。</p><h4 id="①-思路"><a href="#①-思路" class="headerlink" title="① 思路"></a>① 思路</h4><ol><li>产生1000个电话号码，脚本需要循环1000次 <code>FOR WHILE UNTIL</code></li><li>139+8位,后8位随机产生，可以让每一位数字都随机产生  <code>echo $[$RANDOM%10]</code></li><li>将随机产生的数字分别保存到变量里，然后加上139保存到文件里</li></ol><h4 id="②-落地实现"><a href="#②-落地实现" class="headerlink" title="② 落地实现"></a>② 落地实现</h4><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/bin/env bash</span></span><br><span class="line"><span class="comment">#产生1000个以139开头的电话号码并保存文件phonenum.txt</span></span><br><span class="line">file=/root/phonenum.txt</span><br><span class="line"><span class="keyword">for</span> ((i=<span class="number">1</span>;i&lt;=<span class="number">1000</span>;i++))</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">n1=<span class="variable">$</span>[<span class="variable">$RANDOM</span>%<span class="number">10</span>]</span><br><span class="line">n2=<span class="variable">$</span>[<span class="variable">$RANDOM</span>%<span class="number">10</span>]</span><br><span class="line">n3=<span class="variable">$</span>[<span class="variable">$RANDOM</span>%<span class="number">10</span>]</span><br><span class="line">n4=<span class="variable">$</span>[<span class="variable">$RANDOM</span>%<span class="number">10</span>]</span><br><span class="line">n5=<span class="variable">$</span>[<span class="variable">$RANDOM</span>%<span class="number">10</span>]</span><br><span class="line">n6=<span class="variable">$</span>[<span class="variable">$RANDOM</span>%<span class="number">10</span>]</span><br><span class="line">n7=<span class="variable">$</span>[<span class="variable">$RANDOM</span>%<span class="number">10</span>]</span><br><span class="line">n8=<span class="variable">$</span>[<span class="variable">$RANDOM</span>%<span class="number">10</span>]</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;139<span class="variable">$n1</span><span class="variable">$n2</span><span class="variable">$n3</span><span class="variable">$n4</span><span class="variable">$n5</span><span class="variable">$n6</span><span class="variable">$n7</span><span class="variable">$n8</span>&quot;</span> &gt;&gt; <span class="variable">$file</span></span><br><span class="line">done</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#!/bin/bash</span></span><br><span class="line"><span class="comment"># random phonenum</span></span><br><span class="line"><span class="comment"># 循环1000次产生电话号码并保存到文件</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> &#123;<span class="number">1</span>..<span class="number">1000</span>&#125;</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">n1=<span class="variable">$</span>[<span class="type">RANDOM</span>%<span class="number">10</span>]</span><br><span class="line">n2=<span class="variable">$</span>[<span class="type">RANDOM</span>%<span class="number">10</span>]</span><br><span class="line">n3=<span class="variable">$</span>[<span class="type">RANDOM</span>%<span class="number">10</span>]</span><br><span class="line">n4=<span class="variable">$</span>[<span class="type">RANDOM</span>%<span class="number">10</span>]</span><br><span class="line">n5=<span class="variable">$</span>[<span class="type">RANDOM</span>%<span class="number">10</span>]</span><br><span class="line">n6=<span class="variable">$</span>[<span class="type">RANDOM</span>%<span class="number">10</span>]</span><br><span class="line">n7=<span class="variable">$</span>[<span class="type">RANDOM</span>%<span class="number">10</span>]</span><br><span class="line">n8=<span class="variable">$</span>[<span class="type">RANDOM</span>%<span class="number">10</span>]</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;139<span class="variable">$n1</span><span class="variable">$n2</span><span class="variable">$n3</span><span class="variable">$n4</span><span class="variable">$n5</span><span class="variable">$n6</span><span class="variable">$n7</span><span class="variable">$n8</span>&quot;</span> &gt;&gt; phonenum.txt</span><br><span class="line">done</span><br><span class="line"></span><br><span class="line"><span class="comment">#!/bin/bash</span></span><br><span class="line">i=<span class="number">1</span></span><br><span class="line"><span class="keyword">while</span> [ <span class="variable">$i</span> -<span class="type">le</span> <span class="number">1000</span> ]</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">n1=<span class="variable">$</span>[<span class="variable">$RANDOM</span>%<span class="number">10</span>]</span><br><span class="line">n2=<span class="variable">$</span>[<span class="variable">$RANDOM</span>%<span class="number">10</span>]</span><br><span class="line">n3=<span class="variable">$</span>[<span class="variable">$RANDOM</span>%<span class="number">10</span>]</span><br><span class="line">n4=<span class="variable">$</span>[<span class="variable">$RANDOM</span>%<span class="number">10</span>]</span><br><span class="line">n5=<span class="variable">$</span>[<span class="variable">$RANDOM</span>%<span class="number">10</span>]</span><br><span class="line">n6=<span class="variable">$</span>[<span class="variable">$RANDOM</span>%<span class="number">10</span>]</span><br><span class="line">n7=<span class="variable">$</span>[<span class="variable">$RANDOM</span>%<span class="number">10</span>]</span><br><span class="line">n8=<span class="variable">$</span>[<span class="variable">$RANDOM</span>%<span class="number">10</span>]</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;139<span class="variable">$n1</span><span class="variable">$n2</span><span class="variable">$n3</span><span class="variable">$n4</span><span class="variable">$n5</span><span class="variable">$n6</span><span class="variable">$n7</span><span class="variable">$n8</span>&quot;</span> &gt;&gt; phonenum.txt</span><br><span class="line">let i++</span><br><span class="line">done</span><br><span class="line"></span><br><span class="line"><span class="keyword">continue</span>:继续，跳过本次循环，执行下一次循环</span><br><span class="line"><span class="keyword">break</span>:打断，执行循环体外的代码do..done外</span><br><span class="line"><span class="keyword">exit</span>:退出程序</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#!/bin/bash</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> &#123;<span class="number">1</span>..<span class="number">1000</span>&#125;</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">n1=<span class="variable">$</span>[<span class="variable">$RANDOM</span>%<span class="number">10</span>]</span><br><span class="line">n2=<span class="variable">$</span>[<span class="variable">$RANDOM</span>%<span class="number">10</span>]</span><br><span class="line">n3=<span class="variable">$</span>[<span class="variable">$RANDOM</span>%<span class="number">10</span>]</span><br><span class="line">n4=<span class="variable">$</span>[<span class="variable">$RANDOM</span>%<span class="number">10</span>]</span><br><span class="line">n5=<span class="variable">$</span>[<span class="variable">$RANDOM</span>%<span class="number">10</span>]</span><br><span class="line">n6=<span class="variable">$</span>[<span class="variable">$RANDOM</span>%<span class="number">10</span>]</span><br><span class="line">n7=<span class="variable">$</span>[<span class="variable">$RANDOM</span>%<span class="number">10</span>]</span><br><span class="line">n8=<span class="variable">$</span>[<span class="variable">$RANDOM</span>%<span class="number">10</span>]</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;139<span class="variable">$n1</span><span class="variable">$n2</span><span class="variable">$n3</span><span class="variable">$n4</span><span class="variable">$n5</span><span class="variable">$n6</span><span class="variable">$n7</span><span class="variable">$n8</span>&quot;</span> &gt;&gt; phonenum.txt</span><br><span class="line">done</span><br><span class="line"></span><br><span class="line"><span class="comment">#!/bin/bash</span></span><br><span class="line"><span class="comment">#create phone num file</span></span><br><span class="line"><span class="keyword">for</span> ((i=<span class="number">1</span>;i&lt;=<span class="number">1000</span>;i++))</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">n1=<span class="variable">$</span>[<span class="variable">$RANDOM</span>%<span class="number">10</span>]</span><br><span class="line">n2=<span class="variable">$</span>[<span class="variable">$RANDOM</span>%<span class="number">10</span>]</span><br><span class="line">n3=<span class="variable">$</span>[<span class="variable">$RANDOM</span>%<span class="number">10</span>]</span><br><span class="line">n4=<span class="variable">$</span>[<span class="variable">$RANDOM</span>%<span class="number">10</span>]</span><br><span class="line">n5=<span class="variable">$</span>[<span class="variable">$RANDOM</span>%<span class="number">10</span>]</span><br><span class="line">n6=<span class="variable">$</span>[<span class="variable">$RANDOM</span>%<span class="number">10</span>]</span><br><span class="line">n7=<span class="variable">$</span>[<span class="variable">$RANDOM</span>%<span class="number">10</span>]</span><br><span class="line">n8=<span class="variable">$</span>[<span class="variable">$RANDOM</span>%<span class="number">10</span>]</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;139<span class="variable">$n1</span><span class="variable">$n2</span><span class="variable">$n3</span><span class="variable">$n4</span><span class="variable">$n5</span><span class="variable">$n6</span><span class="variable">$n7</span><span class="variable">$n8</span>&quot;</span> |<span class="built_in">tee</span> <span class="literal">-a</span> phonenum.txt</span><br><span class="line">done</span><br><span class="line"></span><br><span class="line"><span class="comment">#!/bin/bash</span></span><br><span class="line">count=<span class="number">0</span></span><br><span class="line"><span class="keyword">while</span> true</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">n1=<span class="variable">$</span>[<span class="variable">$RANDOM</span>%<span class="number">10</span>]</span><br><span class="line">n2=<span class="variable">$</span>[<span class="variable">$RANDOM</span>%<span class="number">10</span>]</span><br><span class="line">n3=<span class="variable">$</span>[<span class="variable">$RANDOM</span>%<span class="number">10</span>]</span><br><span class="line">n4=<span class="variable">$</span>[<span class="variable">$RANDOM</span>%<span class="number">10</span>]</span><br><span class="line">n5=<span class="variable">$</span>[<span class="variable">$RANDOM</span>%<span class="number">10</span>]</span><br><span class="line">n6=<span class="variable">$</span>[<span class="variable">$RANDOM</span>%<span class="number">10</span>]</span><br><span class="line">n7=<span class="variable">$</span>[<span class="variable">$RANDOM</span>%<span class="number">10</span>]</span><br><span class="line">n8=<span class="variable">$</span>[<span class="variable">$RANDOM</span>%<span class="number">10</span>]</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;139<span class="variable">$n1</span><span class="variable">$n2</span><span class="variable">$n3</span><span class="variable">$n4</span><span class="variable">$n5</span><span class="variable">$n6</span><span class="variable">$n7</span><span class="variable">$n8</span>&quot;</span> |<span class="built_in">tee</span> <span class="literal">-a</span> phonenum.txt &amp;&amp; let count++</span><br><span class="line"><span class="keyword">if</span> [ <span class="variable">$count</span> -<span class="type">eq</span> <span class="number">1000</span> ];then</span><br><span class="line"><span class="keyword">break</span></span><br><span class="line">fi</span><br><span class="line">done</span><br></pre></td></tr></table></figure><h3 id="随机抽出5位幸运观众"><a href="#随机抽出5位幸运观众" class="headerlink" title="随机抽出5位幸运观众"></a>随机抽出5位幸运观众</h3><p><strong>具体需求：</strong></p><ol><li>在上面的1000个手机号里抽奖==5个==幸运观众，显示出这5个幸运观众。</li><li>但只显示头3个数和尾号的4个数，中间的都用*代替</li></ol><h4 id="①-思路-1"><a href="#①-思路-1" class="headerlink" title="① 思路"></a>① 思路</h4><ol><li>确定幸运观众所在的行    <code>0-1000  随机找出一个数字   $[$RANDOM%1000+1]</code></li><li>将电话号码提取出来      <code>head -随机产生行号 phonenum.txt |tail -1</code></li><li>显示前3个和后4个数到屏幕   <code>echo 139****</code></li></ol><h4 id="②-落地实现-1"><a href="#②-落地实现-1" class="headerlink" title="② 落地实现"></a>② 落地实现</h4><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/bin/bash</span></span><br><span class="line"><span class="comment">#定义变量</span></span><br><span class="line">phone=/root/phonenum.txt</span><br><span class="line"><span class="comment">#循环抽出5位幸运观众</span></span><br><span class="line"><span class="keyword">for</span> ((i=<span class="number">1</span>;i&lt;=<span class="number">5</span>;i++))</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line"><span class="comment">#定位幸运观众所在行号</span></span><br><span class="line">line=`wc <span class="literal">-l</span> <span class="variable">$phone</span> |cut <span class="literal">-d</span><span class="string">&#x27; &#x27;</span> <span class="literal">-f1</span>`</span><br><span class="line">luck_line=<span class="variable">$</span>[<span class="type">RANDOM</span>%<span class="variable">$line</span>+<span class="number">1</span>]</span><br><span class="line"><span class="comment">#取出幸运观众所在行的电话号码</span></span><br><span class="line">luck_num=`head -<span class="variable">$luck_line</span> <span class="variable">$phone</span>|tail <span class="literal">-1</span>`</span><br><span class="line"><span class="comment">#显示到屏幕</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;139****<span class="variable">$</span>&#123;luck_num:7:4&#125;&quot;</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$luck_num</span> &gt;&gt; luck.txt</span><br><span class="line"><span class="comment">#删除已经被抽取的幸运观众号码</span></span><br><span class="line"><span class="comment">#sed -i &quot;/$luck_num/d&quot; $phone</span></span><br><span class="line">done</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#!/bin/bash</span></span><br><span class="line">file=/root/phonenum.txt</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> &#123;<span class="number">1</span>..<span class="number">5</span>&#125;</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">file_num=`wc <span class="literal">-l</span> <span class="variable">$file</span> |cut <span class="literal">-d</span><span class="string">&#x27; &#x27;</span> <span class="literal">-f1</span>`</span><br><span class="line">line=`echo <span class="variable">$</span>[<span class="variable">$RANDOM</span>%<span class="variable">$file_num</span>+<span class="number">1</span>]`</span><br><span class="line">luck=`head <span class="literal">-n</span> <span class="variable">$line</span>  <span class="variable">$file</span>|tail <span class="literal">-1</span>`</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;139****<span class="variable">$</span>&#123;luck:7:4&#125;&quot;</span> &amp;&amp; <span class="built_in">echo</span> <span class="variable">$luck</span> &gt;&gt; /root/luck_num.txt</span><br><span class="line">done</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#!/bin/bash</span></span><br><span class="line"><span class="keyword">for</span> ((i=<span class="number">1</span>;i&lt;=<span class="number">5</span>;i++))</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">file=phonenum.txt</span><br><span class="line">line=`cat phonenum.txt |wc <span class="literal">-l</span>`<span class="number">1000</span></span><br><span class="line">luckline=<span class="variable">$</span>[<span class="variable">$RANDOM</span>%<span class="variable">$line</span>+<span class="number">1</span>]</span><br><span class="line">phone=`cat <span class="variable">$file</span>|head -<span class="variable">$luckline</span>|tail <span class="literal">-1</span>`</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;幸运观众为:139****<span class="variable">$</span>&#123;phone:7:4&#125;&quot;</span></span><br><span class="line">done</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">或者</span><br><span class="line"><span class="comment">#!/bin/bash</span></span><br><span class="line"><span class="comment"># choujiang</span></span><br><span class="line">phone=phonenum.txt</span><br><span class="line"><span class="keyword">for</span> ((i=<span class="number">1</span>;i&lt;=<span class="number">5</span>;i++))</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">num=`wc <span class="literal">-l</span> phonenum.txt |cut <span class="literal">-d</span><span class="string">&#x27; &#x27;</span> <span class="literal">-f1</span>`</span><br><span class="line">line=`echo <span class="variable">$</span>[<span class="variable">$RANDOM</span>%<span class="variable">$num</span>+<span class="number">1</span>]`</span><br><span class="line">luck=`head -<span class="variable">$line</span> <span class="variable">$phone</span> |tail <span class="literal">-1</span>`</span><br><span class="line">sed <span class="literal">-i</span> <span class="string">&quot;/<span class="variable">$luck</span>/d&quot;</span> <span class="variable">$phone</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;幸运观众是:139****<span class="variable">$</span>&#123;luck:7:4&#125;&quot;</span></span><br><span class="line">done</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="批量创建用户-密码随机产生"><a href="#批量创建用户-密码随机产生" class="headerlink" title="批量创建用户(密码随机产生)"></a>批量创建用户(密码随机产生)</h3><p><strong>需求：</strong>批量创建5个用户，每个用户的密码为一个随机数</p><h4 id="①-思路-2"><a href="#①-思路-2" class="headerlink" title="① 思路"></a>① 思路</h4><ol><li>循环5次创建用户</li><li>产生一个密码文件来保存用户的随机密码</li><li>从密码文件中取出随机密码赋值给用户</li></ol><h4 id="②-落地实现-2"><a href="#②-落地实现-2" class="headerlink" title="② 落地实现"></a>② 落地实现</h4><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/bin/bash</span></span><br><span class="line"><span class="comment">#crate user and set passwd</span></span><br><span class="line"><span class="comment">#产生一个保存用户名和密码的文件</span></span><br><span class="line"><span class="built_in">echo</span> user0&#123;<span class="number">1</span>..<span class="number">5</span>&#125;:itcast<span class="variable">$</span>[<span class="variable">$RANDOM</span>%<span class="number">9000</span>+<span class="number">1000</span>]<span class="comment">#@~|tr &#x27; &#x27; &#x27;\n&#x27;&gt;&gt; user_pass.file</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#循环创建5个用户</span></span><br><span class="line"><span class="keyword">for</span> ((i=<span class="number">1</span>;i&lt;=<span class="number">5</span>;i++))</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">user=`head -<span class="variable">$i</span> user_pass.file|tail <span class="literal">-1</span>|cut <span class="literal">-d</span>: <span class="literal">-f1</span>`</span><br><span class="line">pass=`head -<span class="variable">$i</span> user_pass.file|tail <span class="literal">-1</span>|cut <span class="literal">-d</span>: <span class="literal">-f2</span>`</span><br><span class="line">useradd <span class="variable">$user</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$pass</span>|passwd <span class="literal">--stdin</span> <span class="variable">$user</span></span><br><span class="line">done</span><br><span class="line"></span><br><span class="line">或者</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> `cat user_pass.file`</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">user=`echo <span class="variable">$i</span>|cut <span class="literal">-d</span>: <span class="literal">-f1</span>`</span><br><span class="line">pass=`echo <span class="variable">$i</span>|cut <span class="literal">-d</span>: <span class="literal">-f2</span>`</span><br><span class="line">useradd <span class="variable">$user</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$pass</span>|passwd <span class="literal">--stdin</span> <span class="variable">$user</span></span><br><span class="line">done</span><br><span class="line"></span><br><span class="line"><span class="comment">#!/bin/bash</span></span><br><span class="line"><span class="comment">#crate user and set passwd</span></span><br><span class="line"><span class="comment">#产生一个保存用户名和密码的文件</span></span><br><span class="line"><span class="built_in">echo</span> user0&#123;<span class="number">1</span>..<span class="number">3</span>&#125;:itcast<span class="variable">$</span>[<span class="variable">$RANDOM</span>%<span class="number">9000</span>+<span class="number">1000</span>]<span class="comment">#@~|tr &#x27; &#x27; &#x27;\n&#x27;|tr &#x27;:&#x27; &#x27; &#x27; &gt;&gt; user_pass.file</span></span><br><span class="line"><span class="comment">#循环创建5个用户</span></span><br><span class="line"><span class="keyword">while</span> read user pass</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">useradd <span class="variable">$user</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$pass</span>|passwd <span class="literal">--stdin</span> <span class="variable">$user</span></span><br><span class="line">done &lt; user_pass.file</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">pwgen工具产生随机密码：</span><br><span class="line">[<span class="type">root</span>@<span class="type">server</span> <span class="type">shell04</span>]<span class="comment"># pwgen -cn1 12</span></span><br><span class="line">Meep5ob1aesa</span><br><span class="line">[<span class="type">root</span>@<span class="type">server</span> <span class="type">shell04</span>]<span class="comment"># echo user0&#123;1..3&#125;:$(pwgen -cn1 12)</span></span><br><span class="line">user01:Bahqu9haipho user02:Feiphoh7moo4 user03:eilahj5eth2<span class="built_in">R</span></span><br><span class="line">[<span class="type">root</span>@<span class="type">server</span> <span class="type">shell04</span>]<span class="comment"># echo user0&#123;1..3&#125;:$(pwgen -cn1 12)|tr &#x27; &#x27; &#x27;\n&#x27;</span></span><br><span class="line">user01:eiwaShuZo5hi</span><br><span class="line">user02:eiDeih7aim9k</span><br><span class="line">user03:aeBahwien8co</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> shell </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>shell循环</title>
      <link href="/posts/1d8a.html"/>
      <url>/posts/1d8a.html</url>
      
        <content type="html"><![CDATA[<h2 id="基础"><a href="#基础" class="headerlink" title="基础"></a>基础</h2><h3 id="列表循环"><a href="#列表循环" class="headerlink" title="列表循环"></a>列表循环</h3><blockquote><p>列表for循环：用于将一组命令执行<strong>已知的次数</strong></p></blockquote><ul><li><strong>基本语法格式</strong><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> variable <span class="keyword">in</span> &#123;list&#125;</span><br><span class="line">     <span class="keyword">do</span></span><br><span class="line">          command </span><br><span class="line">          command</span><br><span class="line">          …</span><br><span class="line">     done</span><br><span class="line">或者</span><br><span class="line"><span class="keyword">for</span> variable <span class="keyword">in</span> a b c</span><br><span class="line">     <span class="keyword">do</span></span><br><span class="line">         command</span><br><span class="line">         command</span><br><span class="line">     done</span><br></pre></td></tr></table></figure></li></ul><p><strong>举例说明</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"># for var in &#123;1..10&#125;;do echo $var;done</span><br><span class="line"># for var in 1 2 3 4 5;do echo $var;done</span><br><span class="line"># for var in `seq 10`;do echo $var;done</span><br><span class="line"># for var in $(seq 10);do echo $var;done</span><br><span class="line"># for var in &#123;0..10..2&#125;;do echo $var;done</span><br><span class="line"># for var in &#123;2..10..2&#125;;do echo $var;done</span><br><span class="line"># for var in &#123;10..1&#125;;do echo $var;done</span><br><span class="line"># for var in &#123;10..1..-2&#125;;do echo $var;done</span><br><span class="line"># for var in `seq 10 -2 1`;do echo $var;done</span><br></pre></td></tr></table></figure><h3 id="不带列表循环"><a href="#不带列表循环" class="headerlink" title="不带列表循环"></a>不带列表循环</h3><blockquote><p>不带列表的for循环执行时由<strong>用户指定参数和参数的个数</strong><br>需要传参数进去</p></blockquote><ul><li><strong>基本语法格式</strong></li></ul><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> variable</span><br><span class="line">    <span class="keyword">do</span></span><br><span class="line">        command </span><br><span class="line">        command</span><br><span class="line">        …</span><br><span class="line">   done</span><br></pre></td></tr></table></figure><ul><li><strong>举例说明</strong></li></ul><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/bin/bash</span></span><br><span class="line"><span class="keyword">for</span> var</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$var</span></span><br><span class="line">done</span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;脚本后面有<span class="variable">$</span>#个参数&quot;</span></span><br></pre></td></tr></table></figure><h3 id="类C风格的for循环"><a href="#类C风格的for循环" class="headerlink" title="类C风格的for循环"></a>类C风格的for循环</h3><ul><li><strong>基本语法结构</strong></li></ul><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(( expr1;expr2;expr3 ))</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">command</span><br><span class="line">command</span><br><span class="line">…</span><br><span class="line">done</span><br><span class="line"><span class="keyword">for</span> (( i=<span class="number">1</span>;i&lt;=<span class="number">5</span>;i++))</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$i</span></span><br><span class="line">done</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">expr1：定义变量并赋初值</span><br><span class="line">expr2：决定是否进行循环（条件）</span><br><span class="line">expr3：决定循环变量如何改变，决定循环什么时候退出</span><br></pre></td></tr></table></figure><ul><li><strong>举例说明</strong></li></ul><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># for ((i=1;i&lt;=5;i++));do echo $i;done</span></span><br><span class="line"><span class="comment"># for ((i=1;i&lt;=10;i+=2));do echo $i;done</span></span><br><span class="line"><span class="comment"># for ((i=2;i&lt;=10;i+=2));do echo $i;done</span></span><br></pre></td></tr></table></figure><p>until循环</p><p><strong>特点</strong>：条件为假就进入循环；条件为真就退出循环</p><h3 id="until语法结构"><a href="#until语法结构" class="headerlink" title="until语法结构"></a>until语法结构</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">until expression   [ 1 -eq 1 ]  (( 1 &gt;= 1 ))</span><br><span class="line">do</span><br><span class="line">command</span><br><span class="line">command</span><br><span class="line">...</span><br><span class="line">done</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>打印1-5数字</strong></p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">i=<span class="number">1</span></span><br><span class="line"><span class="keyword">while</span> [ <span class="variable">$i</span> -<span class="type">le</span> <span class="number">5</span> ]</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$i</span></span><br><span class="line">let i++</span><br><span class="line">done</span><br><span class="line"></span><br><span class="line">i=<span class="number">1</span></span><br><span class="line"><span class="keyword">until</span> [ <span class="variable">$i</span> -<span class="type">gt</span> <span class="number">5</span> ]</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$i</span></span><br><span class="line">let i++</span><br><span class="line">done</span><br></pre></td></tr></table></figure><h2 id="应用案例"><a href="#应用案例" class="headerlink" title="应用案例"></a>应用案例</h2><h3 id="脚本计算1-100奇数和"><a href="#脚本计算1-100奇数和" class="headerlink" title="脚本计算1-100奇数和"></a>脚本计算1-100奇数和</h3><h4 id="①-思路"><a href="#①-思路" class="headerlink" title="① 思路"></a>① 思路</h4><ol><li>定义一个变量来保存奇数的和   sum=0</li><li>找出1-100的奇数，保存到另一个变量里  <code>i</code>=遍历出来的奇数</li><li>从1-100中找出奇数后，再相加，然后将和赋值给变量  循环变量  for</li><li>遍历完毕后，将sum的值打印出来</li></ol><h4 id="②-实现"><a href="#②-实现" class="headerlink" title="② 实现"></a>② 实现</h4><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/bin/env bash</span></span><br><span class="line"><span class="comment"># 计算1-100的奇数和</span></span><br><span class="line"><span class="comment"># 定义变量来保存奇数和</span></span><br><span class="line">sum=<span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#for循环遍历1-100的奇数，并且相加，把结果重新赋值给sum</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> &#123;<span class="number">1</span>..<span class="number">100</span>..<span class="number">2</span>&#125;</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">let sum=<span class="variable">$sum</span>+<span class="variable">$i</span></span><br><span class="line">done</span><br><span class="line"><span class="comment">#打印所有奇数的和</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;1-100的奇数和是:<span class="variable">$sum</span>&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">方法<span class="number">1</span>：</span><br><span class="line"><span class="comment">#!/bin/bash</span></span><br><span class="line">sum=<span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> &#123;<span class="number">1</span>..<span class="number">100</span>..<span class="number">2</span>&#125;</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">sum=<span class="variable">$</span>[<span class="variable">$i</span>+<span class="variable">$sum</span>]</span><br><span class="line">done</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;1-100的奇数和为:<span class="variable">$sum</span>&quot;</span></span><br><span class="line"></span><br><span class="line">方法<span class="number">2</span>：</span><br><span class="line"><span class="comment">#!/bin/bash</span></span><br><span class="line">sum=<span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> ((i=<span class="number">1</span>;i&lt;=<span class="number">100</span>;i+=<span class="number">2</span>))</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">let sum=<span class="variable">$i</span>+<span class="variable">$sum</span></span><br><span class="line">done</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;1-100的奇数和为:<span class="variable">$sum</span>&quot;</span></span><br><span class="line"></span><br><span class="line">方法<span class="number">3</span>：</span><br><span class="line"><span class="comment">#!/bin/bash</span></span><br><span class="line">sum=<span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> ((i=<span class="number">1</span>;i&lt;=<span class="number">100</span>;i++))</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line"><span class="keyword">if</span> [ <span class="variable">$</span>[<span class="variable">$i</span>%<span class="number">2</span>] -<span class="type">ne</span> <span class="number">0</span> ];then</span><br><span class="line">let sum=<span class="variable">$sum</span>+<span class="variable">$i</span></span><br><span class="line">fi</span><br><span class="line">或者</span><br><span class="line">test <span class="variable">$</span>[<span class="variable">$i</span>%<span class="number">2</span>] <span class="operator">-ne</span> <span class="number">0</span> &amp;&amp; let sum=<span class="variable">$sum</span>+<span class="variable">$i</span></span><br><span class="line"></span><br><span class="line">done</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;1-100的奇数和为:<span class="variable">$sum</span>&quot;</span></span><br><span class="line"></span><br><span class="line">方法<span class="number">4</span>：</span><br><span class="line">sum=<span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> ((i=<span class="number">1</span>;i&lt;=<span class="number">100</span>;i++))</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line"><span class="keyword">if</span> [ <span class="variable">$</span>[<span class="variable">$i</span>%<span class="number">2</span>] -<span class="type">eq</span> <span class="number">0</span> ];then</span><br><span class="line"><span class="keyword">continue</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">let sum=<span class="variable">$sum</span>+<span class="variable">$i</span></span><br><span class="line">fi</span><br><span class="line">done</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;1-100的奇数和为:<span class="variable">$sum</span>&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#!/bin/bash</span></span><br><span class="line">sum=<span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> ((i=<span class="number">1</span>;i&lt;=<span class="number">100</span>;i++))</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">test <span class="variable">$</span>[<span class="variable">$i</span>%<span class="number">2</span>] <span class="operator">-eq</span> <span class="number">0</span> &amp;&amp; <span class="keyword">continue</span> || let sum=sum+<span class="variable">$i</span></span><br><span class="line">done</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;1-100的奇数和是:<span class="variable">$sum</span>&quot;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="③-循环控制语句"><a href="#③-循环控制语句" class="headerlink" title="③ 循环控制语句"></a>③ 循环控制语句</h4><p><strong>循环体：</strong> <code>do....done</code>之间的内容</p><ul><li>continue：继续；表示循环体内下面的代码不执行，重新开始下一次循环</li><li>break：打断；马上停止执行本次循环，执行循环体后面的代码</li><li>exit：表示直接跳出程序</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[root@server ~]# cat for5.sh </span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span></span><br><span class="line">for i in &#123;1..5&#125;</span><br><span class="line">do</span><br><span class="line">test $i -eq 2 &amp;&amp; break || touch /tmp/file$i</span><br><span class="line">done</span><br><span class="line">echo hello hahahah</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="批量创建用户"><a href="#批量创建用户" class="headerlink" title="批量创建用户"></a>批量创建用户</h3><p><strong>需求：</strong>批量加5个新用户，以u1到u5命名，并统一加一个新组，组名为class,统一改密码为123</p><h4 id="①-思路-1"><a href="#①-思路-1" class="headerlink" title="① 思路"></a>① 思路</h4><ol><li>添加用户的命令</li><li>判断class组是否存在</li><li>根据题意，判断该脚本循环5次来添加用户</li><li>给用户设置密码，应该放到循环体里面</li></ol><h4 id="②-落地实现"><a href="#②-落地实现" class="headerlink" title="② 落地实现"></a>② 落地实现</h4><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">方法一：</span><br><span class="line"><span class="comment">#!/bin/bash</span></span><br><span class="line"><span class="comment">#判断class组是否存在</span></span><br><span class="line">grep <span class="literal">-w</span> <span class="class"><span class="keyword">class</span> /<span class="title">etc</span>/<span class="title">group</span> &amp;&gt;/<span class="title">dev</span>/<span class="title">null</span></span></span><br><span class="line"><span class="class">[ $? -<span class="title">ne</span> 0 ] &amp;&amp; <span class="title">groupadd</span> <span class="title">class</span></span></span><br><span class="line"><span class="class">#批量创建5个用户</span></span><br><span class="line"><span class="class"><span class="title">for</span> <span class="title">i</span> <span class="title">in</span></span> &#123;<span class="number">1</span>..<span class="number">5</span>&#125;</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">useradd <span class="literal">-G</span> <span class="class"><span class="keyword">class</span> <span class="title">u</span>$<span class="title">i</span></span></span><br><span class="line"><span class="class"><span class="title">echo</span> 123|<span class="title">passwd</span> --<span class="title">stdin</span> <span class="title">u</span>$<span class="title">i</span></span></span><br><span class="line"><span class="class"><span class="title">done</span></span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class">方法二：</span></span><br><span class="line"><span class="class">#!/<span class="title">bin</span>/<span class="title">bash</span></span></span><br><span class="line"><span class="class">#判断<span class="title">class</span>组是否存在</span></span><br><span class="line"><span class="class"><span class="title">cut</span> -<span class="title">d</span>: -<span class="title">f1</span> /<span class="title">etc</span>/<span class="title">group</span>|<span class="title">grep</span> -<span class="title">w</span> <span class="title">class</span> &amp;&gt;/<span class="title">dev</span>/<span class="title">null</span></span></span><br><span class="line"><span class="class">[ $? -<span class="title">ne</span> 0 ] &amp;&amp; <span class="title">groupadd</span> <span class="title">class</span></span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class">#循环增加用户，循环次数5次，<span class="title">for</span>循环,给用户设定密码</span></span><br><span class="line"><span class="class"><span class="title">for</span> ((<span class="title">i</span>=1;<span class="title">i</span>&lt;=5;<span class="title">i</span>++))</span></span><br><span class="line"><span class="class"><span class="title">do</span></span></span><br><span class="line"><span class="class"><span class="title">useradd</span> <span class="title">u</span>$<span class="title">i</span> -<span class="title">G</span> <span class="title">class</span></span></span><br><span class="line"><span class="class"><span class="title">echo</span> 123|<span class="title">passwd</span> --<span class="title">stdin</span> <span class="title">u</span>$<span class="title">i</span></span></span><br><span class="line"><span class="class"><span class="title">done</span></span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class">方法三：</span></span><br><span class="line"><span class="class">#!/<span class="title">bin</span>/<span class="title">bash</span></span></span><br><span class="line"><span class="class"><span class="title">grep</span> -<span class="title">w</span> <span class="title">class</span> /<span class="title">etc</span>/<span class="title">group</span> &amp;&gt;/<span class="title">dev</span>/<span class="title">null</span></span></span><br><span class="line"><span class="class"><span class="title">test</span> $? -<span class="title">ne</span> 0 &amp;&amp; <span class="title">groupadd</span> <span class="title">class</span></span></span><br><span class="line"><span class="class">或者</span></span><br><span class="line"><span class="class"><span class="title">groupadd</span> <span class="title">class</span> &amp;&gt;/<span class="title">dev</span>/<span class="title">null</span></span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class"><span class="title">for</span> ((<span class="title">i</span>=1;<span class="title">i</span>&lt;=5;<span class="title">i</span>++))</span></span><br><span class="line"><span class="class"><span class="title">do</span></span></span><br><span class="line"><span class="class"><span class="title">useradd</span> -<span class="title">G</span> <span class="title">class</span> <span class="title">u</span>$<span class="title">i</span> &amp;&amp; <span class="title">echo</span> 123|<span class="title">passwd</span> --<span class="title">stdin</span> <span class="title">u</span>$<span class="title">i</span></span></span><br><span class="line"><span class="class"><span class="title">done</span></span></span><br><span class="line"><span class="class"></span></span><br></pre></td></tr></table></figure><h3 id="批量创建用户-1"><a href="#批量创建用户-1" class="headerlink" title="批量创建用户"></a>批量创建用户</h3><p>**需求1:**批量新建5个用户stu1~stu5，要求这几个用户的家目录都在/rhome.</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/bin/bash</span></span><br><span class="line"><span class="comment">#判断/rhome是否存在</span></span><br><span class="line">[ -<span class="type">f</span> /<span class="type">rhome</span> ] &amp;&amp; <span class="built_in">mv</span> /rhome /rhome.bak</span><br><span class="line">test ! <span class="operator">-f</span> /rhome <span class="literal">-a</span> ! <span class="literal">-d</span> /rhome &amp;&amp; mkdir /rhome</span><br><span class="line">或者</span><br><span class="line">[ -<span class="type">f</span> /<span class="type">rhome</span> ] &amp;&amp; <span class="built_in">mv</span> /rhome /rhome.bak || [ ! -<span class="type">d</span> /<span class="type">rhome</span> ] &amp;&amp; mkdir /rhome </span><br><span class="line"><span class="comment">#创建用户，循环5次</span></span><br><span class="line"><span class="keyword">for</span> ((i=<span class="number">1</span>;i&lt;=<span class="number">5</span>;i++))</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">useradd <span class="literal">-d</span> /rhome/stu<span class="variable">$i</span> stu<span class="variable">$i</span></span><br><span class="line"><span class="built_in">echo</span> <span class="number">123</span>|passwd <span class="literal">--stdin</span> stu<span class="variable">$i</span></span><br><span class="line">done</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="局域网内脚本检查主机网络通讯"><a href="#局域网内脚本检查主机网络通讯" class="headerlink" title="局域网内脚本检查主机网络通讯"></a>局域网内脚本检查主机网络通讯</h3><p><strong>需求2：</strong></p><p>写一个脚本，局域网内，把能ping通的IP和不能ping通的IP分类，并保存到两个文本文件里</p><p>以10.1.1.1~10.1.1.10为例</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/bin/bash</span></span><br><span class="line"><span class="comment">#定义变量</span></span><br><span class="line">ip=<span class="number">10.1</span>.<span class="number">1</span></span><br><span class="line"><span class="comment">#循环去ping主机的IP</span></span><br><span class="line"><span class="keyword">for</span> ((i=<span class="number">1</span>;i&lt;=<span class="number">10</span>;i++))</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">ping <span class="literal">-c1</span> <span class="variable">$ip</span>.<span class="variable">$i</span> &amp;&gt;/dev/null</span><br><span class="line"><span class="keyword">if</span> [ <span class="variable">$</span>? -<span class="type">eq</span> <span class="number">0</span> ];then</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$ip</span>.<span class="variable">$i</span> is ok&quot;</span> &gt;&gt; /tmp/ip_up.txt</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$ip</span>.<span class="variable">$i</span> is down&quot;</span> &gt;&gt; /tmp/ip_down.txt</span><br><span class="line">fi</span><br><span class="line">或者</span><br><span class="line">[ <span class="variable">$</span>? -<span class="type">eq</span> <span class="number">0</span> ] &amp;&amp; <span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$ip</span>.<span class="variable">$i</span> is ok&quot;</span> &gt;&gt; /tmp/ip_up.txt || <span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$ip</span>.<span class="variable">$i</span> is down&quot;</span> &gt;&gt; /tmp/ip_down.txt</span><br><span class="line">done</span><br><span class="line"></span><br><span class="line">[<span class="type">root</span>@<span class="type">server</span> <span class="type">shell03</span>]<span class="comment"># time ./ping.sh         </span></span><br><span class="line"></span><br><span class="line">real    <span class="number">0</span>m24.<span class="number">129</span>s</span><br><span class="line">user    <span class="number">0</span>m0.<span class="number">006</span>s</span><br><span class="line">sys     <span class="number">0</span>m0.<span class="number">005</span>s</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>延伸扩展：shell脚本并发</strong></p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">并行执行：</span><br><span class="line">&#123;程序&#125;&amp;表示将程序放到后台并行执行，如果需要等待程序执行完毕再进行下面内容，需要加wait</span><br><span class="line"></span><br><span class="line"><span class="comment">#!/bin/bash</span></span><br><span class="line"><span class="comment">#定义变量</span></span><br><span class="line">ip=<span class="number">10.1</span>.<span class="number">1</span></span><br><span class="line"><span class="comment">#循环去ping主机的IP</span></span><br><span class="line"><span class="keyword">for</span> ((i=<span class="number">1</span>;i&lt;=<span class="number">10</span>;i++))</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">        ping <span class="literal">-c1</span> <span class="variable">$ip</span>.<span class="variable">$i</span> &amp;&gt;/dev/null</span><br><span class="line">        <span class="keyword">if</span> [ <span class="variable">$</span>? -<span class="type">eq</span> <span class="number">0</span> ];then</span><br><span class="line">                <span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$ip</span>.<span class="variable">$i</span> is ok&quot;</span> &gt;&gt; /tmp/ip_up.txt</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">                <span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$ip</span>.<span class="variable">$i</span> is down&quot;</span> &gt;&gt; /tmp/ip_down.txt</span><br><span class="line">        fi</span><br><span class="line">&#125;&amp;</span><br><span class="line">done</span><br><span class="line">wait</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;ip is ok....&quot;</span></span><br><span class="line"></span><br><span class="line">[<span class="type">root</span>@<span class="type">server</span> ~]<span class="comment"># time ./ping.sh </span></span><br><span class="line">ip is ok...</span><br><span class="line"></span><br><span class="line">real    <span class="number">0</span>m3.<span class="number">091</span>s</span><br><span class="line">user    <span class="number">0</span>m0.<span class="number">001</span>s</span><br><span class="line">sys     <span class="number">0</span>m0.<span class="number">008</span>s</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> shell </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>shell判断</title>
      <link href="/posts/f09a.html"/>
      <url>/posts/f09a.html</url>
      
        <content type="html"><![CDATA[<h2 id="判断"><a href="#判断" class="headerlink" title="判断"></a>判断</h2><p>条件判断语法格式（只作判断）</p><ul><li>格式1： <strong>test</strong> 条件表达式</li><li>格式2： <strong>[</strong> 条件表达式 ]   </li><li>格式3： <strong>[[</strong> 条件表达式 ]]  支持正则<br>注意，中括号两边都需要空格隔开；更详细的使用<code>man test</code>看文档。</li></ul><h3 id="判断文件类型"><a href="#判断文件类型" class="headerlink" title="判断文件类型"></a>判断文件类型</h3><table><thead><tr><th>判断参数</th><th>含义</th></tr></thead><tbody><tr><td><code>-e</code></td><td>判断文件是否存在（任何类型文件）</td></tr><tr><td>-f</td><td>判断文件是否存在<code>并且</code>是一个普通文件</td></tr><tr><td>-d</td><td>判断文件是否存在并且是一个目录</td></tr><tr><td>-L</td><td>判断文件是否存在并且是一个软连接文件</td></tr><tr><td>-b</td><td>判断文件是否存在并且是一个块设备文件</td></tr><tr><td>-S</td><td>判断文件是否存在并且是一个套接字文件</td></tr><tr><td>-c</td><td>判断文件是否存在并且是一个字符设备文件</td></tr><tr><td>-p</td><td>判断文件是否存在并且是一个命名管道文件</td></tr><tr><td><code>-s</code></td><td>判断文件是否存在并且是一个非空文件（有内容）</td></tr></tbody></table><p>例子1</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">判断当前目录下有没有  file  这个文件</span><br><span class="line">[root@localhost ~]# test -e ./file</span><br><span class="line">---没输出任何东西，这是正常的---</span><br><span class="line"></span><br><span class="line">查看是否有这个文件</span><br><span class="line">[root@localhost ~]#echo $?</span><br><span class="line">0</span><br><span class="line">---显示 0 表示true（存在），显示 1 表示 false （不存在）---</span><br></pre></td></tr></table></figure><p>例子2</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">---判断是否有这个文件夹，并且输出提示</span><br><span class="line">[root@localhost ~]#  [ -d ./dir ] ;echo $?</span><br><span class="line">0</span><br></pre></td></tr></table></figure><h3 id="判断文件权限"><a href="#判断文件权限" class="headerlink" title="判断文件权限"></a>判断文件权限</h3><table><thead><tr><th>判断参数</th><th>含义</th></tr></thead><tbody><tr><td>-r</td><td>当前用户对其是否可读</td></tr><tr><td>-w</td><td>当前用户对其是否可写</td></tr><tr><td>-x</td><td>当前用户对其是否可执行</td></tr><tr><td>-u</td><td>是否有suid，高级权限冒险位</td></tr><tr><td>-g</td><td>是否sgid，高级权限强制位</td></tr><tr><td>-k</td><td>是否有t位，高级权限粘滞位</td></tr></tbody></table><h3 id="判断文件新旧"><a href="#判断文件新旧" class="headerlink" title="判断文件新旧"></a>判断文件新旧</h3><p>说明：这里的新旧指的是<code>文件的修改时间</code>。</p><table><thead><tr><th>判断参数</th><th>含义</th></tr></thead><tbody><tr><td>file1 -nt  file2</td><td>比较file1是否比file2新</td></tr><tr><td>file1 -ot  file2</td><td>比较file1是否比file2旧</td></tr><tr><td>file1 -ef  file2</td><td>比较是否为同一个文件，或者用于判断硬连接，是否指向同一个inode</td></tr></tbody></table><h3 id="判断整数"><a href="#判断整数" class="headerlink" title="判断整数"></a>判断整数</h3><table><thead><tr><th>判断参数</th><th>含义</th></tr></thead><tbody><tr><td>-eq</td><td>相等</td></tr><tr><td>-ne</td><td>不等</td></tr><tr><td>-gt</td><td>大于</td></tr><tr><td>-lt</td><td>小于</td></tr><tr><td>-ge</td><td>大于等于</td></tr><tr><td>-le</td><td>小于等于</td></tr></tbody></table><h3 id="判断字符串"><a href="#判断字符串" class="headerlink" title="判断字符串"></a>判断字符串</h3><table><thead><tr><th>判断参数</th><th>含义</th></tr></thead><tbody><tr><td>-z</td><td>判断是否为<code>空</code>字符串，字符串长度为0则成立</td></tr><tr><td>-n</td><td>判断是否为<code>非空</code>字符串，字符串长度不为0则成立</td></tr><tr><td>string1 = string2</td><td>判断字符串是否相等</td></tr><tr><td>string1 != string2</td><td>判断字符串是否相不等</td></tr></tbody></table><h3 id="多重条件判断"><a href="#多重条件判断" class="headerlink" title="多重条件判断"></a>多重条件判断</h3><table><thead><tr><th>判断符号</th><th>含义</th><th>举例</th></tr></thead><tbody><tr><td>-a 和 &amp;&amp;</td><td>逻辑与 (and)</td><td>[ 1 -eq 1 -a 1 -ne 0 ]     [ 1 -eq 1 ] &amp;&amp; [ 1 -ne 0 ]</td></tr><tr><td>-o 和 ||</td><td>逻辑或 (or)</td><td>[ 1 -eq 1 -o 1 -ne 1 ]</td></tr></tbody></table><p><strong>特别说明：</strong></p><p>&amp;&amp;    前面的表达式为<code>真</code>，才会执行后面的代码</p><p>||     前面的表达式为<code>假</code>，才会执行后面的代码</p><p>;         只用于分割命令或表达式</p><h4 id="举例说明"><a href="#举例说明" class="headerlink" title="举例说明"></a>举例说明</h4><ul><li>数值比较</li></ul><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">server</span> ~]<span class="comment"># [ $(id -u) -eq 0 ] &amp;&amp; echo &quot;the user is admin&quot;</span></span><br><span class="line">[<span class="type">root</span>@<span class="type">server</span> ~]<span class="variable">$</span> [ <span class="variable">$</span>(<span class="type">id</span> -<span class="type">u</span>) -<span class="type">ne</span> <span class="number">0</span> ] &amp;&amp; <span class="built_in">echo</span> <span class="string">&quot;the user is not admin&quot;</span></span><br><span class="line">[<span class="type">root</span>@<span class="type">server</span> ~]<span class="variable">$</span> [ <span class="variable">$</span>(<span class="type">id</span> -<span class="type">u</span>) -<span class="type">eq</span> <span class="number">0</span> ] &amp;&amp; <span class="built_in">echo</span> <span class="string">&quot;the user is admin&quot;</span> || <span class="built_in">echo</span> <span class="string">&quot;the user is not admin&quot;</span></span><br><span class="line"></span><br><span class="line">[<span class="type">root</span>@<span class="type">server</span> ~]<span class="comment"># uid=`id -u`</span></span><br><span class="line">[<span class="type">root</span>@<span class="type">server</span> ~]<span class="comment"># test $uid -eq 0 &amp;&amp; echo this is admin</span></span><br><span class="line">this is admin</span><br><span class="line">[<span class="type">root</span>@<span class="type">server</span> ~]<span class="comment"># [ $(id -u) -ne 0 ]  || echo this is admin</span></span><br><span class="line">this is admin</span><br><span class="line">[<span class="type">root</span>@<span class="type">server</span> ~]<span class="comment"># [ $(id -u) -eq 0 ]  &amp;&amp; echo this is admin || echo this is not admin</span></span><br><span class="line">this is admin</span><br><span class="line">[<span class="type">root</span>@<span class="type">server</span> ~]<span class="comment"># su - stu1</span></span><br><span class="line">[<span class="type">stu1</span>@<span class="type">server</span> ~]<span class="variable">$</span> [ <span class="variable">$</span>(<span class="type">id</span> -<span class="type">u</span>) -<span class="type">eq</span> <span class="number">0</span> ]  &amp;&amp; <span class="built_in">echo</span> this is admin || <span class="built_in">echo</span> this is not admin</span><br><span class="line">this is not admin</span><br></pre></td></tr></table></figure><ul><li>类C风格的数值比较</li></ul><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">注意：在(( ))中，=表示赋值；==表示判断</span><br><span class="line">[<span class="type">root</span>@<span class="type">server</span> ~]<span class="comment"># ((1==2));echo $?</span></span><br><span class="line">[<span class="type">root</span>@<span class="type">server</span> ~]<span class="comment"># ((1&lt;2));echo $?</span></span><br><span class="line">[<span class="type">root</span>@<span class="type">server</span> ~]<span class="comment"># ((2&gt;=1));echo $?</span></span><br><span class="line">[<span class="type">root</span>@<span class="type">server</span> ~]<span class="comment"># ((2!=1));echo $?</span></span><br><span class="line">[<span class="type">root</span>@<span class="type">server</span> ~]<span class="comment"># ((`id -u`==0));echo $?</span></span><br><span class="line"> </span><br><span class="line">[<span class="type">root</span>@<span class="type">server</span> ~]<span class="comment"># ((a=123));echo $a</span></span><br><span class="line">[<span class="type">root</span>@<span class="type">server</span> ~]<span class="comment"># unset a</span></span><br><span class="line">[<span class="type">root</span>@<span class="type">server</span> ~]<span class="comment"># ((a==123));echo $?</span></span><br></pre></td></tr></table></figure><ul><li>字符串比较</li></ul><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">注意：双引号引起来，看作一个整体；= 和 == 在 [ 字符串 ] 比较中都表示判断</span><br><span class="line">[<span class="type">root</span>@<span class="type">server</span> ~]<span class="comment"># a=&#x27;hello world&#x27;;b=world</span></span><br><span class="line">[<span class="type">root</span>@<span class="type">server</span> ~]<span class="comment"># [ $a = $b ];echo $?</span></span><br><span class="line">[<span class="type">root</span>@<span class="type">server</span> ~]<span class="comment"># [ &quot;$a&quot; = &quot;$b&quot; ];echo $?</span></span><br><span class="line">[<span class="type">root</span>@<span class="type">server</span> ~]<span class="comment"># [ &quot;$a&quot; != &quot;$b&quot; ];echo $?</span></span><br><span class="line">[<span class="type">root</span>@<span class="type">server</span> ~]<span class="comment"># [ &quot;$a&quot; !== &quot;$b&quot; ];echo $?        错误</span></span><br><span class="line">[<span class="type">root</span>@<span class="type">server</span> ~]<span class="comment"># [ &quot;$a&quot; == &quot;$b&quot; ];echo $?</span></span><br><span class="line">[<span class="type">root</span>@<span class="type">server</span> ~]<span class="comment"># test &quot;$a&quot; != &quot;$b&quot;;echo $?</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">test  表达式</span><br><span class="line">[ 表达式 ]</span><br><span class="line">[[ 表达式 ]]</span><br><span class="line"></span><br><span class="line">思考：[ ] 和 [[ ]] 有什么区别？</span><br><span class="line"></span><br><span class="line">[<span class="type">root</span>@<span class="type">server</span> ~]<span class="comment"># a=</span></span><br><span class="line">[<span class="type">root</span>@<span class="type">server</span> ~]<span class="comment"># test -z $a;echo $?</span></span><br><span class="line">[<span class="type">root</span>@<span class="type">server</span> ~]<span class="comment"># a=hello</span></span><br><span class="line">[<span class="type">root</span>@<span class="type">server</span> ~]<span class="comment"># test -z $a;echo $?</span></span><br><span class="line">[<span class="type">root</span>@<span class="type">server</span> ~]<span class="comment"># test -n $a;echo $?</span></span><br><span class="line">[<span class="type">root</span>@<span class="type">server</span> ~]<span class="comment"># test -n &quot;$a&quot;;echo $?</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># [ &#x27;&#x27; = $a ];echo $?</span></span><br><span class="line"><span class="literal">-bash</span>: [: : <span class="type">unary</span> <span class="type">operator</span> <span class="type">expected</span></span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="comment"># [[ &#x27;&#x27; = $a ]];echo $?</span></span><br><span class="line"><span class="number">0</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">[<span class="type">root</span>@<span class="type">server</span> ~]<span class="comment"># [ 1 -eq 0 -a 1 -ne 0 ];echo $?</span></span><br><span class="line">[<span class="type">root</span>@<span class="type">server</span> ~]<span class="comment"># [ 1 -eq 0 &amp;&amp; 1 -ne 0 ];echo $?</span></span><br><span class="line">[<span class="type">root</span>@<span class="type">server</span> ~]<span class="comment"># [[ 1 -eq 0 &amp;&amp; 1 -ne 0 ]];echo $?</span></span><br></pre></td></tr></table></figure><h4 id="逻辑运算符总结"><a href="#逻辑运算符总结" class="headerlink" title="逻辑运算符总结"></a>逻辑运算符总结</h4><ol><li>符号;和&amp;&amp;和||都可以用来分割命令或者表达式</li><li>分号（;）完全不考虑前面的语句是否正确执行，都会执行;号后面的内容</li><li><code>&amp;&amp;</code>符号，需要考虑&amp;&amp;前面的语句的正确性，前面语句正确执行才会执行&amp;&amp;后的内容；反之亦然</li><li><code>||</code>符号，需要考虑||前面的语句的非正确性，前面语句执行错误才会执行||后内容；反之亦然</li><li>如果&amp;&amp;和||一起出现，从左往右依次看，按照以上原则</li></ol><h3 id="流程控制语句"><a href="#流程控制语句" class="headerlink" title="流程控制语句"></a>流程控制语句</h3><h4 id="if结构"><a href="#if结构" class="headerlink" title="if结构"></a>if结构</h4><p><strong>F</strong>:表示false，为假；<strong>T</strong>:表示true，为真</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> [ <span class="type">condition</span> ];then</span><br><span class="line">command</span><br><span class="line">command</span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line"><span class="literal">---</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> test 条件;then</span><br><span class="line">命令</span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line"><span class="literal">---</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> [[ 条件 ]];then</span><br><span class="line">命令</span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line">[ 条件 ] &amp;&amp; command</span><br></pre></td></tr></table></figure><h4 id="if…else结构"><a href="#if…else结构" class="headerlink" title="if…else结构"></a>if…else结构</h4><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> [ <span class="type">condition</span> ];then</span><br><span class="line">command1</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">command2</span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line">[ 条件 ] &amp;&amp; command1 || command2</span><br></pre></td></tr></table></figure><h4 id="if…elif…else结构"><a href="#if…elif…else结构" class="headerlink" title="if…elif…else结构"></a>if…elif…else结构</h4><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> [ <span class="type">condition1</span> ];then</span><br><span class="line">command1  结束</span><br><span class="line">elif [ <span class="type">condition2</span> ];then</span><br><span class="line">command2   结束</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">command3</span><br><span class="line">fi</span><br><span class="line">注释：</span><br><span class="line">如果条件<span class="number">1</span>满足，执行命令<span class="number">1</span>后结束；如果条件<span class="number">1</span>不满足，再看条件<span class="number">2</span>，如果条件<span class="number">2</span>满足执行命令<span class="number">2</span>后结束；如果条件<span class="number">1</span>和条件<span class="number">2</span>都不满足执行命令<span class="number">3</span>结束.</span><br></pre></td></tr></table></figure><h4 id="例子，案例1"><a href="#例子，案例1" class="headerlink" title="例子，案例1"></a>例子，案例1</h4><blockquote><p>判断两台主机是否ping通</p></blockquote><h5 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h5><ol><li>使用哪个命令实现  <code>ping -c次数</code></li><li>根据命令的==执行结果状态==来判断是否通<code>$?</code></li><li>根据逻辑和语法结构来编写脚本(条件判断或者流程控制)<h5 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h5><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/bin/env bash</span></span><br><span class="line"><span class="comment"># 该脚本用于判断当前主机是否和远程指定主机互通</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 交互式定义变量，让用户自己决定ping哪个主机</span></span><br><span class="line">read <span class="literal">-p</span> <span class="string">&quot;请输入你要ping的主机的IP:&quot;</span> ip</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用ping程序判断主机是否互通</span></span><br><span class="line">ping <span class="literal">-c1</span> <span class="variable">$ip</span> &amp;&gt;/dev/null</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> [ <span class="variable">$</span>? -<span class="type">eq</span> <span class="number">0</span> ];then</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;当前主机和远程主机<span class="variable">$ip</span>是互通的&quot;</span></span><br><span class="line"> <span class="keyword">else</span></span><br><span class="line"> <span class="built_in">echo</span> <span class="string">&quot;当前主机和远程主机<span class="variable">$ip</span>不通的&quot;</span></span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line"><span class="comment"># 逻辑运算符</span></span><br><span class="line"><span class="comment"># test $? -eq 0 &amp;&amp;  echo &quot;当前主机和远程主机$ip是互通的&quot; || echo &quot;当前主机和远程主机$ip不通的&quot;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="例子，案例2"><a href="#例子，案例2" class="headerlink" title="例子，案例2"></a>例子，案例2</h4><blockquote><p>判断一个进程是否存在</p></blockquote><h5 id="思路-1"><a href="#思路-1" class="headerlink" title="思路"></a>思路</h5></li><li>查看进程的相关命令   ps   pgrep</li><li>根据命令的返回状态值来判断进程是否存在</li><li>根据逻辑用脚本语言实现</li></ol><h5 id="落地实现"><a href="#落地实现" class="headerlink" title="落地实现"></a>落地实现</h5><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/bin/env bash</span></span><br><span class="line"><span class="comment"># 判断一个程序(httpd)的进程是否存在</span></span><br><span class="line">pgrep httpd &amp;&gt;/dev/null</span><br><span class="line"><span class="keyword">if</span> [ <span class="variable">$</span>? -<span class="type">ne</span> <span class="number">0</span> ];then</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;当前httpd进程不存在&quot;</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;当前httpd进程存在&quot;</span></span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line">或者</span><br><span class="line">test <span class="variable">$</span>? <span class="operator">-eq</span> <span class="number">0</span> &amp;&amp; <span class="built_in">echo</span> <span class="string">&quot;当前httpd进程存在&quot;</span> || <span class="built_in">echo</span> <span class="string">&quot;当前httpd进程不存在&quot;</span></span><br></pre></td></tr></table></figure><p>补充命令</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">pgrep命令：以名称为依据从运行进程队列中查找进程，并显示查找到的进程id</span><br><span class="line">选项</span><br><span class="line"><span class="literal">-o</span>：仅显示找到的最小（起始）进程号;</span><br><span class="line"><span class="literal">-n</span>：仅显示找到的最大（结束）进程号；</span><br><span class="line"><span class="literal">-l</span>：显示进程名称；</span><br><span class="line"><span class="literal">-P</span>：指定父进程号；pgrep <span class="literal">-p</span> <span class="number">4764</span>  查看父进程下的子进程id</span><br><span class="line"><span class="literal">-g</span>：指定进程组；</span><br><span class="line"><span class="literal">-t</span>：指定开启进程的终端；</span><br><span class="line"><span class="literal">-u</span>：指定进程的有效用户ID。</span><br></pre></td></tr></table></figure><h4 id="例子，案例3"><a href="#例子，案例3" class="headerlink" title="例子，案例3"></a>例子，案例3</h4><p>需求：判断门户网站是否能够正常访问</p><h5 id="思路-2"><a href="#思路-2" class="headerlink" title="思路"></a>思路</h5><ol><li>可以判断进程是否存在，用/etc/init.d/httpd status判断状态等方法</li><li>最好的方法是 直接去访问 一下，通过访问成功和失败的返回值来判断<ul><li>Linux环境，wget  curl  elinks -dump</li></ul></li></ol><h5 id="实现-1"><a href="#实现-1" class="headerlink" title="实现"></a>实现</h5><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/bin/env bash</span></span><br><span class="line"><span class="comment"># 判断门户网站是否能够正常提供服务</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#定义变量</span></span><br><span class="line">web_server=pengyirui.gitee.io</span><br><span class="line"><span class="comment">#访问网站</span></span><br><span class="line"><span class="built_in">wget</span> <span class="literal">-P</span> /shell/ <span class="variable">$web_server</span> &amp;&gt;/dev/null</span><br><span class="line">[ <span class="variable">$</span>? -<span class="type">eq</span> <span class="number">0</span> ] &amp;&amp; <span class="built_in">echo</span> <span class="string">&quot;当前网站服务是ok&quot;</span> &amp;&amp; <span class="built_in">rm</span> <span class="operator">-f</span> /shell/index.* || <span class="built_in">echo</span> <span class="string">&quot;当前网站服务不ok，请立刻处理&quot;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> shell </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>mysql主主、从同步</title>
      <link href="/posts/4fe2.html"/>
      <url>/posts/4fe2.html</url>
      
        <content type="html"><![CDATA[<h3 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h3><p>master服务器将数据的改变记录二进制binlog日志，当master上的数据发生改变时，则将其改变写入二进制日志中；<br>slave服务器会在一定时间间隔内对master二进制日志进行探测其是否发生改变，如果发生改变，则开始一个I/O Thread请求master二进制事件，同时主节点为每个I/O线程启动一个dump线程，用于向其发送二进制事件，并保存至从节点本地的中继日志中，从节点将启动SQL线程从中继日志中读取二进制日志，在本地重放，使得其数据和主节点的保持一致，最后I/O Thread和SQL Thread将进入睡眠状态，等待下一次被唤醒。</p><h3 id="操作"><a href="#操作" class="headerlink" title="操作"></a>操作</h3><p>修改配置文件</p><h4 id="配置1"><a href="#配置1" class="headerlink" title="配置1"></a>配置1</h4><p>以下是192.168.241.22的配置<br>vim /etc/my.cnf</p><ul><li><p>在<code>[mysqld]</code>后追加</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">server-id = 1        </span><br><span class="line">log-bin = mysql-bin  </span><br><span class="line">binlog-ignore-db = mysql,information_schema</span><br><span class="line">sync_binlog = 1</span><br><span class="line">binlog_checksum = none</span><br><span class="line">binlog_format = mixed</span><br><span class="line">auto-increment-increment = 2    </span><br><span class="line">auto-increment-offset = 1   </span><br><span class="line">slave-skip-errors = all</span><br></pre></td></tr></table></figure></li><li><p>然后重启</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">service mysqld restart</span><br><span class="line">或</span><br><span class="line">/etc/init.d/mysqld restart</span><br></pre></td></tr></table></figure></li></ul><p>数据同步授权（iptables防火墙开启3306端口，要确保对方机器能使用下面权限连接到本机mysql）<br>都是填写对方的用户名、IP、密码</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; grant replication slave,replication client on *.* to root@&#x27;192.168.241.33&#x27; identified by &quot;1234&quot;;</span><br><span class="line"></span><br><span class="line">mysql&gt; flush privileges;</span><br></pre></td></tr></table></figure><ul><li>最好将库锁住，仅仅允许读，以保证数据一致性；待主主同步环境部署后再解锁；锁住后，就不能往表里写数据，但是重启mysql服务后就会自动解锁！<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># 注意该参数设置后，如果自己同步对方数据，同步前一定要记得先解锁！</span><br><span class="line">mysql&gt; FLUSH TABLES WITH READ LOCK;    </span><br><span class="line"></span><br><span class="line"># 显示表，记着上面的参数</span><br><span class="line">mysql&gt; show master status;</span><br></pre></td></tr></table></figure></li></ul><hr><h4 id="配置2"><a href="#配置2" class="headerlink" title="配置2"></a>配置2</h4><p>以下是192.168.241.33的配置</p><ul><li><p>修改配置文件，在<code>[mysqld]</code>后追加<br>vim /etc/my.cnf</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">server-id = 2       </span><br><span class="line">log-bin = mysql-bin  </span><br><span class="line">binlog-ignore-db = mysql,information_schema</span><br><span class="line">sync_binlog = 1</span><br><span class="line">binlog_checksum = none</span><br><span class="line">binlog_format = mixed</span><br><span class="line">auto-increment-increment = 2    </span><br><span class="line">auto-increment-offset = 2   </span><br><span class="line">slave-skip-errors = all</span><br></pre></td></tr></table></figure></li><li><p>重启mysql</p></li><li><p>数据同步授权<br>iptables防火墙开启3306端口，要确保对方机器能使用下面权限连接到本机mysql<br>同理，slave也要授权给master机器远程同步数据的权限</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; grant replication slave ,replication client on *.* to root@&#x27;192.168.241.22&#x27; identified by &quot;1234&quot;;  </span><br><span class="line">mysql&gt; flush privileges;</span><br><span class="line">mysql&gt; FLUSH TABLES WITH READ LOCK;</span><br><span class="line">mysql&gt; show master status;</span><br></pre></td></tr></table></figure></li></ul><h4 id="执行主张同步操作"><a href="#执行主张同步操作" class="headerlink" title="执行主张同步操作"></a>执行主张同步操作</h4><p>两台机器都需要执行以下操作，区别在于都需要写对方的数据</p><p>先在slave数据库上做同步master的设置。（确保slave上要同步的数据，提前在master上存在。最好双方数据保持一致）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; unlock tables;     //先解锁，将对方数据同步到自己的数据库中</span><br><span class="line">mysql&gt; stop slave;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 这里填写的数据是对方查出来的 show master status 表</span><br><span class="line">mysql&gt; change master to master_host=&#x27;192.168.241.22&#x27;,master_user=&#x27;root&#x27;,master_password=&#x27;1234&#x27;,master_log_file=&#x27;mysql-bin.000001&#x27;,master_log_pos=612;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">mysql&gt; start slave;</span><br><span class="line">mysql&gt; show slave status \G;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> SQL </tag>
            
            <tag> 运维记录 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>新装CentOS7需要做的事</title>
      <link href="/posts/1c86.html"/>
      <url>/posts/1c86.html</url>
      
        <content type="html"><![CDATA[<h3 id="配置网络"><a href="#配置网络" class="headerlink" title="配置网络"></a>配置网络</h3><h4 id="VMnet8-设置静态-IP"><a href="#VMnet8-设置静态-IP" class="headerlink" title="VMnet8 设置静态 IP"></a>VMnet8 设置静态 IP</h4><p>本地IP设置成静态<br><img src="https://raw.githubusercontent.com/pengyirui/blog_img/main/2020-09-10-01.png"></p><h4 id="Centos-网络设配器为-NAT-模式"><a href="#Centos-网络设配器为-NAT-模式" class="headerlink" title="Centos 网络设配器为 NAT 模式"></a>Centos 网络设配器为 NAT 模式</h4><p>NAT 模式<br><img src="https://raw.githubusercontent.com/pengyirui/blog_img/main/2020-09-10-02.png"></p><h4 id="VMware-虚拟网络设置"><a href="#VMware-虚拟网络设置" class="headerlink" title="VMware 虚拟网络设置"></a>VMware 虚拟网络设置</h4><p>虚拟网络<br><img src="https://raw.githubusercontent.com/pengyirui/blog_img/main/2020-09-10-03.png"></p><h4 id="进入CentOS7，查看IP"><a href="#进入CentOS7，查看IP" class="headerlink" title="进入CentOS7，查看IP"></a>进入CentOS7，查看IP</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]# ip addr</span><br></pre></td></tr></table></figure><p>发现虚拟网卡是ens33</p><h4 id="修改ens33的ip地址"><a href="#修改ens33的ip地址" class="headerlink" title="修改ens33的ip地址"></a>修改ens33的ip地址</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]# vi /etc/sysconfig/network-scripts/ifcfg-ens33</span><br><span class="line"></span><br><span class="line"># 添加内容如下</span><br><span class="line">修改</span><br><span class="line">BOOTPROTO=static           #把动态获取IP修改为静态的</span><br><span class="line"></span><br><span class="line">新增</span><br><span class="line">IPADDR=192.168.5.100       # 设置 IP</span><br><span class="line">NETMASK=255.255.255.0      # 子网掩码</span><br><span class="line">GATEWAY=192.168.5.2        # 网关</span><br><span class="line">DNS1=192.168.5.2           # DNS</span><br><span class="line">ONBOOT=yes                 #重启后生效</span><br></pre></td></tr></table></figure><h4 id="重启-network"><a href="#重启-network" class="headerlink" title="重启 network"></a>重启 network</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]# systemctl restart network</span><br><span class="line">或者</span><br><span class="line">[root@localhost ~]# service network restart</span><br></pre></td></tr></table></figure><p>如果重启失败，尝试关闭NetworkManger服务，<code>然后再尝试重启network</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]# service NetworkManager stop      # 关闭服务</span><br><span class="line">[root@localhost ~]# chkconfig NetworkManager off     # 并且禁止开机启动</span><br></pre></td></tr></table></figure><h3 id="关闭防火墙"><a href="#关闭防火墙" class="headerlink" title="关闭防火墙"></a>关闭防火墙</h3><p>下面是red hat/CentOs7关闭防火墙的命令!</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">1:查看防火状态</span><br><span class="line">systemctl status firewalld</span><br><span class="line">service  iptables status</span><br><span class="line"></span><br><span class="line">2:暂时关闭防火墙</span><br><span class="line">systemctl stop firewalld</span><br><span class="line">service  iptables stop</span><br><span class="line"></span><br><span class="line">3:永久关闭防火墙</span><br><span class="line">systemctl disable firewalld</span><br><span class="line">chkconfig iptables off</span><br><span class="line"></span><br><span class="line">4:重启防火墙</span><br><span class="line">systemctl enable firewalld</span><br><span class="line">service iptables restart  </span><br></pre></td></tr></table></figure><p>如果不想关闭，只为开放端口</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># 关闭80端口</span><br><span class="line">/sbin/iptables -I INPUT -p tcp --dport 80 -j ACCEPT</span><br><span class="line"></span><br><span class="line"># 保存配置</span><br><span class="line">/etc/rc.d/init.d/iptables save</span><br></pre></td></tr></table></figure><p>如果不想关闭，只为开放服务</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># 放行cockpit服务</span><br><span class="line">firewall-cmd --add-service=cockpit --permanent</span><br><span class="line"></span><br><span class="line">firewall-cmd --reload</span><br></pre></td></tr></table></figure><h3 id="修改-hostname"><a href="#修改-hostname" class="headerlink" title="修改 hostname"></a>修改 hostname</h3><p>ssh 到 centos 设备，然后使用下面命令修改配置文件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@VM-20-10-centos ~]# sudo vi /etc/sysconfig/network</span><br></pre></td></tr></table></figure><p>可以看到文件的内容</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># Created by cloud-init on instance boot automatically, do not edit.</span><br><span class="line">#</span><br><span class="line">NETWORKING=yes</span><br></pre></td></tr></table></figure><p>追加数据<code>HOSTNAME=Peng</code><br>然后使用 wq！保存</p><p>然后修改 hosts 文件来匹配修改后的 hostname</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@VM-20-10-centos ~]# vi /etc/hosts</span><br></pre></td></tr></table></figure><p>修改成这样</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1 Peng Peng</span><br><span class="line">127.0.0.1 localhost.localdomain localhost</span><br><span class="line">127.0.0.1 localhost4.localdomain4 localhost4</span><br><span class="line"></span><br><span class="line">::1 Peng Peng</span><br><span class="line">::1 localhost.localdomain localhost</span><br><span class="line">::1 localhost6.localdomain6 localhost6</span><br></pre></td></tr></table></figure><p>然后使用 hostnamectl 命令来修改 hostname</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@VM-20-10-centos ~]# hostnamectl set-hostname Peng</span><br></pre></td></tr></table></figure><p>这时我们可以使用 hostname 命令来查看是否修改成功</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@VM-20-10-centos ~]# hostname</span><br><span class="line">peng</span><br></pre></td></tr></table></figure><p>最后使用下面的命令来重启 networking 设置来确认我们所做的修改是永久性的。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@VM-20-10-centos ~]# systemctl restart network.service</span><br><span class="line">[root@VM-20-10-centos ~]# systemctl restart systemd-hostnamed</span><br></pre></td></tr></table></figure><p>然后 logout 之后再 login 就是新的 hostname 了。</p>]]></content>
      
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> 运维记录 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux文件类型与文件属性</title>
      <link href="/posts/2bf0.html"/>
      <url>/posts/2bf0.html</url>
      
        <content type="html"><![CDATA[<h2 id="文件类型"><a href="#文件类型" class="headerlink" title="文件类型"></a>文件类型</h2><p>与window不同，Linux下万物皆文件（与万物皆对象类似）<br>Linux文件类型常见的有：普通文件、目录文件、字符设备文件和块设备文件、符号链接文件等，现在我们进行一个简要的说明。</p><h3 id="普通文件"><a href="#普通文件" class="headerlink" title="普通文件"></a>普通文件</h3><p>我们用 ls -lh 来查看某个文件的属性，可以看到有类似-rwxrwxrwx，值得注意的是第一个符号是 - ，这样的文件在Linux中就是普通文件。这些文件一般是用一些相关的应用程序创建，比如图像工具、文档工具、归档工具… …. 或 cp工具等。这类文件的删除方式是用rm 命令。 另外，依照文件的内容，又大略可以分为：</p><ol><li><p>纯文本档(ASCII)：<br>这是Linux系统中最多的一种文件类型，称为纯文本档是因为内容为我们人类可以直接读到的数据，例如数字、字母等等。 几乎只要我们可以用来做为设定的文件都属于这一种文件类型。 举例来说，你可以用命令： cat ~/.bashrc 来看到该文件的内容。 (cat 是将一个文件内容读出来的指令).</p></li><li><p>二进制文件(binary)：<br>Linux系统其实仅认识且可以执行二进制文件(binary file)。Linux当中的可执行文件(scripts, 文字型批处理文件不算)就是这种格式的文件。 刚刚使用的命令cat就是一个binary file。</p></li><li><p>数据格式文件(data)：<br>有些程序在运作的过程当中会读取某些特定格式的文件，那些特定格式的文件可以被称为数据文件 (data file)。举例来说，我们的Linux在使用者登录时，都会将登录的数据记录在 /var/log/wtmp那个文件内，该文件是一个data file，他能够透过last这个指令读出来！ 但是使用cat时，会读出乱码～因为他是属于一种特殊格式的文件？</p></li></ol><h3 id="目录文件"><a href="#目录文件" class="headerlink" title="目录文件"></a>目录文件</h3><p>当我们在某个目录下执行，看到有类似 drwxr-xr-x ，这样的文件就是目录，目录在Linux是一个比较特殊的文件。注意它的第一个字符是d。创建目录的命令可以用 mkdir 命令，或cp命令，cp可以把一个目录复制为另一个目录。删除用rm 或rmdir命令。 </p><h3 id="字符设备或块设备文件"><a href="#字符设备或块设备文件" class="headerlink" title="字符设备或块设备文件"></a>字符设备或块设备文件</h3><p>如时您进入/dev目录，列一下文件，会看到类似如下的:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]# ls -al /dev/tty</span><br><span class="line">crw-rw-rw- 1 root tty 5, 0 11-03 15:11 /dev/tty</span><br><span class="line"></span><br><span class="line">[root@localhost ~]# ls -la /dev/sda1</span><br><span class="line">brw-r----- 1 root disk 8, 1 11-03 07:11 /dev/sda1</span><br></pre></td></tr></table></figure><p>我们看到/dev/tty的属性是 crw-rw-rw- ，注意前面第一个字符是 c ，这表示字符设备文件。比如猫等串口设备。我们看到 /dev/sda1 的属性是 brw-r—– ，注意前面的第一个字符是b，这表示块设备，比如硬盘，光驱等设备。</p><p>这个种类的文件，是用mknode来创建，用rm来删除。目前在最新的Linux发行版本中，我们一般不用自己来创建设备文件。因为这些文件是和内核相关联的。</p><p>与系统周边及储存等相关的一些文件， 通常都集中在/dev这个目录之下！通常又分为两种：</p><ol><li><p>区块(block)设备档 ：<br>就是一些储存数据， 以提供系统随机存取的接口设备，举例来说，硬盘与软盘等就是啦！ 你可以随机的在硬盘的不同区块读写，这种装置就是成组设备！你可以自行查一下/dev/sda看看， 会发现第一个属性为[ b ]！</p></li><li><p>字符(character)设备文件：<br>亦即是一些串行端口的接口设备， 例如键盘、鼠标等等！这些设备的特色就是一次性读取的，不能够截断输出。 举例来说，你不可能让鼠标跳到另一个画面，而是滑动到另一个地方！第一个属性为 [ c ]。</p></li></ol><h3 id="数据接口文件-sockets-："><a href="#数据接口文件-sockets-：" class="headerlink" title="数据接口文件(sockets)："></a>数据接口文件(sockets)：</h3><p>数据接口文件（或者：套接口文件），这种类型的文件通常被用在网络上的数据承接了。我们可以启动一个程序来监听客户端的要求， 而客户端就可以透过这个socket来进行数据的沟通了。第一个属性为 [ s ]， 最常在/var/run这个目录中看到这种文件类型了。</p><p>例如：当我们启动MySQL服务器时，会产生一个mysql.sock的文件。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]# ls -lh /var/lib/mysql/mysql.sock </span><br><span class="line">srwxrwxrwx 1 mysql mysql 0 04-19 11:12 /var/lib/mysql/mysql.sock</span><br></pre></td></tr></table></figure><p>注意这个文件的属性的第一个字符是 s。</p><h3 id="符号链接文件："><a href="#符号链接文件：" class="headerlink" title="符号链接文件："></a>符号链接文件：</h3><p>当我们查看文件属性时，会看到有类似 lrwxrwxrwx,注意第一个字符是l，这类文件是链接文件。是通过ln -s 源文件名 新文件名 。上面是一个例子，表示setup.log是install.log的软链接文件。怎么理解呢？这和Windows操作系统中的快捷方式有点相似。</p><p>符号链接文件的创建方法举例:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost test]# ls -lh log2012.log</span><br><span class="line">-rw-r--r-- 1 root root 296K 11-13 06:03 log2012.log</span><br><span class="line">[root@localhost test]# ln -s log2012.log  linklog.log</span><br><span class="line"></span><br><span class="line">[root@localhost test]# ls -lh *.log</span><br><span class="line">lrwxrwxrwx 1 root root   11 11-22 06:58 linklog.log -&gt; log2012.log</span><br><span class="line">-rw-r--r-- 1 root root 296K 11-13 06:03 log2012.log</span><br></pre></td></tr></table></figure><h3 id="数据输送文件（FIFO-pipe）"><a href="#数据输送文件（FIFO-pipe）" class="headerlink" title="数据输送文件（FIFO,pipe）:"></a>数据输送文件（FIFO,pipe）:</h3><p>FIFO也是一种特殊的文件类型，他主要的目的在解决多个程序同时存取一个文件所造成的错误问题。 FIFO是first-in-first-out的缩写。第一个属性为[p] 。</p><h2 id="文件属性"><a href="#文件属性" class="headerlink" title="文件属性"></a>文件属性</h2><p>Linux 文件或目录的属性主要包括：文件或目录的  节点、种类、权限模式、链接数量、所归属的用户和用户组、最近访问或修改的时间等内容.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost test]# ls -lih</span><br><span class="line">总计 316K</span><br><span class="line">2095120 lrwxrwxrwx 1 root root   11 11-22 06:58 linklog.log -&gt; log2012.log</span><br><span class="line">2095112 -rw-r--r-- 1 root root 296K 11-13 06:03 log2012.log</span><br><span class="line">2095110 -rw-r--r-- 1 root root   61 11-13 06:03 log2013.log</span><br><span class="line">2095107 -rw-r--r-- 1 root root    0 11-13 06:03 log2014.log</span><br><span class="line">2095117 -rw-r--r-- 1 root root    0 11-13 06:06 log2015.log</span><br><span class="line">2095118 -rw-r--r-- 1 root root    0 11-16 14:41 log2016.log</span><br><span class="line">2095119 -rw-r--r-- 1 root root    0 11-16 14:43 log2017.log</span><br></pre></td></tr></table></figure><p>说明：<br>第一列：inode<br>第二列：文件种类和权限；<br>第三列： 硬链接个数；<br>第四列： 属主；<br>第五列：所归属的组；<br>第六列：文件或目录的大小；<br>第七列和第八列：最后访问或修改时间；<br>第九列：文件名或目录名</p><p>关于inode：<br>inode 译成中文就是索引节点。每个存储设备或存储设备的分区（存储设备是硬盘、软盘、U盘等等）被格式化为文件系统后，应该有两部份，一部份是inode，另一部份是Block，Block是用来存储数据用的。而inode呢，就是用来存储这些数 据的信息，这些信息包括文件大小、属主、归属的用户组、读写权限等。inode为每个文件进行信息索引，所以就有了inode的数值。操作系统根据指令， 能通过inode值最快的找到相对应的文件。</p><p>说白了就和mysql的索引类似。</p>]]></content>
      
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux 目录结构</title>
      <link href="/posts/d050.html"/>
      <url>/posts/d050.html</url>
      
        <content type="html"><![CDATA[<p>我们经常在linux要查找某个文件，但不知道放在哪里了，可以使用下面的一些命令来搜索：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">which  查看可执行文件的位置。</span><br><span class="line">whereis 查看文件的位置。 </span><br><span class="line">locate   配合数据库查看文件位置。</span><br><span class="line">find   实际搜寻硬盘查询文件名称。</span><br></pre></td></tr></table></figure><h3 id="Linux-目录结构"><a href="#Linux-目录结构" class="headerlink" title="Linux 目录结构"></a>Linux 目录结构</h3><p>对于每一个Linux学习者来说，了解Linux文件系统的目录结构，是学好Linux的至关重要的一步。<br>由于linux是开放源代码，各大公司和团体根据linux的核心代码做各自的操作，编程。这样就造成在根下的目录的不同。这样就造成个人不能使用他人的linux系统的PC。因为你根本不知道一些基本的配置，文件在哪里。。。这就造成了混乱。这就是FHS（Filesystem Hierarchy Standard ）机构诞生的原因。该机构是linux爱好者自发的组成的一个团体，主要是是对linux做一些基本的要求，不至于是操作者换一台主机就成了<code>linux</code>的‘文盲’。</p><p>根据FHS(<a href="http://www.pathname.com/fhs/)%E7%9A%84%E5%AE%98%E6%96%B9%E6%96%87%E4%BB%B6%E6%8C%87%E5%87%BA%EF%BC%8C">http://www.pathname.com/fhs/)的官方文件指出，</a> 他们的主要目的是希望让使用者可以了解到已安装软件通常放置于那个目录下， 所以他们希望独立的软件开发商、操作系统制作者、以及想要维护系统的用户，都能够遵循FHS的标准。 也就是说，FHS的重点在于规范每个特定的目录下应该要放置什么样子的数据而已。 这样做好处非常多，因为Linux操作系统就能够在既有的面貌下(目录架构不变)发展出开发者想要的独特风格。</p><table><thead><tr><th></th><th><strong>可分享的(shareable)</strong></th><th><strong>不可分享的(unshareable)</strong></th></tr></thead><tbody><tr><td><strong>不变的(static)</strong></td><td>/usr (软件放置处)</td><td>/etc (配置文件)</td></tr><tr><td></td><td>/opt (第三方协力软件)</td><td>/boot (开机与核心档)</td></tr><tr><td><strong>可变动的(variable)</strong></td><td>/var/mail (使用者邮件信箱)</td><td>/var/run (程序相关)</td></tr><tr><td></td><td>/var/spool/news (新闻组)</td><td>/var/lock (程序相关)</td></tr></tbody></table><h3 id="四种类型"><a href="#四种类型" class="headerlink" title="四种类型"></a>四种类型</h3><p><strong>1.</strong> <strong>可分享的：</strong><br>可以分享给其他系统挂载使用的目录，所以包括执行文件与用户的邮件等数据， 是能够分享给网络上其他主机挂载用的目录；</p><p><strong>2.</strong> <strong>不可分享的：</strong><br>自己机器上面运作的装置文件或者是与程序有关的socket文件等， 由于仅与自身机器有关，所以当然就不适合分享给其他主机了。</p><p><strong>3.</strong> <strong>不变的：</strong><br>有些数据是不会经常变动的，跟随着distribution而不变动。 例如函式库、文件说明文件、系统管理员所管理的主机服务配置文件等等；</p><p><strong>4.</strong> <strong>可变动的：</strong><br>经常改变的数据，例如登录文件、一般用户可自行收受的新闻组等。</p><p>事实上，FHS针对目录树架构仅定义出三层目录底下应该放置什么数据而已，分别是底下这三个目录的定义：</p><p><strong>/ (root, 根目录)：与开机系统有关；</strong></p><p><strong>/usr (unix software resource)：与软件安装/执行有关；</strong></p><p><strong>/var (variable)：与系统运作过程有关。</strong></p><h3 id="意义与内容"><a href="#意义与内容" class="headerlink" title="意义与内容"></a>意义与内容</h3><p>根目录 (/) 的意义与内容<br>FHS标准建议：根目录(/)所在分区应该越小越好， 且应用程序所安装的软件最好不要与根目录放在同一个分区内，保持根目录越小越好。 如此不但效能较佳，根目录所在的文件系统也较不容易发生问题。说白了，<code>就是根目录和Windows的C盘一个样</code>。</p><p>根据以上原因，FHS认为根目录(/)下应该包含如下子目录：</p><table><thead><tr><th><strong>目录</strong></th><th><strong>应放置档案内容</strong></th></tr></thead><tbody><tr><td>/bin</td><td>系统有很多放置执行档的目录，但/bin比较特殊。因为/bin放置的是在单人维护模式下还能够被操作的指令。在/bin底下的指令可以被root与一般帐号所使用，主要有：cat,chmod(修改权限), chown, date, mv, mkdir, cp, bash等等常用的指令。</td></tr><tr><td>/boot</td><td>主要放置开机会使用到的档案，包括Linux核心档案以及开机选单与开机所需设定档等等。Linux kernel常用的档名为：vmlinuz ，如果使用的是grub这个开机管理程式，则还会存在/boot/grub/这个目录。</td></tr><tr><td>/dev</td><td>在Linux系统上，任何装置与周边设备都是以档案的型态存在于这个目录当中。 只要通过存取这个目录下的某个档案，就等于存取某个装置。比要重要的档案有/dev/null, /dev/zero, /dev/tty , /dev/lp*, / dev/hd*, /dev/sd*等等</td></tr><tr><td>/etc</td><td>统主要的设定档几乎都放置在这个目录内，例如人员的帐号密码档、各种服务的启始档等等。 一般来说，这个目录下的各档案属性是可以让一般使用者查阅的，但是只有root有权力修改。 FHS建议不要放置可执行档(binary)在这个目录中。 比较重要的档案有：/etc/inittab, /etc/init.d/, /etc/modprobe.conf, /etc/X11/, /etc/fstab, /etc/sysconfig/等等。 另外，其下重要的目录有：/etc/init.d/ ：所有服务的预设启动script都是放在这里的，例如要启动或者关闭iptables的话： /etc/init.d/iptables start、/etc/init.d/ iptables stop<br />/etc/xinetd.d/ ：这就是所谓的super daemon管理的各项服务的设定档目录。<br />/etc/X11/ ：与X Window有关的各种设定档都在这里，尤其是xorg.conf或XF86Config这两个X Server的设定档</td></tr><tr><td>/home</td><td>这是系统预设的使用者家目录(home directory)。 在你新增一个一般使用者帐号时，预设的使用者家目录都会规范到这里来。比较重要的是，家目录有两种代号：<br />~ ：代表当前使用者的家目录，而 ~guest：则代表用户名为guest的家目录。</td></tr><tr><td>/lib</td><td>系统的函式库非常的多，而/lib放置的则是在开机时会用到的函式库，以及在/bin或/sbin底下的指令会呼叫的函式库而已 。 什么是函式库呢？妳可以将他想成是外挂，某些指令必须要有这些外挂才能够顺利完成程式的执行之意。 尤其重要的是/lib/modules/这个目录，因为该目录会放置核心相关的模组(驱动程式)。</td></tr><tr><td>/media</td><td>media是媒体的英文，顾名思义，这个/media底下放置的就是可移除的装置。 包括软碟、光碟、DVD等等装置都暂时挂载于此。 常见的档名有：/media/floppy, /media/cdrom等等。</td></tr><tr><td>/mnt</td><td>如果妳想要暂时挂载某些额外的装置，一般建议妳可以放置到这个目录中。在古早时候，这个目录的用途与/media相同啦。 只是有了/media之后，这个目录就用来暂时挂载用了。</td></tr><tr><td>/opt</td><td>这个是给第三方协力软体放置的目录 。 什么是第三方协力软体啊？举例来说，KDE这个桌面管理系统是一个独立的计画，不过他可以安装到Linux系统中，因此KDE的软体就建议放置到此目录下了。 另外，如果妳想要自行安装额外的软体(非原本的distribution提供的)，那么也能够将你的软体安装到这里来。 不过，以前的Linux系统中，我们还是习惯放置在/usr/local目录下。</td></tr><tr><td>/root</td><td>系统管理员(root)的家目录。 之所以放在这里，是因为如果进入单人维护模式而仅挂载根目录时，该目录就能够拥有root的家目录，所以我们会希望root的家目录与根目录放置在同一个分区中。</td></tr><tr><td>/sbin</td><td>Linux有非常多指令是用来设定系统环境的，这些指令只有root才能够利用来设定系统，其他使用者最多只能用来查询而已。放在/sbin底下的为开机过程中所需要的，里面包括了开机、修复、还原系统所需要的指令。至于某些伺服器软体程式，一般则放置到/usr/sbin/当中。至于本机自行安装的软体所产生的系统执行档(system binary)，则放置到/usr/local/sbin/当中了。常见的指令包括：fdisk, fsck, ifconfig, init, mkfs等等。</td></tr><tr><td>/srv</td><td>srv可以视为service的缩写，是一些网路服务启动之后，这些服务所需要取用的资料目录。 常见的服务例如WWW, FTP等等。 举例来说，WWW伺服器需要的网页资料就可以放置在/srv/www/里面。呵呵，看来平时我们编写的代码应该放到这里了</td></tr><tr><td>/tmp</td><td>这是让一般使用者或者是正在执行的程序暂时放置档案的地方。这个目录是任何人都能够存取的，所以你需要定期的清理一下。当然，重要资料不可放置在此目录啊。 因为FHS甚至建议在开机时，应该要将/tmp下的资料都删除。</td></tr></tbody></table><p>其他有些目录也需要我们了解一下，具体如下：</p><table><thead><tr><th><strong>目录</strong></th><th><strong>应放置文件内容</strong></th></tr></thead><tbody><tr><td>/lost+found</td><td>这个目录是使用标准的ext2/ext3档案系统格式才会产生的一个目录，目的在于当档案系统发生错误时，将一些遗失的片段放置到这个目录下。 这个目录通常会在分割槽的最顶层存在，例如你加装一个硬盘于/disk中，那在这个系统下就会自动产生一个这样的目录/disk/lost+found</td></tr><tr><td>/proc</td><td>这个目录本身是一个虚拟文件系统(virtual filesystem)喔。 他放置的资料都是在内存当中，例如系统核心、行程资讯(process)（是进程吗?）、周边装置的状态及网络状态等等。因为这个目录下的资料都是在记忆体（内存）当中，所以本身不占任何硬盘空间。比较重要的档案（目录）例如： /proc/cpuinfo, /proc/dma, /proc/interrupts, /proc/ioports, /proc/net/*等等。呵呵，是虚拟内存吗[guest]？</td></tr><tr><td>/sys</td><td>这个目录其实跟/proc非常类似，也是一个虚拟的档案系统，主要也是记录与核心相关的资讯。 包括目前已载入的核心模组与核心侦测到的硬体装置资讯等等。 这个目录同样不占硬盘容量。</td></tr></tbody></table><h3 id="简洁版"><a href="#简洁版" class="headerlink" title="简洁版"></a>简洁版</h3><p>/etc：配置文件<br>/bin：重要执行档<br>/dev：所需要的装置文件<br>/lib：执行档所需的函式库与核心所需的模块<br>/sbin：重要的系统执行文件<br>这五个目录千万不可与根目录分开在不同的分区</p><h3 id="目录树图"><a href="#目录树图" class="headerlink" title="目录树图"></a>目录树图</h3><p><img src="https://raw.githubusercontent.com/pengyirui/blog_img/main/2020-09-06-01.png"></p>]]></content>
      
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux常用的快捷键</title>
      <link href="/posts/6884.html"/>
      <url>/posts/6884.html</url>
      
        <content type="html"><![CDATA[<h2 id="常用的快捷键"><a href="#常用的快捷键" class="headerlink" title="常用的快捷键"></a>常用的快捷键</h2><p><code>^</code> 代表ctrl键</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">^c               终止前台运行的程序</span><br><span class="line">^z               将前台运行的程序挂起到后台</span><br><span class="line">^d               退出 等价 exit</span><br><span class="line">^l               清屏 </span><br><span class="line">^a 或 home 键    光标移到命令行的最前端</span><br><span class="line">^e 或 end 键     光标移到命令行的后端</span><br><span class="line">^u               删除光标前所有字符</span><br><span class="line">^k               删除光标后所有字符</span><br><span class="line">^r               搜索历史命令</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>三剑客之grep、sed、awk</title>
      <link href="/posts/8421.html"/>
      <url>/posts/8421.html</url>
      
        <content type="html"><![CDATA[<h2 id="grep工具"><a href="#grep工具" class="headerlink" title="grep工具"></a>grep工具</h2><blockquote><p>grep是<strong>行</strong>过滤工具；用于根据关键字进行行过滤</p></blockquote><p><strong>语法：</strong></p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># grep [选项] &#x27;关键字&#x27; 文件名</span></span><br></pre></td></tr></table></figure><p><strong>常见选项：</strong></p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">OPTIONS:</span><br><span class="line">    <span class="literal">-i</span>: 不区分大小写</span><br><span class="line">    <span class="literal">-v</span>: 查找不包含指定内容的行,反向选择</span><br><span class="line">    <span class="literal">-w</span>: 按单词搜索</span><br><span class="line">    <span class="literal">-o</span>: 打印匹配关键字</span><br><span class="line">    <span class="literal">-c</span>: 统计匹配到的行数</span><br><span class="line">    <span class="literal">-n</span>: 显示行号</span><br><span class="line">    <span class="literal">-r</span>: 逐层遍历目录查找</span><br><span class="line">    <span class="literal">-A</span>: 显示匹配行及后面多少行    </span><br><span class="line">    <span class="literal">-B</span>: 显示匹配行及前面多少行</span><br><span class="line">    <span class="literal">-C</span>: 显示匹配行前后多少行</span><br><span class="line">    <span class="literal">-l</span>：只列出匹配的文件名</span><br><span class="line">    <span class="literal">-L</span>：列出不匹配的文件名</span><br><span class="line">    <span class="literal">-e</span>: 使用正则匹配</span><br><span class="line">    <span class="literal">-E</span>:使用扩展正则匹配</span><br><span class="line">    ^key:以关键字开头</span><br><span class="line">    key<span class="variable">$</span>:以关键字结尾</span><br><span class="line">    ^<span class="variable">$</span>:匹配空行</span><br><span class="line">    <span class="literal">--color</span>=auto ：可以将找到的关键词部分加上颜色的显示</span><br></pre></td></tr></table></figure><p><strong>颜色显示（别名设置）：</strong></p><blockquote><p>centos 7 之后都默认自带的</p></blockquote><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">临时设置：</span><br><span class="line"><span class="comment"># alias grep=&#x27;grep --color=auto&#x27;            //只针对当前终端和当前用户生效</span></span><br><span class="line">永久设置：</span><br><span class="line"><span class="number">1</span>）全局（针对所有用户生效）</span><br><span class="line">vim /etc/bashrc</span><br><span class="line">alias grep=<span class="string">&#x27;grep --color=auto&#x27;</span></span><br><span class="line">source /etc/bashrc</span><br><span class="line"><span class="number">2</span>）局部（针对具体的某个用户）</span><br><span class="line">vim ~/.bashrc</span><br><span class="line">alias grep=<span class="string">&#x27;grep --color=auto&#x27;</span></span><br><span class="line">source ~/.bashrc</span><br></pre></td></tr></table></figure><p><strong>举例说明：</strong><br>说明：不要直接使用/etc/passwd文件，将其拷贝到/tmp下做实验！</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># grep -i root passwd                        忽略大小写匹配包含root的行</span></span><br><span class="line"><span class="comment"># grep -w ftp passwd                         精确匹配ftp单词</span></span><br><span class="line"><span class="comment"># grep -w hello passwd                         精确匹配hello单词;自己添加包含hello的行到文件</span></span><br><span class="line"><span class="comment"># grep -wo ftp passwd                         打印匹配到的关键字ftp</span></span><br><span class="line"><span class="comment"># grep -n root passwd                         打印匹配到root关键字的行好</span></span><br><span class="line"><span class="comment"># grep -ni root passwd                         忽略大小写匹配统计包含关键字root的行</span></span><br><span class="line"><span class="comment"># grep -nic root passwd                        忽略大小写匹配统计包含关键字root的行数</span></span><br><span class="line"><span class="comment"># grep -i ^root passwd                         忽略大小写匹配以root开头的行</span></span><br><span class="line"><span class="comment"># grep bash$ passwd                             匹配以bash结尾的行</span></span><br><span class="line"><span class="comment"># grep -n ^$ passwd                             匹配空行并打印行号</span></span><br><span class="line"><span class="comment"># grep ^# /etc/vsftpd/vsftpd.conf        匹配以#号开头的行</span></span><br><span class="line"><span class="comment"># grep -v ^# /etc/vsftpd/vsftpd.conf    匹配不以#号开头的行</span></span><br><span class="line"><span class="comment"># grep -A 5 mail passwd                     匹配包含mail关键字及其后5行</span></span><br><span class="line"><span class="comment"># grep -B 5 mail passwd                     匹配包含mail关键字及其前5行</span></span><br><span class="line"><span class="comment"># grep -C 5 mail passwd                     匹配包含mail关键字及其前后5行</span></span><br></pre></td></tr></table></figure><h2 id="sed工具"><a href="#sed工具" class="headerlink" title="sed工具"></a>sed工具</h2><blockquote><p>其主要功能为对文件进行修改处理，可以对文件或标准输入数据流进行增删改查等操作，尤其适用于大文件或有规律的文件</p></blockquote><p>适用场景</p><ul><li>超大文件处理；</li><li>有规律的文本，例如格式化后的日志文件等；</li><li>对文件进行批量增加，替换等。</li></ul><p>语法：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sed 选项 <span class="string">&quot;地址界定 命令&quot;</span> 处理的文件</span><br></pre></td></tr></table></figure><p>例子:<br>生成1到50的行的文件</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">seq <span class="number">50</span>  &gt; test</span><br></pre></td></tr></table></figure><ul><li><p>查询</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">显示3和11行</span><br><span class="line">[root@localhost test]# sed  -n &#x27;3p;11p&#x27; test</span><br><span class="line">显示3到11行</span><br><span class="line">[root@localhost test]# sed  -n &#x27;3,11p&#x27; test</span><br><span class="line">显示最后一行（使用正则表达式）</span><br><span class="line">[root@localhost test]# sed  -n &#x27;$p&#x27; test</span><br></pre></td></tr></table></figure></li><li><p>删除</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">全部删除</span><br><span class="line">[root@localhost test]# sed &#x27;d&#x27; test</span><br><span class="line">删除最后一行</span><br><span class="line">[root@localhost test]# sed &#x27;$d&#x27; test</span><br></pre></td></tr></table></figure></li><li><p>插入</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">第10行上面插入xxxx     （i可以理解成infor）</span><br><span class="line">[root@localhost test]# sed &#x27;10i xxxx&#x27; test</span><br><span class="line"></span><br><span class="line">第10行下面插入xxxx     （a可以理解成after）</span><br><span class="line">[root@localhost test]# sed &#x27;10a xxxx&#x27; test</span><br><span class="line"></span><br><span class="line">10到最后一行下面插入xxxx     （a可以理解成after  这里用到了正则）</span><br><span class="line">[root@localhost test]# sed &#x27;10,$a xxxx&#x27; test</span><br><span class="line"></span><br><span class="line">把第10行的10，改成xxxxx     （10s代表第用两个井号隔开）</span><br><span class="line">[root@localhost test]# sed &#x27;10s#10#xxxxx#&#x27; test</span><br><span class="line"></span><br><span class="line">5到10行行末尾插入xxxxx</span><br><span class="line">[root@localhost test]# sed &#x27;5，10s#$#xxxxx#&#x27; test</span><br><span class="line"></span><br><span class="line">提示！</span><br><span class="line">`-i.bak`先备份后执行，会多出一个文件xxx.bak</span><br><span class="line">[root@localhost test]# sed -i.bak &#x27;$d&#x27; test</span><br></pre></td></tr></table></figure></li><li><p>sed的反向引用<br>例子：批量重命名</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">生成文件，目的将生成的文件改成hello_+数字.log</span><br><span class="line">[root@localhost mv]# touch hello_&#123;10010..10030&#125;_world.log</span><br><span class="line"></span><br><span class="line">测试：</span><br><span class="line">[root@localhost mv]# find . -type f -name &#x27;*.log&#x27; | sed -r &#x27;s#^(.*)_world(.*)#mv \0 \1\2#&#x27;</span><br><span class="line"></span><br><span class="line">解释：find：寻找文件名包含log的文件，sed用正则匹配语句\0代表完整的名称，\1\2代表两个括号匹配的内容。</span><br><span class="line"></span><br><span class="line">mv ./hello_10010_world.log ./hello_10010.log</span><br><span class="line">mv ./hello_10011_world.log ./hello_10011.log</span><br><span class="line">mv ./hello_10012_world.log ./hello_10012.log</span><br><span class="line">mv ./hello_10013_world.log ./hello_10013.log</span><br><span class="line">mv ./hello_10014_world.log ./hello_10014.log</span><br><span class="line">mv ./hello_10015_world.log ./hello_10015.log</span><br><span class="line">mv ./hello_10016_world.log ./hello_10016.log</span><br><span class="line">mv ./hello_10017_world.log ./hello_10017.log</span><br><span class="line">mv ./hello_10018_world.log ./hello_10018.log</span><br><span class="line">mv ./hello_10019_world.log ./hello_10019.log</span><br><span class="line">mv ./hello_10020_world.log ./hello_10020.log</span><br><span class="line">mv ./hello_10021_world.log ./hello_10021.log</span><br><span class="line">mv ./hello_10022_world.log ./hello_10022.log</span><br><span class="line">mv ./hello_10023_world.log ./hello_10023.log</span><br><span class="line">mv ./hello_10024_world.log ./hello_10024.log</span><br><span class="line">mv ./hello_10025_world.log ./hello_10025.log</span><br><span class="line">mv ./hello_10026_world.log ./hello_10026.log</span><br><span class="line">mv ./hello_10027_world.log ./hello_10027.log</span><br><span class="line">mv ./hello_10028_world.log ./hello_10028.log</span><br><span class="line">mv ./hello_10029_world.log ./hello_10029.log</span><br><span class="line">mv ./hello_10030_world.log ./hello_10030.log</span><br><span class="line"></span><br><span class="line">-----分割线-----</span><br><span class="line">以上正是我们需要使用到的语句，最后添加管道符号让bash执行</span><br><span class="line">[root@localhost mv]# find . -type f -name &#x27;*.log&#x27; | sed -r &#x27;s#^(.*)_world(.*)#mv \0 \1\2#&#x27; | bash</span><br><span class="line"></span><br><span class="line">ll查看，完成</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ul><h2 id="awk-工具"><a href="#awk-工具" class="headerlink" title="awk 工具"></a>awk 工具</h2><blockquote><p>它更偏向于对文本的格式化处理输出，它不仅仅是一款工具，也是一门解释性语言</p><p><code>awk</code>同<code>sed</code>命令类似，只不过<code>sed</code>擅长取行，<code>awk</code>命令擅长取列，awk是对文本进行格式化输出，sed更倾向于对文件进行修改；</p></blockquote><p>用以下文本<code>coins.txt</code>作为实验</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">gold 1 1986 USA American Eagle</span><br><span class="line">gold 1 1908 Austria-Hungary Franz josef 100 Korona</span><br><span class="line">silver 10 1981 USA ingot</span><br><span class="line">gold 1 1984 Switzerland ingot</span><br><span class="line">gold 1 1979 RSA Krugerrand</span><br><span class="line">gold 0.5 1981 RSA Krugerrand</span><br><span class="line">gold 0.1 1986 PRC Panda</span><br><span class="line">silver 1 1986 USA Liberty dollar</span><br><span class="line">gold 0.25 1986 USA Liberty 5-dollar piece</span><br><span class="line">silver 1 1986 USA Liberty 50-cent piece</span><br><span class="line">silver 1 1987 USA Constitution dollar</span><br><span class="line">gold 0.25 1987 USA Constitution 5-dollar piece</span><br><span class="line">gold 1 1988 Canada Maple leaf</span><br></pre></td></tr></table></figure><p>语法格式</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">awk &#123;语句&#125; 执行的文件</span><br></pre></td></tr></table></figure><p>例子：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line">查看文本的前三列。\t 只是为了更美观显示</span><br><span class="line">[root@localhost ~]# awk &#x27;&#123;print $1 &quot;\t&quot; $2 &quot;\t&quot; $3&#125;&#x27; coins.txt</span><br><span class="line">gold11986</span><br><span class="line">gold11908</span><br><span class="line">silver101981</span><br><span class="line">gold11984</span><br><span class="line">gold11979</span><br><span class="line">gold0.51981</span><br><span class="line">gold0.11986</span><br><span class="line">silver11986</span><br><span class="line">gold0.251986</span><br><span class="line">silver11986</span><br><span class="line">silver11987</span><br><span class="line">gold0.251987</span><br><span class="line">gold11988</span><br><span class="line"></span><br><span class="line">----</span><br><span class="line"></span><br><span class="line">NR是number of record；NF代表number of rield</span><br><span class="line">（注意在awk中 空格 代表的是左边和右边的拼接起来，需要用逗号进行分隔符（或者制表符&quot;\t&quot;）所以导致NF不准）</span><br><span class="line"></span><br><span class="line">显示前三行和行号：</span><br><span class="line">awk &#x27;&#123;print NR &quot;\t&quot; $1 &quot;\t&quot; $2 &quot;\t&quot; $3&#125;&#x27; coins.txt</span><br><span class="line">1gold11986</span><br><span class="line">2gold11908</span><br><span class="line">3silver101981</span><br><span class="line">4gold11984</span><br><span class="line">5gold11979</span><br><span class="line">6gold0.51981</span><br><span class="line">7gold0.11986</span><br><span class="line">8silver11986</span><br><span class="line">9gold0.251986</span><br><span class="line">10silver11986</span><br><span class="line">11silver11987</span><br><span class="line">12gold0.251987</span><br><span class="line">13gold11988</span><br><span class="line"></span><br><span class="line">-----</span><br><span class="line"></span><br><span class="line">查找</span><br><span class="line">查找1986年份的数据，可以把文本当作数据库。</span><br><span class="line">[root@localhost ~]# awk &#x27;$3==1986&#123;print $0&#125;&#x27; coins.txt </span><br><span class="line">gold 1 1986 USA American Eagle</span><br><span class="line">gold 0.1 1986 PRC Panda</span><br><span class="line">silver 1 1986 USA Liberty dollar</span><br><span class="line">gold 0.25 1986 USA Liberty 5-dollar piece</span><br><span class="line">silver 1 1986 USA Liberty 50-cent piece</span><br></pre></td></tr></table></figure><p>更详细的链接：<br><a href="http://www.imooc.com/wiki/shelllesson/awk.html">http://www.imooc.com/wiki/shelllesson/awk.html</a><br><a href="https://www.runoob.com/linux/linux-comm-awk.html">https://www.runoob.com/linux/linux-comm-awk.html</a></p><p>awk实在是太难用了，自我感觉操作列的话用<code>cut</code>反而更合适</p><h2 id="cut工具"><a href="#cut工具" class="headerlink" title="cut工具"></a>cut工具</h2><blockquote><p>cut是<strong>列</strong>截取工具，用于列的截取</p></blockquote><p>语法和选项</p><p><strong>语法：</strong></p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># cut 选项  文件名</span></span><br></pre></td></tr></table></figure><p><strong>常见选项：</strong></p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="literal">-c</span>:    以字符为单位进行分割,截取</span><br><span class="line"><span class="literal">-d</span>:    自定义分隔符，默认为制表符\t</span><br><span class="line"><span class="operator">-f</span>:    与<span class="literal">-d</span>一起使用，指定截取哪个区域</span><br></pre></td></tr></table></figure><p><strong>举例说明:</strong></p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># cut -d: -f1 1.txt             以:冒号分割，截取第1列内容</span></span><br><span class="line"><span class="comment"># cut -d: -f1,6,7 1.txt     以:冒号分割，截取第1,6,7列内容</span></span><br><span class="line"><span class="comment"># cut -c4 1.txt                 截取文件中每行第4个字符</span></span><br><span class="line"><span class="comment"># cut -c1-4 1.txt             截取文件中每行的1-4个字符</span></span><br><span class="line"><span class="comment"># cut -c4-10 1.txt             截取文件中每行的4-10个字符</span></span><br><span class="line"><span class="comment"># cut -c5- 1.txt                 从第5个字符开始截取后面所有字符</span></span><br></pre></td></tr></table></figure><ul><li>例子<br>用小工具列出你当系统的运行级别。5/3</li></ul><ol><li>如何查看系统运行级别<ol><li>命令<code>runlevel</code></li><li>文件<code>/usr/lib/systemd/system/ctrl-alt-del.target</code></li></ol></li><li>如何过滤运行级别<figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">runlevel |cut <span class="literal">-c3</span></span><br><span class="line">runlevel | cut <span class="literal">-d</span> <span class="string">&#x27; &#x27;</span> <span class="literal">-f2</span></span><br><span class="line">grep <span class="literal">-v</span> <span class="string">&#x27;^#&#x27;</span> /etc/inittab | cut <span class="literal">-d</span>: <span class="literal">-f2</span></span><br><span class="line">grep <span class="string">&#x27;^id&#x27;</span> /etc/inittab |cut <span class="literal">-d</span>: <span class="literal">-f2</span></span><br><span class="line">grep <span class="string">&quot;initdefault:<span class="variable">$</span>&quot;</span> /etc/inittab | cut <span class="literal">-c4</span></span><br><span class="line">grep <span class="literal">-v</span> ^<span class="comment"># /etc/inittab |cut -c4</span></span><br><span class="line">grep <span class="string">&#x27;id:&#x27;</span> /etc/inittab |cut <span class="literal">-d</span>: <span class="literal">-f2</span></span><br><span class="line">cut <span class="literal">-d</span><span class="string">&#x27;:&#x27;</span> <span class="literal">-f2</span> /etc/inittab |grep <span class="literal">-v</span> ^<span class="comment">#</span></span><br><span class="line">cut <span class="literal">-c4</span> /etc/inittab |tail <span class="literal">-1</span></span><br><span class="line">cut <span class="literal">-d</span>: <span class="literal">-f2</span> /etc/inittab |tail <span class="literal">-1</span></span><br></pre></td></tr></table></figure></li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> shell </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>日志切割</title>
      <link href="/posts/f708.html"/>
      <url>/posts/f708.html</url>
      
        <content type="html"><![CDATA[<p>随着时间推移，日志也会慢慢增加，为防止日志过大，需要做日志切割。<br>其中Logrotate支持按时间和大小来自动切分,以防止日志文件太大。<br><code>真正内容</code>：当日志达到某个特定的大小,我们将日志分类,之前的日志保留一个备份,再产生的日志创建一个同名的文件保存新的日志。</p><p>logrotate配置文件主要有：<br><code>/etc/logrotate.conf</code> 以及 <code>/etc/logrotate.d/ </code>这个子目录下的明细配置文件。<br>logrotate的执行由crond服务调用的</p><p>其中全局参数的含义如下（/etc/logrotate.conf）：<br>说明：(全局参数)<br>weekly ： 每周执行回滚，或者说每周执行一次日志回滚<br>rotate： 表示日志切分后历史文件最多保存离现在最近的多少份 [rəʊˈteɪt] 旋转<br>create ： 指定新创建的文件的权限与所属主与群组<br>dateext ： 使用日期为后缀的回滚文件 #可以去/var/log目录下看看</p><p>不过一般我们都会在<code>/etc/logrotate.d/ </code>目录下新建自己的配置文件</p><p>查看日志文件什么时候开始轮换的信息<br><code>[root@localhost ~]# vi /var/lib/logrotate/logrotate.status</code></p><p>配置文件参数说明</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">monthly: 日志文件将按月轮循。其它可用值为‘daily’，‘weekly’或者‘yearly’。</span><br><span class="line">rotate 5: 一次将存储5个归档日志。对于第六个归档，时间最久的归档将被删除。</span><br><span class="line">compress: 在轮循任务完成后，已轮循的归档将使用gzip进行压缩。</span><br><span class="line">delaycompress: 总是与compress选项一起用，delaycompress选项指示logrotate不要将最近的归档压缩，压缩将在下一次轮循周期进行。这在你或任何软件仍然需要读取最新归档时很有用。</span><br><span class="line">missingok: 在日志轮循期间，任何错误将被忽略，例如“文件无法找到”之类的错误。</span><br><span class="line">notifempty: 如果日志文件为空，轮循不会进行。</span><br><span class="line">create 644 root root: 以指定的权限创建全新的日志文件，同时logrotate也会重命名原始日志文件。</span><br><span class="line">postrotate/endscript: 在所有其它指令完成后，postrotate和endscript里面指定的命令将被执行。在这种情况下，rsyslogd 进程将立即再次读取其配置并继续运行。</span><br></pre></td></tr></table></figure><h2 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h2><ul><li><p>需求：<code>/test/PluginHelper.log</code>日志文件过大，需要做日志切割<br>  在<code>/etc/logrotate.d/</code>下新建切割规则文件，将其命名为<code>PluginHelper</code></p>  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]# vi /etc/logrotate.d/PluginHelper</span><br></pre></td></tr></table></figure></li><li><p>然后写入规则</p>  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">/test/PluginHelper.log&#123; #需要切割的日志文件</span><br><span class="line">weekly #至少每周执行一次</span><br><span class="line">rotate 3 #日志切分后历史文件最多保存离现在最近的3份</span><br><span class="line">create 0600 root root #指定新创建的文件的权限与所属主与群组</span><br><span class="line">minsize 1M #文件超过1M进行回滚</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>重新启动rsyslog服务<br><code>[root@localhost ~]#systemctl restart rsyslog</code></p></li><li><p>查看效果(强制切割)<br><code>[root@localhost ~]# logrotate -vf /etc/logrotate.d/PluginHelper</code><br>  v:显示详细信息<br>  f：强制轮循，也就是说即使轮循条件没有满足，也强制执行</p></li><li><p>查看日志是否切割成功</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]# ll /test/total 0</span><br><span class="line">-rw-------. 1 root root 0 Aug 22 12:26 207_PluginHelper.log</span><br><span class="line">-rw-------. 1 root root 0 Aug 22 12:25 207_PluginHelper.log.1</span><br></pre></td></tr></table></figure><h2 id="配置文件参数说明"><a href="#配置文件参数说明" class="headerlink" title="配置文件参数说明"></a>配置文件参数说明</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line">　　　　missingok　　日志切割期间产生错误将被忽略（如果日志丢失，不报错继续切割）</span><br><span class="line"></span><br><span class="line">　　　　daily、weekly、monthly、yearly　　每天、每周、每月、每年执行</span><br><span class="line"></span><br><span class="line">　　　　create MODE OWNER GROUP　　切割后指定创建新的空白文件的属性</span><br><span class="line"></span><br><span class="line">　　　　nocreate　　不建立新的日志文件</span><br><span class="line"></span><br><span class="line">　　　　rotate N　　保留N份，多余删除，不计算新建日志文件</span><br><span class="line"></span><br><span class="line">　　　　dateext　　用当前日期作为后缀命名格式（默认年月日）</span><br><span class="line"></span><br><span class="line">　　　　dateformat .%s　　配合dateext使用，紧跟在下一行出现，定义切割后的文件名，只支持%Y，%m，%d，%s</span><br><span class="line"></span><br><span class="line">　　　　size/minsize　　达到指定大小才会切割，默认单位bytes，还可以是KB和MB</span><br><span class="line"></span><br><span class="line">　　　　compress　　切割结束后，归档并使用gzip格式压缩</span><br><span class="line"></span><br><span class="line">　　　　nocompress　　解除compress参数</span><br><span class="line"></span><br><span class="line">　　　　delaycompress　　总是与compress参数一起使用，指示logrotate不要将最近的归档压缩，压缩将在下一次切割进行。</span><br><span class="line"></span><br><span class="line">　　　　nodelaycompress　　解除delaycompress参数</span><br><span class="line"></span><br><span class="line">　　　　ifempty　　即使日志为空，也执行切割</span><br><span class="line"></span><br><span class="line">　　　　notifempty　　如果日志为空，切割不执行</span><br><span class="line"></span><br><span class="line">　　　　prerotate/endscript　　在所有其他指令之前执行prerotate和endscript之间的命令。</span><br><span class="line"></span><br><span class="line">　　　　postrotate/endscript　　在所有其他指令完成后，postrotate和endscript之间的命令将被执行。</span><br><span class="line"></span><br><span class="line">　　　　sharescripts　　所有日志切割后统一执行一次脚本，如果没有配置该参数，则每个日志切割后都会执行一次脚本。</span><br><span class="line"></span><br><span class="line">　　　　errors ADDRESS　　切割时的错误信息发送到指定的Emial地址</span><br><span class="line"></span><br><span class="line">　　　　mail ADDRESS　　切割日志发送到指定的Email地址</span><br><span class="line"></span><br><span class="line">　　　　nomail　　切割日志不发送邮件</span><br><span class="line"></span><br><span class="line">　　　　olddir DIRECTORY　　切割后的日志文件放入指定目录，必须与当前日志处在同一文件系统</span><br><span class="line"></span><br><span class="line">　　　　noolddir　　切割后的日志文件与当前文件放在同一目录下</span><br><span class="line"></span><br><span class="line">　　　　copytruncate　　用于还在打开中的日志文件，把当前日志备份并截断；先拷贝后清空，可能丢失部分日志</span><br><span class="line"></span><br><span class="line">　　　　nocopytruncate　　备份日志文件，但不截断。</span><br></pre></td></tr></table></figure></li></ul><p>项目里面的例子：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">xxxxxxxxxx&#123;</span><br><span class="line">    nocompress</span><br><span class="line">    monthly</span><br><span class="line">    copytruncate</span><br><span class="line">    createntoifempty</span><br><span class="line">    rotate 6</span><br><span class="line">    olddir /opt/mysql/old_log</span><br><span class="line">    missingok  </span><br><span class="line">    dateext</span><br><span class="line">    postrotate</span><br><span class="line">        /bin/kill -HUP `pidof /opt/mysql/bin/mysql-server 2&gt;/dve/null ` 2 &gt;dev/null || true</span><br><span class="line">        endscript</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 运维记录 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>大数据</title>
      <link href="/posts/1512.html"/>
      <url>/posts/1512.html</url>
      
        <content type="html"><![CDATA[<h2 id="大数据概念"><a href="#大数据概念" class="headerlink" title="大数据概念"></a>大数据概念</h2><p>大数据（Big Data）：指<code>无法在一定时间范围</code>内用常规软件工具进行捕捉、管理和处理的数据集合，是需要新处理模式才能具有更强的决策力、洞察发现力和流程优化能力的<code>海量、高增长率和多样化的信息资产</code>。</p><p>主要解决，海量数据的存储和海量数据的分析计算问题。并且有以下特点。</p><ul><li><p>Volune（大量）<br>截至目前，人类生的所有印刷材料的数据量是200PB，而历史上全人类总共说过的话的数据量大约是5EB。当前，典型个人计算机硬盘的容量为TB量级，而一些大企业的数据量已经接近EB量级。</p></li><li><p>Velocity（高速）<br>这是大数据区分于传统数据挖掘的最显著持征。根据IC的”数字宇宙”的报告，预计到2020年，全球数据使用量将达到3.22B。在如此海量的数据面前，处理数据的效率就是企业的生命。</p></li><li><p>Variety（多样）<br>这种类型的多样性也让数据被分为结构化数据和非结构化数据。相对于以往便于存储的以数据库文本为主的结构化数据，非结构化数据越来越多，包括网络日志、音频、视频、图片、地理位置信息等，这些多类型的数据对数据的处理能力提出了更高要求。</p></li><li><p>Value（低价值密度）<br>如何快速对有价值数据“提纯”成为目前大数据背景下待解决的难题。</p></li></ul><h2 id="hadoop"><a href="#hadoop" class="headerlink" title="hadoop"></a>hadoop</h2><h3 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h3><ol><li>Hadoop是一个由Apache基金会所开发的分布式系统基础架构。</li><li>主要解决，海量数据的<em>存储 <em>和海量数据的</em>分析计算</em>问题。</li><li>广义上来说，Hadoop通常是指一个更广泛的概念——Hadoop生态圈。<br><img src="https://raw.githubusercontent.com/pengyirui/blog_img/main/2020-08-22-16.png"><br><img src="https://raw.githubusercontent.com/pengyirui/blog_img/main/2020-08-22-17.png" alt="大数据技术生态体系"></li></ol><p>Hadoop三大发行版本：<code>Apache</code>、<code>Cloudera</code>、<code>Hortonworks</code>。<br>Apache版本最原始（最基础）的版本，对于入门学习最好。<br>Cloudera在大型互联网企业中用的较多。<br>Hortonworks文档较好。</p><h3 id="HDFS"><a href="#HDFS" class="headerlink" title="HDFS"></a>HDFS</h3><h4 id="产生背景"><a href="#产生背景" class="headerlink" title="产生背景"></a>产生背景</h4><p>随着数据量越来越大，在一个操作系统存不下所有的数据，那么就分配到更多的操作系统管理的磁盘中，但是不方便管理和维护，<code>迫切需要一种系统来管理多台机器上的文件</code>，这就是分布式文件管理系统。<code>HDFS只是分布式文件管理系统中的一种</code>。</p><h4 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h4><p>HDFS（Hadoop Distributed File System），它是一个<code>文件系统</code>，用于存储文件，通过目录树来定位文件；其次，它是分布式的，由很多服务器联合起来实现其功能，集群中的服务器有各自的角色。<br>HDFS的使用场景：<code>适合一次写入，多次读出的场景，且不支持文件的修改。</code>适合用来做数据分析，并不适台用来做网盘应用。</p><h4 id="优缺点"><a href="#优缺点" class="headerlink" title="优缺点"></a>优缺点</h4><ul><li>优点：<ol><li>高容错性:<br> 数据自动保存多个副本。它通过增加副本的形式，提高容错性。<br> 某一个副本丢失以后，它可以自动恢复。</li><li>适合处理大数据：<br> 数据规模：能够处理数据规模达到GB、TB、甚至PB级别的数据。<br> 文件规模：能够处理百万规模以上的文件数量，数量相当之大。</li><li>可构建在廉价机器上<br> 通过多副本机制，提高可靠性。</li></ol></li><li>缺点：<ol><li>不适合低延时数据访问，比如毫秒级的存储数据，是做不到的。</li><li>无法高效的对大量小文件进行存储。<br> 存储大量小文件的话，它会占用NameNode大量的内存来存储文件目录和块信息。这样是不可取的，因为NameNode的内存总是有限的。<br> 小文件存储的寻址时间会超过读取时间，它违反了HDFS的设计目标。<br> <code>为什么块的大小不能设置太小，也不能太大？</code><br> HDFS的块设置太小，会增加寻址时间，程序一直在找块的开始位置。<br> 如果块设置的太大，从磁盘传输数据的时间会明显大于定位这个块开始位置所需的时间。导致程序在处理这块数据时，会非常慢。<br> <code>总结</code>：HDFS块的大小设置主要取决于磁盘传输速率。</li><li>不支持并发写入、文件随机修改。<br> 一个文件只能有一个写，不允许多个线程同时写；<br> 仅支持数据append（追加），不支持文件的随机修改。</li></ol></li></ul><h4 id="HDFS架构概述"><a href="#HDFS架构概述" class="headerlink" title="HDFS架构概述"></a>HDFS架构概述</h4><ol><li>NameNode（nn）：<br> 它是个主管、管理者<br> 存储文件的元数据，如文件名，文件目录结构，文件属性（生成时间、副本数、文件权限）。<br> 配置副本策略。<br> 处理客户端读写请求。<br> 每个文件的块列表和块所在的DataNode等。</li><li>DataNode（dn）：<br> 在本地文件系统存储文件块发据。<br> 存储实际的数据块。<br> 执行数据块的读/写操作。<br> 块数据的校验和。</li><li>Secondary NameNo de（2nn）：<br> 用来监控HDFS状态的辅助后台程序，每隔一段时间获取HDFS元数据的快照。<br> 并非NarneNode的热备。当NameNode挂掉的时候，它并不能马上替换NameNode并提供服务。<br> 辅助NameNode，分担其I作量，比如定期合并F simageE dits，并推送给NameNode。<br> 在紧急情况下，可辅助恢复NameNode。</li><li>Client：就是客户端。<br> 文件切分。文件上传HDFS的时候，Client将文件切分 成一个一个的Block，然后进行上传；<br> 与NameNode交互，获取文件的位置信息；<br> 与DataNode交互，读取或者写入数据；<br> Clien提供一些命令 来管理HDFS，比如lameNode格式化；<br> Client可以通过一些命令来访问HDFS，比如对HDFS增删直改操作；</li></ol><h4 id="文件的写入"><a href="#文件的写入" class="headerlink" title="文件的写入"></a>文件的写入</h4><ol><li>客户端通过Distributed FileSystem模块向NameNode请求上传文件，NameNode检查目标文件是否已存在，父目录是否存在。</li><li>NameNode返回是否可以上传。</li><li>客户端请求第一个 Block上传到哪几个DataNode服务器上。</li><li>NameNode返回3个DataNode节点，分别为dn1、dn2、dn3。</li><li>客户端通过FSDataOutputStream模块请求dn1上传数据，dn1收到请求会继续调用dn2，然后dn2调用dn3，将这个通信管道建立完成。</li><li>dn1、dn2、dn3逐级应答客户端。</li><li>客户端开始往dn1上传第一个Block（先从磁盘读取数据放到一个本地内存缓存），以Packet为单位，dn1收到一个Packet就会传给dn2，dn2传给dn3；dn1每传一个packet会放入一个应答队列等待应答。</li><li>当一个Block传输完成之后，客户端再次请求NameNode上传第二个Block的服务器。（重复执行3-7步）。</li></ol><h4 id="节点距离计算"><a href="#节点距离计算" class="headerlink" title="节点距离计算"></a>节点距离计算</h4><p>两个节点到达最近的共同祖先的距离总和。<br>在HDFS写数据的过程中，NameNode会选择距离待上传数据最近距离的DataNode接收数据<br>例如，假设有数据中心d1机架r1中的节点n1。该节点可以表示为/d1/r1/n1。利用这种标记，这里给出四种距离描述，如图<br><img src="https://raw.githubusercontent.com/pengyirui/blog_img/main/2020-09-19-03.png"></p><h4 id="机架感知（副本存储节点选择）"><a href="#机架感知（副本存储节点选择）" class="headerlink" title="机架感知（副本存储节点选择）"></a>机架感知（副本存储节点选择）</h4><p>官方文档：<a href="http://hadoop.apache.org/docs/r2.7.2/hadoop-project-dist/hadoop-hdfs/HdfsDesign.html#Data_Replication">http://hadoop.apache.org/docs/r2.7.2/hadoop-project-dist/hadoop-hdfs/HdfsDesign.html#Data_Replication</a><br>第一个副本在Client所处的节点上。<br>如果客户端在集群外，随机选一个。<br>第二个副本和第一个副本位于相同机架，随机节点。<br>第三个副本位于不同机架，随机节点。</p><h3 id="YARN架构概述"><a href="#YARN架构概述" class="headerlink" title="YARN架构概述"></a>YARN架构概述</h3><p><img src="https://raw.githubusercontent.com/pengyirui/blog_img/main/2020-09-13-02.png"></p><h4 id="MapReduce概述"><a href="#MapReduce概述" class="headerlink" title="MapReduce概述"></a>MapReduce概述</h4><p>MapReduce是<code>一个分布式运算程序的编程框架</code>，是用户开发“基于Hadoop的数据分析应用”的核心框架。<br>MapReduce核心功能是将<code>用户编写的业务逻辑代码</code>和<code>自带默认组件</code>整合成一个完整的<code>分布式运算程序</code>，并发运行在一个Hadoop集群上。</p><h4 id="优缺点-1"><a href="#优缺点-1" class="headerlink" title="优缺点"></a>优缺点</h4><ul><li>优点<ol><li>易于编程：<br> <code>它简单的实现一些接口，就可以完成一个分布式程序</code>，这个分布式程序可以分布到大量廉价的PC机器上运行。</li><li>良好的扩展性:<br> 当你的计算资源不能得到满足的时候，你可以通过<code>简单的增加机器</code>来扩展它的计算能力。</li><li>高容错性：<br> MapReduce设计的初衷就是使程序能够部署在廉价的PC机器上，这就要求它具有很高的容错性。比如<code>其中一台机器挂了，它可以把上面的计算任务转移到另外一个节点上运行</code>，不至于这个任务运行失败，而且这个过程不需要人工参与，而完全是由Hadoop内部完成的。</li><li>适合PB级以上海量数据的离线处理：<br> 可以实现上千台服务器集群并发工作，提供数据处理能力。</li></ol></li><li>缺点<ol><li>不擅长实时计算<br> 无法像MySQL一样，在毫秒或者秒级内返回结果。</li><li>不擅长流式计算<br> 流式计算的输入数据是动态的，而MapReduce的<code>输入数据集是静态的</code>，不能动态变化。这是因为MapReduce自身的设计特点决定了数据源必须是静态的。</li><li>不擅长DAG（有向图）计算<br> 多个应用程序存在依赖关系，后一个应用程序的输入为前一个的输出。在这种情况下，MapReduce并不是不能做，而是使用后，每个MapReduce作业的输出结果都会写入到磁盘，<code>会造成大量的磁盘IO</code>，导致性能非常的低下。</li></ol></li></ul><h4 id="核心思想"><a href="#核心思想" class="headerlink" title="核心思想"></a>核心思想</h4><p><img src="https://raw.githubusercontent.com/pengyirui/blog_img/main/2020-09-19-04.png"></p><ol><li>分布式的运算程序往往需要分成至少2个阶段。</li><li>第一个阶段的MapTask并发实例，完全并行运行，互不相干。</li><li>第二个阶段的ReduceTask并发实例互不相干，但是他们的数据依赖于上一个阶段的所有MapTask并发实例的输出。</li><li>MapReduce编程模型只能包含一个Map阶段和一个Reduce阶段，如果用户的业务逻辑非常复杂，那就只能多个MapReduce程序，串行运行。<br>总结：分析WordCount数据流走向深入理解MapReduce核心思想。</li></ol><h4 id="MapReduce架构流程"><a href="#MapReduce架构流程" class="headerlink" title="MapReduce架构流程"></a>MapReduce架构流程</h4><ol><li>Map阶段并行处理输入数据</li><li>Reduce阶段对Map结果进行汇总</li></ol><h2 id="zookeeper"><a href="#zookeeper" class="headerlink" title="zookeeper"></a>zookeeper</h2><h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><ul><li><p><code>Zookeeper</code>是一个开源的分布式的，为分布式应用提供<em>协调服务</em>的Apache项目。</p></li><li><p>特点<br>  <img src="https://raw.githubusercontent.com/pengyirui/blog_img/main/2020-08-22-05.png"></p><ol><li>Zookeeper：一个领导者（Leader），多个跟随者（Follower）组成的集群。</li><li>集群中只要有半数以上首点存活，Zookeeper集群就能正常服务。</li><li>全局数据一致：每个Server保存一份相同的数据副本，Client无论连接到哪个Server，数据都是一致的。</li><li>更新请求顺序进行，来自同一个Client的更新请求按其发送顺序依次执行。</li><li>数据更新原子性，一次数据更新要么成功，要么失败。</li><li>实时性，在一定时间范围内，Client能读到最新数据。</li></ol></li><li><p>结构<br>  ZooKeeper效据模型的结构与Unix文件系统很类似，整体上可以看作是一棵树，每个节点称做一个ZNode，每一个ZNode默认能够存储IMB的数据，每个ZNode都可以通过其路径唯一标识。<br>  <img src="https://raw.githubusercontent.com/pengyirui/blog_img/main/2020-08-22-06.png"></p></li></ul><h3 id="工作原理"><a href="#工作原理" class="headerlink" title="工作原理"></a>工作原理</h3><h4 id="节点类型"><a href="#节点类型" class="headerlink" title="节点类型"></a>节点类型</h4><p><img src="https://raw.githubusercontent.com/pengyirui/blog_img/main/2020-08-22-07.png"></p><h4 id="Stat结构体"><a href="#Stat结构体" class="headerlink" title="Stat结构体"></a>Stat结构体</h4><ol><li>czxid-创建节点的事务zxid<br>每次修改ZooKeeper状态都会收到一个zxid形式的时间戳，也就是ZooKeeper事务ID。<br>事务ID是ZooKeeper中所有修改总的次序。每个修改都有唯一的zxid，如果zxid1小于zxid2，那么zxid1在zxid2之前发生。</li><li>ctime - znode被创建的毫秒数(从1970年开始)</li><li>mzxid - znode最后更新的事务zxid</li><li>mtime - znode最后修改的毫秒数(从1970年开始)</li><li>pZxid-znode最后更新的子节点zxid</li><li>cversion - znode子节点变化号，znode子节点修改次数</li><li>dataversion - znode数据变化号</li><li>aclVersion - znode访问控制列表的变化号</li><li>ephemeralOwner- 如果是临时节点，这个是znode拥有者的session id。如果不是临时节点则是0。</li><li>dataLength- znode的数据长度</li><li>numChildren - znode子节点数量</li></ol><h4 id="监听器原理"><a href="#监听器原理" class="headerlink" title="监听器原理"></a>监听器原理</h4><p><img src="https://raw.githubusercontent.com/pengyirui/blog_img/main/2020-08-22-08.png"></p><h4 id="选举机制"><a href="#选举机制" class="headerlink" title="选举机制"></a>选举机制</h4><ol><li>半数机制：集群中半数以上机器存活，集群可用。所以Zookeeper适合安装奇数台服务器。</li><li>Zookeeper虽然在配置文件中并没有指定Master和Slave。但是，Zookeeper工作时，是有一个节点为Leader，其他则为Follower，Leader是通过内部的选举机制临时产生的。</li><li>以一个简单的例子来说明整个选举的过程。<br>假设有五台服务器组成的Zookeeper集群，它们的id从1-5，同时它们都是最新启动的，也就是没有历史数据，在存放数据量这一点上，都是一样的。假设这些服务器依序启动，来看看会发生什么(如图)<br> <img src="https://raw.githubusercontent.com/pengyirui/blog_img/main/2020-08-22-09.png"><ul><li>服务器1启动，发起一次选举。服务器1投自己一票。此时服务器1票数一票，不够半数以上（3票），选举无法完成，服务器1状态保持为LOOKING；</li><li>服务器2启动，再发起一次选举。服务器1和2分别投自己一票并交换选票信息：此时服务器1发现服务器2的ID比自己目前投票推举的（服务器1）大，更改选票为推举服务器2。此时服务器1票数0票，服务器2票数2票，没有半数以上结果，选举无法完成，服务器1，2状态保持LOOKING</li><li>服务器3启动，发起一次选举。此时服务器1和2都会更改选票为服务器3。此次投票结果：服务器1为0票，服务器2为0票，服务器3为3票。此时服务器3的票数已经超过半数，服务器3当选Leader。服务器1，2更改状态为FOLLOWING，服务器3更改状态为LEADING；</li><li>服务器4启动，发起一次选举。此时服务器1，2，3已经不是LOOKING状态，不会更改选票信息。交换选票信息结果：服务器3为3票，服务器4为1票。此时服务器4服从多数，更改选票信息为服务器3，并更改状态为FOLLOWING；</li><li>服务器5启动，同4一样当小弟。</li></ul></li></ol><h4 id="写数据流程"><a href="#写数据流程" class="headerlink" title="写数据流程"></a>写数据流程</h4><p><img src="https://raw.githubusercontent.com/pengyirui/blog_img/main/2020-08-22-10.png"></p><h2 id="kafka"><a href="#kafka" class="headerlink" title="kafka"></a>kafka</h2><h3 id="概述-1"><a href="#概述-1" class="headerlink" title="概述"></a>概述</h3><p>在流式计算中，Kafka一般用来缓存数据，Storm通过消费Kafka的数据进行计算。</p><h4 id="什么是Kafka"><a href="#什么是Kafka" class="headerlink" title="什么是Kafka"></a>什么是Kafka</h4><ol><li>Apache Kafka是一个开源消息系统，由Scala写成。是由Apache软件基金会开发的一个开源消息系统项目。</li><li>Kafka最初是由LinkedIn公司开发，并于2011年初开源。2012年10月从Apache Incubator毕业。该项目的目标是为处理实时数据提供一个统一、高通量、低等待的平台。</li><li>Kafka是一个分布式消息队列。Kafka对消息保存时根据Topic进行归类，发送消息者称为Producer，消息接受者称为Consumer，此外kafka集群有多个kafka实例组成，每个实例(server)称为broker。</li><li>无论是kafka集群，还是consumer都依赖于zookeeper集群保存一些meta信息，来保证系统可用性。</li></ol><h4 id="Kafka架构"><a href="#Kafka架构" class="headerlink" title="Kafka架构"></a>Kafka架构</h4><p><img src="https://raw.githubusercontent.com/pengyirui/blog_img/main/2020-08-22-12.png" alt="详细版"><br><img src="https://raw.githubusercontent.com/pengyirui/blog_img/main/2020-08-22-11.png" alt="精简版"></p><ol><li>Producer ：消息生产者，就是向kafka broker发消息的客户端；</li><li>Consumer ：消息消费者，向kafka broker取消息的客户端；</li><li>Topic ：可以理解为一个队列；</li><li> Consumer Group （CG）：这是kafka用来实现一个topic消息的广播（发给所有的consumer）和单播（发给任意一个consumer）的手段。一个topic可以有多个CG。topic的消息会复制（不是真的复制，是概念上的）到所有的CG，但每个partion只会把消息发给该CG中的一个consumer。如果需要实现广播，只要每个consumer有一个独立的CG就可以了。要实现单播只要所有的consumer在同一个CG。用CG还可以将consumer进行自由的分组而不需要多次发送消息到不同的topic；</li><li>Broker ：一台kafka服务器就是一个broker。一个集群由多个broker组成。一个broker可以容纳多个topic；</li><li>Partition：为了实现扩展性，一个非常大的topic可以分布到多个broker（即服务器）上，一个topic可以分为多个partition，每个partition是一个有序的队列。partition中的每条消息都会被分配一个有序的id（offset）。kafka只保证按一个partition中的顺序将消息发给consumer，不保证一个topic的整体（多个partition间）的顺序；</li><li>Offset：kafka的存储文件都是按照offset.kafka来命名，用offset做名字的好处是方便查找。例如你想找位于2049的位置，只要找到2048.kafka的文件即可。当然the first offset就是00000000000.kafka。</li></ol><h4 id="消息队列"><a href="#消息队列" class="headerlink" title="消息队列"></a>消息队列</h4><p><img src="https://raw.githubusercontent.com/pengyirui/blog_img/main/2020-08-22-13.png"></p><ol><li>点对点模式（一对一，消费者主动拉取数据，消息收到后消息清除）<br>点对点模型通常是一个基于拉取或者轮询的消息传送模型，这种模型从队列中请求信息，而不是将消息推送到客户端。这个模型的特点是发送到队列的消息被一个且只有一个接收者接收处理，即使有多个消息监听者也是如此。</li><li>发布/订阅模式（一对多，数据生产后，推送给所有订阅者）<br>发布订阅模型则是一个基于推送的消息传送模型。发布订阅模型可以有多种不同的订阅者，临时订阅者只在主动监听主题时才接收消息，而持久订阅者则监听主题的所有消息，即使当前订阅者不可用，处于离线状态。</li></ol><ul><li>为什么需要消息队列<ol><li>解耦：<br>　　允许你独立的扩展或修改两边的处理过程，只要确保它们遵守同样的接口约束。</li><li>冗余：消息队列把数据进行持久化直到它们已经被完全处理，通过这一方式规避了数据丢失风险。许多消息队列所采用的”插入-获取-删除”范式中，在把一个消息从队列中删除之前，需要你的处理系统明确的指出该消息已经被处理完毕，从而确保你的数据被安全的保存直到你使用完毕。</li><li>扩展性：<br>因为消息队列解耦了你的处理过程，所以增大消息入队和处理的频率是很容易的，只要另外增加处理过程即可。</li><li>灵活性 &amp; 峰值处理能力：<br>在访问量剧增的情况下，应用仍然需要继续发挥作用，但是这样的突发流量并不常见。如果为以能处理这类峰值访问为标准来投入资源随时待命无疑是巨大的浪费。使用消息队列能够使关键组件顶住突发的访问压力，而不会因为突发的超负荷的请求而完全崩溃。</li><li>可恢复性：<br>系统的一部分组件失效时，不会影响到整个系统。消息队列降低了进程间的耦合度，所以即使一个处理消息的进程挂掉，加入队列中的消息仍然可以在系统恢复后被处理。</li><li>顺序保证：<br>在大多使用场景下，数据处理的顺序都很重要。大部分消息队列本来就是排序的，并且能保证数据会按照特定的顺序来处理。（Kafka保证一个Partition内的消息的有序性）</li><li>缓冲：<br>有助于控制和优化数据流经过系统的速度，解决生产消息和消费消息的处理速度不一致的情况。</li><li>异步通信：<br>很多时候，用户不想也不需要立即处理消息。消息队列提供了异步处理机制，允许用户把一个消息放入队列，但并不立即处理它。想向队列中放入多少消息就放多少，然后在需要的时候再去处理它们。</li></ol></li></ul><h3 id="生产过程分析以及原理"><a href="#生产过程分析以及原理" class="headerlink" title="生产过程分析以及原理"></a>生产过程分析以及原理</h3><h4 id="写入方式"><a href="#写入方式" class="headerlink" title="写入方式"></a>写入方式</h4><p>producer采用推（push）模式将消息发布到broker，每条消息都被追加（append）到分区（patition）中，属于顺序写磁盘（顺序写磁盘效率比随机写内存要高，保障kafka吞吐率）。</p><h4 id="分区（Partition）"><a href="#分区（Partition）" class="headerlink" title="分区（Partition）"></a>分区（Partition）</h4><p>消息发送时都被发送到一个topic，其本质就是一个目录，而topic是由一些Partition Logs(分区日志)组成，其组织结构如下图所示：<br><img src="https://raw.githubusercontent.com/pengyirui/blog_img/main/2020-08-22-14.png"><br>每个Partition中的消息都是有序的，生产的消息被不断追加到Partition log上，其中的每一个消息都被赋予了一个唯一的offset值。</p><ul><li>分区的原因<ol><li>方便在集群中扩展，每个Partition可以通过调整以适应它所在的机器，而一个topic又可以有多个Partition组成，因此整个集群就可以适应任意大小的数据了；</li><li>可以提高并发，因为可以以Partition为单位读写了。</li></ol></li><li>分区的原则<ol><li>指定了patition，则直接使用；</li><li>未指定patition但指定key，通过对key的value进行hash出一个patition；</li><li>patition和key都未指定，使用轮询选出一个patition。</li></ol></li></ul><h4 id="副本（Replication）"><a href="#副本（Replication）" class="headerlink" title="副本（Replication）"></a>副本（Replication）</h4><p>同一个partition可能会有多个replication（对应 server.properties 配置中的 default.replication.factor=N）。没有replication的情况下，一旦broker 宕机，其上所有 patition 的数据都不可被消费，同时producer也不能再将数据存于其上的patition。引入replication之后，同一个partition可能会有多个replication，而这时需要在这些replication之间选出一个leader，producer和consumer只与这个leader交互，其它replication作为follower从leader 中复制数据。</p><h4 id="写入流程"><a href="#写入流程" class="headerlink" title="写入流程"></a>写入流程</h4><p><img src="https://raw.githubusercontent.com/pengyirui/blog_img/main/2020-08-22-15.png"></p><ol><li>producer先从zookeeper的 “/brokers/…/state”节点找到该partition的leader</li><li>producer将消息发送给该leader</li><li>leader将消息写入本地log</li><li>followers从leader pull消息，写入本地log后向leader发送ACK</li><li>leader收到所有ISR中的replication的ACK后，增加HW（high watermark，最后commit 的offset）并向producer发送ACK</li></ol><h2 id="HBase"><a href="#HBase" class="headerlink" title="HBase"></a>HBase</h2><p>HBase是一种分布式、可扩展、支持海量数据存储的 NoSQL数据库<br>官方文档：<a href="http://hbase.apache.org/book.html#_preface">http://hbase.apache.org/book.html#_preface</a></p><h3 id="数据模型"><a href="#数据模型" class="headerlink" title="数据模型"></a>数据模型</h3><p>逻辑上，HBase 的数据模型同关系型数据库很类似，数据存储在一张表中，有行有列。<br>但从 HBase 的底层物理存储结构（K-V）来看，HBase 更像是一个 multi-dimensional map。</p><ol><li>Name Space<br>命名空间，类似于关系型数据库的 DatabBase 概念，每个命名空间下有多个表。HBase<br>有两个自带的命名空间，分别是 hbase 和 default，hbase 中存放的是 HBase 内置的表，<br>default表是用户默认使用的命名空间。 </li><li>Region<br>类似于关系型数据库的表概念。不同的是，HBase定义表时只需要声明列族即可，不需<br>要声明具体的列。这意味着，往HBase写入数据时，字段可以动态、按需指定。因此，和关<br>系型数据库相比，HBase能够轻松应对字段变更的场景。 </li><li>Row<br>HBase表中的每行数据都由一个RowKey 和多个Column（列）组成，数据是按照 RowKey<br>的字典顺序存储的，并且查询数据时只能根据 RowKey 进行检索，所以RowKey的设计十分重<br>要。 </li><li>Column<br>HBase中的每个列都由 Column Family(列族)和 Column Qualifier（列限定符）进行限<br>定，例如info：name，info：age。建表时，只需指明列族，而列限定符无需预先定义。 </li><li>Time Stamp<br>用于标识数据的不同版本（version），每条数据写入时，如果不指定时间戳，系统会<br>自动为其加上该字段，其值为写入 HBase的时间。 </li><li>Cell<br>由{rowkey, column Family：column Qualifier, time Stamp} 唯一确定的单元。cell 中的数<br>据是没有类型的，全部是字节码形式存贮。</li></ol><h3 id="架构角色"><a href="#架构角色" class="headerlink" title="架构角色"></a>架构角色</h3><p><img src="https://raw.githubusercontent.com/pengyirui/blog_img/main/2020-08-22-18.png" alt="基本架构"></p><ul><li>Region Server<br>Region Server为 Region的管理者，其实现类为 HRegionServer，主要作用如下:<br>对于数据的操作：get, put, delete；<br>对于 Region的操作：splitRegion、compactRegion。 </li><li>Master<br>Master是所有Region Server的管理者，其实现类为 HMaster，主要作用如下：<br>对于表的操作：create, delete, alter<br>对于RegionServer的操作：分配regions到每个RegionServer，监控每个RegionServer<br>的状态，负载均衡和故障转移。 </li><li>Zookeeper<br>HBase 通过Zookeeper 来做 Master 的高可用、RegionServer 的监控、元数据的入口以及<br>集群配置的维护等工作。 </li><li>HDFS<br>HDFS 为HBase 提供最终的底层数据存储服务，同时为HBase 提供高可用的支持。</li></ul><h3 id="架构原理"><a href="#架构原理" class="headerlink" title="架构原理"></a>架构原理</h3><p><img src="https://raw.githubusercontent.com/pengyirui/blog_img/main/2020-09-18-01.png"></p><ul><li>StoreFile<br>保存实际数据的物理文件，StoreFile 以 HFile 的形式存储在 HDFS 上。每个 Store 会有<br>一个或多个 StoreFile（HFile），数据在每个 StoreFile 中都是有序的。</li><li>MemStore<br>写缓存，由于HFile 中的数据要求是有序的，所以数据是先存储在MemStore 中，排好序后，等到达刷写时机才会刷写到HFile，每次刷写都会形成一个新的HFile。 </li><li>WAL<br>由于数据要经 MemStore 排序后才能刷写到 HFile，但把数据保存在内存中会有很高的 概率导致数据丢失，为了解决这个问题，数据会先写在一个叫做 Write-Ahead logfile 的文件 中，然后再写入MemStore中。所以在系统出现故障的时候，数据可以通过这个日志文件重<br>建。</li></ul><h3 id="写流程"><a href="#写流程" class="headerlink" title="写流程"></a>写流程</h3><p><img src="https://raw.githubusercontent.com/pengyirui/blog_img/main/2020-09-18-03.png"></p><ul><li>Client 先访问 zookeeper，获取 hbase:meta 表位于哪个 Region Server。</li><li>访问对应的 Region Server，获取 hbase:meta 表，根据读请求的 namespace:table/rowkey， 查询出目标数据位于哪个 Region Server 中的哪个 Region 中。并将该 table 的 region 信息以及 meta 表的位置信息缓存在客户端的 meta cache，方便下次访问。</li><li>与目标 Region Server 进行通讯；</li><li>将数据顺序写入（追加）到WAL；</li><li>将数据写入对应的 MemStore，数据会在 MemStore 进行排序；</li><li>向客户端发送 ack；</li><li>等达到 MemStore 的刷写时机后，将数据刷写到 HFile。</li></ul><h3 id="读流程"><a href="#读流程" class="headerlink" title="读流程"></a>读流程</h3><p><img src="https://raw.githubusercontent.com/pengyirui/blog_img/main/2020-09-18-02.png"></p><ul><li>Client 先访问 zookeeper，获取 hbase:meta 表位于哪个 Region Server。</li><li>访问对应的 Region Server，获取 hbase:meta 表，根据读请求的 namespace:table/rowkey， 查询出目标数据位于哪个 Region Server 中的哪个 Region 中。并将该 table 的 region 信息以<br>及 meta 表的位置信息缓存在客户端的 meta cache，方便下次访问。</li><li>与目标 Region Server 进行通讯；</li><li>分别在 Block Cache（读缓存），MemStore 和 Store File（HFile）中查询目标数据，并将<br>查到的所有数据进行合并。此处所有数据是指同一条数据的不同版本（time stamp）或者不<br>同的类型（Put/Delete）。</li><li>将从文件中查询到的数据块（Block，HFile数据存储单元，默认大小为64KB）缓存到<br>Block Cache。</li><li>将合并后的最终结果返回给客户端。</li></ul><h2 id="Phoenix"><a href="#Phoenix" class="headerlink" title="Phoenix"></a>Phoenix</h2><p>Phoenix 是 <code>HBase</code> 和 <code>SQL Apache</code>顶级开源项目<br>社区公认的HBase上最合适的SQL层，支持毫秒级到秒级的低延时OLTP和操作型分析查询Phoenix核心能力</p><p>SQL引擎层<br>支持标准SQL 92，转为SQL为HBase API<br>算子、过滤条件下推到Server端，并行执行<br>轻量级事务、二级索引、动态列、分页查询等多种SQL层能力<br>JDBC Driver Metadata管理<br>集成<code>Spark.Hive.Pig.Flume</code>和<code>MapReduce</code></p><p><img src="https://raw.githubusercontent.com/pengyirui/blog_img/main/2020-08-22-19.png" alt="架构"></p><h3 id="实现原理"><a href="#实现原理" class="headerlink" title="实现原理"></a>实现原理</h3><p>Phoenix的SQL实现原理主要也是基于一系列的Scan操作来完成，Scan是HBase的批量扫描过程。这一系列的Scan操作也是分散到各台RegionServer上通过Coprocessor来完成。主要用到的是RegionObserver，通过RegionObserver在postScannerOpen Hook中将RegionScanner替换成支持聚合操作的定制化Scanner，在真正执行聚合时，会通过自定的Scan属性传递给RegionScanner，在这个Scan中也可加入一些过滤规则，尽量减少返回Client的结果。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 运维记录 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LVM XFS增加硬盘分区容量</title>
      <link href="/posts/3a99.html"/>
      <url>/posts/3a99.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>转载自<a href="https://www.cnblogs.com/archoncap/p/5442208.html">https://www.cnblogs.com/archoncap/p/5442208.html</a><br>根据自己学识略有增减</p></blockquote><h2 id="给某个硬盘增加分区"><a href="#给某个硬盘增加分区" class="headerlink" title="给某个硬盘增加分区"></a>给某个硬盘增加分区</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[root@Mysql01-213-66 ~]# df -h</span><br><span class="line">Filesystem                            Size  Used Avail Use% Mounted on</span><br><span class="line">/dev/mapper/vg_mysql0121366-LogVol02  7.7G  2.6G  4.8G  36% /</span><br><span class="line">tmpfs                                 495M     0  495M   0% /dev/shm</span><br><span class="line">/dev/sda1                             194M   29M  155M  16% /boot</span><br><span class="line">/dev/mapper/vg_mysql0121366-LogVol01  8.0G  3.1G  5.0G  38% /data</span><br></pre></td></tr></table></figure><p>这里增加<code>/data</code>大小</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">[root@Mysql01-213-66 ~]# fdisk -l /dev/sda</span><br><span class="line"></span><br><span class="line">Disk /dev/sda: 40.8 GB, 40802189312 bytes</span><br><span class="line">255 heads, 63 sectors/track, 4960 cylinders</span><br><span class="line">Units = cylinders of 16065 * 512 = 8225280 bytes</span><br><span class="line">Sector size (logical/physical): 512 bytes / 512 bytes</span><br><span class="line">I/O size (minimum/optimal): 512 bytes / 512 bytes</span><br><span class="line">Disk identifier: 0x000eb81f</span><br><span class="line"></span><br><span class="line">   Device Boot      Start         End      Blocks   Id  System</span><br><span class="line">/dev/sda1   *           1          26      204800   83  Linux</span><br><span class="line">Partition 1 does not end on cylinder boundary.</span><br><span class="line">/dev/sda2              26        2350    18668544   8e  Linux LVM</span><br></pre></td></tr></table></figure><p>进行分区</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line">[root@Mysql01-213-66 ~]# fdisk /dev/sda</span><br><span class="line"></span><br><span class="line">WARNING: DOS-compatible mode is deprecated. It&#x27;s strongly recommended to</span><br><span class="line">         switch off the mode (command &#x27;c&#x27;) and change display units to</span><br><span class="line">         sectors (command &#x27;u&#x27;).</span><br><span class="line">         </span><br><span class="line">-----小小分割线-----</span><br><span class="line"></span><br><span class="line">Command (m for help): n</span><br><span class="line"></span><br><span class="line">-----小小分割线，输入n代表新建的意思-----</span><br><span class="line"></span><br><span class="line">Command action</span><br><span class="line">   e   extended</span><br><span class="line">   p   primary partition (1-4)</span><br><span class="line">   </span><br><span class="line">-----小小分割线，输入p代表分区表，只能1至4-----</span><br><span class="line"></span><br><span class="line">Partition number (1-4): 3   #新建3号分区</span><br><span class="line"></span><br><span class="line">-----小小分割线，划分多少内存给3号分区-----</span><br><span class="line"></span><br><span class="line">First cylinder (2350-4960, default 2350): </span><br><span class="line">Using default value 2350</span><br><span class="line">Last cylinder, +cylinders or +size&#123;K,M,G&#125; (2350-4960, default 4960): </span><br><span class="line">Using default value 4960</span><br><span class="line"></span><br><span class="line">-----小小分割线，查看分区表-----</span><br><span class="line"></span><br><span class="line">Command (m for help): p    </span><br><span class="line"></span><br><span class="line">Disk /dev/sda: 40.8 GB, 40802189312 bytes</span><br><span class="line">255 heads, 63 sectors/track, 4960 cylinders</span><br><span class="line">Units = cylinders of 16065 * 512 = 8225280 bytes</span><br><span class="line">Sector size (logical/physical): 512 bytes / 512 bytes</span><br><span class="line">I/O size (minimum/optimal): 512 bytes / 512 bytes</span><br><span class="line">Disk identifier: 0x000eb81f</span><br><span class="line"></span><br><span class="line">   Device Boot      Start         End      Blocks   Id  System</span><br><span class="line">/dev/sda1   *           1          26      204800   83  Linux</span><br><span class="line">Partition 1 does not end on cylinder boundary.</span><br><span class="line">/dev/sda2              26        2350    18668544   8e  Linux LVM</span><br><span class="line">/dev/sda3            2350        4960    20966832   83  Linux</span><br><span class="line"></span><br><span class="line">-----小小分割线，这里的t是更改系统分区ID-----</span><br><span class="line"></span><br><span class="line">Command (m for help): t</span><br><span class="line">Partition number (1-4): 3</span><br><span class="line">Hex code (type L to list codes): 8e</span><br><span class="line">Changed system type of partition 3 to 8e (Linux LVM)</span><br><span class="line"></span><br><span class="line">-----小小分割线，w代表写入并退出，完成-----</span><br><span class="line"></span><br><span class="line">Command (m for help): w</span><br><span class="line">The partition table has been altered!</span><br><span class="line"></span><br><span class="line">Calling ioctl() to re-read partition table.</span><br><span class="line"></span><br><span class="line">WARNING: Re-reading the partition table failed with error 16: Device or resource busy.</span><br><span class="line">The kernel still uses the old table. The new table will be used at</span><br><span class="line">the next reboot or after you run partprobe(8) or kpartx(8)</span><br><span class="line">Syncing disks.</span><br></pre></td></tr></table></figure><h3 id="另其生效"><a href="#另其生效" class="headerlink" title="另其生效"></a>另其生效</h3><p>重启服务器或者<code>partprobe</code>创建物理卷</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@Mysql01-213-66 ~]# pvcreate /dev/sda3</span><br><span class="line">  Physical volume &quot;/dev/sda3&quot; successfully created</span><br></pre></td></tr></table></figure><h3 id="查询物理卷"><a href="#查询物理卷" class="headerlink" title="查询物理卷"></a>查询物理卷</h3><p>使用<code>vgscan</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@Mysql01-213-66 ~]# vgscan</span><br><span class="line">  Reading all physical volumes.  This may take a while...</span><br><span class="line">  Found volume group &quot;vg_mysql0121366&quot; using metadata type lvm2</span><br></pre></td></tr></table></figure><h2 id="使用新增物理卷扩展vg"><a href="#使用新增物理卷扩展vg" class="headerlink" title="使用新增物理卷扩展vg"></a>使用新增物理卷扩展vg</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[root@Mysql01-213-66 ~]# vgextend vg_mysql0121366 /dev/sda3</span><br><span class="line">  Volume group &quot;vg_mysql0121366&quot; successfully extended</span><br><span class="line">[root@Mysql01-213-66 ~]# vgscan</span><br><span class="line">  Reading all physical volumes.  This may take a while...</span><br><span class="line">  Found volume group &quot;vg_mysql0121366&quot; using metadata type lvm2</span><br></pre></td></tr></table></figure><h3 id="查询vg"><a href="#查询vg" class="headerlink" title="查询vg"></a>查询vg</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">[root@Mysql01-213-66 ~]# vgdisplay </span><br><span class="line">  --- Volume group ---</span><br><span class="line">  VG Name               vg_mysql0121366</span><br><span class="line">  System ID             </span><br><span class="line">  Format                lvm2</span><br><span class="line">  Metadata Areas        2</span><br><span class="line">  Metadata Sequence No  5</span><br><span class="line">  VG Access             read/write</span><br><span class="line">  VG Status             resizable</span><br><span class="line">  MAX LV                0</span><br><span class="line">  Cur LV                3</span><br><span class="line">  Open LV               3</span><br><span class="line">  Max PV                0</span><br><span class="line">  Cur PV                2</span><br><span class="line">  Act PV                2</span><br><span class="line">  VG Size               37.79 GiB</span><br><span class="line">  PE Size               4.00 MiB</span><br><span class="line">  Total PE              9675</span><br><span class="line">  Alloc PE / Size       4557 / 17.80 GiB</span><br><span class="line">  Free  PE / Size       5118 / 19.99 GiB</span><br><span class="line">  VG UUID               Zy2PVv-xSsx-NEAv-L6ba-G8Oy-tBBq-5zXKQm</span><br></pre></td></tr></table></figure><h3 id="查询lv"><a href="#查询lv" class="headerlink" title="查询lv"></a>查询lv</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line">[root@Mysql01-213-66 ~]# lvdisplay </span><br><span class="line">  --- Logical volume ---</span><br><span class="line">  LV Path                /dev/vg_mysql0121366/LogVol01</span><br><span class="line">  LV Name                LogVol01</span><br><span class="line">  VG Name                vg_mysql0121366</span><br><span class="line">  LV UUID                5znkJ2-wdeZ-Y2o1-ECDS-gzzl-PqaS-qo2yZR</span><br><span class="line">  LV Write Access        read/write</span><br><span class="line">  LV Creation host, time Mysql01-213-66, 2015-08-30 20:42:13 +0800</span><br><span class="line">  LV Status              available</span><br><span class="line">  # open                 1</span><br><span class="line">  LV Size                8.00 GiB</span><br><span class="line">  Current LE             2048</span><br><span class="line">  Segments               1</span><br><span class="line">  Allocation             inherit</span><br><span class="line">  Read ahead sectors     auto</span><br><span class="line">  - currently set to     256</span><br><span class="line">  Block device           253:2</span><br><span class="line">   </span><br><span class="line">  --- Logical volume ---</span><br><span class="line">  LV Path                /dev/vg_mysql0121366/LogVol00</span><br><span class="line">  LV Name                LogVol00</span><br><span class="line">  VG Name                vg_mysql0121366</span><br><span class="line">  LV UUID                b1FV1n-iKyK-kZ23-glRO-opFh-gDRp-TzWNcL</span><br><span class="line">  LV Write Access        read/write</span><br><span class="line">  LV Creation host, time Mysql01-213-66, 2015-08-30 20:42:14 +0800</span><br><span class="line">  LV Status              available</span><br><span class="line">  # open                 1</span><br><span class="line">  LV Size                2.00 GiB</span><br><span class="line">  Current LE             512</span><br><span class="line">  Segments               1</span><br><span class="line">  Allocation             inherit</span><br><span class="line">  Read ahead sectors     auto</span><br><span class="line">  - currently set to     256</span><br><span class="line">  Block device           253:0</span><br><span class="line">   </span><br><span class="line">  --- Logical volume ---</span><br><span class="line">  LV Path                /dev/vg_mysql0121366/LogVol02</span><br><span class="line">  LV Name                LogVol02</span><br><span class="line">  VG Name                vg_mysql0121366</span><br><span class="line">  LV UUID                eoVdk3-cbcP-9PlI-kZBL-6pY2-Jpbl-1WI2uH</span><br><span class="line">  LV Write Access        read/write</span><br><span class="line">  LV Creation host, time Mysql01-213-66, 2015-08-30 20:42:14 +0800</span><br><span class="line">  LV Status              available</span><br><span class="line">  # open                 1</span><br><span class="line">  LV Size                7.80 GiB</span><br><span class="line">  Current LE             1997</span><br><span class="line">  Segments               1</span><br><span class="line">  Allocation             inherit</span><br><span class="line">  Read ahead sectors     auto</span><br><span class="line">  - currently set to     256</span><br><span class="line">  Block device           253:1</span><br></pre></td></tr></table></figure><p>显示磁盘相关信息</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[root@Mysql01-213-66 ~]# df -h</span><br><span class="line">Filesystem                            Size  Used Avail Use% Mounted on</span><br><span class="line">/dev/mapper/vg_mysql0121366-LogVol02  7.7G  2.6G  4.8G  35% /</span><br><span class="line">tmpfs                                 495M     0  495M   0% /dev/shm</span><br><span class="line">/dev/sda1                             194M   29M  155M  16% /boot</span><br><span class="line">/dev/mapper/vg_mysql0121366-LogVol01  8.0G  3.1G  5.0G  38% /data</span><br></pre></td></tr></table></figure><h3 id="扩展lv"><a href="#扩展lv" class="headerlink" title="扩展lv"></a>扩展lv</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">[root@Mysql01-213-66 ~]# lvextend -L +19G /dev/mapper/vg_mysql0121366-LogVol01</span><br><span class="line">  Extending logical volume LogVol01 to 27.00 GiB</span><br><span class="line">  Logical volume LogVol01 successfully resized</span><br><span class="line"></span><br><span class="line">[root@Mysql01-213-66 ~]# df -h</span><br><span class="line">Filesystem                            Size  Used Avail Use% Mounted on</span><br><span class="line">/dev/mapper/vg_mysql0121366-LogVol02  7.7G  2.6G  4.8G  35% /</span><br><span class="line">tmpfs                                 495M     0  495M   0% /dev/shm</span><br><span class="line">/dev/sda1                             194M   29M  155M  16% /boot</span><br><span class="line">/dev/mapper/vg_mysql0121366-LogVol01  8.0G  3.1G  5.0G  38% /data</span><br></pre></td></tr></table></figure><p>若不是xfs我们可以用resize2fs，这里报错了(<code>ext4</code>的文件系统用<code>resize2fs</code>来重新识别，<code>xfs</code>文件系统的用<code>xfs_growfs</code>)</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">[root@Mysql01-213-66 ~]# resize2fs -f /dev/mapper/vg_mysql0121366-LogVol01</span><br><span class="line">resize2fs 1.41.12 (17-May-2010)</span><br><span class="line">resize2fs: Bad magic number in super-block while trying to open /dev/mapper/vg_mysql0121366-LogVol01</span><br><span class="line">Couldn&#x27;t find valid filesystem superblock.</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">[root@Mysql01-213-66 ~]# xfs_growfs /dev/mapper/vg_mysql0121366-LogVol01</span><br><span class="line">meta-data=/dev/mapper/vg_mysql0121366-LogVol01 isize=256    agcount=4, agsize=524288 blks</span><br><span class="line">         =                       sectsz=512   attr=2, projid32bit=0</span><br><span class="line">data     =                       bsize=4096   blocks=2097152, imaxpct=25</span><br><span class="line">         =                       sunit=0      swidth=0 blks</span><br><span class="line">naming   =version 2              bsize=4096   ascii-ci=0</span><br><span class="line">log      =internal               bsize=4096   blocks=2560, version=2</span><br><span class="line">         =                       sectsz=512   sunit=0 blks, lazy-count=1</span><br><span class="line">realtime =none                   extsz=4096   blocks=0, rtextents=0</span><br><span class="line">data blocks changed from 2097152 to 7077888</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">[root@Mysql01-213-66 ~]# df -h</span><br><span class="line">Filesystem                            Size  Used Avail Use% Mounted on</span><br><span class="line">/dev/mapper/vg_mysql0121366-LogVol02  7.7G  2.6G  4.8G  35% /</span><br><span class="line">tmpfs                                 495M     0  495M   0% /dev/shm</span><br><span class="line">/dev/sda1                             194M   29M  155M  16% /boot</span><br><span class="line">/dev/mapper/vg_mysql0121366-LogVol01   27G  3.1G   24G  12% /data</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>影响力</title>
      <link href="/posts/a13.html"/>
      <url>/posts/a13.html</url>
      
        <content type="html"><![CDATA[<h1 id="影响力"><a href="#影响力" class="headerlink" title="影响力"></a>影响力</h1><p>作者 <em>罗伯特·西奥迪尼</em><br><img src="https://raw.githubusercontent.com/pengyirui/blog_img/main/2020-08-19-00.jpg"></p><h2 id="第一章"><a href="#第一章" class="headerlink" title="第一章"></a>第一章</h2><p>影响力得武器 </p><p>当我们请别人帮忙时，如果能讲出一个理由，那我们得到别人帮助的可能性就更大。 </p><p>(请求+原因） </p><p>例如，“对不起，我有5页纸要复印，能不能让我先复印。” </p><p>比 </p><p>“对不起，我有5页纸要复印，能不能让我先复印。因为我有急事。”差。 </p><p>水平测试 p39 </p><h2 id="第二章"><a href="#第二章" class="headerlink" title="第二章"></a>第二章</h2><p>互惠 </p><p>提高锚点，让对方作出让步 </p><p>所以，当没有东西赠送的时候，提过分的要求得不到答应的时候，主动让步这也是一种互惠。其内在含意是，我都没有坚持我的要求，那么你看在我让步了的面子上，还是哪怕稍微给我一点吧。这个技巧在销售谈判中经常性地使用，也是一种非常正式的技巧。 </p><p>(使用次数过多会有负面效果 </p><h2 id="第三章"><a href="#第三章" class="headerlink" title="第三章"></a>第三章</h2><p>承诺和一致 </p><p>保持一致的认同度有时比做得正确的认同度还要高 </p><p>一些跨国企业在招聘员工的时候采用了类似的策略，他们通过多达十几种、十几次的各种笔试、面试、小组面试等手段来提高进入公司的难度，来强化进入公司的过程的难度，从而使新员工一旦进入了该公司，忠诚度就相对较高，至少比那些很轻松就进来的员工的忠诚度高许多。这种行为就是这个原理的应用。而且通过这种严格的考察、测试进来的员工对自己企业的自豪感也会由此增加。而那些轻易就招聘来的员工，他们离开公司的时候也非常容易，内心没有建立起来什么明显的自豪感和对公司应该有的凝聚力。(军队也有类似做法 </p><p><img src="https://raw.githubusercontent.com/pengyirui/blog_img/main/2020-08-19-01.png"></p><p>在这幅说明 了依阿 华州能 源研究的结果。在图中 我们可以看 到， 开始时，节约能源的努力完全依赖于公开寅传（上图） **** 然而不久之后，这个节约能源的承诺自发衍牛出了支持这种行为的新理由 使得 研究小组可以拿止他的诱惑（中图 ）。 其 结果是，即使最初的 . 支撑物 一 公开宣传已不存在 ， 这种长期坚持不懈的节约能源的行为依然还足稳稳地站 在:自己 的腿上 （下图 ） </p><p><strong>保持愚蠢的一致是思想混乱的怪物</strong> </p><h2 id="第四章"><a href="#第四章" class="headerlink" title="第四章"></a>第四章</h2><p>社会认同 </p><p>采取一种行为的人越多，我们就会觉得这种行为越正确。如果读者对这一点有怀疑的话.可以做一个小实验。站在一条人来人往的人行道上，盯着天空或某一座高楼看上一分钟。在这一段时间里，估计不会发生什么亊情—— 大部分从你身旁走过的人都不会看你一眼，实际上绝对不会有人停下来跟你一起盯着看。 第二天，你带 4 个朋友一起到昨天那个地方，一起往上看。不出 60秒.就会杳一群过路人停下来，伸着脖子，跟你们几个人一起往天上看。 即使是那些没有加人你们的行人，也无法抵抗那种至少往上瞄一眼的压力。如果你的实验结果与纽约三位社会心理学家的实验结果一样的话， 80% 的行人都会抬头仰望你和你的朋友们注视着的那一片天空 </p><p>既然惟一可接受的真理已经被物质证据彻底否决了，要走出困境只有一个办法： 必须为其信仰的正确性建立起另外一种认同体系，那就是社会认同 </p><p>一般来说，当对自己 缺乏信心时，当形势不棚朗时，当不确定性占上顺， 我们最有可能接受并参照别人的行为。特别是在形势模糊不清的时候， 这种每个人都希望看看别人在做什么的倾向会导致一种名为“多元无知”的有趣现象 </p><p>在动荡的社会，面对较高程度的不确定性的时候，人们的行为更加容易失去理性，更加容易跟风，更加容易从众。因此，创造不确定性也可以是营销的一种手段 </p><p>社会认同放在小孩子身上也适用 </p><p>我们常常认为十几岁的孩子是反叛的，不受约束的 。 其实, 我们必须认识到，他 们仅仅对父母 是这样。在相似的人 群中， 他们会极 力遵守社会认 同原理.别人怎么做.他们就怎么做 </p><p>我们再一次看到 ，在那些对情况不熟悉或没有把握、因而必须从外界寻找认同的人来说， 社会认同原理的效力最大 </p><h2 id="第五章"><a href="#第五章" class="headerlink" title="第五章"></a>第五章</h2><p><strong>喜好</strong> </p><p>在销售中 ，尤其是直销以及大客户 需要面对面的销售中，销售人员总是被教育要模仿客户的说话方式，如果客户用词比较粗俗，那么随后的用词也要粗俗。如果客户痛恨一些事物.那么销售人 员也要表现出对该事 物的痛恨。原来这些教育的本质就在这里—— 喜好原理 </p><p>聚会可以被利用来做销售之用途，但关键是这种聚会要策划到位， 一般不容易看出来才可以。 </p><p>外表的吸引力 </p><p>所谓光环效应，是指一个人的某一正面特征会主导人们对这个人的整体宥法 </p><p><strong>相似性</strong> </p><p>我们喜欢那些与我们相似的人。不管他们是在观点上、个性上、背景上， 还是生活方式上与我们相似，都会使我们对他们产生好感。因此，对于那些为获得我们的顺从而想要博得我们好感的人来说，只要在任何一个方面表现出与我们相似就能达到目的。 </p><p>声称自己有类似的兴趣和背景，因为 相似性很容易被伪装出来， 所以我建议在 </p><p>那些声称“我和你一样”的请求者的面前还是小心为妙 </p><p>穿着就是一个很好的例子。 一些研究表明，我们更有可能帮助那些穿着与我们相似的人 </p><p><strong>称赞</strong> </p><p>第一，人们最喜欢那些只提供了正面评价的人。第二， 即使人们完全明白这个人做正面的 </p><p>评价是为 r能得到他们的帮助，他们仍然最喜欢他。最后，正面的评价与其他评价不同，不一定要准确。不管正面的评价是否符合实际，溜 须拍马的人都同样会贏得被奉承者的好感 </p><p>在中国的传统文化中，直接赞扬容易被认为是虚伪，因此，我们开发了另外一种模式，那就是迎合。将对方说的话分为两种，一种是现象，一种是结论（或者是观点）。如果对方说的是结论，那么你就补充一下足够支持那个结论的现象；如果对方说的是现象，你可以补充类似的现象，同时要一个符号现象推导出来的结论。这是一种高超的迎合技巧，也是创建相似性的具体手段。 </p><p><strong>接触与合作</strong> </p><p>类似于曝光效应，见得多，接触得多就会然后熟悉并且有好感（有时候也有例外）。 </p><p>长期在不愉快的环境下，如挫折、冲突 、竞争等， 接触一个人或一件事，只会使人们对这个 </p><p><strong>关联</strong> </p><p>大众对品牌的疯狂偏好，其实也是关联的道理。由于品牌不断强化美好的事物，因此，只要看到这个品牌的符号，就会产生美好的联想，于是下意识采购的行为就发生了。 </p><p>车模与汽车也是一个例子 </p><p>终子理解了销售人员为什么总是喜好请客户吃大餐，原来大餐的好感也可以转移到销售人员身上，从而对拿下订单有利。 </p><p>本能会去除与自己不好的关联 </p><p><strong>怎么保护自己</strong> </p><p>我 们不应 把注意 力直接放在那些令我们对让 人顺从的行家们产生 过多好感的事情上，而是要把注意力放在自己是否已经对他产生了过多好感这一事实上。如果我们发现自己对这种人的喜爱程度已经超乎寻常，那这时我们就要采取行动来保护自己 </p><p>当我们做出任何一个顺从他人的决定时，都应 该把我 们对请 求者的感情与他提出的要求分开（划清界限） </p><p>把交易人和交易本身分开，并ii只根据后者来做出决定 </p><h2 id="第六章"><a href="#第六章" class="headerlink" title="第六章"></a>第六章</h2><p><strong>权威</strong> </p><p>许多医院的护士其实对医生.开错了药方是有感觉的，但是由于医生的权威性，她们通常是将错就错，而不是主动敢于冒着风险向医生求证。这就是权威的力量。 </p><p>在那些传销组织中，有一个树立权威的过程。这些组织通常会树立一个年收入百万元的人作为大家的偶像和权威。于是，他努力讲解自己的成功之道，努力建立自己的威严，只要他发布命令，所有的人都为之倾倒，毫不犹豫地按照命令去做，这才是传销组织的真正有危害的地方。 </p><p>在学校的教育中，也是过于树立权威，而导致了学生们丧失挑战权威的能力，丧失独立思考的能力，丧失日后主动面对问题并独立找到解决方法的能力。全世界的教育都面临着同样的挑战和问题，其根源在于对权威的不恰当建立和使用。 </p><p>因此，我们从一-出生就被告知，服从权威是应该的，而违抗权威则是错误的。这个重要信息存在于父母的教导中，学校的童遥中以及我们童年时听过的故事和唱过的歌曲中。而且一直延伸到我们成年后所遇到的法律、军队和政治制度中。在所有这些教诲和经历中，对规则的服从和对权威的忠诚都得到了很高的评价 </p><p>即使是具有独立思考能力的成年人也会为了服从权威.的命令而做出一些完全丧失理智的事情来 </p><p><strong>有三种最典型的权威象征—— 头衔、衣着和外部标志</strong> </p><p>从外观上体现出来的权威和力置经常都是徒有其表的 </p><p>有时候权威的话并没有什么道理，可我们还是会毫不犹豫地按他们说的去做 </p><p>伪造起来也很容易。在警察局的档案里就有很多行骗高手以换装。这些骗子像变色龙一样，一会儿变成医院的白色，一会儿变成牧师的黑色，一会儿变成军队的绿色，一会儿又变成警察的蓝色。哪一种颜色对他们最有利，他们就换成哪一种。 </p><p>外部标志，如车、首饰等根据在旧金山湾区进行的一项调查，拥有名车的人更受人尊重 </p><p><strong>怎样保护自己</strong> </p><p>一种自我防御的最基本的方法就是对权威保持高度的警觉 </p><p>多问自己 几个问题 </p><p>当一个貌似权威的人试图影响我们时，我们要问的第一个问題是： “ 这个权威是不是一个真正的专家？” </p><h2 id="第七章"><a href="#第七章" class="headerlink" title="第七章"></a>第七章</h2><p><strong>短缺</strong> </p><p>短缺原理：“机会越少，价值就越髙” </p><p>可能会失去某种东西的想法在人们的决 策过程中发挥着重要作用。实际上， 害怕失去某种东西的想法比希望得到同等价值东西的想法对人们的激励作用更大 </p><p>商家们也会用数量有限的把戏刺激消费 </p><p>心理抗拒 </p><p>从某种意义上说，当一种机会变得越来越难得时， 我们也就失去了一部分自由。而失去已经获得的自由是让我们深恶痛绝的事情 </p><p>最佳条件 </p><p>当供应由充足变为短缺时，人们对曲奇产生了一种比供应一直短缺时更肯定的正面反映。<br><img src="https://raw.githubusercontent.com/pengyirui/blog_img/main/2020-08-19-02.png" alt="国家层面"><br><img src="https://raw.githubusercontent.com/pengyirui/blog_img/main/2020-08-19-03.png" alt="家庭层面"><br><img src="https://raw.githubusercontent.com/pengyirui/blog_img/main/2020-08-19-04.png" alt="传染的竞争"></p><p><strong>怎样保护自己</strong> </p><p>有时候，人们的满足感并不是来自于对短缺商品 的体验，而是来自于对它的占有。<br>每当我们 面临某 种东西短缺的压力时，一定要问自己：“我想从它身上得到什么? “ </p>]]></content>
      
      
      
        <tags>
            
            <tag> 书本 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>tomcat、mysql、nginx、redis版本升级</title>
      <link href="/posts/71b0.html"/>
      <url>/posts/71b0.html</url>
      
        <content type="html"><![CDATA[<h2 id="Tomcat"><a href="#Tomcat" class="headerlink" title="Tomcat"></a>Tomcat</h2><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><ul><li><p>查看当前tomcat版本:<br>tomcat安装在/usr/local/下<br>cd 至apache-tomcat-xxx/bin<br>sh version.sh命令，查看版本信息</p></li><li><p>下载需要的tomcat安装包：<br>下载网址：<a href="https://tomcat.apache.org/">https://tomcat.apache.org/</a><br>选择需要下载的版本：</p></li></ul><img src="https://raw.githubusercontent.com/pengyirui/blog_img/main/2020-08-12-04.png"/><ul><li><p>上传包，并解压<br><code>[root@localhost local]# tar -xvf apache-tomcat-8.0.52.tar.gz</code></p></li><li><p>把Tomcat文件移动到Tomcat文件夹<br><code>[root@localhost tomcat]# mv * /usr/local/tomcat</code></p></li><li><p>进入tomcat下的bin然后启动Tomcat<br><code>[root@localhost bin]# ./startup.sh</code></p></li><li><p>查看进程<br><code>ps -ef | grep tomcat</code></p></li></ul><h4 id="以service方式启动"><a href="#以service方式启动" class="headerlink" title="以service方式启动"></a>以service方式启动</h4><p>对<code>tomcat</code>文件进行编辑</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]# vi /etc/rc.d/init.d/tomcat</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#!/bin/bash  </span><br><span class="line"># description: Tomcat7 Start Stop Restart  </span><br><span class="line"># processname: tomcat7  </span><br><span class="line"># chkconfig: 234 20 80  </span><br><span class="line"></span><br><span class="line">#安装jdk的路径</span><br><span class="line">JAVA_HOME=/usr/lib/jvm/jdk1.8.0_171</span><br><span class="line">export JAVA_HOME  </span><br><span class="line">PATH=$JAVA_HOME/bin:$PATH  </span><br><span class="line">export PATH  </span><br><span class="line"></span><br><span class="line">#安装tomcat的路径</span><br><span class="line">CATALINA_HOME=/usr/local/tomcat</span><br><span class="line">case $1 in  </span><br><span class="line">start)  </span><br><span class="line">sh $CATALINA_HOME/bin/startup.sh  </span><br><span class="line">;;   </span><br><span class="line">stop)     </span><br><span class="line">sh $CATALINA_HOME/bin/shutdown.sh  </span><br><span class="line">;;   </span><br><span class="line">restart)  </span><br><span class="line">sh $CATALINA_HOME/bin/shutdown.sh  </span><br><span class="line">sh $CATALINA_HOME/bin/startup.sh  </span><br><span class="line">;;</span><br><span class="line">esac      </span><br><span class="line">exit 0</span><br></pre></td></tr></table></figure><ul><li><p>设置tomcat的文件属性，把tomcat 修改为可运行的文件<br><code>chmod 755 tomcat</code></p></li><li><p>服务就添加成功<br>chkconfig –list</p></li><li><p>测试<br>service tomcat start<br>service tomcat stop<br>service tomcat restart<br>service tomcat status</p></li></ul><h3 id="升级"><a href="#升级" class="headerlink" title="升级"></a>升级</h3><ul><li><p>去服务器备份apache-tomcat-xx 下的全部文件。<br>来到apache-tomcat-xx同级目录新建一个文件夹：<br>命令：mkdir tomcat-backups<br>复制apache-tomcat-xx下的所有文件到 tomcat-backups：<br>命令：cp -Rf apache-tomcat-xx路径/*  tomcat-backups/</p></li><li><p>将现apache-tomcat-xx改名为apache-tomcat-old<br>命令mv apache-tomcat-xx  apache-tomcat-old</p></li><li><p>上传下载过的tomcat安装包。</p></li><li><p>创建放置tomcat服务器的文件夹，使用 tar -zxvf命令解压tomcat到该文件夹</p></li><li><p>复制备份的tomcat-backups下的conf，项目，server.keystore文件到升级后的tomcat下。并删除ROOT，docs，manager文件（没有则不用管）</p></li><li><p>cd 至tomcat/bin目录下，执行 ./shutdown.sh关闭  ./startup.sh启动服务器</p></li><li><p>升级后在/bin目录下查看版本<br><img src="2020-08-12-06.png"></p></li></ul><h3 id="运行机制"><a href="#运行机制" class="headerlink" title="运行机制"></a>运行机制</h3><p>对一个servlet容器<br>1:实现Servlet api规范。这是最基础的一个实现，servlet api大部分都是接口规范。如request、response、session、cookie。为了我们应用端能正常使用，容器必须有一套完整实现。<br>2：启动Socket监听端口，等待http请求。<br>3：获取http请求，分发请求给不同的协议处理器，如http和https在处理上是不一样的。<br>4：封装请求，构造HttpServletRequest。把socket获取的用户请求字节流转换成java对象httprequest。构造httpResponse。<br>5：调用(若未创建，则先加载)servlet，调用init初始化，执行servlet.service()方法。<br>6：为httpResponse添加header等头部信息。<br>7：socket回写流，返回满足http协议格式的数据给浏览器。<br>8：实现JSP语法分析器，JSP标记解释器。JSPservlet实现和渲染引擎。<br>9：JNDI、JMX等服务实现。容器一般额外提供命名空间服务管理。<br>10：线程池管理，创建线程池，并为每个请求分配线程。</p><h2 id="Redis"><a href="#Redis" class="headerlink" title="Redis"></a>Redis</h2><h3 id="安装-1"><a href="#安装-1" class="headerlink" title="安装"></a>安装</h3><p>redis历史版本下载<br><a href="http://download.redis.io/releases/">http://download.redis.io/releases/</a></p><p>最新版本下载<br><a href="https://redis.io/download">https://redis.io/download</a><br><img src="https://raw.githubusercontent.com/pengyirui/blog_img/main/2020-08-12-07.png" style="zoom:75%;" /></p><ul><li><p>下载下来后解压<br><code>tar xzvf redis-x.x.x.tar.gz</code></p></li><li><p>进入解压后的文件夹<br><code>cd redis-x.x.x</code></p></li><li><p>安装</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">make</span><br><span class="line">make install PREFIX=/usr/local/redis</span><br></pre></td></tr></table></figure></li></ul><h3 id="查看是否启动"><a href="#查看是否启动" class="headerlink" title="查看是否启动"></a>查看是否启动</h3><p><img src="https://raw.githubusercontent.com/pengyirui/blog_img/main/2020-08-12-09.png"><br>检查后台进程是否正在运行<br><code>ps -ef |grep redis</code></p><p>检测6379端口是否在监听<br><code>netstat -lntp | grep 6379</code></p><p>客户端检测连接是否正常<br><code>/usr/local/redis-6.0.5/bin/redis-cli</code></p><h4 id="redis-make-失败的解决方法"><a href="#redis-make-失败的解决方法" class="headerlink" title="redis make 失败的解决方法"></a>redis make 失败的解决方法</h4><p>其实最大可能是系统gcc通常安装不全面</p><ul><li>安装gcc套装<br> yum install cpp<br> yum install binutils<br> yum install glibc<br> yum install glibc-kernheaders<br> yum install glibc-common<br> yum install glibc-devel<br> yum install gcc<br> yum install make</li><li>升级gcc<br> yum -y install centos-release-scl<br> yum -y install devtoolset-9-gcc devtoolset-9-gcc-c++ devtoolset-9-binutils<br> scl enable devtoolset-9 bash</li><li>完事</li></ul><p><img src="https://raw.githubusercontent.com/pengyirui/blog_img/main/2020-08-12-08.png" alt="安装成功的提示"></p><h3 id="升级-1"><a href="#升级-1" class="headerlink" title="升级"></a>升级</h3><p>其实主要就是换配置文件<br><code>cp /usr/local/redis-6.0.5/redis.conf /usr/local/redis-6.0.6/redis.conf</code></p><h2 id="Nginx"><a href="#Nginx" class="headerlink" title="Nginx"></a>Nginx</h2><h3 id="安装-2"><a href="#安装-2" class="headerlink" title="安装"></a>安装</h3><p>官网下载链接<a href="http://nginx.org/en/download.html">http://nginx.org/en/download.html</a><br>也可以用wget下载<code>wget http://nginx.org/download/nginx-1.18.0.tar.gz</code></p><p>由于需要编译，需要事先安装编译文件<br><code>yum -y install make zlib zlib-devel gcc-c++ libtool  openssl openssl-devel</code><br><img src="https://raw.githubusercontent.com/pengyirui/blog_img/main/2020-08-12-10.png"></p><p>解压nginx解压包<br><code>tar zxvf nginx-1.16.1.tar.gz</code></p><p>进入nginx目录，编译安装</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost nginx-1.16.1]# ./configure</span><br><span class="line">[root@localhost nginx-1.16.1]# make &amp;&amp; make install</span><br></pre></td></tr></table></figure><p>编译完成后查看版本（主要，安装后ningx在local下，而不是解压后的文件）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost sbin]# ./nginx -v</span><br><span class="line">nginx version: nginx/1.16.1</span><br></pre></td></tr></table></figure><h3 id="Nginx-配置"><a href="#Nginx-配置" class="headerlink" title="Nginx 配置"></a>Nginx 配置</h3><p>创建 Nginx 运行使用的用户 www：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@bogon conf]# /usr/sbin/groupadd www </span><br><span class="line">[root@bogon conf]# /usr/sbin/useradd -g www www</span><br></pre></td></tr></table></figure><p>配置<code>nginx.conf</code> ，将<code>conf/nginx.conf</code>替换为以下内容（参考了菜鸟教程）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line">user www www;</span><br><span class="line">worker_processes 2; #设置值和CPU核心数一致</span><br><span class="line">error_log /usr/local/webserver/nginx/logs/nginx_error.log crit; #日志位置和日志级别</span><br><span class="line">pid /usr/local/webserver/nginx/nginx.pid;</span><br><span class="line">#Specifies the value for maximum file descriptors that can be opened by this process.</span><br><span class="line">worker_rlimit_nofile 65535;</span><br><span class="line">events</span><br><span class="line">&#123;</span><br><span class="line">  use epoll;</span><br><span class="line">  worker_connections 65535;</span><br><span class="line">&#125;</span><br><span class="line">http</span><br><span class="line">&#123;</span><br><span class="line">  include mime.types;</span><br><span class="line">  default_type application/octet-stream;</span><br><span class="line">  log_format main  &#x27;$remote_addr - $remote_user [$time_local] &quot;$request&quot; &#x27;</span><br><span class="line">               &#x27;$status $body_bytes_sent &quot;$http_referer&quot; &#x27;</span><br><span class="line">               &#x27;&quot;$http_user_agent&quot; $http_x_forwarded_for&#x27;;</span><br><span class="line">  </span><br><span class="line">#charset gb2312;</span><br><span class="line">     </span><br><span class="line">  server_names_hash_bucket_size 128;</span><br><span class="line">  client_header_buffer_size 32k;</span><br><span class="line">  large_client_header_buffers 4 32k;</span><br><span class="line">  client_max_body_size 8m;</span><br><span class="line">     </span><br><span class="line">  sendfile on;</span><br><span class="line">  tcp_nopush on;</span><br><span class="line">  keepalive_timeout 60;</span><br><span class="line">  tcp_nodelay on;</span><br><span class="line">  fastcgi_connect_timeout 300;</span><br><span class="line">  fastcgi_send_timeout 300;</span><br><span class="line">  fastcgi_read_timeout 300;</span><br><span class="line">  fastcgi_buffer_size 64k;</span><br><span class="line">  fastcgi_buffers 4 64k;</span><br><span class="line">  fastcgi_busy_buffers_size 128k;</span><br><span class="line">  fastcgi_temp_file_write_size 128k;</span><br><span class="line">  gzip on; </span><br><span class="line">  gzip_min_length 1k;</span><br><span class="line">  gzip_buffers 4 16k;</span><br><span class="line">  gzip_http_version 1.0;</span><br><span class="line">  gzip_comp_level 2;</span><br><span class="line">  gzip_types text/plain application/x-javascript text/css application/xml;</span><br><span class="line">  gzip_vary on;</span><br><span class="line"> </span><br><span class="line">  #limit_zone crawler $binary_remote_addr 10m;</span><br><span class="line"> #下面是server虚拟主机的配置</span><br><span class="line"> server</span><br><span class="line">  &#123;</span><br><span class="line">    listen 80;#监听端口</span><br><span class="line">    server_name localhost;#域名</span><br><span class="line">    index index.html index.htm index.php;</span><br><span class="line">    root /usr/local/webserver/nginx/html;#站点目录</span><br><span class="line">      location ~ .*\.(php|php5)?$</span><br><span class="line">    &#123;</span><br><span class="line">      #fastcgi_pass unix:/tmp/php-cgi.sock;</span><br><span class="line">      fastcgi_pass 127.0.0.1:9000;</span><br><span class="line">      fastcgi_index index.php;</span><br><span class="line">      include fastcgi.conf;</span><br><span class="line">    &#125;</span><br><span class="line">    location ~ .*\.(gif|jpg|jpeg|png|bmp|swf|ico)$</span><br><span class="line">    &#123;</span><br><span class="line">      expires 30d;</span><br><span class="line">  # access_log off;</span><br><span class="line">    &#125;</span><br><span class="line">    location ~ .*\.(js|css)?$</span><br><span class="line">    &#123;</span><br><span class="line">      expires 15d;</span><br><span class="line">   # access_log off;</span><br><span class="line">    &#125;</span><br><span class="line">    access_log off;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>检查配置文件nginx.conf的正确性命令,报错基本上是路径路径日志问题，touch一下就ok</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost nginx]# sbin/nginx -t</span><br><span class="line">nginx: the configuration file /usr/local/nginx/conf/nginx.conf syntax is ok</span><br><span class="line">nginx: configuration file /usr/local/nginx/conf/nginx.conf test is successful</span><br></pre></td></tr></table></figure><p>启动</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost sbin]# ./nginx </span><br><span class="line">[root@localhost sbin]# ps -ef | grep nginx</span><br><span class="line">root      40326      1  0 23:43 ?        00:00:00 nginx: master process ./nginx</span><br><span class="line">www       40327  40326  0 23:43 ?        00:00:00 nginx: worker process</span><br><span class="line">www       40328  40326  0 23:43 ?        00:00:00 nginx: worker process</span><br><span class="line">root      40381  32630  0 23:44 pts/4    00:00:00 grep --color=auto nginx</span><br></pre></td></tr></table></figure><p>访问站点（本机ip）<br><img src="2020-08-12-11.png"></p><h3 id="升级-2"><a href="#升级-2" class="headerlink" title="升级"></a>升级</h3><p>进入新版本的的bin目录，编译一遍<code>configure</code>，和<code>make</code>一遍就ok了 <del>但项目具体不是这样操作</del><br>在<code>nginx/sbin</code>目录下选择<code>nginx</code>启动，旧的自动改名为<code>nginx.old</code><br><img src="https://raw.githubusercontent.com/pengyirui/blog_img/main/2020-08-12-12.png" alt="查看版本"></p><h3 id="运行原理"><a href="#运行原理" class="headerlink" title="运行原理"></a>运行原理</h3><ul><li><p>master进程用来管理worker进程，包括：接受来自外界的信号，向个worker进程发送信号，监控worker进程的运行状态，当worker进程退出后（异常情况下），会自动启动新的worker进程。</p></li><li><p>master进程充当整个进程组与用户的交互接口，同时对进程进行监护，他不需要处理网络时间，不负责业务的执行，只会通过管理worker进程来实现重启服务，平滑升级，管理日志文件，配置文件实时生效等功能。<br>我们控制nginx，只需要通过kill向master进程发送信号就行了。比如 kill -HUP pid，从容重启nginx，服务是不中断的。因为matser进程接受信号后，会重新加载配置文件，然后再启动新的worker进程，并向老的worker进程发送信号，告送他可以退休。新的worker在起动后就开始接受新的请求，而老的worker在收到master的信号后，就不再接受新的请求，并且在当前进程中处理完所有请求后再退出。</p></li><li><p>worker进程处理基本的网络事件。多个worker进程之间是对等的，他们同等竞争来自客户端的请求，各个进程相互之间是独立的。一个请求只可能在一个worker进程中处理，一个worker进程，不可能处理其他进程的请求。</p></li><li><p>首先每个worker进程都是从master进程fork过来，在master进程里面，先建立好需要listen的socket（listenfd）之后，然后再fork出多个worker进程。所有worker进程的listenfd会在新连接到来时变得可读，为保证只有一个进程处理该连接，所有worker进程在注册listenfd读事件前抢accept_mutex，抢到互斥锁的那个进程注册listenfd读事件，在读事件里调用accept接受该连接。当一个worker进程在accept这个连接之后，就开始读取请求，解析请求，处理请求，产生数据后，再返回给客户端，最后才断开连接，这样一个完整的请求就是这样的了。我们可以看到，一个请求，完全由worker进程来处理，而且只在一个worker进程中处理。</p></li><li><p>优点：<br>1、对于每个worker进程来说，都是独立的进程，不需要加锁，所以省掉了锁带来的开销。<br>2、采用独立的进程，可以让互相之间不会影响，一个进程退出后，其他进程还在工作，服务不会中断，master进程则会很快的启动新的worker进程<br>3、如果worker进程异常退出，肯定是程序有bug，异常退出，会导致当前worker上的所有请求失败，不过不会影响到所有请求，降低了风险。</p></li><li><p>nginx的事件处理过程<br>首先看一下web服务器B/S<br>web服务器以B/S方式提供服务。浏览器和服务器的交互方式如下<br>browser &lt;———&gt; server</p><p>1、浏览器向服务器发送http请求（request）<br>2、服务器收到浏览器的请求数据，经过分析处理，向浏览器输出响应数据（response）<br>3、浏览器收到服务器的响应数据，经过分析处理，将最终结果显示在浏览器中。</p></li></ul><p>基于这个B/S，到达系统底层就是数据的读写事件，nginx采用的是异步非阻塞，具体到系统调用就是像liunx系统中的select、poll/epoll/kqueue。nginx默认使用epoll：</p><blockquote><p>当事件没有准备好时，放到epoll里面，事件准备好了，我们就去读写，当读写返回engain时，我们将它再次放入到epoll里面。这样，只要有事件准备好了，我们就去处理它，只有当所有事件都没有准备好时，才在epoll里面等着。这样，我们就可以并发处理大量的并发了，当然，这里的并发请求是指未处理完的请求，线程只有一个，所以同时能处理的请求当然只有一个了，只是在请求间进行不断地切换而已，切换也是因为异步事件未准备好，而主动让出的，这里的切换是没有任何代价，你可以理解为循环处理多个准备好的事件。于多线程相比，这种事件处理方式有很大的优势，不需要创建线程，每个请求占用的内存也很少，没有上下文切换，事件处理非常轻量级。并发数再多也不会导致无谓的资源浪费（上下文切换）。更多的并发数只是会占用更多的内存而已。</p></blockquote><p>推荐设置worker的个数是cpu的核数，这里就容易理解了，更多的worker数，只会导致进程来竞争cpu资源，从而带来不必要的上下文切换。</p><h2 id="MySQL"><a href="#MySQL" class="headerlink" title="MySQL"></a>MySQL</h2><h3 id="安装-3"><a href="#安装-3" class="headerlink" title="安装"></a>安装</h3><p>安装mysql-5.7.30-linux-glibc2.12-x86_64.tar.gz<br>环境CentOS-7-x86_64-Everything-2003（桌面版）</p><ul><li><p>在local文件夹下创建文件夹mysql，再在mysql里面创建data</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]# mkdir -p /usr/local/mysql/data</span><br></pre></td></tr></table></figure></li><li><p>创建一个名为mysql的用户组,在用户组下创建用户</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]# groupadd mysql </span><br><span class="line">[root@localhost ~]# useradd -g mysql -d /usr/local/mysql mysql</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/pengyirui/blog_img/main/2020-09-09-01.png" alt="例子"></p></li><li><p>上传并解压包<br><code>tar -xvf mysql-5.7.30-linux-glibc2.12-x86_64.tar.gz</code></p></li><li><p>进入刚刚解压的文件夹<br><code>cd mysql-5.7.30-linux-glibc2.12-x86_64</code></p></li><li><p>将里面的文件移动的use/local/mysql下<br><code>mv * use/local/mysql</code></p></li><li><p>进入mysql目录，然后开始初始化</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cd /usr/local/mysql</span><br><span class="line"></span><br><span class="line">./bin/mysql_install_db --user=mysql --basedir=/usr/local/mysql --datadir=/usr/local/mysql/data</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/pengyirui/blog_img/main/2020-09-09-02.png"></p></li></ul><ul><li><p>进入mysql的data目录下清空数据</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost mysql]# cd data/</span><br><span class="line">[root@localhost data]# rm -rf *</span><br></pre></td></tr></table></figure></li><li><p>在mysql文件夹下运行以下命令<br><code>./bin/mysqld --user=mysql --basedir=/usr/local/mysql --datadir=/usr/local/mysql/data --initialize</code></p></li></ul><p>成功，最后的是随机生成的初始密码，后续需要用到记得保存<br><img src="https://raw.githubusercontent.com/pengyirui/blog_img/main/2020-09-09-03.png"></p><ul><li><p>测试<br><code>./support-files/mysql.server start</code><br>成功<br><img src="https://raw.githubusercontent.com/pengyirui/blog_img/main/2020-09-09-04.png"><br>出现下面错误不要怕继续往底下做<br><img src="https://raw.githubusercontent.com/pengyirui/blog_img/main/2020-09-09-05.png"></p></li><li><p>创建软连接<br><code>ln -s /usr/local/mysql/bin/mysql /usr/bin/mysql</code></p></li><li><p>备份、修改配置文档</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]# mv /etc/my.cnf /etc/my.cnf.bak</span><br><span class="line"></span><br><span class="line">[root@localhost ~]# vi /etc/my.cnf</span><br><span class="line"></span><br><span class="line"># 复制以下配置信息写进my.cnf</span><br><span class="line">[mysqld]</span><br><span class="line">basedir = /usr/local/mysql</span><br><span class="line">datadir = /usr/local/mysql/data</span><br><span class="line">character_set_server=utf8</span><br><span class="line">init_connect=&#x27;SET NAMES utf8&#x27;</span><br><span class="line">[client]</span><br><span class="line">default-character-set=utf8</span><br></pre></td></tr></table></figure><h4 id="配置开机启动"><a href="#配置开机启动" class="headerlink" title="配置开机启动"></a>配置开机启动</h4></li></ul><p>拷贝启动文件到/etc/init.d/下并重命令为mysqld<br><code>cp /usr/local/mysql/support-files/mysql.server /etc/init.d/mysqld </code></p><p>增加执行权限<br><code>chmod 755 /etc/init.d/mysqld</code></p><p>检查自启动项列表中没mysqld这个<br><code>chkconfig --list mysqld </code></p><p>如果没就添加mysqld<br><code>chkconfig --add mysqld</code></p><p>用这个命令设置开机启动<br><code>chkconfig mysqld on</code></p><p>如果在执行第一步就报错，则说明刚刚配置出问题了</p><ul><li>测试是否配置成功<br>启动服务<br><code>service mysqld start</code><br>重启服务<br><code>service mysqld restart</code><br>停止服务<br><code>service mysqld stop</code></li></ul><h4 id="初始化mysql用户root密码"><a href="#初始化mysql用户root密码" class="headerlink" title="初始化mysql用户root密码"></a>初始化mysql用户root密码</h4><p>登录mysql</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]# mysql -uroot -p</span><br><span class="line">Enter password:           # 这里输入刚刚的随机密码</span><br><span class="line"></span><br><span class="line"># 重置密码，例如root用户将密码改回1234</span><br><span class="line">mysql&gt; ALTER USER &#x27;root&#x27;@&#x27;localhost&#x27; IDENTIFIED BY &#x27;1234&#x27;;</span><br></pre></td></tr></table></figure><h4 id="远程链接"><a href="#远程链接" class="headerlink" title="远程链接"></a>远程链接</h4><p>用于链接工具链接上数据库（前提是需要网络联通，并且开放3306端口或关闭防火墙）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; grant all on *.* to &#x27;root&#x27;@&#x27;%&#x27; identified by &#x27;1234&#x27;;</span><br></pre></td></tr></table></figure><h3 id="升级-3"><a href="#升级-3" class="headerlink" title="升级"></a>升级</h3><p>下载安装包<br>MYSQL官方archives链接地址：<a href="http://downloads.mysql.com/archives/community/">http://downloads.mysql.com/archives/community/</a></p><p>备份data数据<br><code>cp -r ./mysql/date ./mysql_date_bak</code></p><p>停止数据库的运行</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@MySQL mysql]# /etc/init.d/mysqld stop</span><br><span class="line">Shutting down MySQL.. SUCCESS!</span><br></pre></td></tr></table></figure><p>解压新版本的包</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@MySQL ~]# tar zxvf mysql-5.7.31-linux-glibc2.5-x86_64.tar.gz -C /usr/local/</span><br></pre></td></tr></table></figure><p>删除原有的链接</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@MySQL ~]# unlink /usr/local/mysql</span><br></pre></td></tr></table></figure><p>新建软连接</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@MySQL ~]# ln -s  /usr/local/mysql-5.7.31-linux-glibc2.5-x86_64 /usr/local/mysql</span><br></pre></td></tr></table></figure><p>启动</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@MySQL ~]# /etc/init.d/mysqld start</span><br><span class="line">Starting MySQL..... SUCCESS!</span><br></pre></td></tr></table></figure><p>使用mysql_upgrade 升级MySQL数据中的系统表升级</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@MySQL ~]# /usr/local/mysql/bin/mysql_upgrade -s -p</span><br></pre></td></tr></table></figure><p>进入mysql查看版本号</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; select version();</span><br><span class="line">+-----------+</span><br><span class="line">| version() |</span><br><span class="line">+-----------+</span><br><span class="line">| 5.7.31    |</span><br><span class="line">+-----------+</span><br><span class="line">1 row in set (0.00 sec)</span><br></pre></td></tr></table></figure><hr><p>项目启动与暂停<br>tomcat &gt; redis &gt; mysql &gt; phoenix &gt; hbase &gt; hadoop 依次暂停<br>kafka与zookeeper可以不用暂停<br>开启就倒序开启（最后启动tomcat）</p>]]></content>
      
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> 运维记录 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>linux中的变量与别名</title>
      <link href="/posts/3007.html"/>
      <url>/posts/3007.html</url>
      
        <content type="html"><![CDATA[<h2 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h2><h3 id="变量是什么？"><a href="#变量是什么？" class="headerlink" title="变量是什么？"></a>变量是什么？</h3><p>一句话概括：变量是用来临时保存数据的，该数据是可以变化的数据。 </p><h3 id="什么时候需要定义变量？"><a href="#什么时候需要定义变量？" class="headerlink" title="什么时候需要定义变量？"></a>什么时候需要定义变量？</h3><ul><li>如果某个内容需要多次使用，并且在代码中 <strong>重复出现</strong> ，那么可以用变量代表该内容。这样在修改内容的时候，仅仅需要修改变量的值。 </li><li>在代码运作的过程中，可能会把某些命令的执行结果保存起来，后续代码需要使用这些结果，就可以直接使用这个变量。 <h3 id="变量如何定义？"><a href="#变量如何定义？" class="headerlink" title="变量如何定义？"></a>变量如何定义？</h3></li></ul><p><strong>变量名=变量值</strong> </p><p>变量名：用来临时保存数据的 </p><p>变量值：就是临时的可变化的数据 </p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">MissHou</span> ~]<span class="comment"># A=hello            定义变量A </span></span><br><span class="line">[<span class="type">root</span>@<span class="type">MissHou</span> ~]<span class="comment"># echo $A            调用变量A，要给钱的，不是人民币是美元&quot;$&quot; </span></span><br><span class="line">hello </span><br><span class="line">[<span class="type">root</span>@<span class="type">MissHou</span> ~]<span class="comment"># echo $&#123;A&#125;        还可以这样调用，不管你的姿势多优雅，总之要给钱 </span></span><br><span class="line">hello </span><br><span class="line">[<span class="type">root</span>@<span class="type">MissHou</span> ~]<span class="comment"># A=world            因为是变量所以可以变，移情别恋是常事 </span></span><br><span class="line">[<span class="type">root</span>@<span class="type">MissHou</span> ~]<span class="comment"># echo $A            不管你是谁，只要调用就要给钱 </span></span><br><span class="line">world </span><br><span class="line">[<span class="type">root</span>@<span class="type">MissHou</span> ~]<span class="comment"># unset A            不跟你玩了，取消变量 </span></span><br><span class="line">[<span class="type">root</span>@<span class="type">MissHou</span> ~]<span class="comment"># echo $A            从此，我单身了，你可以给我介绍任何人 </span></span><br></pre></td></tr></table></figure><ul><li><p>参看全部变量名<br><code>set</code></p></li><li><p>只能查看环境变量<br><code>env</code></p></li><li><p>查看设置了变量名对应的值（type + 变量名）<br><code>type key</code></p></li><li><p>删除变量（unset + 变量名）<br><code>unset key</code></p></li></ul><h3 id="常用的变量名"><a href="#常用的变量名" class="headerlink" title="常用的变量名"></a>常用的变量名</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">HISTFILESIZE：记录历史指令保存的最大值。</span><br><span class="line">COLUMNS：终端窗口显示的宽度。</span><br><span class="line">LINES：终端窗口显示的高度。</span><br></pre></td></tr></table></figure><h3 id="变量的定义规则"><a href="#变量的定义规则" class="headerlink" title="变量的定义规则"></a>变量的定义规则</h3><p>虽然可以给变量（变量名）赋予任何值；但是，对于变量名也是要求的！:unamused: </p><h4 id="变量名区分大小写"><a href="#变量名区分大小写" class="headerlink" title="变量名区分大小写"></a>变量名区分大小写</h4><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">MissHou</span> ~]<span class="comment"># A=hello </span></span><br><span class="line">[<span class="type">root</span>@<span class="type">MissHou</span> ~]<span class="comment"># a=world </span></span><br><span class="line">[<span class="type">root</span>@<span class="type">MissHou</span> ~]<span class="comment"># echo $A </span></span><br><span class="line">hello </span><br><span class="line">[<span class="type">root</span>@<span class="type">MissHou</span> ~]<span class="comment"># echo $a </span></span><br><span class="line">world </span><br></pre></td></tr></table></figure><h4 id="变量名不能有特殊符号"><a href="#变量名不能有特殊符号" class="headerlink" title="变量名不能有特殊符号"></a>变量名不能有特殊符号</h4><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">MissHou</span> ~]<span class="comment"># *A=hello </span></span><br><span class="line"><span class="literal">-bash</span>: *A=hello: command not found </span><br><span class="line">[<span class="type">root</span>@<span class="type">MissHou</span> ~]<span class="comment"># ?A=hello </span></span><br><span class="line"><span class="literal">-bash</span>: ?A=hello: command not found </span><br><span class="line">[<span class="type">root</span>@<span class="type">MissHou</span> ~]<span class="comment"># @A=hello </span></span><br><span class="line"><span class="literal">-bash</span>: @A=hello: command not found </span><br><span class="line">特别说明：对于有空格的字符串给变量赋值时，要用引号引起来 </span><br><span class="line">[<span class="type">root</span>@<span class="type">MissHou</span> ~]<span class="comment"># A=hello world </span></span><br><span class="line"><span class="literal">-bash</span>: world: command not found </span><br><span class="line">[<span class="type">root</span>@<span class="type">MissHou</span> ~]<span class="comment"># A=&quot;hello world&quot; </span></span><br><span class="line">[<span class="type">root</span>@<span class="type">MissHou</span> ~]<span class="comment"># A=&#x27;hello world&#x27; </span></span><br></pre></td></tr></table></figure><h4 id="变量名不能以数字开头"><a href="#变量名不能以数字开头" class="headerlink" title="变量名不能以数字开头"></a>变量名不能以数字开头</h4><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">MissHou</span> ~]<span class="comment"># 1A=hello </span></span><br><span class="line"><span class="literal">-bash</span>: <span class="number">1</span>A=hello: command not found </span><br><span class="line">[<span class="type">root</span>@<span class="type">MissHou</span> ~]<span class="comment"># A1=hello </span></span><br><span class="line">注意：不能以数字开头并不代表变量名中不能包含数字呦。 </span><br></pre></td></tr></table></figure><h4 id="等号两边不能有任何空格"><a href="#等号两边不能有任何空格" class="headerlink" title="等号两边不能有任何空格"></a>等号两边不能有任何空格</h4><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">MissHou</span> ~]<span class="comment"># A =123 </span></span><br><span class="line"><span class="literal">-bash</span>: A: command not found </span><br><span class="line">[<span class="type">root</span>@<span class="type">MissHou</span> ~]<span class="comment"># A= 123 </span></span><br><span class="line"><span class="literal">-bash</span>: <span class="number">123</span>: command not found </span><br><span class="line">[<span class="type">root</span>@<span class="type">MissHou</span> ~]<span class="comment"># A = 123 </span></span><br><span class="line"><span class="literal">-bash</span>: A: command not found </span><br><span class="line">[<span class="type">root</span>@<span class="type">MissHou</span> ~]<span class="comment"># A=123 </span></span><br><span class="line">[<span class="type">root</span>@<span class="type">MissHou</span> ~]<span class="comment"># echo $A </span></span><br><span class="line"><span class="number">123</span> </span><br></pre></td></tr></table></figure><h3 id="变量名尽量做到见名知意"><a href="#变量名尽量做到见名知意" class="headerlink" title="变量名尽量做到见名知意"></a>变量名尽量做到见名知意</h3><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">NTP_IP=<span class="number">10.1</span>.<span class="number">1.1</span> </span><br><span class="line"><span class="built_in">DIR</span>=/u01/app1 </span><br><span class="line">TMP_FILE=/var/log/<span class="number">1</span>.log </span><br><span class="line">... </span><br><span class="line">说明：一般变量名使用大写（小写也可以），不要同一个脚本中变量全是a,b,c等不容易阅读 </span><br></pre></td></tr></table></figure><h2 id="变量的定义方式有哪些？"><a href="#变量的定义方式有哪些？" class="headerlink" title="变量的定义方式有哪些？"></a>变量的定义方式有哪些？</h2><h3 id="基本方式"><a href="#基本方式" class="headerlink" title="基本方式"></a>基本方式</h3><blockquote><p>直接赋值给一个变量 </p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">[root@MissHou ~]# A=1234567 </span><br><span class="line">[root@MissHou ~]# echo $A </span><br><span class="line">1234567 </span><br><span class="line">[root@MissHou ~]# echo $&#123;A:2:4&#125;     表示从A变量中第3个字符开始截取，截取4个字符 </span><br><span class="line">3456 </span><br><span class="line">​ </span><br><span class="line">说明： </span><br><span class="line">$变量名 和 $&#123;变量名&#125;的异同 </span><br><span class="line">相同点：都可以调用变量 </span><br><span class="line">不同点：$&#123;变量名&#125;可以只截取变量的一部分，而$变量名不可以 </span><br></pre></td></tr></table></figure><h3 id="命令执行结果赋值给变量"><a href="#命令执行结果赋值给变量" class="headerlink" title="命令执行结果赋值给变量"></a>命令执行结果赋值给变量</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[root@MissHou ~]# B=`date +%F` </span><br><span class="line">[root@MissHou ~]# echo $B </span><br><span class="line">2019-04-16 </span><br><span class="line">[root@MissHou ~]# C=$(uname -r) </span><br><span class="line">[root@MissHou ~]# echo $C </span><br><span class="line">2.6.32-696.el6.x86_64 </span><br></pre></td></tr></table></figure><h3 id="交互式定义变量-read"><a href="#交互式定义变量-read" class="headerlink" title="交互式定义变量(read)"></a>交互式定义变量(read)</h3><p><strong>目的：</strong> 让 <em>用户自己</em> 给变量赋值，比较灵活。 </p><p><strong>语法：</strong> <code>read [选项] 变量名</code> </p><p><strong>常见选项：</strong> </p><table><thead><tr><th align="left">选项</th><th align="left">释义</th></tr></thead><tbody><tr><td align="left">-p</td><td align="left">定义提示用户的信息</td></tr><tr><td align="left">-n</td><td align="left">定义字符数（限制变量值的长度）</td></tr><tr><td align="left">-s</td><td align="left">不显示（不显示用户输入的内容，输入密码时常用）</td></tr><tr><td align="left">-t</td><td align="left">定义超时时间，默认单位为秒（限制用户输入变量值的超时时间）</td></tr></tbody></table><p><strong>举例说明：</strong> </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">用法1：用户自己定义变量值 </span><br><span class="line">[root@MissHou ~]# read name </span><br><span class="line">harry </span><br><span class="line">[root@MissHou ~]# echo $name </span><br><span class="line">harry </span><br><span class="line">[root@MissHou ~]# read -p &quot;Input your name:&quot; name </span><br><span class="line">Input your name:tom </span><br><span class="line">[root@MissHou ~]# echo $name </span><br><span class="line">tom </span><br></pre></td></tr></table></figure><p>用法2：变量值来自文件 </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[root@MissHou ~]# cat 1.txt  </span><br><span class="line">10.1.1.1 255.255.255.0 </span><br><span class="line">​ </span><br><span class="line">[root@MissHou ~]# read ip mask &lt; 1.txt  </span><br><span class="line">[root@MissHou ~]# echo $ip </span><br><span class="line">10.1.1.1 </span><br><span class="line">[root@MissHou ~]# echo $mask </span><br><span class="line">255.255.255.0 </span><br></pre></td></tr></table></figure><h3 id="定义有类型的变量declare"><a href="#定义有类型的变量declare" class="headerlink" title="定义有类型的变量declare"></a>定义有类型的变量declare</h3><p><strong>目的：</strong> 给变量做一些限制，固定变量的类型，比如：整型、只读 </p><p><strong>用法：</strong> <code>declare 选项 变量名=变量值</code> </p><p><strong>常用选项：</strong> </p><table><thead><tr><th align="left">选项</th><th align="left">释义</th><th align="left">举例</th></tr></thead><tbody><tr><td align="left">-i</td><td align="left">将变量看成整数</td><td align="left">declare -i A=123</td></tr><tr><td align="left">-r</td><td align="left">定义只读变量</td><td align="left">declare -r B=hello</td></tr><tr><td align="left">-a</td><td align="left">定义普通数组；查看普通数组</td><td align="left"></td></tr><tr><td align="left">-A</td><td align="left">定义关联数组；查看关联数组</td><td align="left"></td></tr><tr><td align="left">-x</td><td align="left">将变量通过环境导出</td><td align="left">declare -x AAA=123456 等于 export AAA=123456</td></tr></tbody></table><p><strong>举例说明：</strong> </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">[root@MissHou ~]# declare -i A=123 </span><br><span class="line">[root@MissHou ~]# echo $A </span><br><span class="line">123 </span><br><span class="line">[root@MissHou ~]# A=hello </span><br><span class="line">[root@MissHou ~]# echo $A </span><br><span class="line">0 </span><br><span class="line">​ </span><br><span class="line">[root@MissHou ~]# declare -r B=hello </span><br><span class="line">[root@MissHou ~]# echo $B </span><br><span class="line">hello </span><br><span class="line">[root@MissHou ~]# B=world </span><br><span class="line">-bash: B: readonly variable </span><br><span class="line">[root@MissHou ~]# unset B </span><br><span class="line">-bash: unset: B: cannot unset: readonly variable </span><br></pre></td></tr></table></figure><h2 id="变量的分类"><a href="#变量的分类" class="headerlink" title="变量的分类"></a>变量的分类</h2><h3 id="本地变量"><a href="#本地变量" class="headerlink" title="本地变量"></a>本地变量</h3><p><strong>本地变量</strong> ：当前用户自定义的变量。当前进程中有效，其他进程及当前进程的子进程无效。 </p><h3 id="环境变量"><a href="#环境变量" class="headerlink" title="环境变量"></a>环境变量</h3><p><strong>环境变量</strong> ：当前进程有效，并且能够被 <strong>子进程</strong> 调用。 </p><ul><li><code>env</code> 查看当前用户的环境变量 </li><li><code>set</code> 查询当前用户的所有变量(临时变量与环境变量) </li><li><code>export 变量名=变量值</code> 或者 <code>变量名=变量值；export 变量名</code> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">[root@MissHou ~]# export A=hello        临时将一个本地变量（临时变量）变成环境变量 </span><br><span class="line">[root@MissHou ~]# env|grep ^A </span><br><span class="line">A=hello </span><br><span class="line">​ </span><br><span class="line">永久生效： </span><br><span class="line">vim /etc/profile 或者 ~/.bashrc </span><br><span class="line">export A=hello </span><br><span class="line">或者 </span><br><span class="line">A=hello </span><br><span class="line">export A </span><br><span class="line">​ </span><br><span class="line">说明：系统中有一个变量PATH，环境变量 </span><br><span class="line">export PATH=/usr/local/mysql/bin:$PATH </span><br></pre></td></tr></table></figure><h3 id="全局变量"><a href="#全局变量" class="headerlink" title="全局变量"></a>全局变量</h3></li><li><em>全局变量</em>* ：全局所有的用户和程序都能调用，且继承，新建的用户也默认能调用. </li><li><em>解读相关配置文件</em>* <table><thead><tr><th align="left">文件名</th><th align="left">说明</th><th align="left">备注</th></tr></thead><tbody><tr><td align="left">$HOME/.bashrc</td><td align="left">当前用户的bash信息,用户 <em>登录</em> 时读取</td><td align="left">定义别名、umask、函数等</td></tr><tr><td align="left">$HOME/.bash_profile</td><td align="left">当前用户的环境变量，用户 <em>登录</em> 时读取</td><td align="left"></td></tr><tr><td align="left">$HOME/.bash_logout</td><td align="left">当前用户 <em>退出</em> 当前shell时最后读取</td><td align="left">定义用户退出时执行的程序等</td></tr><tr><td align="left">/etc/bashrc</td><td align="left">全局的bash信息，所有用户都生效</td><td align="left"></td></tr><tr><td align="left">/etc/profile</td><td align="left">全局环境变量信息</td><td align="left">系统和所有用户都生效</td></tr><tr><td align="left">$HOME/.bash_history</td><td align="left">用户的历史命令</td><td align="left">history -w   保存历史记录         history -c  清空历史记录</td></tr></tbody></table></li></ul><p><strong>说明：</strong> 以上文件修改后，都需要重新source让其生效或者退出重新登录。<br><strong>用户登录</strong> 系统 <strong>读取</strong> 相关 <em>文件的顺序</em> </p><ul><li><code>/etc/profile</code> </li><li><code>$HOME/.bash_profile</code> </li><li><code>$HOME/.bashrc</code> </li><li><code>/etc/bashrc</code> </li><li><code>$HOME/.bash_logout</code> <h3 id="系统变量"><a href="#系统变量" class="headerlink" title="系统变量"></a>系统变量</h3></li><li><em>系统变量(内置bash中变量)</em>* ： shell本身已经固定好了它的名字和作用. <table><thead><tr><th align="left">内置变量</th><th align="left">含义</th></tr></thead><tbody><tr><td align="left">$?</td><td align="left">上一条命令执行后返回的状态；状态值为0表示执行正常，非0表示执行异常或错误</td></tr><tr><td align="left">$0</td><td align="left">当前执行的程序或脚本名</td></tr><tr><td align="left">$#</td><td align="left">脚本后面接的参数的个数</td></tr><tr><td align="left">$*</td><td align="left">脚本后面所有参数，参数当成一个整体输出，每一个变量参数之间以空格隔开</td></tr><tr><td align="left">$@</td><td align="left">脚本后面所有参数，参数是独立的，也是全部输出</td></tr><tr><td align="left">$1~$9</td><td align="left">脚本后面的位置参数，$1表示第1个位置参数，依次类推</td></tr><tr><td align="left">${10}~${n}</td><td align="left">扩展位置参数,第10个位置变量必须用{}大括号括起来(2位数字以上扩起来)</td></tr><tr><td align="left">$$</td><td align="left">当前所在进程的进程号，如 echo $$</td></tr><tr><td align="left">$！</td><td align="left">后台运行的最后一个进程号 (当前终端）</td></tr><tr><td align="left">!$</td><td align="left">调用最后一条命令历史中的参数</td></tr></tbody></table></li></ul><ul><li>进一步了解位置参数 <code>$1~$&#123;n&#125;</code> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">#!/bin/bash </span><br><span class="line">#了解shell内置变量中的位置参数含义 </span><br><span class="line">echo &quot;\$0 = $0&quot; </span><br><span class="line">echo &quot;\$# = $#&quot; </span><br><span class="line">echo &quot;\$* = $*&quot; </span><br><span class="line">echo &quot;\$@ = $@&quot; </span><br><span class="line">echo &quot;\$1 = $1&quot;  </span><br><span class="line">echo &quot;\$2 = $2&quot;  </span><br><span class="line">echo &quot;\$3 = $3&quot;  </span><br><span class="line">echo &quot;\$11 = $&#123;11&#125;&quot;  </span><br><span class="line">echo &quot;\$12 = $&#123;12&#125;&quot;  </span><br></pre></td></tr></table></figure></li><li>进一步了解$*和​$@的区别 </li></ul><p><code>$*</code> ：表示将变量看成一个整体 </p><p><code>$@</code> ：表示变量是独立的 </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">#!/bin/bash </span><br><span class="line">for i in &quot;$@&quot; </span><br><span class="line">do </span><br><span class="line">echo $i </span><br><span class="line">done </span><br><span class="line">​ </span><br><span class="line">echo &quot;======我是分割线=======&quot; </span><br><span class="line">​ </span><br><span class="line">for i in &quot;$*&quot; </span><br><span class="line">do </span><br><span class="line">echo $i </span><br><span class="line">done </span><br><span class="line">​ </span><br><span class="line">[root@MissHou ~]# bash 3.sh a b c </span><br><span class="line">a </span><br><span class="line">b </span><br><span class="line">c </span><br><span class="line">======我是分割线======= </span><br><span class="line">a b c </span><br><span class="line">​ </span><br></pre></td></tr></table></figure><h2 id="别名"><a href="#别名" class="headerlink" title="别名"></a>别名</h2><h3 id="什么需要用到"><a href="#什么需要用到" class="headerlink" title="什么需要用到"></a>什么需要用到</h3><blockquote><p>运用Linux命令的时候，当需要输入很长的命令时我们希望尽可能的简短输入内容，这个时候我们就可以给命令起别名了。</p></blockquote><p>例如查看目录或文件的时候用到的<code>ll</code>，就是<code>ls -s</code>的别名。能方便简单地用到需要地需要的指令。<br>这就是别名的好处。</p><ul><li>设置别名<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">alias 别名=&#x27;指令&#x27;</span><br><span class="line">例如：每次清屏打clear太长，输入cle就能清屏。我们就可以这要设置。</span><br><span class="line">alias cle=&#x27;clear&#x27;</span><br></pre></td></tr></table></figure></li><li>但需要设置永久别名就需要修改<code>bashrc</code>配置文件<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">vi /etc/bashrc</span><br><span class="line">在文件末位设置别名</span><br><span class="line">alias cle=&#x27;clear&#x27;</span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> shell </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker常用命令</title>
      <link href="/posts/1d91.html"/>
      <url>/posts/1d91.html</url>
      
        <content type="html"><![CDATA[<h2 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h2><table><thead><tr><th align="left">命令</th><th align="left">解释</th></tr></thead><tbody><tr><td align="left">docker search tomcat</td><td align="left">从dockerhub上查看名为tomcat的镜像</td></tr><tr><td align="left">docker pull tomcat</td><td align="left">下载名为tomcat的最新镜像到本地</td></tr><tr><td align="left">docker images</td><td align="left">查看本地的镜像有哪些</td></tr><tr><td align="left">docker run [OPTIONS] IMAGE [COMMAND][ARG..]</td><td align="left">新建并启动容器（如果本地没有便从dockerhub上拉取）  例子：docker run -it centos</td></tr><tr><td align="left">docker rmi -f 镜像ID</td><td align="left">删除镜像</td></tr></tbody></table><hr><table><thead><tr><th align="left">命令</th><th align="left">解释</th></tr></thead><tbody><tr><td align="left">docker start IMAGE</td><td align="left">启动容器</td></tr><tr><td align="left">docker restart IMAGE</td><td align="left">重启容器</td></tr><tr><td align="left">docker stop IMAGE</td><td align="left">停止容器</td></tr><tr><td align="left">docker kill IMAGE</td><td align="left">强制停止容器</td></tr><tr><td align="left">docker ps</td><td align="left">查看目前运行的容器</td></tr><tr><td align="left">exit</td><td align="left">容器停止，并且退出</td></tr><tr><td align="left">ctrl+P+Q</td><td align="left">容器不停止退出</td></tr><tr><td align="left">docker rm 容器id</td><td align="left">删除已停止的容器</td></tr></tbody></table><p><code>docker run</code> OPTIONS说明（常用）：有些是一个减号，有些是两个减号<br>–name=”容器新名字”: 为容器指定一个名称；<br>-d: 后台运行容器，并返回容器ID，也即启动守护式容器；<br>-i：以交互模式运行容器，通常与 -t 同时使用；<br>-t：为容器重新分配一个伪输入终端，通常与 -i 同时使用；<br>-P: 随机端口映射；<br>-p: 指定端口映射，有以下四种格式<br>      ip:hostPort:containerPort<br>      ip::containerPort<br>      hostPort:containerPort<br>      containerPort</p><p><code>docker ps</code> OPTIONS说明（常用）：<br>-a :列出当前所有正在运行的容器+历史上运行过的<br>-l :显示最近创建的容器。<br>-n：显示最近n个创建的容器。<br>-q :静默模式，只显示容器编号。<br>–no-trunc :不截断输出。</p><h2 id="重要的容器命令"><a href="#重要的容器命令" class="headerlink" title="重要的容器命令"></a>重要的容器命令</h2><h3 id="守护式"><a href="#守护式" class="headerlink" title="守护式"></a>守护式</h3><table><thead><tr><th align="left">命令</th><th align="left">解释</th></tr></thead><tbody><tr><td align="left">docker run -d IMAGE</td><td align="left">启动守护式容器</td></tr></tbody></table><p>例子：<code>docker run -d centos /bin/sh -c &quot;while true;do echo hello 123;sleep 2;done&quot;</code></p><p>解释：<br>使用守护式启动容器，每隔两秒不断打印出hello 123</p><blockquote><p>#使用镜像centos:latest以后台模式启动一个容器<br>docker run -d centos<br> <br>问题：然后docker ps -a 进行查看, 会发现容器已经退出<br>很重要的要说明的一点: Docker容器后台运行,就必须有一个前台进程.<br>容器运行的命令如果不是那些一直挂起的命令（比如运行top，tail），就是会自动退出的。<br>这个是docker的机制问题,比如你的web容器,我们以nginx为例，正常情况下,我们配置启动服务只需要启动响应的service即可。例如<br>service nginx start<br>但是,这样做,nginx为后台进程模式运行,就导致docker前台没有运行的应用,<br>这样的容器后台启动后,会立即自杀因为他觉得他没事可做了.<br>所以，最佳的解决方案是,将你要运行的程序以前台进程的形式运行</p></blockquote><h3 id="日志"><a href="#日志" class="headerlink" title="日志"></a>日志</h3><table><thead><tr><th align="left">命令</th><th align="left">解释</th></tr></thead><tbody><tr><td align="left">docker logs -f -y –tail 5</td><td align="left">查看容器日志</td></tr></tbody></table><p>-t 是加入时间戳<br>-f 跟随最新的日志打印<br>–tail 数字 显示最后多少条</p><h3 id="进程"><a href="#进程" class="headerlink" title="进程"></a>进程</h3><table><thead><tr><th align="left">命令</th><th align="left">解释</th></tr></thead><tbody><tr><td align="left">docker top 容器ID</td><td align="left">查看容器内运行的进程</td></tr></tbody></table><h3 id="内部细节"><a href="#内部细节" class="headerlink" title="内部细节"></a>内部细节</h3><table><thead><tr><th align="left">命令</th><th align="left">解释</th></tr></thead><tbody><tr><td align="left">docker inspect 容器ID</td><td align="left">查看容器内部细节</td></tr></tbody></table><h3 id="操作正在运行"><a href="#操作正在运行" class="headerlink" title="操作正在运行"></a>操作正在运行</h3><table><thead><tr><th align="left">命令</th><th align="left">解释</th></tr></thead><tbody><tr><td align="left">docker attach 容器ID</td><td align="left">重新进入容器（后台运行着的容器）</td></tr><tr><td align="left">docker exec -t 容器ID 需要操作什么</td><td align="left">在宿主机操作容器，并返回结果（类似隔山打牛）</td></tr></tbody></table><p>区别：</p><p>attach<br>直接进入容器启动命令的终端，不会启动新的进程</p><p>exec<br>是在容器中打开新的终端，并且可以启动新的进程</p><h3 id="拷贝"><a href="#拷贝" class="headerlink" title="拷贝"></a>拷贝</h3><table><thead><tr><th align="left">命令</th><th align="left">解释</th></tr></thead><tbody><tr><td align="left">docker cp 容器ID:容器内路径 目的主机路径</td><td align="left">从容器内拷贝文件到主机上</td></tr></tbody></table><p>注意，容器ID和容器路径中间有冒号</p><h2 id="帮助命令"><a href="#帮助命令" class="headerlink" title="帮助命令"></a>帮助命令</h2><p>docker version<br>#查看docker版本</p><p>docker info<br>#查看更详细的docker信息</p><p>docker –help<br>#docker的帮助文档</p><h2 id="一张图看懂-知识拓展"><a href="#一张图看懂-知识拓展" class="headerlink" title="一张图看懂+知识拓展"></a>一张图看懂+知识拓展</h2><p><img src="https://raw.githubusercontent.com/pengyirui/blog_img/main/2020-07-11-01.png" alt="图片"></p><p>attach    Attach to a running container                <br>#当前 shell 下 attach 连接指定运行镜像</p><p>build     Build an image from a Dockerfile             <br>#通过 Dockerfile 定制镜像</p><p>commit    Create a new image from a container changes  <br>#提交当前容器为新的镜像</p><p>cp        Copy files/folders from the containers filesystem to the host path<br>#从容器中拷贝指定文件或者目录到宿主机中</p><p>create    Create a new container                       <br>#创建一个新的容器，同 run，但不启动容器</p><p>diff      Inspect changes on a container’s filesystem  <br>#查看 docker 容器变化</p><p>events    Get real time events from the server         <br>#从 docker 服务获取容器实时事件</p><p>exec      Run a command in an existing container       <br>#在已存在的容器上运行命令</p><p>export    Stream the contents of a container as a tar archive  <br>#导出容器的内容流作为一个 tar 归档文件对应[import]</p><p>history   Show the history of an image                 <br>#展示一个镜像形成历史</p><p>images    List images                                  <br>#列出系统当前镜像</p><p>import    Create a new filesystem image from the contents of a tarball<br>#从tar包中的内容创建一个新的文件系统映像[对应export]</p><p>info      Display system-wide information              <br>#显示系统相关信息</p><p>inspect   Return low-level information on a container  <br>#查看容器详细信息</p><p>kill      Kill a running container                     <br>#kill 指定 docker 容器</p><p>load      Load an image from a tar archive             <br>#从一个 tar 包中加载一个镜像[对应 save]</p><p>login     Register or Login to the docker registry server   <br>#注册或者登陆一个 docker 源服务器</p><p>logout    Log out from a Docker registry server         <br>#从当前 Docker registry 退出</p><p>logs      Fetch the logs of a container                <br>#输出当前容器日志信息</p><p>port      Lookup the public-facing port which is NAT-ed to PRIVATE_PORT   <br>#查看映射端口对应的容器内部源端口</p><p>pause     Pause all processes within a container       <br>#暂停容器</p><p>ps        List containers                              <br>#列出容器列表</p><p>pull      Pull an image or a repository from the docker registry server  <br>#从docker镜像源服务器拉取指定镜像或者库镜像</p><p>push      Push an image or a repository to the docker registry server   <br>#推送指定镜像或者库镜像至docker源服务器</p><p>restart   Restart a running container                  <br>#重启运行的容器</p><p>rm        Remove one or more containers                <br>#移除一个或者多个容器</p><p>rmi       Remove one or more images            <br>#移除一个或多个镜像[无容器使用该镜像才可删除，否则需删除相关容器才可继续或 -f 强制删除]</p><p>run       Run a command in a new container             <br>#创建一个新的容器并运行一个命令</p><p>save      Save an image to a tar archive              <br>#保存一个镜像为一个 tar 包[对应 load]</p><p>search    Search for an image on the Docker Hub        <br>#在 docker hub 中搜索镜像</p><p>start     Start a stopped containers                   <br>#启动容器</p><p>stop      Stop a running containers                    <br>#停止容器</p><p>tag       Tag an image into a repository               <br>#给源中镜像打标签</p><p>top       Lookup the running processes of a container  <br>#查看容器中运行的进程信息</p><p>unpause   Unpause a paused container                   <br>#取消暂停容器</p><p>version   Show the docker version information          <br>#查看 docker 版本号</p><p>wait      Block until a container stops, then print its exit code  <br>#截取容器停止时的退出状态值</p>]]></content>
      
      
      
        <tags>
            
            <tag> Docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>提问的智慧</title>
      <link href="/posts/8778.html"/>
      <url>/posts/8778.html</url>
      
        <content type="html"><![CDATA[<div class="note info flat"><p>无意中发现的一篇好帖子，转自 <a href="https://github.com/ryanhanwu/How-To-Ask-Questions-The-Smart-Way/blob/master/README-zh_CN.md">https://github.com/ryanhanwu/How-To-Ask-Questions-The-Smart-Way/blob/master/README-zh_CN.md</a></p></div><p><strong>How To Ask Questions The Smart Way</strong></p><p>Copyright © 2001,2006,2014 Eric S. Raymond, Rick Moen</p><p>本指南英文版版权为 Eric S. Raymond, Rick Moen 所有。</p><p>原文网址：<a href="http://www.catb.org/~esr/faqs/smart-questions.html">http://www.catb.org/~esr/faqs/smart-questions.html</a></p><p>Copyleft 2001 by D.H.Grand(nOBODY/Ginux), 2010 by Gasolin, 2015 by Ryan Wu</p><p>本中文指南是基于原文 3.10 版以及 2010 年由 <a href="https://github.com/gasolin">Gasolin</a> 所翻译版本的最新翻译；</p><p>协助指出翻译问题，<strong>请<a href="https://github.com/ryanhanwu/smartquestions/issues/new">发 Issue</a>，或直接<a href="https://github.com/ryanhanwu/smartquestions/compare/">发 Pull Request</a> 给我。</strong></p><p>本文另有<a href="https://github.com/ryanhanwu/How-To-Ask-Questions-The-Smart-Way/blob/master/README.md">繁體中文版</a>。</p><h2 id="原文版本历史"><a href="#原文版本历史" class="headerlink" title="原文版本历史"></a><a href="https://github.com/ryanhanwu/smartquestions/blob/master/history.md">原文版本历史</a></h2><h2 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h2><ul><li><a href="#%E5%A3%B0%E6%98%8E">声明</a></li><li><a href="#%E7%AE%80%E4%BB%8B">简介</a></li><li><a href="#%E5%9C%A8%E6%8F%90%E9%97%AE%E4%B9%8B%E5%89%8D">在提问之前</a></li><li><a href="#%E5%BD%93%E4%BD%A0%E6%8F%90%E9%97%AE%E6%97%B6">当你提问时</a><ul><li><a href="#%E6%85%8E%E9%80%89%E6%8F%90%E9%97%AE%E7%9A%84%E8%AE%BA%E5%9D%9B">慎选提问的论坛</a></li><li><a href="#stack-overflow">Stack Overflow</a></li><li><a href="#%E7%BD%91%E7%AB%99%E5%92%8C-irc-%E8%AE%BA%E5%9D%9B">网站和 IRC 论坛</a></li><li><a href="#%E7%AC%AC%E4%BA%8C%E6%AD%A5%E4%BD%BF%E7%94%A8%E9%A1%B9%E7%9B%AE%E9%82%AE%E4%BB%B6%E5%88%97%E8%A1%A8">第二步，使用项目邮件列表</a></li><li><a href="#%E4%BD%BF%E7%94%A8%E6%9C%89%E6%84%8F%E4%B9%89%E4%B8%94%E6%8F%8F%E8%BF%B0%E6%98%8E%E7%A1%AE%E7%9A%84%E6%A0%87%E9%A2%98">使用有意义且描述明确的标题</a></li><li><a href="#%E4%BD%BF%E9%97%AE%E9%A2%98%E5%AE%B9%E6%98%93%E5%9B%9E%E5%A4%8D">使问题容易回复</a></li><li><a href="#%E7%94%A8%E6%B8%85%E6%99%B0%E6%AD%A3%E7%A1%AE%E7%B2%BE%E5%87%86%E5%B9%B6%E5%90%88%E6%B3%95%E8%AF%AD%E6%B3%95%E7%9A%84%E8%AF%AD%E5%8F%A5">用清晰、正确、精准并合法语法的语句</a></li><li><a href="#%E4%BD%BF%E7%94%A8%E6%98%93%E4%BA%8E%E8%AF%BB%E5%8F%96%E4%B8%94%E6%A0%87%E5%87%86%E7%9A%84%E6%96%87%E4%BB%B6%E6%A0%BC%E5%BC%8F%E5%8F%91%E9%80%81%E9%97%AE%E9%A2%98">使用易于读取且标准的文件格式发送问题</a></li><li><a href="#%E7%B2%BE%E7%A1%AE%E5%9C%B0%E6%8F%8F%E8%BF%B0%E9%97%AE%E9%A2%98%E5%B9%B6%E8%A8%80%E4%B9%8B%E6%9C%89%E7%89%A9">精确地描述问题并言之有物</a></li><li><a href="#%E8%AF%9D%E4%B8%8D%E5%9C%A8%E5%A4%9A%E8%80%8C%E5%9C%A8%E7%B2%BE">话不在多而在精</a></li><li><a href="#%E5%88%AB%E5%8A%A8%E8%BE%84%E5%A3%B0%E7%A7%B0%E6%89%BE%E5%88%B0-bug">别动辄声称找到 Bug</a></li><li><a href="#%E4%BD%8E%E5%A3%B0%E4%B8%8B%E6%B0%94%E4%B8%8D%E8%83%BD%E4%BB%A3%E6%9B%BF%E4%BD%A0%E7%9A%84%E5%8A%9F%E8%AF%BE">低声下气不能代替你的功课</a></li><li><a href="#%E6%8F%8F%E8%BF%B0%E9%97%AE%E9%A2%98%E7%97%87%E7%8A%B6%E8%80%8C%E9%9D%9E%E4%BD%A0%E7%9A%84%E7%8C%9C%E6%B5%8B">描述问题症状而非你的猜测</a></li><li><a href="#%E6%8C%89%E5%8F%91%E7%94%9F%E6%97%B6%E9%97%B4%E5%85%88%E5%90%8E%E5%88%97%E5%87%BA%E9%97%AE%E9%A2%98%E7%97%87%E7%8A%B6">按发生时间先后列出问题症状</a></li><li><a href="#%E6%8F%8F%E8%BF%B0%E7%9B%AE%E6%A0%87%E8%80%8C%E4%B8%8D%E6%98%AF%E8%BF%87%E7%A8%8B">描述目标而不是过程</a></li><li><a href="#%E5%88%AB%E8%A6%81%E6%B1%82%E4%BD%BF%E7%94%A8%E7%A7%81%E4%BA%BA%E7%94%B5%E9%82%AE%E5%9B%9E%E5%A4%8D">别要求使用私人电邮回复</a></li><li><a href="#%E6%B8%85%E6%A5%9A%E6%98%8E%E7%A1%AE%E7%9A%84%E8%A1%A8%E8%BE%BE%E4%BD%A0%E7%9A%84%E9%97%AE%E9%A2%98%E4%BB%A5%E5%8F%8A%E9%9C%80%E6%B1%82">清楚明确的表达你的问题以及需求</a></li><li><a href="#%E8%AF%A2%E9%97%AE%E6%9C%89%E5%85%B3%E4%BB%A3%E7%A0%81%E7%9A%84%E9%97%AE%E9%A2%98%E6%97%B6">询问有关代码的问题时</a></li><li><a href="#%E5%88%AB%E6%8A%8A%E8%87%AA%E5%B7%B1%E5%AE%B6%E5%BA%AD%E4%BD%9C%E4%B8%9A%E7%9A%84%E9%97%AE%E9%A2%98%E8%B4%B4%E4%B8%8A%E6%9D%A5">别把自己家庭作业的问题贴上来</a></li><li><a href="#%E5%8E%BB%E6%8E%89%E6%97%A0%E6%84%8F%E4%B9%89%E7%9A%84%E6%8F%90%E9%97%AE%E5%8F%A5">去掉无意义的提问句</a></li><li><a href="#%E5%8D%B3%E4%BD%BF%E4%BD%A0%E5%BE%88%E6%80%A5%E4%B9%9F%E4%B8%8D%E8%A6%81%E5%9C%A8%E6%A0%87%E9%A2%98%E5%86%99%E7%B4%A7%E6%80%A5">即使你很急也不要在标题写紧急</a></li><li><a href="#%E7%A4%BC%E5%A4%9A%E4%BA%BA%E4%B8%8D%E6%80%AA%E8%80%8C%E4%B8%94%E6%9C%89%E6%97%B6%E8%BF%98%E5%BE%88%E6%9C%89%E5%B8%AE%E5%8A%A9">礼多人不怪，而且有时还很有帮助</a></li><li><a href="#%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3%E5%90%8E%E5%8A%A0%E4%B8%AA%E7%AE%80%E7%9F%AD%E7%9A%84%E8%A1%A5%E5%85%85%E8%AF%B4%E6%98%8E">问题解决后，加个简短的补充说明</a></li></ul></li><li><a href="#%E5%A6%82%E4%BD%95%E8%A7%A3%E8%AF%BB%E7%AD%94%E6%A1%88">如何解读答案</a><ul><li><a href="#rtfm-%E5%92%8C-stfw%E5%A6%82%E4%BD%95%E7%9F%A5%E9%81%93%E4%BD%A0%E5%B7%B2%E5%AE%8C%E5%85%A8%E6%90%9E%E7%A0%B8%E4%BA%86">RTFM 和 STFW：如何知道你已完全搞砸了</a></li><li><a href="#%E5%A6%82%E6%9E%9C%E8%BF%98%E6%98%AF%E6%90%9E%E4%B8%8D%E6%87%82">如果还是搞不懂</a></li><li><a href="#%E5%A4%84%E7%90%86%E6%97%A0%E7%A4%BC%E7%9A%84%E5%9B%9E%E5%BA%94">处理无礼的回应</a></li></ul></li><li><a href="#%E5%A6%82%E4%BD%95%E9%81%BF%E5%85%8D%E6%89%AE%E6%BC%94%E5%A4%B1%E8%B4%A5%E8%80%85">如何避免扮演失败者</a></li><li><a href="#%E4%B8%8D%E8%AF%A5%E9%97%AE%E7%9A%84%E9%97%AE%E9%A2%98">不该问的问题</a></li><li><a href="#%E5%A5%BD%E9%97%AE%E9%A2%98%E4%B8%8E%E8%A0%A2%E9%97%AE%E9%A2%98">好问题与蠢问题</a></li><li><a href="#%E5%A6%82%E6%9E%9C%E5%BE%97%E4%B8%8D%E5%88%B0%E5%9B%9E%E7%AD%94">如果得不到回答</a></li><li><a href="#%E5%A6%82%E4%BD%95%E6%9B%B4%E5%A5%BD%E5%9C%B0%E5%9B%9E%E7%AD%94%E9%97%AE%E9%A2%98">如何更好地回答问题</a></li><li><a href="#%E7%9B%B8%E5%85%B3%E8%B5%84%E6%BA%90">相关资源</a></li><li><a href="#%E9%B8%A3%E8%B0%A2">鸣谢</a></li></ul><h2 id="声明"><a href="#声明" class="headerlink" title="声明"></a>声明</h2><p>许多项目在他们的使用协助/说明网页中链接了本指南，这么做很好，我们也鼓励大家都这么做。但如果你是负责管理这个项目网页的人，请在超链接附近的显著位置上注明：</p><p><strong>本指南不提供此项目的实际支持服务！</strong></p><p>我们已经深刻领教到少了上述声明所带来的痛苦。因为少了这点声明，我们不停地被一些白痴纠缠。这些白痴认为既然我们发布了这本指南，那么我们就有责任解决世上所有的技术问题。</p><p>如果你是因为需要某些协助而正在阅读这本指南，并且最后离开是因为发现从本指南作者们身上得不到直接的协助，那么你就是我们所说的那些白痴之一。别问我们问题，我们只会忽略你。我们在这本指南中是教你如何从那些真正懂得你所遇到软件或硬件问题的人取得协助，而 99% 的情况下那不会是我们。除非你确定本指南的作者之一刚好是你所遇到的问题领域的专家，否则请不要打扰我们，这样大家都会开心一点。</p><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>在<a href="http://www.catb.org/~esr/faqs/hacker-howto.html">黑客</a>的世界里，当你拋出一个技术问题时，最终是否能得到有用的回答，往往取决于你所提问和追问的方式。本指南将教你如何正确的提问以获得你满意的答案。</p><p>不只是黑客，现在开源（Open Source）软件已经相当盛行，你常常也可以由其他有经验的使用者身上得到好答案，这是件<strong>好事</strong>；使用者比起黑客来，往往对那些新手常遇到的问题更宽容一些。然而，将有经验的使用者视为黑客，并采用本指南所提的方法与他们沟通，同样也是能从他们身上得到满意回答的最有效方式。</p><p>首先你应该明白，黑客们喜爱有挑战性的问题，或者能激发他们思维的好问题。如果我们并非如此，那我们也不会成为你想询问的对象。如果你给了我们一个值得反复咀嚼玩味的好问题，我们自会对你感激不尽。好问题是激励，是厚礼。好问题可以提高我们的理解力，而且通常会暴露我们以前从没意识到或者思考过的问题。对黑客而言，”好问题！”是诚挚的大力称赞。</p><p>尽管如此，黑客们有着蔑视或傲慢面对简单问题的坏名声，这有时让我们看起来对新手、无知者似乎较有敌意，但其实不是那样的。</p><p>我们不讳言我们对那些不愿思考、或者在发问前不做他们该做的事的人的蔑视。那些人是时间杀手 —— 他们只想索取，从不付出，消耗我们可用在更有趣的问题或更值得回答的人身上的时间。我们称这样的人为 <code>失败者（撸瑟）</code> （由于历史原因，我们有时把它拼作 <code>lusers</code>）。</p><p>我们意识到许多人只是想使用我们写的软件，他们对学习技术细节没有兴趣。对大多数人而言，电脑只是种工具，是种达到目的的手段而已。他们有自己的生活并且有更要紧的事要做。我们了解这点，也从不指望每个人都对这些让我们着迷的技术问题感兴趣。尽管如此，我们回答问题的风格是指向那些真正对此有兴趣并愿意主动参与解决问题的人，这一点不会变，也不该变。如果连这都变了，我们就是在降低做自己最擅长的事情上的效率。</p><p>我们（在很大程度上）是自愿的，从繁忙的生活中抽出时间来解答疑惑，而且时常被提问淹没。所以我们无情的滤掉一些话题，特别是拋弃那些看起来像失败者的家伙，以便更高效的利用时间来回答<code>赢家（winner）</code>的问题。</p><p>如果你厌恶我们的态度，高高在上，或过于傲慢，不妨也设身处地想想。我们并没有要求你向我们屈服 —— 事实上，我们大多数人非常乐意与你平等地交流，只要你付出小小努力来满足基本要求，我们就会欢迎你加入我们的文化。但让我们帮助那些不愿意帮助自己的人是没有效率的。无知没有关系，但装白痴就是不行。</p><p>所以，你不必在技术上很在行才能吸引我们的注意，但你必须表现出能引导你变得在行的特质 – 机敏、有想法、善于观察、乐于主动参与解决问题。如果你做不到这些使你与众不同的事情，我们建议你花点钱找家商业公司签个技术支持服务合同，而不是要求黑客个人无偿地帮助你。</p><p>如果你决定向我们求助，当然你也不希望被视为失败者，更不愿成为失败者中的一员。能立刻得到快速并有效答案的最好方法，就是像赢家那样提问 – 聪明、自信、有解决问题的思路，只是偶尔在特定的问题上需要获得一点帮助。</p><p>（欢迎对本指南提出改进意见。你可以 email 你的建议至 <a href="esr@thyrsus.com">esr@thyrsus.com</a> 或 <a href="respond-auto@linuxmafia.com">respond-auto@linuxmafia.com</a>。然而请注意，本文并非<a href="http://www.ietf.org/rfc/rfc1855.txt">网络礼节</a>的通用指南，而我们通常会拒绝无助于在技术论坛得到有用答案的建议）。</p><h2 id="在提问之前"><a href="#在提问之前" class="headerlink" title="在提问之前"></a>在提问之前</h2><p>在你准备要通过电子邮件、新闻群组或者聊天室提出技术问题前，请先做到以下事情：</p><ol><li>尝试在你准备提问的论坛的旧文章中搜索答案。</li><li>尝试上网搜索以找到答案。</li><li>尝试阅读手册以找到答案。</li><li>尝试阅读常见问题文件（FAQ）以找到答案。</li><li>尝试自己检查或试验以找到答案。</li><li>向你身边的强者朋友打听以找到答案。</li><li>如果你是程序开发者，请尝试阅读源代码以找到答案。</li></ol><p>当你提出问题的时候，请先表明你已经做了上述的努力；这将有助于树立你并不是一个不劳而获且浪费别人的时间的提问者。如果你能一并表达在做了上述努力的过程中所<strong>学到</strong>的东西会更好，因为我们更乐于回答那些表现出能从答案中学习的人的问题。</p><p>运用某些策略，比如先用 Google 搜索你所遇到的各种错误信息（搜索 <a href="http://groups.google.com/">Google 论坛</a>和网页），这样很可能直接就找到了能解决问题的文件或邮件列表线索。即使没有结果，在邮件列表或新闻组寻求帮助时加上一句 <code>我在 Google 中搜过下列句子但没有找到什么有用的东西</code> 也是件好事，即使它只是表明了搜索引擎不能提供哪些帮助。这么做（加上搜索过的字串）也让遇到相似问题的其他人能被搜索引擎引导到你的提问来。</p><p>别着急，不要指望几秒钟的 Google 搜索就能解决一个复杂的问题。在向专家求助之前，再阅读一下常见问题文件（FAQ）、放轻松、坐舒服一些，再花点时间思考一下这个问题。相信我们，他们能从你的提问看出你做了多少阅读与思考，如果你是有备而来，将更有可能得到解答。不要将所有问题一股脑拋出，只因你的第一次搜索没有找到答案（或者找到太多答案）。</p><p>准备好你的问题，再将问题仔细的思考过一遍，因为草率的发问只能得到草率的回答，或者根本得不到任何答案。越是能表现出在寻求帮助前你为解决问题所付出的努力，你越有可能得到实质性的帮助。</p><p>小心别问错了问题。如果你的问题基于错误的假设，某个普通黑客（J. Random Hacker）多半会一边在心里想着<code>蠢问题…</code>， 一边用无意义的字面解释来答复你，希望着你会从问题的回答（而非你想得到的答案）中汲取教训。</p><p>绝不要自以为<strong>够格</strong>得到答案，你没有；你并没有。毕竟你没有为这种服务支付任何报酬。你将会是自己去<strong>挣到</strong>一个答案，靠提出有内涵的、有趣的、有思维激励作用的问题 —— 一个有潜力能贡献社区经验的问题，而不仅仅是被动的从他人处索取知识。</p><p>另一方面，表明你愿意在找答案的过程中做点什么是一个非常好的开端。<code>谁能给点提示？</code>、<code>我的这个例子里缺了什么？</code>以及<code>我应该检查什么地方</code>比<code>请把我需要的确切的过程贴出来</code>更容易得到答复。因为你表现出只要有人能指个正确方向，你就有完成它的能力和决心。</p><h2 id="当你提问时"><a href="#当你提问时" class="headerlink" title="当你提问时"></a>当你提问时</h2><h3 id="慎选提问的论坛"><a href="#慎选提问的论坛" class="headerlink" title="慎选提问的论坛"></a>慎选提问的论坛</h3><p>小心选择你要提问的场合。如果你做了下述的事情，你很可能被忽略掉或者被看作失败者：</p><ul><li>在与主题不合的论坛上贴出你的问题。</li><li>在探讨进阶技术问题的论坛张贴非常初级的问题；反之亦然。</li><li>在太多的不同新闻群组上重复转贴同样的问题（cross-post）。</li><li>向既非熟人也没有义务解决你问题的人发送私人电邮。</li></ul><p>黑客会剔除掉那些搞错场合的问题，以保护他们沟通的渠道不被无关的东西淹没。你不会想让这种事发生在自己身上的。</p><p>因此，第一步是找到对的论坛。再说一次，Google 和其它搜索引擎还是你的朋友，用它们来找到与你遭遇到困难的软硬件问题最相关的网站。通常那儿都有常见问题（FAQ）、邮件列表及相关说明文件的链接。如果你的努力（包括<strong>阅读</strong> FAQ）都没有结果，网站上也许还有报告 Bug（Bug-reporting）的流程或链接，如果是这样，链过去看看。</p><p>向陌生的人或论坛发送邮件最可能是风险最大的事情。举例来说，别假设一个提供丰富内容的网页的作者会想充当你的免费顾问。不要对你的问题是否会受到欢迎做太乐观的估计 – 如果你不确定，那就向别处发送，或者压根别发。</p><p>在选择论坛、新闻群组或邮件列表时，别太相信名字，先看看 FAQ 或者许可书以弄清楚你的问题是否切题。发文前先翻翻已有的话题，这样可以让你感受一下那里的文化。事实上，事先在新闻组或邮件列表的历史记录中搜索与你问题相关的关键词是个极好的主意，也许这样就找到答案了。即使没有，也能帮助你归纳出更好的问题。</p><p>别像机关枪似的一次”扫射”所有的帮助渠道，这就像大喊大叫一样会使人不快。要一个一个地来。</p><p>搞清楚你的主题！最典型的错误之一是在某种致力于跨平台可移植的语言、套件或工具的论坛中提关于 Unix 或 Windows 操作系统程序界面的问题。如果你不明白为什么这是大错，最好在搞清楚这之间差异之前什么也别问。</p><p>一般来说，在仔细挑选的公共论坛中提问，会比在私有论坛中提同样的问题更容易得到有用的回答。有几个理由可以支持这点，一是看潜在的回复者有多少，二是看观众有多少。黑客较愿意回答那些能帮助到许多人的问题。</p><p>可以理解的是，老练的黑客和一些热门软件的作者正在接受过多的错发信息。就像那根最后压垮骆驼背的稻草一样，你的加入也有可能使情况走向极端 —— 已经好几次了，一些热门软件的作者从自己软件的支持中抽身出来，因为伴随而来涌入其私人邮箱的无用邮件变得无法忍受。</p><h3 id="Stack-Overflow"><a href="#Stack-Overflow" class="headerlink" title="Stack Overflow"></a>Stack Overflow</h3><p>搜索，<strong>然后</strong> 在 Stack Exchange 问。</p><p>近年来，Stack Exchange community 社区已经成为回答技术及其他问题的主要渠道，尤其是那些开放源码的项目。</p><p>因为 Google 索引是即时的，在看 Stack Exchange 之前先在 Google 搜索。有很高的机率某人已经问了一个类似的问题，而且 Stack Exchange 网站们往往会是搜索结果中最前面几个。如果你在 Google 上没有找到任何答案，你再到特定相关主题的网站去找。用标签（Tag）搜索能让你更缩小你的搜索结果。</p><p>Stack Exchange 已经成长到<a href="http://stackexchange.com/sites">超过一百个网站</a>，以下是最常用的几个站：</p><ul><li>Super User 是问一些通用的电脑问题，如果你的问题跟代码或是写程序无关，只是一些网络连线之类的，请到这里。</li><li>Stack Overflow 是问写程序有关的问题。</li><li>Server Fault 是问服务器和网管相关的问题。</li></ul><h3 id="网站和-IRC-论坛"><a href="#网站和-IRC-论坛" class="headerlink" title="网站和 IRC 论坛"></a>网站和 IRC 论坛</h3><p>本地的使用者群组（user group），或者你所用的 Linux 发行版本也许正在宣传他们的网页论坛或 IRC 频道，并提供新手帮助（在一些非英语国家，新手论坛很可能还是邮件列表）， 这些地方是开始提问的好首选，特别是当你觉得遇到的也许只是相对简单或者很普通的问题时。有广告赞助的 IRC 频道是公开欢迎提问的地方，通常可以即时得到回应。</p><p>事实上，如果程序出的问题只发生在特定 Linux 发行版提供的版本（这很常见），最好先去该发行版的论坛或邮件列表中提问，再到程序本身的论坛或邮件列表提问。（否则）该项目的黑客可能仅仅回复 “用<strong>我们的</strong>版本”。</p><p>在任何论坛发文以前，先确认一下有没有搜索功能。如果有，就试着搜索一下问题的几个关键词，也许这会有帮助。如果在此之前你已做过通用的网页搜索（你也该这样做），还是再搜索一下论坛，搜索引擎有可能没来得及索引此论坛的全部内容。</p><p>通过论坛或 IRC 频道来提供使用者支持服务有增长的趋势，电子邮件则大多为项目开发者间的交流而保留。所以最好先在论坛或 IRC 中寻求与该项目相关的协助。</p><p>在使用 IRC 的时候，首先最好不要发布很长的问题描述，有些人称之为频道洪水。最好通过一句话的问题描述来开始聊天。</p><h3 id="第二步，使用项目邮件列表"><a href="#第二步，使用项目邮件列表" class="headerlink" title="第二步，使用项目邮件列表"></a>第二步，使用项目邮件列表</h3><p>当某个项目提供开发者邮件列表时，要向列表而不是其中的个别成员提问，即使你确信他能最好地回答你的问题。查一查项目的文件和首页，找到项目的邮件列表并使用它。有几个很好的理由支持我们采用这种办法：</p><ul><li>任何好到需要向个别开发者提出的问题，也将对整个项目群组有益。反之，如果你认为自己的问题对整个项目群组来说太愚蠢，也不能成为骚扰个别开发者的理由。</li><li>向列表提问可以分散开发者的负担，个别开发者（尤其是项目领导人）也许太忙以至于没法回答你的问题。</li><li>大多数邮件列表都会被存档，那些被存档的内容将被搜索引擎索引。如果你向列表提问并得到解答，将来其它人可以通过网页搜索找到你的问题和答案，也就不用再次发问了。</li><li>如果某些问题经常被问到，开发者可以利用此信息来改进说明文件或软件本身，以使其更清楚。如果只是私下提问，就没有人能看到最常见问题的完整场景。</li></ul><p>如果一个项目既有”使用者” 也有”开发者”（或”黑客”）邮件列表或论坛，而你又不会动到那些源代码，那么就向”使用者”列表或论坛提问。不要假设自己会在开发者列表中受到欢迎，那些人多半会将你的提问视为干扰他们开发的噪音。</p><p>然而，如果你<strong>确信</strong>你的问题很特别，而且在”使用者” 列表或论坛中几天都没有回复，可以试试前往”开发者”列表或论坛发问。建议你在张贴前最好先暗地里观察几天以了解那里的行事方式（事实上这是参与任何私有或半私有列表的好主意）</p><p>如果你找不到一个项目的邮件列表，而只能查到项目维护者的电子邮件地址，尽管向他发信。即使是在这种情况下，也别假设（项目）邮件列表不存在。在你的电子邮件中，请陈述你已经试过但没有找到合适的邮件列表，也提及你不反对将自己的邮件转发给他人（许多人认为，即使没什么秘密，私人电子邮件也不应该被公开。通过允许将你的电子邮件转发他人，你给了相应人员处置你邮件的选择）。</p><h3 id="使用有意义且描述明确的标题"><a href="#使用有意义且描述明确的标题" class="headerlink" title="使用有意义且描述明确的标题"></a>使用有意义且描述明确的标题</h3><p>在邮件列表、新闻群组或论坛中，大约 50 字以内的标题是抓住资深专家注意力的好机会。别用喋喋不休的<code>帮帮忙</code>、<code>跪求</code>、<code>急</code>（更别说<code>救命啊！！！！</code>这样让人反感的话，用这种标题会被条件反射式地忽略）来浪费这个机会。不要妄想用你的痛苦程度来打动我们，而应该是在这点空间中使用极简单扼要的描述方式来提出问题。</p><p>一个好标题范例是<code>目标 —— 差异</code>式的描述，许多技术支持组织就是这样做的。在<code>目标</code>部分指出是哪一个或哪一组东西有问题，在<code>差异</code>部分则描述与期望的行为不一致的地方。</p><blockquote><p>蠢问题：救命啊！我的笔记本电脑不能正常显示了！</p></blockquote><blockquote><p>聪明问题：X.org 6.8.1 的鼠标光标会变形，某牌显卡 MV1005 芯片组。</p></blockquote><blockquote><p>更聪明问题：X.org 6.8.1 的鼠标光标，在某牌显卡 MV1005 芯片组环境下 - 会变形。</p></blockquote><p>编写<code>目标 —— 差异</code> 式描述的过程有助于你组织对问题的细致思考。是什么被影响了？ 仅仅是鼠标光标或者还有其它图形？只在 X.org 的 X 版中出现？或只是出现在 6.8.1 版中？ 是针对某牌显卡芯片组？或者只是其中的 MV1005 型号？ 一个黑客只需瞄一眼就能够立即明白你的环境<strong>和</strong>你遇到的问题。</p><p>总而言之，请想像一下你正在一个只显示标题的存档讨论串（Thread）索引中查寻。让你的标题更好地反映问题，可使下一个搜索类似问题的人能够关注这个讨论串，而不用再次提问相同的问题。</p><p>如果你想在回复中提出问题，记得要修改内容标题，以表明你是在问一个问题， 一个看起来像 <code>Re: 测试</code> 或者 <code>Re: 新 bug</code> 的标题很难引起足够重视。另外，在不影响连贯性之下，适当引用并删减前文的内容，能给新来的读者留下线索。</p><p>对于讨论串，不要直接点击回复来开始一个全新的讨论串，这将限制你的观众。因为有些邮件阅读程序，比如 mutt ，允许使用者按讨论串排序并通过折叠讨论串来隐藏消息，这样做的人永远看不到你发的消息。</p><p>仅仅改变标题还不够。mutt 和其它一些邮件阅读程序还会检查邮件标题以外的其它信息，以便为其指定讨论串。所以宁可发一个全新的邮件。</p><p>在网页论坛上，好的提问方式稍有不同，因为讨论串与特定的信息紧密结合，并且通常在讨论串外就看不到里面的内容，故通过回复提问，而非改变标题是可接受的。不是所有论坛都允许在回复中出现分离的标题，而且这样做了基本上没有人会去看。不过，通过回复提问，这本身就是暧昧的做法，因为它们只会被正在查看该标题的人读到。所以，除非你<strong>只想</strong>在该讨论串当前活跃的人群中提问，不然还是另起炉灶比较好。</p><h3 id="使问题容易回复"><a href="#使问题容易回复" class="headerlink" title="使问题容易回复"></a>使问题容易回复</h3><p>以<code>请将你的回复发送到……</code>来结束你的问题多半会使你得不到回答。如果你觉得花几秒钟在邮件客户端设置一下回复地址都麻烦，我们也觉得花几秒钟思考你的问题更麻烦。如果你的邮件程序不支持这样做，<a href="http://linuxmafia.com/faq/Mail/muas.html">换个好点的</a>；如果是操作系统不支持这种邮件程序，也换个好点的。</p><p>在论坛，要求通过电子邮件回复是非常无礼的，除非你认为回复的信息可能比较敏感（有人会为了某些未知的原因，只让你而不是整个论坛知道答案）。如果你只是想在有人回复讨论串时得到电子邮件提醒，可以要求网页论坛发送给你。几乎所有论坛都支持诸如<code>追踪此讨论串</code>、<code>有回复时发送邮件提醒</code>等功能。</p><h3 id="用清晰、正确、精准并语法正确的语句"><a href="#用清晰、正确、精准并语法正确的语句" class="headerlink" title="用清晰、正确、精准并语法正确的语句"></a>用清晰、正确、精准并语法正确的语句</h3><p>我们从经验中发现，粗心的提问者通常也会粗心的写程序与思考（我敢打包票）。回答粗心大意者的问题很不值得，我们宁愿把时间耗在别处。</p><p>正确的拼写、标点符号和大小写是很重要的。一般来说，如果你觉得这样做很麻烦，不想在乎这些，那我们也觉得麻烦，不想在乎你的提问。花点额外的精力斟酌一下字句，用不着太僵硬与正式 —— 事实上，黑客文化很看重能准确地使用非正式、俚语和幽默的语句。但它<strong>必须很</strong>准确，而且有迹象表明你是在思考和关注问题。</p><p>正确地拼写、使用标点和大小写，不要将<code>its</code>混淆为<code>it&#39;s</code>，<code>loose</code>搞成<code>lose</code>或者将<code>discrete</code>弄成<code>discreet</code>。不要<strong>全部用大写</strong>，这会被视为无礼的大声嚷嚷（全部小写也好不到哪去，因为不易阅读。<a href="http://en.wikipedia.org/wiki/Alan_Cox">Alan Cox</a> 也许可以这样做，但你不行）。</p><p>更白话的说，如果你写得像是个半文盲[译注：<a href="http://zh.wikipedia.org/wiki/%E5%B0%8F%E7%99%BD">小白</a>]，那多半得不到理睬。也不要使用即时通信中的简写或<a href="http://zh.wikipedia.org/wiki/%E7%81%AB%E6%98%9F%E6%96%87">火星文</a>，如将<code>的</code>简化为<code>d</code>会使你看起来像一个为了少打几个键而省字的小白。更糟的是，如果像个小孩似地鬼画符那绝对是在找死，可以肯定没人会理你（或者最多是给你一大堆指责与挖苦）。</p><p>如果在使用非母语的论坛提问，你可以犯点拼写和语法上的小错，但决不能在思考上马虎（没错，我们通常能弄清两者的分别）。同时，除非你知道回复者使用的语言，否则请使用英语书写。繁忙的黑客一般会直接删除用他们看不懂语言写的消息。在网络上英语是通用语言，用英语书写可以将你的问题在尚未被阅读就被直接删除的可能性降到最低。</p><p>如果英文是你的外语（Second language），提示潜在回复者你有潜在的语言困难是很好的：<br>[译注：以下附上原文以供使用]</p><blockquote><p>English is not my native language; please excuse typing errors.</p></blockquote><ul><li>英文不是我的母语，请原谅我的错字或语法。</li></ul><blockquote><p>If you speak $LANGUAGE, please email/PM me;<br>I may need assistance translating my question.</p></blockquote><ul><li>如果你说<strong>某语言</strong>，请寄信/私讯给我；我需要有人协助我翻译我的问题。</li></ul><blockquote><p>I am familiar with the technical terms,<br>but some slang expressions and idioms are difficult for me.</p></blockquote><ul><li>我对技术名词很熟悉，但对于俗语或是特别用法比较不甚了解。</li></ul><blockquote><p>I’ve posted my question in $LANGUAGE and English.<br>I’ll be glad to translate responses, if you only use one or the other.</p></blockquote><ul><li>我把我的问题用<strong>某语言</strong>和英文写出来，如果你只用一种语言回答，我会乐意将其翻译成另一种。</li></ul><h3 id="使用易于读取且标准的文件格式发送问题"><a href="#使用易于读取且标准的文件格式发送问题" class="headerlink" title="使用易于读取且标准的文件格式发送问题"></a>使用易于读取且标准的文件格式发送问题</h3><p>如果你人为地将问题搞得难以阅读，它多半会被忽略，人们更愿读易懂的问题，所以：</p><ul><li>使用纯文字而不是 HTML (<a href="http://archive.birdhouse.org/etc/evilmail.html">关闭 HTML</a> 并不难）。</li><li>使用 MIME 附件通常是可以的，前提是真正有内容（譬如附带的源代码或 patch），而不仅仅是邮件程序生成的模板（譬如只是信件内容的拷贝）。</li><li>不要发送一段文字只是一行句子但自动换行后会变成多行的邮件（这使得回复部分内容非常困难）。设想你的读者是在 80 个字符宽的终端机上阅读邮件，最好设置你的换行分割点小于 80 字。</li><li>但是，对一些特殊的文件<strong>不要</strong>设置固定宽度（譬如日志档案拷贝或会话记录）。数据应该原样包含，让回复者有信心他们看到的是和你看到的一样的东西。</li><li>在英语论坛中，不要使用<code>Quoted-Printable</code> MIME 编码发送消息。这种编码对于张贴非 ASCII 语言可能是必须的，但很多邮件程序并不支持这种编码。当它们处理换行时，那些文本中四处散布的<code>=20</code>符号既难看也分散注意力，甚至有可能破坏内容的语意。</li><li>绝对，<strong>永远</strong>不要指望黑客们阅读使用封闭格式编写的文档，像微软公司的 Word 或 Excel 文件等。大多数黑客对此的反应就像有人将还在冒热气的猪粪倒在你家门口时你的反应一样。即便他们能够处理，他们也很厌恶这么做。</li><li>如果你从使用 Windows 的电脑发送电子邮件，关闭微软愚蠢的<code>智能引号</code>功能 （从[选项] &gt; [校订] &gt; [自动校正选项]，勾选掉<code>智能引号</code>单选框），以免在你的邮件中到处散布垃圾字符。</li><li>在论坛，勿滥用<code>表情符号</code>和<code>HTML</code>功能（当它们提供时）。一两个表情符号通常没有问题，但花哨的彩色文本倾向于使人认为你是个无能之辈。过滥地使用表情符号、色彩和字体会使你看来像个傻笑的小姑娘。这通常不是个好主意，除非你只是对性而不是对答案感兴趣。</li></ul><p>如果你使用图形用户界面的邮件程序（如微软公司的 Outlook 或者其它类似的），注意它们的默认设置不一定满足这些要求。大多数这类程序有基于选单的<code>查看源代码</code>命令，用它来检查发送文件夹中的邮件，以确保发送的是纯文本文件同时没有一些奇怪的字符。</p><h3 id="精确地描述问题并言之有物"><a href="#精确地描述问题并言之有物" class="headerlink" title="精确地描述问题并言之有物"></a>精确地描述问题并言之有物</h3><ul><li>仔细、清楚地描述你的问题或 Bug 的症状。</li><li>描述问题发生的环境（机器配置、操作系统、应用程序、以及相关的信息），提供经销商的发行版和版本号（如：<code>Fedora Core 4</code>、<code>Slackware 9.1</code>等）。</li><li>描述在提问前你是怎样去研究和理解这个问题的。</li><li>描述在提问前为确定问题而采取的诊断步骤。</li><li>描述最近做过什么可能相关的硬件或软件变更。</li><li>尽可能的提供一个可以<code>重现这个问题的可控环境</code>的方法。</li></ul><p>尽量去揣测一个黑客会怎样反问你，在你提问之前预先将黑客们可能遇到的问题回答一遍。</p><p>以上几点中，当你报告的是你认为可能在代码中的问题时，给黑客一个可以重现你的问题的环境尤其重要。当你这么做时，你得到有效的回答的机会和速度都会大大的提升。</p><p><a href="http://www.chiark.greenend.org.uk/~sgtatham/">Simon Tatham</a> 写过一篇名为《<a href="http://www.chiark.greenend.org.uk/~sgtatham/bugs-cn.html">如何有效的报告 Bug</a>》的出色文章。强力推荐你也读一读。</p><h3 id="话不在多而在精"><a href="#话不在多而在精" class="headerlink" title="话不在多而在精"></a>话不在多而在精</h3><p>你需要提供精确有内容的信息。这并不是要求你简单的把成堆的出错代码或者资料完全转录到你的提问中。如果你有庞大而复杂的测试样例能重现程序挂掉的情境，尽量将它剪裁得越小越好。</p><p>这样做的用处至少有三点。<br>第一，表现出你为简化问题付出了努力，这可以使你得到回答的机会增加；<br>第二，简化问题使你更有可能得到<strong>有用</strong>的答案；<br>第三，在精炼你的 bug 报告的过程中，你很可能就自己找到了解决方法或权宜之计。</p><h3 id="别动辄声称找到-Bug"><a href="#别动辄声称找到-Bug" class="headerlink" title="别动辄声称找到 Bug"></a>别动辄声称找到 Bug</h3><p>当你在使用软件中遇到问题，除非你非常、<strong>非常</strong>的有根据，不要动辄声称找到了 Bug。提示：除非你能提供解决问题的源代码补丁，或者提供回归测试来表明前一版本中行为不正确，否则你都多半不够完全确信。这同样适用在网页和文件，如果你（声称）发现了文件的<code>Bug</code>，你应该能提供相应位置的修正或替代文件。</p><p>请记得，还有许多其它使用者没遇到你发现的问题，否则你在阅读文件或搜索网页时就应该发现了（你在抱怨前<a href="#%E5%9C%A8%E6%8F%90%E9%97%AE%E4%B9%8B%E5%89%8D">已经做了这些，是吧</a>？）。这也意味着很有可能是你弄错了而不是软件本身有问题。</p><p>编写软件的人总是非常辛苦地使它尽可能完美。如果你声称找到了 Bug，也就是在质疑他们的能力，即使你是对的，也有可能会冒犯到其中某部分人。当你在标题中嚷嚷着有<code>Bug</code>时，这尤其严重。</p><p>提问时，即使你私下非常确信已经发现一个真正的 Bug，最好写得像是<strong>你</strong>做错了什么。如果真的有 Bug，你会在回复中看到这点。这样做的话，如果真有 Bug，维护者就会向你道歉，这总比你惹恼别人然后欠别人一个道歉要好一点。</p><h3 id="低声下气不能代替你的功课"><a href="#低声下气不能代替你的功课" class="headerlink" title="低声下气不能代替你的功课"></a>低声下气不能代替你的功课</h3><p>有些人明白他们不该粗鲁或傲慢的提问并要求得到答复，但他们选择另一个极端 —— 低声下气：<code>我知道我只是个可悲的新手，一个撸瑟，但...</code>。这既使人困扰，也没有用，尤其是伴随着与实际问题含糊不清的描述时更令人反感。</p><p>别用原始灵长类动物的把戏来浪费你我的时间。取而代之的是，尽可能清楚地描述背景条件和你的问题情况。这比低声下气更好地定位了你的位置。</p><p>有时网页论坛会设有专为新手提问的版面，如果你真的认为遇到了初学者的问题，到那去就是了，但一样别那么低声下气。</p><h3 id="描述问题症状而非你的猜测"><a href="#描述问题症状而非你的猜测" class="headerlink" title="描述问题症状而非你的猜测"></a>描述问题症状而非你的猜测</h3><p>告诉黑客们你认为问题是怎样造成的并没什么帮助。（如果你的推断如此有效，还用向别人求助吗？），因此要确信你原原本本告诉了他们问题的症状，而不是你的解释和理论；让黑客们来推测和诊断。如果你认为陈述自己的猜测很重要，清楚地说明这只是你的猜测，并描述为什么它们不起作用。</p><p><strong>蠢问题</strong></p><blockquote><p>我在编译内核时接连遇到 SIG11 错误，<br>我怀疑某条飞线搭在主板的走线上了，这种情况应该怎样检查最好？</p></blockquote><p><strong>聪明问题</strong></p><blockquote><p>我的组装电脑是 FIC-PA2007 主机板搭载 AMD K6/233 CPU（威盛 Apollo VP2 芯片组），<br>256MB Corsair PC133 SDRAM 内存，在编译内核时，从开机 20 分钟以后就频频产生 SIG11 错误，<br>但是在头 20 分钟内从没发生过相同的问题。重新启动也没有用，但是关机一晚上就又能工作 20 分钟。<br>所有内存都换过了，没有效果。相关部分的标准编译记录如下…。</p></blockquote><p>由于以上这点似乎让许多人觉得难以配合，这里有句话可以提醒你：<code>所有的诊断专家都来自密苏里州。</code> 美国国务院的官方座右铭则是：<code>让我看看</code>（出自国会议员 Willard D. Vandiver 在 1899 年时的讲话：<code>我来自一个出产玉米，棉花，牛蒡和民主党人的国家，滔滔雄辩既不能说服我，也不会让我满意。我来自密苏里州，你必须让我看看。</code>） 针对诊断者而言，这并不是一种怀疑，而只是一种真实而有用的需求，以便让他们看到的是与你看到的原始证据尽可能一致的东西，而不是你的猜测与归纳的结论。所以，大方的展示给我们看吧！</p><h3 id="按发生时间先后列出问题症状"><a href="#按发生时间先后列出问题症状" class="headerlink" title="按发生时间先后列出问题症状"></a>按发生时间先后列出问题症状</h3><p>问题发生前的一系列操作，往往就是对找出问题最有帮助的线索。因此，你的说明里应该包含你的操作步骤，以及机器和软件的反应，直到问题发生。在命令行处理的情况下，提供一段操作记录（例如运行脚本工具所生成的），并引用相关的若干行（如 20 行）记录会非常有帮助。</p><p>如果挂掉的程序有诊断选项（如 -v 的详述开关），试着选择这些能在记录中增加调试信息的选项。记住，<code>多</code>不等于<code>好</code>。试着选取适当的调试级别以便提供有用的信息而不是让读者淹没在垃圾中。</p><p>如果你的说明很长（如超过四个段落），在开头简述问题，接下来再按时间顺序详述会有所帮助。这样黑客们在读你的记录时就知道该注意哪些内容了。</p><h3 id="描述目标而不是过程"><a href="#描述目标而不是过程" class="headerlink" title="描述目标而不是过程"></a>描述目标而不是过程</h3><p>如果你想弄清楚如何做某事（而不是报告一个 Bug），在开头就描述你的目标，然后才陈述重现你所卡住的特定步骤。</p><p>经常寻求技术帮助的人在心中有个更高层次的目标，而他们在自以为能达到目标的特定道路上被卡住了，然后跑来问该怎么走，但没有意识到这条路本身就有问题。结果要费很大的劲才能搞定。</p><p><strong>蠢问题</strong></p><blockquote><p>我怎样才能从某绘图程序的颜色选择器中取得十六进制的的 RGB 值？</p></blockquote><p><strong>聪明问题</strong></p><blockquote><p>我正试着用替换一幅图片的色码（color table）成自己选定的色码，我现在知道的唯一方法是编辑每个色码区块（table slot），<br>但却无法从某绘图程序的颜色选择器取得十六进制的的 RGB 值。</p></blockquote><p>第二种提问法比较聪明，你可能得到像是<code>建议采用另一个更合适的工具</code>的回复。</p><h3 id="别要求使用私人电邮回复"><a href="#别要求使用私人电邮回复" class="headerlink" title="别要求使用私人电邮回复"></a>别要求使用私人电邮回复</h3><p>黑客们认为问题的解决过程应该公开、透明，此过程中如果更有经验的人注意到不完整或者不当之处，最初的回复才能够、也应该被纠正。同时，作为提供帮助者可以得到一些奖励，奖励就是他的能力和学识被其他同行看到。</p><p>当你要求私下回复时，这个过程和奖励都被中止。别这样做，让<strong>回复者</strong>来决定是否私下回答 —— 如果他真这么做了，通常是因为他认为问题编写太差或者太肤浅，以至于对其它人没有兴趣。</p><p>这条规则存在一条有限的例外，如果你确信提问可能会引来大量雷同的回复时，那么这个神奇的提问句会是<code>向我发电邮，我将为论坛归纳这些回复</code>。试着将邮件列表或新闻群组从洪水般的雷同回复中解救出来是非常有礼貌的 —— 但你必须信守诺言。</p><h3 id="清楚明确的表达你的问题以及需求"><a href="#清楚明确的表达你的问题以及需求" class="headerlink" title="清楚明确的表达你的问题以及需求"></a>清楚明确的表达你的问题以及需求</h3><p>漫无边际的提问是近乎无休无止的时间黑洞。最有可能给你有用答案的人通常也正是最忙的人（他们忙是因为要亲自完成大部分工作）。这样的人对无节制的时间黑洞相当厌恶，所以他们也倾向于厌恶那些漫无边际的提问。</p><p>如果你明确表述需要回答者做什么（如提供指点、发送一段代码、检查你的补丁、或是其他等等），就最有可能得到有用的答案。因为这会定出一个时间和精力的上限，便于回答者能集中精力来帮你。这么做很棒。</p><p>要理解专家们所处的世界，请把专业技能想像为充裕的资源，而回复的时间则是稀缺的资源。你要求他们奉献的时间越少，你越有可能从真正专业而且很忙的专家那里得到解答。</p><p>所以，界定一下你的问题，使专家花在辨识你的问题和回答所需要付出的时间减到最少，这技巧对你有用答案相当有帮助 —— 但这技巧通常和简化问题有所区别。因此，问<code>我想更好的理解 X，可否指点一下哪有好一点说明？</code>通常比问<code>你能解释一下 X 吗？</code>更好。如果你的代码不能运作，通常请别人看看哪里有问题，比要求别人替你改正要明智得多。</p><h3 id="询问有关代码的问题时"><a href="#询问有关代码的问题时" class="headerlink" title="询问有关代码的问题时"></a>询问有关代码的问题时</h3><p>别要求他人帮你调试有问题的代码，不提示一下应该从何入手。张贴几百行的代码，然后说一声：<code>它不能工作</code>会让你完全被忽略。只贴几十行代码，然后说一句：<code>在第七行以后，我期待它显示 &lt;x&gt;，但实际出现的是 &lt;y&gt;</code>比较有可能让你得到回应。</p><p>最有效描述程序问题的方法是提供最精简的 Bug 展示测试用例（bug-demonstrating test case）。什么是最精简的测试用例？那是问题的缩影；一小个程序片段能<strong>刚好</strong>展示出程序的异常行为，而不包含其他令人分散注意力的内容。怎么制作最精简的测试用例？如果你知道哪一行或哪一段代码会造成异常的行为，复制下来并加入足够重现这个状况的代码（例如，足以让这段代码能被编译/直译/被应用程序处理）。如果你无法将问题缩减到一个特定区块，就复制一份代码并移除不影响产生问题行为的部分。总之，测试用例越小越好（查看<a href="#%E8%AF%9D%E4%B8%8D%E5%9C%A8%E5%A4%9A%E8%80%8C%E5%9C%A8%E7%B2%BE">话不在多而在精</a>一节）。</p><p>一般而言，要得到一段相当精简的测试用例并不太容易，但永远先尝试这样做的是种好习惯。这种方式可以帮助你了解如何自行解决这个问题 —— 而且即使你的尝试不成功，黑客们也会看到你在尝试取得答案的过程中付出了努力，这可以让他们更愿意与你合作。</p><p>如果你只是想让别人帮忙审查（Review）一下代码，在信的开头就要说出来，并且一定要提到你认为哪一部分特别需要关注以及为什么。</p><h3 id="别把自己家庭作业的问题贴上来"><a href="#别把自己家庭作业的问题贴上来" class="headerlink" title="别把自己家庭作业的问题贴上来"></a>别把自己家庭作业的问题贴上来</h3><p>黑客们很擅长分辨哪些问题是家庭作业式的问题；因为我们中的大多数都曾自己解决这类问题。同样，这些问题得由<strong>你</strong>来搞定，你会从中学到东西。你可以要求给点提示，但别要求得到完整的解决方案。</p><p>如果你怀疑自己碰到了一个家庭作业式的问题，但仍然无法解决，试试在使用者群组，论坛或（最后一招）在项目的<strong>使用者</strong>邮件列表或论坛中提问。尽管黑客们<strong>会</strong>看出来，但一些有经验的使用者也许仍会给你一些提示。</p><h3 id="去掉无意义的提问句"><a href="#去掉无意义的提问句" class="headerlink" title="去掉无意义的提问句"></a>去掉无意义的提问句</h3><p>避免用无意义的话结束提问，例如<code>有人能帮我吗？</code>或者<code>这有答案吗？</code>。</p><p>首先：如果你对问题的描述不是很好，这样问更是画蛇添足。</p><p>其次：由于这样问是画蛇添足，黑客们会很厌烦你 —— 而且通常会用逻辑上正确，但毫无意义的回答来表示他们的蔑视， 例如：<code>没错，有人能帮你</code>或者<code>不，没答案</code>。</p><p>一般来说，避免用 <code>是或否</code>、<code>对或错</code>、<code>有或没有</code>类型的问句，除非你想得到<a href="http://homepage.ntlworld.com./jonathan.deboynepollard/FGA/questions-with-yes-or-no-answers.html">是或否类型的回答</a>。</p><h3 id="即使你很急也不要在标题写紧急"><a href="#即使你很急也不要在标题写紧急" class="headerlink" title="即使你很急也不要在标题写紧急"></a>即使你很急也不要在标题写<code>紧急</code></h3><p>这是你的问题，不是我们的。宣称<code>紧急</code>极有可能事与愿违：大多数黑客会直接删除无礼和自私地企图即时引起关注的问题。更严重的是，<code>紧急</code>这个字（或是其他企图引起关注的标题）通常会被垃圾信过滤器过滤掉 —— 你希望能看到你问题的人可能永远也看不到。</p><p>有半个例外的情况是，如果你是在一些很高调，会使黑客们兴奋的地方，也许值得这样去做。在这种情况下，如果你有时间压力，也很有礼貌地提到这点，人们也许会有兴趣回答快一点。</p><p>当然，这风险很大，因为黑客们兴奋的点多半与你的不同。譬如从 NASA 国际空间站（International Space Station）发这样的标题没有问题，但用自我感觉良好的慈善行为或政治原因发肯定不行。事实上，张贴诸如<code>紧急：帮我救救这个毛绒绒的小海豹！</code>肯定让你被黑客忽略或惹恼他们，即使他们认为毛绒绒的小海豹很重要。</p><p>如果你觉得这点很不可思议，最好再把这份指南剩下的内容多读几遍，直到你弄懂了再发文。</p><h3 id="礼多人不怪，而且有时还很有帮助"><a href="#礼多人不怪，而且有时还很有帮助" class="headerlink" title="礼多人不怪，而且有时还很有帮助"></a>礼多人不怪，而且有时还很有帮助</h3><p>彬彬有礼，多用<code>请</code>和<code>谢谢您的关注</code>，或<code>谢谢你的关照</code>。让大家都知道你对他们花时间免费提供帮助心存感激。</p><p>坦白说，这一点并没有比清晰、正确、精准并合法语法和避免使用专用格式重要（也不能取而代之）。黑客们一般宁可读有点唐突但技术上鲜明的 Bug 报告，而不是那种有礼但含糊的报告。（如果这点让你不解，记住我们是按问题能教给我们什么来评价问题的价值的）</p><p>然而，如果你有一串的问题待解决，客气一点肯定会增加你得到有用回应的机会。</p><p>（我们注意到，自从本指南发布后，从资深黑客那里得到的唯一严重缺陷反馈，就是对预先道谢这一条。一些黑客觉得<code>先谢了</code>意味着事后就不用再感谢任何人的暗示。我们的建议是要么先说<code>先谢了</code>，<strong>然后</strong>事后再对回复者表示感谢，或者换种方式表达感激，譬如用<code>谢谢你的关注</code>或<code>谢谢你的关照</code>。）</p><h3 id="问题解决后，加个简短的补充说明"><a href="#问题解决后，加个简短的补充说明" class="headerlink" title="问题解决后，加个简短的补充说明"></a>问题解决后，加个简短的补充说明</h3><p>问题解决后，向所有帮助过你的人发个说明，让他们知道问题是怎样解决的，并再一次向他们表示感谢。如果问题在新闻组或者邮件列表中引起了广泛关注，应该在那里贴一个说明比较恰当。</p><p>最理想的方式是向最初提问的话题回复此消息，并在标题中包含<code>已修正</code>，<code>已解决</code>或其它同等含义的明显标记。在人来人往的邮件列表里，一个看见讨论串<code>问题 X</code>和<code>问题 X - 已解决</code>的潜在回复者就明白不用再浪费时间了（除非他个人觉得<code>问题 X</code>的有趣），因此可以利用此时间去解决其它问题。</p><p>补充说明不必很长或是很深入；简单的一句<code>你好，原来是网线出了问题！谢谢大家 – Bill</code>比什么也不说要来的好。事实上，除非结论真的很有技术含量，否则简短可爱的小结比长篇大论更好。说明问题是怎样解决的，但大可不必将解决问题的过程复述一遍。</p><p>对于有深度的问题，张贴调试记录的摘要是有帮助的。描述问题的最终状态，说明是什么解决了问题，在此<strong>之后</strong>才指明可以避免的盲点。避免盲点的部分应放在正确的解决方案和其它总结材料之后，而不要将此信息搞成侦探推理小说。列出那些帮助过你的名字，会让你交到更多朋友。</p><p>除了有礼貌和有内涵以外，这种类型的补充也有助于他人在邮件列表/新闻群组/论坛中搜索到真正解决你问题的方案，让他们也从中受益。</p><p>至少，这种补充有助于让每位参与协助的人因问题的解决而从中得到满足感。如果你自己不是技术专家或者黑客，那就相信我们，这种感觉对于那些你向他们求助的大师或者专家而言，是非常重要的。问题悬而未决会让人灰心；黑客们渴望看到问题被解决。好人有好报，满足他们的渴望，你会在下次提问时尝到甜头。</p><p>思考一下怎样才能避免他人将来也遇到类似的问题，自问写一份文件或加个常见问题（FAQ）会不会有帮助。如果是的话就将它们发给维护者。</p><p>在黑客中，这种良好的后继行动实际上比传统的礼节更为重要，也是你如何透过善待他人而赢得声誉的方式，这是非常有价值的资产。</p><h2 id="如何解读答案"><a href="#如何解读答案" class="headerlink" title="如何解读答案"></a>如何解读答案</h2><p><a id="RTFM"></a></p><h3 id="RTFM-和-STFW：如何知道你已完全搞砸了"><a href="#RTFM-和-STFW：如何知道你已完全搞砸了" class="headerlink" title="RTFM 和 STFW：如何知道你已完全搞砸了"></a>RTFM 和 STFW：如何知道你已完全搞砸了</h3><p>有一个古老而神圣的传统：如果你收到<code>RTFM （Read The Fucking Manual）</code>的回应，回答者认为你<strong>应该去读他妈的手册</strong>。当然，基本上他是对的，你应该去读一读。</p><p>RTFM 有一个年轻的亲戚。如果你收到<code>STFW（Search The Fucking Web）</code>的回应，回答者认为你<strong>应该到他妈的网上搜索</strong>。那人多半也是对的，去搜索一下吧。（更温和一点的说法是 **<a href="http://lmgtfy.com/">Google 是你的朋友</a>**！）</p><p>在论坛，你也可能被要求去爬爬论坛的旧文。事实上，有人甚至可能热心地为你提供以前解决此问题的讨论串。但不要依赖这种关照，提问前应该先搜索一下旧文。</p><p>通常，用这两句之一回答你的人会给你一份包含你需要内容的手册或者一个网址，而且他们打这些字的时候也正在读着。这些答复意味着回答者认为</p><ul><li><strong>你需要的信息非常容易获得</strong>；</li><li><strong>你自己去搜索这些信息比灌给你，能让你学到更多</strong>。</li></ul><p>你不应该因此不爽；<strong>依照黑客的标准，他已经表示了对你一定程度的关注，而没有对你的要求视而不见</strong>。你应该对他祖母般的慈祥表示感谢。</p><h3 id="如果还是搞不懂"><a href="#如果还是搞不懂" class="headerlink" title="如果还是搞不懂"></a>如果还是搞不懂</h3><p>如果你看不懂回应，别立刻要求对方解释。像你以前试着自己解决问题时那样（利用手册，FAQ，网络，身边的高手），先试着去搞懂他的回应。如果你真的需要对方解释，记得表现出你已经从中学到了点什么。</p><p>比方说，如果我回答你：<code>看来似乎是 zentry 卡住了；你应该先清除它。</code>，然后，这是一个<strong>很糟的</strong>后续问题回应：<code>zentry 是什么？</code> <strong>好</strong>的问法应该是这样：<code>哦~~~我看过说明了但是只有 -z 和 -p 两个参数中提到了 zentries，而且还都没有清楚的解释如何清除它。你是指这两个中的哪一个吗？还是我看漏了什么？</code></p><h3 id="处理无礼的回应"><a href="#处理无礼的回应" class="headerlink" title="处理无礼的回应"></a>处理无礼的回应</h3><p>很多黑客圈子中看似无礼的行为并不是存心冒犯。相反，它是直接了当，一针见血式的交流风格，这种风格更注重解决问题，而不是使人感觉舒服而却模模糊糊。</p><p>如果你觉得被冒犯了，试着平静地反应。如果有人真的做了出格的事，邮件列表、新闻群组或论坛中的前辈多半会招呼他。如果这<strong>没有</strong>发生而你却发火了，那么你发火对象的言语可能在黑客社区中看起来是正常的，而<strong>你</strong>将被视为有错的一方，这将伤害到你获取信息或帮助的机会。</p><p>另一方面，你偶尔真的会碰到无礼和无聊的言行。与上述相反，对真正的冒犯者狠狠地打击，用犀利的语言将其驳得体无完肤都是可以接受的。然而，在行事之前一定要非常非常的有根据。纠正无礼的言论与开始一场毫无意义的口水战仅一线之隔，黑客们自己莽撞地越线的情况并不鲜见。如果你是新手或外人，避开这种莽撞的机会并不高。如果你想得到的是信息而不是消磨时光，这时最好不要把手放在键盘上以免冒险。</p><p>（有些人断言很多黑客都有轻度的自闭症或亚斯伯格综合症，缺少用于润滑人类社会<strong>正常</strong>交往所需的神经。这既可能是真也可能是假的。如果你自己不是黑客，兴许你认为我们脑袋有问题还能帮助你应付我们的古怪行为。只管这么干好了，我们不在乎。我们<strong>喜欢</strong>我们现在这个样子，并且通常对病患标记都有站得住脚的怀疑）。</p><p>Jeff Bigler 的观察总结和这个相关也值得一读 (<strong><a href="http://www.mit.edu/~jcb/tact.html">tact filters</a></strong>)。</p><p>在下一节，我们会谈到另一个问题，当<strong>你</strong>行为不当时所会受到的<code>冒犯</code>。</p><h2 id="如何避免扮演失败者"><a href="#如何避免扮演失败者" class="headerlink" title="如何避免扮演失败者"></a>如何避免扮演失败者</h2><p>在黑客社区的论坛中有那么几次你可能会搞砸 —— 以本指南所描述到的或类似的方式。而你会在公开场合中被告知你是如何搞砸的，也许攻击的言语中还会带点夹七夹八的颜色。</p><p>这种事发生以后，你能做的最糟糕的事莫过于哀嚎你的遭遇、宣称被口头攻击、要求道歉、高声尖叫、憋闷气、威胁诉诸法律、向其雇主报怨、忘了关马桶盖等等。相反地，你该这么做：</p><p>熬过去，这很正常。事实上，它是有益健康且合理的。</p><p>社区的标准不会自行维持，它们是通过参与者积极而<strong>公开地</strong>执行来维持的。不要哭嚎所有的批评都应该通过私下的邮件传送，它不是这样运作的。当有人评论你的一个说法有误或者提出不同看法时，坚持声称受到个人攻击也毫无益处，这些都是失败者的态度。</p><p>也有其它的黑客论坛，受过高礼节要求的误导，禁止参与者张贴任何对别人帖子挑毛病的消息，并声称<code>如果你不想帮助用户就闭嘴。</code> 结果造成有想法的参与者纷纷离开，这么做只会使它们沦为毫无意义的唠叨与无用的技术论坛。</p><p>夸张的讲法是：你要的是“友善”（以上述方式）还是有用？两个里面挑一个。</p><p>记着：当黑客说你搞砸了，并且（无论多么刺耳）告诉你别再这样做时，他正在为关心<strong>你</strong>和<strong>他的社区</strong>而行动。对他而言，不理你并将你从他的生活中滤掉更简单。如果你无法做到感谢，至少要表现得有点尊严，别大声哀嚎，也别因为自己是个有戏剧性超级敏感的灵魂和自以为有资格的新来者，就指望别人像对待脆弱的洋娃娃那样对你。</p><p>有时候，即使你没有搞砸（或者只是在他的想像中你搞砸了），有些人也会无缘无故地攻击你本人。在这种情况下，抱怨倒是<strong>真的</strong>会把问题搞砸。</p><p>这些来找麻烦的人要么是毫无办法但自以为是专家的不中用家伙，要么就是测试你是否真会搞砸的心理专家。其它读者要么不理睬，要么用自己的方式对付他们。这些来找麻烦的人在给他们自己找麻烦，这点你不用操心。</p><p>也别让自己卷入口水战，最好不要理睬大多数的口水战 – 当然，这是在你检验它们只是口水战，并且未指出你有搞砸的地方，同时也没有巧妙地将问题真正的答案藏于其后（这也是有可能的）。</p><h2 id="不该问的问题"><a href="#不该问的问题" class="headerlink" title="不该问的问题"></a>不该问的问题</h2><p>以下是几个经典蠢问题，以及黑客没回答时心中所想的：</p><p>问题：<a href="#q1">我能在哪找到 X 程序或 X 资源？</a></p><p>问题：<a href="#q2">我怎样用 X 做 Y？</a></p><p>问题：<a href="#q3">如何设定我的 shell 提示？</a></p><p>问题：<a href="#q4">我可以用 Bass-o-matic 文件转换工具将 AcmeCorp 档案转换为 TeX 格式吗？</a></p><p>问题：<a href="#q5">我的程序/设定/SQL 语句没有用</a></p><p>问题：<a href="#q6">我的 Windows 电脑有问题，你能帮我吗？</a></p><p>问题：<a href="#q7">我的程序不会动了，我认为系统工具 X 有问题</a></p><p>问题：<a href="#q8">我在安装 Linux（或者 X ）时有问题，你能帮我吗？</a></p><p>问题：<a href="#q9">我怎么才能破解 root 帐号/窃取 OP 特权/读别人的邮件呢？</a></p><hr><p><a id="q1"></a></p><blockquote><p>问题：我能在哪找到 X 程序或 X 资源？</p></blockquote><p>回答：就在我找到它的地方啊，白痴 —— 搜索引擎的那一头。天哪！难道还有人不会用 <a href="http://www.google.com/">Google</a> 吗？</p><p><a id="q2"></a></p><blockquote><p>问题：我怎样用 X 做 Y？</p></blockquote><p>回答：如果你想解决的是 Y ，提问时别给出可能并不恰当的方法。这种问题说明提问者不但对 X 完全无知，也对 Y 要解决的问题糊涂，还被特定形势禁锢了思维。最好忽略这种人，等他们把问题搞清楚了再说。</p><p><a id="q3"></a></p><blockquote><p>问题：如何设定我的 shell 提示？？</p></blockquote><p>回答：如果你有足够的智慧提这个问题，你也该有足够的智慧去 <a href="#RTFM">RTFM</a>，然后自己去找出来。</p><p><a id="q4"></a></p><blockquote><p>问题：我可以用 Bass-o-matic 文件转换工具将 AcmeCorp 档案转换为 TeX 格式吗？</p></blockquote><p>回答：试试看就知道了。如果你试过，你既知道了答案，就不用浪费我的时间了。</p><p><a id="q5"></a></p><blockquote><p>问题：我的{程序/设定/SQL 语句}不工作</p></blockquote><p>回答：这不算是问题吧，我对要我问你二十个问题才找得出你真正问题的问题没兴趣 —— 我有更有意思的事要做呢。在看到这类问题的时候，我的反应通常不外如下三种</p><ul><li>你还有什么要补充的吗？</li><li>真糟糕，希望你能搞定。</li><li>这关我有什么屁事？</li></ul><p><a id="q6"></a></p><blockquote><p>问题：我的 Windows 电脑有问题，你能帮我吗？</p></blockquote><p>回答：能啊，扔掉微软的垃圾，换个像 Linux 或 BSD 的开源操作系统吧。</p><p>注意：如果程序有官方版 Windows 或者与 Windows 有互动（如 Samba），你<strong>可以</strong>问与 Windows 相关的问题， 只是别对问题是由 Windows 操作系统而不是程序本身造成的回复感到惊讶， 因为 Windows 一般来说实在太烂，这种说法通常都是对的。</p><p><a id="q7"></a></p><blockquote><p>问题：我的程序不会动了，我认为系统工具 X 有问题</p></blockquote><p>回答：你完全有可能是第一个注意到被成千上万用户反复使用的系统调用与函数库档案有明显缺陷的人，更有可能的是你完全没有根据。不同凡响的说法需要不同凡响的证据，当你这样声称时，你必须有清楚而详尽的缺陷说明文件作后盾。</p><p><a id="q8"></a></p><blockquote><p>问题：我在安装 Linux（或者 X ）时有问题，你能帮我吗？</p></blockquote><p>回答：不能，我只有亲自在你的电脑上动手才能找到毛病。还是去找你当地的 Linux 使用群组者寻求实际的指导吧（你能在<a href="http://www.linux.org/groups/index.html">这儿</a>找到使用者群组的清单）。</p><p>注意：如果安装问题与某 Linux 的发行版有关，在它的邮件列表、论坛或本地使用者群组中提问也许是恰当的。此时，应描述问题的准确细节。在此之前，先用 <code>Linux</code> 和<strong>所有</strong>被怀疑的硬件作关键词仔细搜索。</p><p><a id="q9"></a></p><blockquote><p>问题：我怎么才能破解 root 帐号/窃取 OP 特权/读别人的邮件呢？</p></blockquote><p>回答：想要这样做，说明了你是个卑鄙小人；想找个黑客帮你，说明你是个白痴！</p><h2 id="好问题与蠢问题"><a href="#好问题与蠢问题" class="headerlink" title="好问题与蠢问题"></a>好问题与蠢问题</h2><p>最后，我将透过举一些例子，来说明怎样聪明的提问；同一个问题的两种问法被放在一起，一种是愚蠢的，另一种才是明智的。</p><p><strong>蠢问题</strong>：</p><blockquote><p>我可以在哪儿找到关于 Foonly Flurbamatic 的资料？</p></blockquote><p>这种问法无非想得到 <a href="#RTFM">STFW</a> 这样的回答。</p><p><strong>聪明问题</strong>：</p><blockquote><p>我用 Google 搜索过 “Foonly Flurbamatic 2600”，但是没找到有用的结果。谁知道上哪儿去找对这种设备编程的资料？</p></blockquote><p>这个问题已经 STFW 过了，看起来他真的遇到了麻烦。</p><p><strong>蠢问题</strong>：</p><blockquote><p>我从 foo 项目找来的源码没法编译。它怎么这么烂？</p></blockquote><p>他觉得都是别人的错，这个傲慢自大的提问者。</p><p><strong>聪明问题</strong>：</p><blockquote><p>foo 项目代码在 Nulix 6.2 版下无法编译通过。我读过了 FAQ，但里面没有提到跟 Nulix 有关的问题。这是我编译过程的记录，我有什么做的不对的地方吗？</p></blockquote><p>提问者已经指明了环境，也读过了 FAQ，还列出了错误，并且他没有把问题的责任推到别人头上，他的问题值得被关注。</p><p><strong>蠢问题</strong>：</p><blockquote><p>我的主机板有问题了，谁来帮我？</p></blockquote><p>某黑客对这类问题的回答通常是：<code>好的，还要帮你拍拍背和换尿布吗？</code>，然后按下删除键。</p><p><strong>聪明问题</strong>：</p><blockquote><p>我在 S2464 主机板上试过了 X 、 Y 和 Z ，但没什么作用，我又试了 A 、 B 和 C 。请注意当我尝试 C 时的奇怪现象。显然 florbish 正在 grommicking，但结果出人意料。通常在 Athlon MP 主机板上引起 grommicking 的原因是什么？有谁知道接下来我该做些什么测试才能找出问题？</p></blockquote><p>这个家伙，从另一个角度来看，值得去回答他。他表现出了解决问题的能力，而不是坐等天上掉答案。</p><p>在最后一个问题中，注意<code>告诉我答案</code>和<code>给我启示，指出我还应该做什么诊断工作</code>之间微妙而又重要的区别。</p><p>事实上，后一个问题源自于 2001 年 8 月在 Linux 内核邮件列表（lkml）上的一个真实的提问。我（Eric）就是那个提出问题的人。我在 Tyan S2464 主板上观察到了这种无法解释的锁定现象，列表成员们提供了解决这一问题的重要信息。</p><p>通过我的提问方法，我给了别人可以咀嚼玩味的东西；我设法让人们很容易参与并且被吸引进来。我显示了自己具备和他们同等的能力，并邀请他们与我共同探讨。通过告诉他们我所走过的弯路，以避免他们再浪费时间，我也表明了对他们宝贵时间的尊重。</p><p>事后，当我向每个人表示感谢，并且赞赏这次良好的讨论经历的时候， 一个 Linux 内核邮件列表的成员表示，他觉得我的问题得到解决并非由于我是这个列表中的<strong>名</strong>人，而是因为我用了正确的方式来提问。</p><p>黑客从某种角度来说是拥有丰富知识但缺乏人情味的家伙；我相信他是对的，如果我<strong>像</strong>个乞讨者那样提问，不论我是谁，一定会惹恼某些人或者被他们忽视。他建议我记下这件事，这直接导致了本指南的出现。</p><h2 id="如果得不到回答"><a href="#如果得不到回答" class="headerlink" title="如果得不到回答"></a>如果得不到回答</h2><p>如果仍得不到回答，请不要以为我们觉得无法帮助你。有时只是看到你问题的人不知道答案罢了。没有回应不代表你被忽视，虽然不可否认这种差别很难区分。</p><p>总的来说，简单的重复张贴问题是个很糟的点子。这将被视为无意义的喧闹。有点耐心，知道你问题答案的人可能生活在不同的时区，可能正在睡觉，也有可能你的问题一开始就没有组织好。</p><p>你可以通过其他渠道获得帮助，这些渠道通常更适合初学者的需要。</p><p>有许多网上的以及本地的使用者群组，由热情的软件爱好者（即使他们可能从没亲自写过任何软件）组成。通常人们组建这样的团体来互相帮助并帮助新手。</p><p>另外，你可以向很多商业公司寻求帮助，不论公司大还是小。别为要付费才能获得帮助而感到沮丧！毕竟，假使你的汽车发动机汽缸密封圈爆掉了 —— 完全可能如此 —— 你还得把它送到修车铺，并且为维修付费。就算软件没花费你一分钱，你也不能强求技术支持总是免费的。</p><p>对像是 Linux 这种大众化的软件，每个开发者至少会对应到上万名使用者。根本不可能由一个人来处理来自上万名使用者的求助电话。要知道，即使你要为这些协助付费，和你所购买的同类软件相比，你所付出的也是微不足道的（通常封闭源代码软件的技术支持费用比开源软件的要高得多，且内容也没那么丰富）。</p><h2 id="如何更好地回答问题"><a href="#如何更好地回答问题" class="headerlink" title="如何更好地回答问题"></a>如何更好地回答问题</h2><p><strong>态度和善一点</strong>。问题带来的压力常使人显得无礼或愚蠢，其实并不是这样。</p><p><strong>对初犯者私下回复</strong>。对那些坦诚犯错之人没有必要当众羞辱，一个真正的新手也许连怎么搜索或在哪找常见问题都不知道。</p><p><strong>如果你不确定，一定要说出来</strong>！一个听起来权威的错误回复比没有还要糟，别因为听起来像个专家很好玩，就给别人乱指路。要谦虚和诚实，给提问者与同行都树个好榜样。</p><p><strong>如果帮不了忙，也别妨碍他</strong>。不要在实际步骤上开玩笑，那样也许会毁了使用者的设置 —— 有些可怜的呆瓜会把它当成真的指令。</p><p><strong>试探性的反问以引出更多的细节</strong>。如果你做得好，提问者可以学到点东西 —— 你也可以。试试将蠢问题转变成好问题，别忘了我们都曾是新手。</p><p>尽管对那些懒虫抱怨一声 RTFM 是正当的，能指出文件的位置（即使只是建议个 Google 搜索关键词）会更好。</p><p><strong>如果你决定回答，就请给出好的答案</strong>。当别人正在用错误的工具或方法时别建议笨拙的权宜之计（wordaround），应推荐更好的工具，重新界定问题。</p><p><strong>正面的回答问题</strong>！如果这个提问者已经很深入的研究而且也表明已经试过 X 、 Y 、 Z 、 A 、 B 、 C 但没得到结果，回答 <code>试试看 A 或是 B</code> 或者 <code>试试 X 、 Y 、 Z 、 A 、 B 、 C</code> 并附上一个链接一点用都没有。</p><p><strong>帮助你的社区从问题中学习</strong>。当回复一个好问题时，问问自己<code>如何修改相关文件或常见问题文件以免再次解答同样的问题？</code>，接着再向文件维护者发一份补丁。</p><p>如果你是在研究一番后才做出的回答，<strong>展现你的技巧而不是直接端出结果</strong>。毕竟<code>授人以鱼不如授人以渔</code>。</p><h2 id="相关资源"><a href="#相关资源" class="headerlink" title="相关资源"></a>相关资源</h2><p>如果你需要个人电脑、Unix 系统和网络如何运作的基础知识，参阅 <a href="http://en.tldp.org/HOWTO/Unix-and-Internet-Fundamentals-HOWTO/">Unix 系统和网络基本原理</a>。</p><p>当你发布软件或补丁时，试着按<a href="http://en.tldp.org/HOWTO/Software-Release-Practice-HOWTO/index.html">软件发布实践</a>操作。</p><h2 id="鸣谢"><a href="#鸣谢" class="headerlink" title="鸣谢"></a>鸣谢</h2><p>Evelyn Mitchel 贡献了一些愚蠢问题例子并启发了编写<code>如何更好地回答问题</code>这一节， Mikhail Ramendik 贡献了一些特别有价值的建议和改进。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 自言自语 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>小狗钱钱</title>
      <link href="/posts/fe5b.html"/>
      <url>/posts/fe5b.html</url>
      
        <content type="html"><![CDATA[<h1 id="小狗钱钱"><a href="#小狗钱钱" class="headerlink" title="小狗钱钱"></a>小狗钱钱</h1><p>作者 <em>博多·舍费尔</em><br><img src="https://raw.githubusercontent.com/pengyirui/blog_img/main/2020-07-01-01.png"></p><ul><li>你是否能挣到钱，最关键的因素并不在于你是不是有一个好点子。你有多聪明也不是主要原因，决定因素是你的自信程度。</li><li>一个人把精力集中在自己所能做的，知道的和拥有的东西上的那一天起，他的成功就已经拉开了序幕。这也使得一个孩子完全有能力比成人挣到更多的钱。</li><li>你最好想清楚，你喜欢做什么，然后再考虑你怎么用它来挣钱。</li><li>你要每天不间断地去做对称的未来意义重大的事情。你为此花费的时间不会超过10分钟，但是就是这10分钟会让一切变得不同</li><li>这四条原则：<br>第一，欠债的人应当毁掉所有的信用卡<br>第二，忠告在成年人看来有些可笑，他们应当尽可能少地偿还他们的贷款。<br>第三，将扣除生活费之后富余的钱中的50%再存起来，剩下的50%用于支付消费贷款，最好根本不要申清消费贷款<br>第四，买之前问自己，真的有必要吗</li><li>当你定下了大目标的时候，就意味着你必须付付出比别人多得多的努力</li><li>假如我没有了我的“鹅”，我就总是得为了赚钱而工作，但是一旦我有了属于自己的“鹅”，我的钱就会自动为我工作了</li><li>幸运其实只是充分准备加上努力工作的结果</li><li>恐惧总是在我们设想事情会如何不顺的时候出现。我们对失败的可能性想得越多，就越害怕。而当你朝看积极的目标去思考的时候，就不会心生畏惧</li><li>如果你没有做今天这件事情，你就永远不会知道，给自己一些压力之后，你能够做到些什么。一个人觉得最引以为自豪的事情，往往是那些做起来最艰难的事情</li><li>跟大自然的变化一样，交易所里也总有四季更替，循环往复</li><li>不要为失去的东西而忧伤，而要对拥有它的时光心存感激</li><li>从事商业活动有助于人们以理智的态度珍惜使用有限的资源。 我们推崇一种聪明的、 简朴的生活方式。 也就是说， 宁愿购买一件一流产品，也不要不停地买许多的二流产品。 而且， 不要仅仅因为一件产品的外观不再时髦而新产品正在流行， 就频频追逐新鲜的东西。 </li><li>生活质量不是由越来越多的高科技产品堆砌而成的， 而是体现在一些别的方面， 比如悠闲地享受一下生活， 加强邻里关系， 表达感情或者从事艺术性和创造性的活动</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> 书本 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vim使用笔记</title>
      <link href="/posts/5f66.html"/>
      <url>/posts/5f66.html</url>
      
        <content type="html"><![CDATA[<h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>Vim 在大多数的 Linux 发型版本中都是默认安装好的，无需再手动进行安装。</p><p>查看是否已经安装的命令：<code>rpm -qa | grep vim</code></p><p>CentOS下安装，直接运行 <code>yun install vim</code> 即可安装最新版本的 Vim </p><p>命令行输入 vimtutor即可进入长文本进行练习</p><p>Vim 一共有三种常用模式： </p><ul><li>普通模式</li><li>插入模式</li><li>命令行模式<h2 id="键盘图与工作模式切换"><a href="#键盘图与工作模式切换" class="headerlink" title="键盘图与工作模式切换"></a>键盘图与工作模式切换</h2></li></ul><p><img src="https://raw.githubusercontent.com/pengyirui/blog_img/main/2020-06-30-01.png"><br><img src="https://raw.githubusercontent.com/pengyirui/blog_img/main/2020-06-30-02.png"></p><h2 id="普通模式"><a href="#普通模式" class="headerlink" title="普通模式"></a>普通模式</h2><h3 id="移动光标"><a href="#移动光标" class="headerlink" title="移动光标"></a>移动光标</h3><table><thead><tr><th align="left">键名</th><th align="left">作用</th></tr></thead><tbody><tr><td align="left">h</td><td align="left">光标左移</td></tr><tr><td align="left">j</td><td align="left">光标下移</td></tr><tr><td align="left">k</td><td align="left">光标上移</td></tr><tr><td align="left">l</td><td align="left">光标右移</td></tr></tbody></table><p>除了单独的移动光标之外，我们还可以利用 Vim 的<strong>组合</strong>思想 ——  <strong>数字前缀组合</strong>来移动多行，具体细节会在相应章节细说。 </p><table><thead><tr><th align="left">组合键</th><th align="left">作用</th></tr></thead><tbody><tr><td align="left">2+j</td><td align="left">向下移动两行</td></tr><tr><td align="left">5+h</td><td align="left">向左移动五个字符=</td></tr></tbody></table><ul><li>还有针对更加丰富粒度的词组法： <table><thead><tr><th align="left">快捷键</th><th align="left">含义</th><th align="left">速记</th></tr></thead><tbody><tr><td align="left">w/W</td><td align="left">正向移动到下一个词首</td><td align="left">word</td></tr><tr><td align="left">b/B</td><td align="left">反向移动到上一个词首</td><td align="left">back</td></tr><tr><td align="left">e/E</td><td align="left">正向移动到下一个词尾</td><td align="left">word end</td></tr><tr><td align="left">ge</td><td align="left">反向移动到上一个词尾</td><td align="left"></td></tr></tbody></table></li></ul><h3 id="转跳"><a href="#转跳" class="headerlink" title="转跳"></a>转跳</h3><p>有时我们使用 Vim 打开某一个文件时只需要阅读某一特定位置就行，这个时候可以使用 Vim 的跳转快捷键来帮我们快速的定位需要阅读的位置： </p><p>Vim 跳转快捷方式： </p><table><thead><tr><th align="left">快捷方式</th><th align="left">功能</th></tr></thead><tbody><tr><td align="left">ctrl+f/F</td><td align="left">跳转到下一页</td></tr><tr><td align="left">ctrl+b/B</td><td align="left">跳转到上一页</td></tr><tr><td align="left">ctrl+d/u</td><td align="left">向上或向下跳转半页</td></tr><tr><td align="left">gg</td><td align="left">跳转到文件第一行</td></tr><tr><td align="left">G</td><td align="left">跳转到文件最后一行</td></tr><tr><td align="left">&lt;行数&gt;gg/G</td><td align="left">跳转到指定行数，例如 12gg或者12G 代表跳转到 12 行</td></tr><tr><td align="left">{g}+Ctrl-g/G</td><td align="left">查看文件信息。</td></tr></tbody></table><h3 id="缩进"><a href="#缩进" class="headerlink" title="缩进"></a>缩进</h3><p>每种语言开发中都会又缩进的硬性（Python）或者软性要求。一般来说通过 Vimrc 写到配置中，这样不必要每次手动缩进。但是有时候可能需要非常规的缩进。这时候就需要手动操作缩进了，可以针对单行或者多行甚至块。 </p><table><thead><tr><th align="left">快捷键</th><th align="left">含义</th></tr></thead><tbody><tr><td align="left">&gt;&gt; / :&gt;</td><td align="left">向右缩进</td></tr><tr><td align="left">m,n&gt; / :m&gt;(n-m+1)</td><td align="left">m到n行缩进</td></tr><tr><td align="left">m&gt;n</td><td align="left">m行开始共n行缩进</td></tr></tbody></table><h3 id="组合"><a href="#组合" class="headerlink" title="组合"></a>组合</h3><p>以上的移动方式相对比较单一，但是 Vim 组合的思想和特性给予了 Vim 更加高效的方式。关于 Vim 的组合思想有一个公式：**[count]+operator+[count]+motion** </p><ul><li><strong>count</strong>：次数的意思，用于重复； </li><li><strong>operator</strong> ：操作方式就是增删改之类的。例如复制（y）,删除（d）等； </li><li><strong>motion</strong> ：Vim help 中会有相应的解释。简单来说就是operator的操作对象。比如一个单词、句子或者移动的方向等。 </li></ul><p>Vim 中可以通过 help 帮助来查看 Vim 的功能说明，相当于一个说明书和Linux 中man一样。</p><h3 id="选择"><a href="#选择" class="headerlink" title="选择"></a>选择</h3><p>可视化模式主要用于对文本进行选择，类似于平时使用鼠标选中操作文本。我们可以选中相应文本，然后针对选中的文本指定操作：复制，替换等。 </p><p>可视化模式主要有三种方式： </p><ul><li><strong>v</strong>：字符级别可视化</li><li><strong>V</strong>: 行级别可视化</li><li><strong>Ctrl-v</strong>: 块级别可视化<h3 id="删除、复制与粘贴"><a href="#删除、复制与粘贴" class="headerlink" title="删除、复制与粘贴"></a>删除、复制与粘贴</h3></li></ul><table><thead><tr><th align="left">快捷键</th><th align="left">功能</th></tr></thead><tbody><tr><td align="left">d</td><td align="left">剪切选定文本内容</td></tr><tr><td align="left">y</td><td align="left">复制选定文本内容</td></tr><tr><td align="left">p/P</td><td align="left">粘贴到光标前/后</td></tr><tr><td align="left">u</td><td align="left">撤销上一步操作</td></tr><tr><td align="left">Ctrl+r</td><td align="left">恢复之前撤销操作</td></tr></tbody></table><table><thead><tr><th align="left">组合快捷键</th><th align="left">功能</th></tr></thead><tbody><tr><td align="left">x</td><td align="left">删除光标下单个字符，据组合大家可以试试多个字符如何删除</td></tr><tr><td align="left">y2w</td><td align="left">光标正向复制两个单词</td></tr><tr><td align="left">D/d$</td><td align="left">删除当前行光标后所有字符</td></tr><tr><td align="left">dd</td><td align="left">删除当前行</td></tr><tr><td align="left">dG</td><td align="left">删除光标之后所有行</td></tr><tr><td align="left">d^</td><td align="left">删除当前行光标到行首所有字符</td></tr><tr><td align="left">daw</td><td align="left">删除当前光标单词</td></tr></tbody></table><h3 id="修改与替换"><a href="#修改与替换" class="headerlink" title="修改与替换"></a>修改与替换</h3><table><thead><tr><th align="left">快捷键</th><th align="left">含义</th><th align="left">备注</th></tr></thead><tbody><tr><td align="left">r</td><td align="left">替换光标下单个字符</td><td align="left"></td></tr><tr><td align="left">cw</td><td align="left">修改单个单词</td><td align="left"></td></tr><tr><td align="left">c$</td><td align="left">修改光标之后行内内容</td><td align="left"></td></tr><tr><td align="left">R</td><td align="left">进入替换模式</td><td align="left"></td></tr></tbody></table><p>substitute 替换命令</p><p>除了简单的快捷键替换之外。还有更加强大的命令式替换。这种方式为了处理更加复杂的场景，尤其是结合正则表达式。</p><p> <strong>substitute</strong> 是 Vim 中最常用的搜索和替换的命令。可以缩写为 <strong>s</strong>。 </p><blockquote><p>替换公式：**:[range]s[ubstitute]/{pattern}/{string}/[flags]**<br>默认情况下，s 只会作用域当前行的第一个匹配项。<br><strong>flag选项</strong><br>| 选项   | 含义   | 备注   |<br>|:—-|:—-|:—-|<br>| g   | 全局替换   | global（也只是针对当前行全局而非全文）   |<br>| c   | 每次替换前需要确认   | confirm   |<br>| e   | 没有匹配项时不显示错误   | error   |<br>| i   | 表示忽略大小写   | ignore   |<br>| I   | 表示区分大小写   |    | </p></blockquote><p><strong>range 选项</strong> </p><table><thead><tr><th align="left">选项</th><th align="left">含义</th><th align="left">备注</th></tr></thead><tbody><tr><td align="left">%</td><td align="left">执行范围：全局</td><td align="left">这个才是真正意义上的全局</td></tr><tr><td align="left">n,m</td><td align="left">n到m 行替换</td><td align="left">:12,33s/time/ting/g</td></tr><tr><td align="left">$</td><td align="left">最后一行</td><td align="left">:12,$s/time/ting/g</td></tr><tr><td align="left">n;/pattern/</td><td align="left">n行到下一个匹配patter行</td><td align="left">:12;/ting/time/ting/g</td></tr></tbody></table><h2 id="插入模式"><a href="#插入模式" class="headerlink" title="插入模式"></a>插入模式</h2><p>插入模式是最容易理解的模式，就是和我们平时使用的编辑器一样就是为了插入字符的。进入这个模式也很简单，主要有三种方式： </p><h3 id="i-键进入"><a href="#i-键进入" class="headerlink" title="i  键进入"></a><code>i</code>  键进入</h3><p><code>i</code>  表示 insert，即插入的意思，言简意赅。打开 Vim 编辑器并点击 i 键，这个时候编辑器左下角会出现 – INSERT – 字样，就这样表示进入插入模式了。 </p><h3 id="a-键进入"><a href="#a-键进入" class="headerlink" title="a  键进入"></a><code>a</code>  键进入</h3><p><code>a</code>  表示 append 意思，打开编辑器后点击 a 键进入此模式。和 insert 不同的是，这个时候光标会移动到下一个字符，然后再进入插入模式。 </p><h3 id="o-键进入"><a href="#o-键进入" class="headerlink" title="o  键进入"></a><code>o</code>  键进入</h3><p><code>o</code>  这个方式会在当前行下面新插入一行，并进入插入模式。</p><h3 id="大写字母方式进入插入模式"><a href="#大写字母方式进入插入模式" class="headerlink" title="大写字母方式进入插入模式"></a>大写字母方式进入插入模式</h3><p>这些命令还可以以大写字母方式进入插入模式，我们来看一下会有什么不一样的效果。 </p><ul><li>I 键：光标所在行首进行插入</li><li>A 键：光标所在行尾进行插入</li><li>O 键：光标所在行前新插入一空行进行插入<h2 id="命令行模式"><a href="#命令行模式" class="headerlink" title="命令行模式"></a>命令行模式</h2></li></ul><p>顾名思义，命令行模式下的操作当然就是以命令为主，Vim 为我们提供了大量的丰富的命令，你可以把命令行模式当做是普通模式的加强版，它可以用来做到许多普通模式做不到的事情。 </p><p>在普通模式下按下  <code>:</code>  ，这时你会看到窗口的左下角出现了一个  <code>:</code>  ，代表你已经进入命令行模式可以进行命令的输入，输入的命令会出现在  <code>:</code>  的后面。</p><table><thead><tr><th align="center">指令</th><th align="center">含义</th><th align="left">备注</th></tr></thead><tbody><tr><td align="center">set number</td><td align="center">显示行号</td><td align="left"></td></tr><tr><td align="center">set hlsearch</td><td align="center">高亮搜索</td><td align="left"></td></tr><tr><td align="center">set incsearch</td><td align="center">增量实时搜索</td><td align="left"></td></tr><tr><td align="center">set ignorecase</td><td align="center">大小写忽略</td><td align="left"></td></tr><tr><td align="center">set autoindent</td><td align="center">自动缩进</td><td align="left">在这种缩进形式中，新增加的行和前一行使用相同的缩进形式</td></tr><tr><td align="center">set smartindent</td><td align="center">自动缩进</td><td align="left">在这种缩进模式中，每一行都和前一行有相同的缩进量</td></tr><tr><td align="center">set softtabstop</td><td align="center">tab键实际占有的列数</td><td align="left"></td></tr><tr><td align="center">set expandtab</td><td align="center">tab 转化为空格</td><td align="left"></td></tr><tr><td align="center">set shiftwidth=4</td><td align="center">换行缩进为4个空格</td><td align="left"></td></tr><tr><td align="center">set tabstop=4</td><td align="center">设置tab 为4个空格</td><td align="left"></td></tr></tbody></table>]]></content>
      
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>国内CentOS镜像下载</title>
      <link href="/posts/f5d7.html"/>
      <url>/posts/f5d7.html</url>
      
        <content type="html"><![CDATA[<p>阿里云镜像链接<br><a href="http://mirrors.aliyun.com/centos/7/isos/x86_64/">http://mirrors.aliyun.com/centos/7/isos/x86_64/</a></p><p>版本介绍：</p><table><thead><tr><th align="left">后缀</th><th align="left">说明</th></tr></thead><tbody><tr><td align="left">DVD ISO</td><td align="left">标准安装版（推荐）</td></tr><tr><td align="left">Everything ISO</td><td align="left">完整版</td></tr><tr><td align="left">Minimal ISO</td><td align="left">精简版</td></tr><tr><td align="left">NetInstall</td><td align="left">网络安装镜像</td></tr><tr><td align="left">GnomeLive</td><td align="left">GNOME桌面版</td></tr><tr><td align="left">KdeLive</td><td align="left">KDE桌面版</td></tr><tr><td align="left">livecd</td><td align="left">光盘上运行的系统，类拟于winpe</td></tr></tbody></table>]]></content>
      
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>图床搬家</title>
      <link href="/posts/b7d.html"/>
      <url>/posts/b7d.html</url>
      
        <content type="html"><![CDATA[<p>管理markdown文章的时候遇到了一个比较头疼的问题，那就是如果以后图床挂了后，文章的图片链接岂不是要一个个改？</p><p>之后我想了几个解决方案在这里mark下先</p><ul><li><p>利用反向代理</p><ul><li>反向代理就是你访问A网站，A网站上没有资源，A知道B网站上有资源，就去B网站把资源要过来传输给你，这样的话，你看到的就是A网站具有资源，至于如何使用Nginx或Apach实现反向代理，可以搜索我博客中的其他文章，或者网上找教程。</li></ul></li><li><p>批量修改文章的图片链接</p><ul><li>使用Python脚本解决，代码如下(非原创)<br>修改代码中要指定的路径(第43行)和要替换前后(26行)的内容，run运行既可。</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding:utf-8 -*-</span></span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">modify_md_content</span>(<span class="params">top</span>):</span><br><span class="line">    <span class="keyword">for</span> root, dirs, files <span class="keyword">in</span> os.walk(top, topdown=<span class="literal">False</span>):</span><br><span class="line">        <span class="comment"># 循环文件</span></span><br><span class="line">        <span class="keyword">for</span> file_name <span class="keyword">in</span> files:</span><br><span class="line">            file_name_split = file_name.split(<span class="string">&#x27;.&#x27;</span>)</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;a&quot;</span>)</span><br><span class="line"></span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                <span class="keyword">if</span> file_name_split[-<span class="number">1</span>] == <span class="string">&#x27;md&#x27;</span>:</span><br><span class="line">                    <span class="comment"># 找到md文件并且复制一份md文件路径</span></span><br><span class="line">                    md_file_path = os.path.join(root, <span class="string">&#x27;.&#x27;</span>.join(file_name_split))</span><br><span class="line">                    copy_md_file_path = os.path.join(root, <span class="string">&#x27;.&#x27;</span>.join([<span class="string">f&#x27;<span class="subst">&#123;file_name_split[<span class="number">0</span>]&#125;</span>_copy&#x27;</span>, file_name_split[<span class="number">1</span>]]))</span><br><span class="line"></span><br><span class="line">                    <span class="comment"># 打开md文件然后进行替换</span></span><br><span class="line">                    <span class="keyword">with</span> <span class="built_in">open</span>(md_file_path, <span class="string">&#x27;r&#x27;</span>, encoding=<span class="string">&#x27;utf8&#x27;</span>) <span class="keyword">as</span> fr, \</span><br><span class="line">                            <span class="built_in">open</span>(copy_md_file_path, <span class="string">&#x27;w&#x27;</span>, encoding=<span class="string">&#x27;utf8&#x27;</span>) <span class="keyword">as</span> fw:</span><br><span class="line">                        data = fr.read()</span><br><span class="line">                        <span class="comment"># 选择md文件中想要替换的字段</span></span><br><span class="line">                        data = re.sub(<span class="string">&#x27;旧内容&#x27;</span>, <span class="string">&#x27;新内容&#x27;</span>, data)</span><br><span class="line"></span><br><span class="line">                        fw.write(data)  <span class="comment"># 新文件一次性写入原文件内容</span></span><br><span class="line">                        <span class="comment"># fw.flush()</span></span><br><span class="line"></span><br><span class="line">                    <span class="comment"># 删除原文件</span></span><br><span class="line">                    os.remove(md_file_path)</span><br><span class="line">                    <span class="comment"># 重命名新文件名为原文件名</span></span><br><span class="line">                    os.rename(copy_md_file_path, md_file_path)</span><br><span class="line">                    <span class="built_in">print</span>(<span class="string">f&#x27;<span class="subst">&#123;md_file_path&#125;</span> done...&#x27;</span>)</span><br><span class="line">                    time.sleep(<span class="number">0.5</span>)</span><br><span class="line">            <span class="keyword">except</span> FileNotFoundError <span class="keyword">as</span> e:</span><br><span class="line">                <span class="built_in">print</span>(e)</span><br><span class="line">        time.sleep(<span class="number">0.5</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    top = <span class="string">r&#x27;路径&#x27;</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;a&quot;</span>)</span><br><span class="line">    modify_md_content(top)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 博客 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker的概念与安装</title>
      <link href="/posts/db54.html"/>
      <url>/posts/db54.html</url>
      
        <content type="html"><![CDATA[<h1 id="为什么会有docker出现？"><a href="#为什么会有docker出现？" class="headerlink" title="为什么会有docker出现？"></a>为什么会有docker出现？</h1><p>一款产品从开发到上线，从操作系统，到运行环境，再到应用配置。作为开发+运维之间的协作我们需要关心很多东西，这也是很多互联网公司都不得不面对的问题，特别是各种版本的迭代之后，不同版本环境的兼容，对运维人员都是考验。</p><p>安装的时候，把原始环境一模一样地复制过来。开发人员利用Docker可以消除协作编码时“在我的机器上可正常工作”的问题。</p><p>一句话：解决了运行环境和配置问题软件容器，方便做持续集成并有助于整体发布的容器虚拟化技术。</p><blockquote><p>三要素：镜像（image）、容器（container）、仓库（repository）</p></blockquote><h1 id="能干什么？"><a href="#能干什么？" class="headerlink" title="能干什么？"></a>能干什么？</h1><p>可以这么理解：docker就是精华浓缩版的Linux系统</p><p>容器与镜像的关系类似于面向对象的对象与类的关系。</p><p>容器是用镜像创建的运行实例</p><table><thead><tr><th align="left">docker</th><th align="left">面向对象</th></tr></thead><tbody><tr><td align="left">容器</td><td align="left">对象</td></tr><tr><td align="left">镜像</td><td align="left">类</td></tr></tbody></table><h1 id="安装docker"><a href="#安装docker" class="headerlink" title="安装docker"></a>安装docker</h1><p>以CentOS7为例，采用离线安装</p><p>查看内核版本 uname -r #要求内核版本高于3.10</p><p>docker离线包下载地址：<a href="https://download.docker.com/linux/static/stable/x86_64/">https://download.docker.com/linux/static/stable/x86_64/</a></p><p>docker官方文档操作：<a href="https://docs.docker.com/engine/install/binaries/#install-daemon-and-client-binaries-on-linux">https://docs.docker.com/engine/install/binaries/#install-daemon-and-client-binaries-on-linux</a></p><p>为了方便处理，当前目录在 /usr/local，把docker离线包传到当前路径</p><p>一、将下载下来的离线包解压到 /usr/bin/ 上 </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost local]# tar -xvf docker-19.03.9.tgz </span><br><span class="line">docker/</span><br><span class="line">docker/docker-containerd</span><br><span class="line">docker/docker-proxy</span><br><span class="line">docker/docker</span><br><span class="line">docker/docker-runc</span><br><span class="line">docker/dockerd</span><br><span class="line">docker/docker-containerd-ctr</span><br><span class="line">docker/docker-containerd-shim</span><br><span class="line">docker/docker-init</span><br></pre></td></tr></table></figure><p>二、将解压出来的docker文件内容复制到 /usr/bin/ 目录下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cp docker/* /usr/bin/</span><br></pre></td></tr></table></figure><p>三、将docker注册为service</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/systemd/system/docker.service</span><br></pre></td></tr></table></figure><p>将下列配置加到docker.service中并保存</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">[Unit]</span><br><span class="line">Description=Docker Application Container Engine</span><br><span class="line">Documentation=https://docs.docker.com</span><br><span class="line">After=network-online.target firewalld.service</span><br><span class="line">Wants=network-online.target</span><br><span class="line">[Service]</span><br><span class="line">Type=notify</span><br><span class="line"># the default is not to use systemd for cgroups because the delegate issues still</span><br><span class="line"># exists and systemd currently does not support the cgroup feature set required</span><br><span class="line"># for containers run by docker</span><br><span class="line">ExecStart=/usr/bin/dockerd</span><br><span class="line">ExecReload=/bin/kill -s HUP $MAINPID</span><br><span class="line"># Having non-zero Limit*s causes performance problems due to accounting overhead</span><br><span class="line"># in the kernel. We recommend using cgroups to do container-local accounting.</span><br><span class="line">LimitNOFILE=infinity</span><br><span class="line">LimitNPROC=infinity</span><br><span class="line">LimitCORE=infinity</span><br><span class="line"># Uncomment TasksMax if your systemd version supports it.</span><br><span class="line"># Only systemd 226 and above support this version.</span><br><span class="line">#TasksMax=infinity</span><br><span class="line">TimeoutStartSec=0</span><br><span class="line"># set delegate yes so that systemd does not reset the cgroups of docker containers</span><br><span class="line">Delegate=yes</span><br><span class="line"># kill only the docker process, not all processes in the cgroup</span><br><span class="line">KillMode=process</span><br><span class="line"># restart the docker process if it exits prematurely</span><br><span class="line">Restart=on-failure</span><br><span class="line">StartLimitBurst=3</span><br><span class="line">StartLimitInterval=60s</span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br></pre></td></tr></table></figure><p>然后保存<br>四、启动</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">chmod +x /etc/systemd/system/docker.service   #添加文件权限并启动docker</span><br><span class="line">systemctl daemon-reload                       #重载unit配置文件</span><br><span class="line">systemctl start docker                        #启动Docker</span><br><span class="line">systemctl enable docker.service               #设置开机自启(会弹出一段东西，说明成功了，不用紧张~)</span><br></pre></td></tr></table></figure><p>五、验证</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">5、验证</span><br><span class="line">systemctl status docker     #查看Docker状态(会弹出一大堆东西，看见Active下有 active (running) 就说明运行成功)</span><br><span class="line">docker -v                   #查看Docker版本(会弹出版本号)</span><br></pre></td></tr></table></figure><p>六、更换阿里云的镜像<br>首先注册一个阿里云账户，链接：<a href="https://dev.aliyun.com/search.html">https://dev.aliyun.com/search.html</a>（也可以支付宝扫码登陆，这里不再赘述）</p><p>进入【容器镜像服务】→【镜像加速器】获取（加速地址）</p><p><img src="https://raw.githubusercontent.com/pengyirui/blog_img/main/2020-06-25-01.png" alt="图片"></p><p>复制文档命令然后回车执行</p><p>六、下载</p><p>如果链接不了网络，请参考这链接<a href="https://blog.csdn.net/baiyan3212/article/details/81172120">https://blog.csdn.net/baiyan3212/article/details/81172120</a></p><p>链接网络，测试能不能pull东西下来</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost docker]# docker pull tomcat</span><br></pre></td></tr></table></figure><p>查看是否下载成功</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]# docker images</span><br></pre></td></tr></table></figure><p>七、使用</p><p>运行tomcat</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]# docker run -p 80:8080 -d tomcat</span><br></pre></td></tr></table></figure><p>查看是否运行成功<br>如果报错 <code>OCI runtime create failed: container_linux.go:349</code> 等信息，主要原因是<code>内核</code>与<code>docker</code>版本不匹配导致。</p><p>使用<code>yum update -y</code>基本上能解决问题。</p><h1 id="卸载"><a href="#卸载" class="headerlink" title="卸载"></a>卸载</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">sudo yum remove docker \</span><br><span class="line">                   docker-client \</span><br><span class="line">                   docker-client-latest \</span><br><span class="line">                   docker-common \</span><br><span class="line">                   docker-latest \</span><br><span class="line">                   docker-latest-logrotate \</span><br><span class="line">                   docker-logrotate \</span><br><span class="line">                   docker-engine</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> Docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>OSPF路由协议</title>
      <link href="/posts/3cf2.html"/>
      <url>/posts/3cf2.html</url>
      
        <content type="html"><![CDATA[<h2 id="OSPF概念"><a href="#OSPF概念" class="headerlink" title="OSPF概念"></a>OSPF概念</h2><p>本文章介绍TCP/IP路由协议之开放式最短路径优先协议（OSPF）的基本概念与基础配置。<br>OSPF是内部网关协议的一种，基于链路状态算法。</p><h4 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h4><ul><li>支持无类域间路由（CIDR）：<br>OSPF是专门为TCP/IP环境开发的路由协议，支持无类域间路由（CIDR）和可变长子网掩码（VLSM）。</li><li>无路由自环：<br>由于路由的计算是基于详细链路状态信息（网络拓扑信息）的，所采用的SPF算法本身不会产生环路，并且OSPF报文携带生成者的ID信息，因此OSPF计算的路由无自环。</li><li>收敛速度快：<br>触发式更新，一旦拓扑结构发生变化，新的链路状态信息立刻泛洪，对拓扑变化敏感。</li><li>使用IP组播收发协议数据：<br>OSPF路由器使用组播和单播收发协议数据，因此占用的网络资源很小。</li><li>支持多条等值路由：<br>当到达目的地的等开销路径有多条时，流量被均衡地分担在这些等开销路径上。</li><li>支持协议报文的认证：<br>OSPF路由器之间交换的所有报文都被验证。</li></ul><h3 id="链路状态算法的路由计算过程"><a href="#链路状态算法的路由计算过程" class="headerlink" title="链路状态算法的路由计算过程"></a>链路状态算法的路由计算过程</h3><p><img src="https://raw.githubusercontent.com/pengyirui/blog_img/main/2020-06-07-01.png"></p><ul><li><p>OSPF最显著的特点是使用链路状态算法，区别于早先的路由协议使用的距离矢量算法，因此，本文首先介绍链路状态算法的路由计算基本过程。</p></li><li><p>每个路由器通过泛洪链路状态通告（LSA）向外发布本地链路状态信息（例如使能OSPF的端口，可到达的邻居以及相邻的网段等等）。</p></li><li><p>每一个路由器通过收集其它路由器发布的链路状态通告以及自身生成的本地链路状态通告，形成一个链路状态数据库（LSDB）。LSDB描述了路由域内详细的网络拓扑结构。</p></li><li><p>所有路由器上的链路状态数据库是相同的。</p></li><li><p>通过LSDB，每台路由器计算一个以自己为根，以网络中其它节点为叶的最短路径树。</p></li><li><p>通过每台路由器计算的最短路径树得出了到网络中其它节点的路由表。</p></li><li><p>在OSPF中，有两个基本的概念需要介绍，一个是自治系统，或者说一个OSPF路由域；一个是Router ID。</p></li><li><p>在OSPF课程中，自治系统（Autonomous System）是指使用同一种路由协议交换路由信息的一组路由器，简称AS。</p></li><li><p>由于LSDB描述的是整个网络的拓扑结构，包括网络内所有的路由器，所以网络内每个路由器都需要有一个唯一的标识，用于在LSDB中标识自己。Router ID就是这样一个用于在自治系统中唯一标识一台运行OSPF的路由器的32位整数。每个运行OSPF的路由器都有一个Router ID。</p></li><li><p>Router ID的格式和IP地址的格式是一样的，推荐使用路由器Loopback0的IP地址做为路由器的Router ID。</p></li></ul><h3 id="划分AS为多区域"><a href="#划分AS为多区域" class="headerlink" title="划分AS为多区域"></a>划分AS为多区域</h3><p><img src="https://raw.githubusercontent.com/pengyirui/blog_img/main/2020-06-07-02.png"></p><ul><li><p>区域是一组网段的集合。<br>OSPF支持将一组网段组合在一起，这样的一个组合称为一个区域，即区域是一组网段的集合。</p></li><li><p>划分区域可以缩小LSDB规模，减少网络流量。<br>区域内的详细拓扑信息不向其他区域发送，区域间传递的是抽象的路由信息，而不是详细的描述拓扑结构的链路状态信息。每个区域都有自己的LSDB，不同区域的LSDB是不同的。路由器会为每一个自己所连接到的区域维护一个单独的LSDB。由于详细链路状态信息不会被发布到区域以外，因此LSDB的规模大大缩小了。</p></li><li><p>Area 0为骨干区域，骨干区域负责在非骨干区域之间发布由区域边界路由器汇总的路由信息（并非详细的链路状态信息），为了避免区域间路由环路，非骨干区域之间不允许直接相互发布区域间路由信息。因此，所有区域边界路由器都至少有一个接口属于Area 0，即每个区域都必须连接到骨干区域。</p></li></ul><h3 id="路由器分类"><a href="#路由器分类" class="headerlink" title="路由器分类"></a>路由器分类</h3><p><img src="https://raw.githubusercontent.com/pengyirui/blog_img/main/2020-06-07-03.png"></p><ul><li>内部路由器（Internal Router）：<br>内部路由器是指所有所连接的网段都在一个区域的路由器。属于同一个区域的IR维护相同的LSDB。</li><li>区域边界路由器（Area Border Router）：<br>区域边界路由器是指连接到多个区域的路由器。ABR为每一个所连接的区域维护一个LSDB。</li><li>骨干路由器（Backbone Router）：<br>骨干路由器是指至少有一个端口（或者虚连接）连接到骨干区域的路由器。包括所有的ABR和所有端口都在骨干区域的路由器。</li><li>AS边界路由器（AS Boundary Router）：<br>AS边界路由器是指和其他AS中的路由器交换路由信息的路由器，这种路由器向整个AS通告AS外部路由信息。<br>AS边界路由器可以是内部路由器IR，或者是ABR，可以属于骨干区域也可以不属于骨干区域。</li></ul><h3 id="基本配置"><a href="#基本配置" class="headerlink" title="基本配置"></a>基本配置</h3><p>开启OSPF进程，创建OSPF区域，指定每个区域中所包含的网段。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[RTA]router id 1.1.1.1</span><br><span class="line">[RTA]ospf </span><br><span class="line">[RTA-ospf-1]area 1</span><br><span class="line">[RTA-ospf-1-area-0.0.0.1]network 1.1.1.1 0.0.0.0</span><br><span class="line">[RTA-ospf-1-area-0.0.0.1]network 10.1.1.0 0.0.0.255</span><br><span class="line"></span><br><span class="line">//查看路由表</span><br><span class="line">[RTA]display ip routing-table </span><br></pre></td></tr></table></figure><h2 id="邻居与邻接的关系"><a href="#邻居与邻接的关系" class="headerlink" title="邻居与邻接的关系"></a>邻居与邻接的关系</h2><p>为了交换链路状态信息以及路由信息，OSPF路由器之间首先要建立邻接关系。</p><h4 id="邻居（Neighbor）和邻接（Adjacency）"><a href="#邻居（Neighbor）和邻接（Adjacency）" class="headerlink" title="邻居（Neighbor）和邻接（Adjacency）"></a>邻居（Neighbor）和邻接（Adjacency）</h4><p><img src="https://raw.githubusercontent.com/pengyirui/blog_img/main/2020-06-07-04.png"></p><ul><li><p>OSPF是一个动态路由协议，运行OSPF的路由器之间需要交换链路状态信息和路由信息，在交换这些信息之前首先需要建立邻接关系。</p></li><li><p>邻居路由器（Neighbor）：<br>有端口连接到同一个网段的两个路由器就是邻居路由器。<br>邻居关系由OSPF的Hello协议维护。</p></li><li><p>邻接（Adjacency）：<br>从邻居关系中选出的为了交换路由信息而形成的关系。</p></li><li><p>并非所有的邻居关系都可以成为邻接关系，不同的网络类型，是否建立邻接关系的规则也不同。</p></li></ul><h3 id="OSPF支持的网络类型"><a href="#OSPF支持的网络类型" class="headerlink" title="OSPF支持的网络类型"></a>OSPF支持的网络类型</h3><blockquote><p>OSPF定义了四种网络类型，分别是点到点网络，广播型网络，NBMA网络和点到多点网络。</p></blockquote><ul><li><p>点到点网络是指只把两台路由器直接相连的网络。</p><ul><li>一个运行PPP的64K串行线路就是一个点到点网络的例子。</li></ul></li><li><p>广播型网络是指支持两台以上路由器，并且具有广播能力的网络。</p><ul><li>一个含有四台路由器的以太网就是一个广播型网络的例子。</li></ul></li><li><p>非广播多路访问（NBMA）：</p><ul><li>在NBMA网络上，OSPF模拟在广播型网络上的操作，但是每个路由器的邻居需要手动配置。</li><li>NBMA方式要求网络中的路由器组成全连接。例如，使用SVC进行通信的ATM网络。</li><li>非广播网络是指支持两台以上路由器互连，但是不具有广播能力的网络。</li><li>在非广播网络上，OSPF有两种运行方式，非广播多路访问和点到多点。</li></ul></li><li><p>点到多点：</p><ul><li>将整个非广播网络看成是一组点到点网络。每个路由器的邻居可以使用底层协议例如反向地址解析协议（Inverse ARP）来发现。</li><li>对于不能组成全连接的网络应当使用点到多点方式，例如只使用PVC的不完全连接的帧中继网络。</li></ul></li></ul><h3 id="常见链路层协议对应的默认网络类型"><a href="#常见链路层协议对应的默认网络类型" class="headerlink" title="常见链路层协议对应的默认网络类型"></a>常见链路层协议对应的默认网络类型</h3><p><img src="https://raw.githubusercontent.com/pengyirui/blog_img/main/2020-06-07-05.png"></p><h3 id="虚连接（Virtual-Link）"><a href="#虚连接（Virtual-Link）" class="headerlink" title="虚连接（Virtual Link）"></a>虚连接（Virtual Link）</h3><p><img src="https://raw.githubusercontent.com/pengyirui/blog_img/main/2020-06-07-06.png"></p><ul><li><p>骨干区域必须是连续的，但在物理上不连续的时候，可以使用虚连接使骨干区域在逻辑上连续。</p></li><li><p>虚连接可以在任意两个区域边界路由器上建立，但是要求这两个区域边界路由器都有端口连接到一个共同的非骨干区域。这个非骨干区域成为Transit区域。</p></li><li><p>如上图所示，RTB做为一个ABR没有物理连接到骨干区域，此时可以在RTA和RTB之间配置一条虚拟链路，使RTB连接到骨干区域。Area 1是此虚拟连接的Transit区域。</p></li><li><p>虚连接技术虽然理论上使骨干区域可以在物理上不连续，但在实际组网时是不推荐的。</p></li><li><p>虚连接是属于骨干区域（Area 0）的一条虚拟链路。</p></li></ul><h3 id="端口状态变换"><a href="#端口状态变换" class="headerlink" title="端口状态变换"></a>端口状态变换</h3><p>有两种不同的情况</p><h4 id="点到点、点到多点网段和虚连接"><a href="#点到点、点到多点网段和虚连接" class="headerlink" title="点到点、点到多点网段和虚连接"></a>点到点、点到多点网段和虚连接</h4><p><img src="https://raw.githubusercontent.com/pengyirui/blog_img/main/2020-06-07-07.png"><br>各种状态的解释如下：</p><ul><li>Down：<br>这是端口的初始状态，在该状态下，底层协议显示该端口不可用，所有定时器被关闭。</li><li>Loopback：<br>此状态表示端口被环回。在该状态下的端口被通告为一个Stub网段。</li><li>Point-to-point（P-to-P）：<br>在此状态下，端口是可用的，而且端口是连接到点到点、点到多点或者虚连接，此状态下的端口试图与邻居建立邻接关系，并以HelloInterval的间隔发送Hello报文。</li></ul><p>各种事件解释如下：</p><ul><li>UnloopInd：<br>Unloopback Indication，表示端口解除环回状态。处于Loopback状态下的端口如果收到此事件，则进入Down状态。</li><li>InterfaceUp：<br>端口的链路层协议变成可用状态，即常说的链路层Up。由于不需要选举DR和BDR，因此点到点、点到多点网段以及虚连接的端口状态变换比较</li></ul><h4 id="广播型网段和NBMA网段"><a href="#广播型网段和NBMA网段" class="headerlink" title="广播型网段和NBMA网段"></a>广播型网段和NBMA网段</h4><p><img src="https://raw.githubusercontent.com/pengyirui/blog_img/main/2020-06-07-08.png"><br>相关状态和事件解释如下：</p><ul><li>Waiting：<br>在此状态下，路由器通过监听接收到的Hello报文检测网络中是否已经有DR和BDR。在此状态下的路由器不可以参与选举DR和BDR。</li><li>Backup：<br>在此状态下，该路由器成为所连接网络上的BDR，并与网段中所有的其他路由器建立邻接关系。</li><li>DR：<br>在此状态下，该路由器成为所连接网络上的DR，并与网段中所有的其他路由器建立邻接关系。</li><li>DROther：<br>该路由器连接到一个广播型网段或者NBMA网段，而且该路由器不是一个DR或者BDR。此状态下的路由器与DR和BDR形成邻接关系并交换路由信息。</li><li>BackupSeen：<br>路由器已经检测到网络上是否存在BDR。</li></ul><p>一个OSPF路由器在广播型网段和NBMA网段上选举DR和BDR之前，首先会等待一段时间（RouterDeadInterval），在这段时间里检测网络上是否已经存在DR和BDR，如果已经有DR和BDR，则不启动选举过程，直接进入DROther状态。因此，网络上Router Priority最大的路由器不一定是DR，Router Priority第二大的路由器也不一定是BDR。</p><h3 id="DR和BDR"><a href="#DR和BDR" class="headerlink" title="DR和BDR"></a>DR和BDR</h3><p><img src="https://raw.githubusercontent.com/pengyirui/blog_img/main/2020-06-07-09.png"></p><p>每一个含有至少两个路由器的广播型网络和NBMA网络都有一个指定路由器（Designated Router，DR）和备份指定路由器（Backup Designated Router，BDR）。</p><p>DR和BDR的作用：</p><ol><li><p>减少邻接关系的数量，从而减少链路状态信息以及路由信息的交换次数，这样可以节省带宽，减少路由器硬件的负担。一个既不是DR也不是BDR的路由器只与DR和BDR形成邻接关系并交换链路状态信息以及路由信息，这样就大大减少了大型广播型网络和NBMA网络中的邻接关系数量。<br>本例中，虽然RTA有三个邻居，但是只形成两个邻接关系。</p></li><li><p>在描述拓扑的LSDB中，一个NBMA网段或者广播型网段是由单独一条LSA来描述的，这条LSA是由该网段上的DR产生的。</p></li></ol><h3 id="选举DR和BDR"><a href="#选举DR和BDR" class="headerlink" title="选举DR和BDR"></a>选举DR和BDR</h3><p><img src="https://raw.githubusercontent.com/pengyirui/blog_img/main/2020-06-07-10.png"></p><ul><li><p>DR和BDR由OSPF的Hello协议选举，选举是根据端口的路由器优先级（Router Priority）进行的。</p></li><li><p>如果Router Priority被设置为0，那么该路由器将不允许被选举成DR或者BDR。</p></li><li><p>Router Priority越大越优先。如果相同，Router ID大者优先。 </p></li><li><p>但是为了维护网络上邻接关系的稳定性，如果网络中已经存在DR和BDR，则新添加进该网段的路由器不会成为DR和BDR，不管该路由器的Router Priority是否最大。</p></li><li><p>如果当前DR故障，当前BDR自动成为新的DR，网络中重新选举BDR；如果当前BDR故障，则DR不变，重新选举BDR。</p></li><li><p>这种选举机制的目的是为了保持邻接关系的稳定，减小拓扑结构的改变对邻接关系的影响。</p></li></ul><h3 id="配置Router-Priority"><a href="#配置Router-Priority" class="headerlink" title="配置Router Priority"></a>配置Router Priority</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[RTB]interface Ethernet 0/0</span><br><span class="line">[RTB-Ethernet0/0]ospf dr-priority 100</span><br></pre></td></tr></table></figure><ul><li>ospf dr-priority value：修改端口的Router Priority。</li><li>Router Priority的取值范围是0～255，默认值为1。</li><li>如果两台路由器Router Priority值相同，则比较Router ID，Router ID大的更优先。</li><li>如果修改了Router Priority，需要重启ospf进程才能重新参与选举DR和BDR。</li></ul><h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><h4 id="NBMA网络"><a href="#NBMA网络" class="headerlink" title="NBMA网络"></a>NBMA网络</h4><p><img src="https://raw.githubusercontent.com/pengyirui/blog_img/main/2020-06-07-11.png"><br>物理拓扑描述：</p><blockquote><p>三台路由器通过帧中继交换机组成全连接。把所有网段配置在Area 1中。<br>NBMA网络中不需要配置反向ARP，邻居需要手动指定。<br>在RTA上配置两个邻居，10.1.1.2和10.1.1.3。<br>指定邻居的时候使用该邻居在该网段上的IP地址来标识。<br>peer ip-address [ dr-priority dr-priority-number ]<br>dr-priority-number：邻居的Router Priority，默认为1。</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">[RTA]router id 1.1.1.1 </span><br><span class="line">[RTA]ospf </span><br><span class="line">[RTA-ospf-1]peer 10.1.1.2 </span><br><span class="line">[RTA-ospf-1]peer 10.1.1.3 </span><br><span class="line">[RTA-ospf-1]area 1</span><br><span class="line">[RTA-ospf-1-area-0.0.0.1]network 1.1.1.1 0.0.0.0 </span><br><span class="line">[RTA-ospf-1-area-0.0.0.1]network 10.1.1.0 0.0.0.255</span><br><span class="line">[RTA-ospf-1-area-0.0.0.1]return</span><br><span class="line">&lt;RTA&gt;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[RTB]router id 2.2.2.2</span><br><span class="line">[RTB]ospf</span><br><span class="line">[RTB-ospf-1]peer 10.1.1.1</span><br><span class="line">[RTB-ospf-1]peer 10.1.1.3</span><br><span class="line">[RTB-ospf-1]area 1</span><br><span class="line">[RTB-ospf-1-area-0.0.0.1]network 2.2.2.2 0.0.0.0</span><br><span class="line">[RTB-ospf-1-area-0.0.0.1]network 10.1.1.0 0.0.0.255</span><br><span class="line">[RTB-ospf-1-area-0.0.0.1]return</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[RTC]router id 3.3.3.3</span><br><span class="line">[RTC]ospf </span><br><span class="line">[RTC-ospf-1]peer 10.1.1.1</span><br><span class="line">[RTC-ospf-1]peer 10.1.1.2</span><br><span class="line">[RTC-ospf-1]area 1</span><br><span class="line">[RTC-ospf-1-area-0.0.0.1]network 3.3.3.3 0.0.0.0</span><br><span class="line">[RTC-ospf-1-area-0.0.0.1]network 10.1.1.0 0.0.0.255</span><br><span class="line">[RTC-ospf-1-area-0.0.0.1]return</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">//验证路由表</span><br><span class="line">[RTA]display ip routing-table </span><br><span class="line"></span><br><span class="line">//验证OSPF端口信息</span><br><span class="line">[RTA]display ospf interface Serial 1/0</span><br></pre></td></tr></table></figure><blockquote><p>State: 端口状态。<br>Type: 该端口的OSPF网络类型。<br>Priority：该端口的Router Priority值，用于DR和BDR选举。<br>Designated Router: DR的端口IP地址。<br>Backup Designated Router: BDR的端口IP地址。</p></blockquote><h3 id="点到多点网络"><a href="#点到多点网络" class="headerlink" title="点到多点网络"></a>点到多点网络</h3><p><img src="https://raw.githubusercontent.com/pengyirui/blog_img/main/2020-06-07-12.png"></p><blockquote><p>本例中：<br>RTA可以连接到其它两台路由器，但是RTB和RTC之间没有连接。<br>由于网络中的路由器不是全连接的，所以帧中继端口的OSPF网络类型需要手动指定为点到多点。<br>帧中继的反向ARP需要在端口上开启。<br>在RTA上，把所有网段配置在Area 1中。<br>把Serial 1/0端口的网络类型手动修改成点到多点。<br>ospf network-type  broadcast | nbma | p2mp | p2p<br>OSPF共有四种网络类型。</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[RTA]router id 1.1.1.1</span><br><span class="line">[RTA]ospf </span><br><span class="line">[RTA-ospf-1]area 1</span><br><span class="line">[RTA-ospf-1-area-0.0.0.1]network 1.1.1.1 0.0.0.0</span><br><span class="line">[RTA-ospf-1-area-0.0.0.1]network 10.1.1.0 0.0.0.255</span><br><span class="line">[RTA]interface Serial 1/0</span><br><span class="line">[RTA-Serial1/0]ospf network-type p2mp</span><br><span class="line">[RTA-Serial1/0]return</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[RTB]router id 2.2.2.2</span><br><span class="line">[RTB]ospf </span><br><span class="line">[RTB-ospf-1]area 1</span><br><span class="line">[RTB-ospf-1-area-0.0.0.1]network 2.2.2.2 0.0.0.0</span><br><span class="line">[RTB-ospf-1-area-0.0.0.1]network 10.1.1.0 0.0.0.255</span><br><span class="line">[RTB]interface Serial 1/0</span><br><span class="line">[RTB-Serial1/0]ospf network-type p2mp </span><br><span class="line">[RTB-Serial1/0]return</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[RTC]router id 3.3.3.3</span><br><span class="line">[RTC]ospf </span><br><span class="line">[RTC-ospf-1]area 1</span><br><span class="line">[RTC-ospf-1-area-0.0.0.1]network 3.3.3.3 0.0.0.0</span><br><span class="line">[RTC-ospf-1-area-0.0.0.1]network 10.1.1.0 0.0.0.255</span><br><span class="line">[RTC]interface Serial 1/0</span><br><span class="line">[RTC-Serial1/0]ospf network-type p2mp </span><br><span class="line">[RTC-Serial1/0]return</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">//验证路由表</span><br><span class="line">[RTA]display ip routing-table </span><br><span class="line"></span><br><span class="line">//验证OSPF端口信息</span><br><span class="line">[RTA]display ospf interface Serial 1/0</span><br></pre></td></tr></table></figure><blockquote><p>OSPF网络类型为点到多点，点到多点网络类型的端口的端口稳定状态是Point-to-Point。</p></blockquote><h3 id="虚连接"><a href="#虚连接" class="headerlink" title="虚连接"></a>虚连接</h3><p><img src="https://raw.githubusercontent.com/pengyirui/blog_img/main/2020-06-07-13.png"></p><blockquote><p>本例中：<br>RTC是ABR，但是RTC没有连接到骨干区域。因此在RTB和RTC之间配置虚连接。Area 1是该虚连接的Transit区域。在RTA上，把所有网段配置在Area 0中。</p></blockquote><blockquote><p>配置虚连接时，需要指定虚连接对端的Router ID。<br>虚连接在transit区域的区域视图下配置。<br>vlink-peer router-id ：配置虚拟连接时，使用对端Router ID表示对端路由器。</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">[RTB]router id 2.2.2.2</span><br><span class="line">[RTB]ospf </span><br><span class="line">[RTB-ospf-1]area 0 </span><br><span class="line">[RTB-ospf-1-area-0.0.0.0]network 2.2.2.2 0.0.0.0</span><br><span class="line">[RTB-ospf-1-area-0.0.0.0]network 10.1.1.0 0.0.0.255</span><br><span class="line">[RTB-ospf-1]area 1</span><br><span class="line">[RTB-ospf-1-area-0.0.0.1]network 10.1.2.0 0.0.0.255</span><br><span class="line">[RTB-ospf-1-area-0.0.0.1]vlink-peer 3.3.3.3 </span><br><span class="line">[RTB-ospf-1-area-0.0.0.1]return</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">[RTC]router id 3.3.3.3</span><br><span class="line">[RTC]ospf </span><br><span class="line">[RTC-ospf-1]area 1</span><br><span class="line">[RTC-ospf-1-area-0.0.0.1]network 10.1.2.0 0.0.0.255</span><br><span class="line">[RTC-ospf-1-area-0.0.0.1]vlink-peer 2.2.2.2</span><br><span class="line">[RTC-ospf-1]area 2</span><br><span class="line">[RTC-ospf-1-area-0.0.0.2]network 3.3.3.3 0.0.0.0</span><br><span class="line">[RTC-ospf-1-area-0.0.0.2]network 10.1.3.0 0.0.0.255</span><br><span class="line">[RTC-ospf-1-area-0.0.0.2]return</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">//验证路由表</span><br><span class="line">[RTA]display ip routing-table </span><br><span class="line"></span><br><span class="line">//验证OSPF端口信息</span><br><span class="line">[RTC]display ospf vlink </span><br></pre></td></tr></table></figure><blockquote><p>Neighbor-id:<br>虚连接邻居的Router ID。</p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> 数据通信 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>IP地址规划</title>
      <link href="/posts/9c80.html"/>
      <url>/posts/9c80.html</url>
      
        <content type="html"><![CDATA[<h3 id="IP地址分类"><a href="#IP地址分类" class="headerlink" title="IP地址分类"></a>IP地址分类</h3><p>我们经常用到的是A、B、C三类地址。IP地址由国际网络信息中心组织（International Network Information Center，InterNIC）根据公司大小进行分配。过去通常把A类地址保留给政府机构，B类地址分配给中等规模的公司，C类地址分配给小型单位。然而，随着互联网络的飞速发展，再加上IP地址的浪费，导致现在IP地址已经非常紧张。<br><img src="https://raw.githubusercontent.com/pengyirui/blog_img/main/2020-06-06-01.png"><br>我们经常用到的是A、B、C三类地址。IP地址由国际网络信息中心组织（International Network Information Center，InterNIC）根据公司大小进行分配。过去通常把A类地址保留给政府机构，B类地址分配给中等规模的公司，C类地址分配给小型单位。然而，随着互联网络的飞速发展，再加上IP地址的浪费，导致现在IP地址已经非常紧张。</p><ul><li><p>IP地址长度为32比特，分为网络部分和主机部分。网络部分用于唯一地标识一个物理或者逻辑链路，主机部分用于唯一地标识该链路上的一台设备。</p></li><li><p>那么如何区分IP地址的网络部分和主机部分呢？最初互联网络设计者根据网络规模大小规定了地址类，把IP地址分为A、B、C、D、E五类。</p></li><li><p>A类IP地址的网络部分为第一个八位数组（octet），第一个字节的第一位（最左边那一位）为“0”，因此，网络部分的有效位数为7位，这样A类地址的第一个字节为1至126之间（127留作它用）。例如10.1.1.1、126.2.4.78为A类地址。A类地址的主机部分为剩余的三个字节共24位。A类地址的范围为1.0.0.0至126.255.255.255，每一个A类网络共有224个A类IP地址。</p></li><li><p>B类IP地址的网络部分为前两个八位数组（octet），第一个字节的第一位为“1“，第二位为”0”。因此，网络部分的有效位数为14位，B类地址的第一个字节为128至191之间。例如128.1.1.1、168.2.4.78为B类地址。B类地址的主机部分为剩余的二个字节16位。B类地址的范围为128.0.0.0至 191.255.255.255，每一个B类网络共有216个B类IP地址。</p></li><li><p>C类IP地址的网络部分为前三个八位数组（octet），第一个字节前二位为“1“，第三位为”0”。因此，网络部分的有效位数为21位，C类地址的第一个字节为192至223之间。例如192.1.1.1、220.2.4.78为C类地址。C类地址的主机部分为剩余的一个字节8位。C类地址的范围为192.0.0.0至 223.255.255.255，每一个C类网络共有28=256个C类IP地址。</p></li><li><p>D类地址第一个字节前三位为“111“，第四位为”0”，因此，D类地址的第一个字节为224至239。D类地址通常作为组播地址。</p></li><li><p>E类地址第一个字节为240至255之间，保留用于科学研究。</p></li></ul><h3 id="私有IP地址"><a href="#私有IP地址" class="headerlink" title="私有IP地址"></a>私有IP地址</h3><p>10.0.0.0至10.255.255.255 </p><p>172.16.0.0至172.31.255.255</p><p>192.168.0.0至192.168.255.255</p><ul><li>在进行IP地址规划时，我们通常在公司内部网络使用私有IP地址。私有IP地址是由InterNIC预留给各个企业内部网络自由支配的IP地址。使用私有IP地址不能直接访问Internet。原因很简单，私有IP地址不能在公网上使用，公网上没有针对私有地址的路由，如果在公网上使用将会产生地址冲突问题。当访问Internet时，需要利用网络地址转换（NAT，Network Address Translation）技术，把私有IP地址转换为Internet可识别的公有IP地址。InterNIC预留了以下网段作为私有IP地址：A类私有地址为10.0.0.0至10.255.255.255; B类私有地址为172.16.0.0至172.31.255.255; C类私有地址为192.168.0.0至192.168.255.255等。</li><li>使用私有IP地址，不仅减少了企业用于购买公有IP地址的投资，而且节省了IP地址资源。但是这并不能完全解决IP地址短缺问题，目前已经正式提出了IPv6协议。在IPv6地址中有128个二进制位，共约2128个IP地址，完全可以解决IP地址紧张问题。</li></ul><h3 id="特殊IP地址"><a href="#特殊IP地址" class="headerlink" title="特殊IP地址"></a>特殊IP地址</h3><p><img src="https://raw.githubusercontent.com/pengyirui/blog_img/main/2020-06-06-02.png"><br><img src="https://raw.githubusercontent.com/pengyirui/blog_img/main/2020-06-06-03.png" alt="计算可用主机地址"></p><ul><li>IP地址用于唯一的标识一台网络设备，但并不是每一个IP地址都是可用的，一些特殊的IP地址被用于特殊的用途，不能用于标识网络设备。</li><li>对于主机部分全为“0”的IP地址，称为网络地址，网络地址用来标识一个网段。例如，A类地址1.0.0.0，私有地址10.0.0.0, 192.168.1.0等。</li><li>对于主机部分全为“1”的IP地址，称为网段广播地址，广播地址用于标识一个网络的所有主机。例如，10.255.255.255 , 192.168.1.255等，路由器可以在10.0.0.0或者192.168.1.0等网段转发广播包。广播地址用于向本网段的所有节点发送数据包。</li><li>对于网络部分为127的IP地址，例如127.0.0.1往往用于环回测试。</li><li>全“0”的IP地址0.0.0.0代表所有的主机，华为Quidway系列路由器使用0.0.0.0地址指定默认路由。</li><li>全“1”的IP地址255.255.255.255，也是广播地址，但255.255.255.255代表所有主机，用于向网络的所有节点发送数据包。这样的广播数据包不能被路由器转发。</li><li>如上所述，每一个网段会有一些IP地址不能用作主机IP地址。下面让我们来计算一下可用的IP地址。例如<code>B类</code>网段172.16.0.0, 有16个主机位,因此有216个IP地址，去掉一个网络地址172.16.0.0，一个广播地址172.16.255.255不能用作标识主机，那么共有216-2个可用地址。<code>C类</code>网段192.168.1.0，有8个主机位，共有28个IP地址，去掉一个网络地址192.168.1.0，一个广播地址192.168.1.255，共有254个可用主机地址。现在，我们可以这样计算每一个网段的可用主机地址：假定这个网段的主机部分位数为n，那么<code>可用的主机地址</code>个数为 <code>2^n-2</code>个。</li><li>网络层设备（例如路由器等）使用网络地址来代表本网段内的主机，可以大大减少路由器的路由表条目。</li></ul><p>用VLSM技术进行子网规划大致可以分为4步.<br>第1步：确定子网位数和主机位数；<br>第2步：计算子网位；<br>第3步：计算子网地址；<br>第4步：选取子网地址，得出子网规划的结果。</p><h3 id="子网掩码"><a href="#子网掩码" class="headerlink" title="子网掩码"></a>子网掩码</h3><ul><li>使用子网掩码（subnet mask）区分网络部分和主机部分。可以使网络地址的使用更有效。对外仍为一个网络，对内部而言，则分为不同的子网。</li><li>子网掩码使用与IP地址一样的格式<blockquote><p>缺省状态下，如果没有进行子网划分，<br>A类网络的子网掩码为255.0.0.0，<br>B类网络的子网掩码为255.255.0.0，<br>C类网络子网掩码为255.255.255.0。<br>子网掩码的网络部分和子网部分全都是1，主机部分全都是0</p></blockquote></li></ul><h3 id="网络地址的计算"><a href="#网络地址的计算" class="headerlink" title="网络地址的计算"></a>网络地址的计算</h3><p><img src="https://raw.githubusercontent.com/pengyirui/blog_img/main/2020-06-06-04.png"><br>网络地址就是将IP地址的二进制和子网掩码的二进制进行“与”的计算的结果.<br>“与”的计算方法是1&amp;1=1，1&amp;0=0，0&amp;0=0<br>最终得到网络地址</p><h3 id="路由聚合"><a href="#路由聚合" class="headerlink" title="路由聚合"></a>路由聚合</h3><p><img src="https://raw.githubusercontent.com/pengyirui/blog_img/main/2020-06-06-05.png"><br><img src="https://raw.githubusercontent.com/pengyirui/blog_img/main/2020-06-06-06.png"></p><h3 id="CIDR"><a href="#CIDR" class="headerlink" title="CIDR"></a>CIDR</h3><ul><li>路由聚合指将多条路由聚合为一条聚合路由，路由聚合可以大大减少路由器中路由的条目数，减轻路由器维护路由的负担，提高网络的利用率。</li><li>CIDR即Classless Inter Domain Routing，无类别域间路由，CIDR使用VLSM技术，突破了传统IP地址分类边界，采用CIDR可以把路由表中的若干条路由汇聚为一条路由，减少了路由表的规模。</li><li>通常情况下，使用CIDR技术汇聚的网络地址的比特位必须是一致的，如上例所示。如果上图所示的ISP又连接了一个172.178.1.0/24的网段，那么这些网段路由将无法汇聚，无法实现CIDR技术。</li><li>（注：极端情况下，可以汇聚成0.0.0.0/0发布） </li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> 数据通信 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用半个月电子书的感受</title>
      <link href="/posts/abb4.html"/>
      <url>/posts/abb4.html</url>
      
        <content type="html"><![CDATA[<p>前段时间想入手一台电子书，看了几家品牌最终选择了小米出的【小米多看电纸书】</p><h2 id="图片"><a href="#图片" class="headerlink" title="图片"></a>图片</h2><p><img src="https://raw.githubusercontent.com/pengyirui/blog_img/main/2020-06-02-01.png" alt="官网宣传图"><br><img src="https://raw.githubusercontent.com/pengyirui/blog_img/main/2020-06-02-02.png"><br><img src="https://raw.githubusercontent.com/pengyirui/blog_img/main/2020-06-02-03.png"><br><img src="https://raw.githubusercontent.com/pengyirui/blog_img/main/2020-06-02-04.png" alt="实物图"></p><h2 id="感受"><a href="#感受" class="headerlink" title="感受"></a>感受</h2><ul><li><p>以下是我选择它的原因：</p><ul><li>Type-C口</li><li>屏幕内置前光</li><li>能WIFI传书和网盘存书（kindle传书实在太麻烦了）<br><img src="https://raw.githubusercontent.com/pengyirui/blog_img/main/2020-06-02-05.png" alt="wifi传书页面与可支持的格"></li><li>同配置相对便宜的价格（如果买二手还能更便宜）</li><li>每晚看书一小时大概能用十五天左右</li></ul></li><li><p>总的来说体验是相当满意的，能随时随地看书还很轻</p></li></ul><h2 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h2><p>以下是我平时找书使用到的链接<br>ePUB.com  <a href="https://epubw.com/">https://epubw.com</a><br>SoBookS.cc <a href="https://sobooks.cc/">https://sobooks.cc</a><br>搬书匠 <a href="http://www.banshujiang.cn/">http://www.banshujiang.cn</a><br>爱分享读书 <a href="http://www.ishareread.com/">http://www.ishareread.com</a><br>鳩摩搜索 <a href="https://www.jiumodiary.com/">https://www.jiumodiary.com</a><br>在线转换epub格式 <a href="https://app.xunjiepdf.com/eb2epub">https://app.xunjiepdf.com/eb2epub</a><br>奥丁读书小站 <a href="http://www.dushudaren.com/">http://www.dushudaren.com/</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> 书本 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>jQuery常见的使用效果</title>
      <link href="/posts/4d10.html"/>
      <url>/posts/4d10.html</url>
      
        <content type="html"><![CDATA[<p>jQuery使用的是<code>1.12.4</code><br>图片等素材这里不提供</p><h2 id="循环将数据放入到页面中"><a href="#循环将数据放入到页面中" class="headerlink" title="循环将数据放入到页面中"></a>循环将数据放入到页面中</h2><p><img src="https://raw.githubusercontent.com/pengyirui/blog_img/main/2020-05-25-1.png" alt="效果截图"></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="variable language_">window</span>.<span class="property">onload</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">var</span> oUl = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;list&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript"><span class="comment">// 绑定ul标签</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">var</span> aList = [<span class="string">&#x27;美人鱼&#x27;</span>,<span class="string">&#x27;疯狂动物城&#x27;</span>,<span class="string">&#x27;魔兽&#x27;</span>,<span class="string">&#x27;美国队长3&#x27;</span>,<span class="string">&#x27;湄公河行动&#x27;</span>];</span></span><br><span class="line"><span class="language-javascript"><span class="comment">// 数据列表</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">var</span> iLen = aList.<span class="property">length</span>;</span></span><br><span class="line"><span class="language-javascript"><span class="comment">// 判断列表的个数</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">var</span> sTr = <span class="string">&#x27;&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;iLen;i++)</span></span><br><span class="line"><span class="language-javascript">&#123;</span></span><br><span class="line"><span class="language-javascript">sTr += <span class="string">&#x27;&lt;li&gt;&#x27;</span>+ aList[i]+ <span class="string">&#x27;&lt;/li&gt;&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript">oUl.<span class="property">innerHTML</span> = sTr;</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">&quot;text/css&quot;</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-class">.list</span>&#123;</span></span><br><span class="line"><span class="language-css"><span class="attribute">list-style</span>:none;</span></span><br><span class="line"><span class="language-css"><span class="attribute">margin</span>:<span class="number">50px</span> auto <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">padding</span>:<span class="number">0</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">width</span>:<span class="number">300px</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">height</span>:<span class="number">305px</span>;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-class">.list</span> <span class="selector-tag">li</span>&#123;</span></span><br><span class="line"><span class="language-css"><span class="attribute">height</span>:<span class="number">60px</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">border-bottom</span>:<span class="number">1px</span> dotted <span class="number">#000</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">line-height</span>:<span class="number">60px</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">font-size</span>:<span class="number">16px</span>;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">&quot;list&quot;</span> <span class="attr">id</span>=<span class="string">&quot;list&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 页面只需要一个 ul 标签即可 --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="时钟"><a href="#时钟" class="headerlink" title="时钟"></a>时钟</h2><p><img src="https://raw.githubusercontent.com/pengyirui/blog_img/main/2020-05-25-2.gif" alt="效果截图"></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="variable language_">window</span>.<span class="property">onload</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">var</span> oDiv = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;div1&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">function</span> <span class="title function_">fnTimego</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">var</span> sNow = <span class="keyword">new</span> <span class="title class_">Date</span>();</span></span><br><span class="line"><span class="language-javascript"><span class="comment">// 获取年份</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">var</span> iYear = sNow.<span class="title function_">getFullYear</span>();</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="comment">// 获取月份，月份是从0到11，0表示一月，11表示十二月</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">var</span> iMonth = sNow.<span class="title function_">getMonth</span>()+<span class="number">1</span>;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">var</span> iDate = sNow.<span class="title function_">getDate</span>();</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="comment">// 星期是从0到6,0表示星期天</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">var</span> iWeek = sNow.<span class="title function_">getDay</span>();</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">var</span> iHour = sNow.<span class="title function_">getHours</span>();</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">var</span> iMinute = sNow.<span class="title function_">getMinutes</span>();</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">var</span> iSecond = sNow.<span class="title function_">getSeconds</span>();</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">var</span> sTr = <span class="string">&#x27;当前时间是：&#x27;</span>+ iYear + <span class="string">&#x27;年&#x27;</span>+ iMonth + <span class="string">&#x27;月&#x27;</span>+ iDate+<span class="string">&#x27;日 &#x27;</span> + <span class="title function_">fnToweek</span>(iWeek) + <span class="string">&#x27; &#x27;</span> +<span class="title function_">fnTodou</span>(iHour) + <span class="string">&#x27;:&#x27;</span> + <span class="title function_">fnTodou</span>(iMinute) + <span class="string">&#x27;:&#x27;</span> + <span class="title function_">fnTodou</span>(iSecond);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">oDiv.<span class="property">innerHTML</span> = sTr;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="comment">// 刚开始调用一次，解决刚开始1秒钟空白的问题</span></span></span><br><span class="line"><span class="language-javascript"><span class="title function_">fnTimego</span>();</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="built_in">setInterval</span>(fnTimego,<span class="number">1000</span>);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">function</span> <span class="title function_">fnToweek</span>(<span class="params">n</span>)&#123;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">if</span>(n==<span class="number">0</span>)</span></span><br><span class="line"><span class="language-javascript">&#123;</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">return</span> <span class="string">&#x27;星期日&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">else</span> <span class="keyword">if</span>(n==<span class="number">1</span>)&#123;</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">return</span> <span class="string">&#x27;星期一&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">else</span> <span class="keyword">if</span>(n==<span class="number">2</span>)&#123;</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">return</span> <span class="string">&#x27;星期二&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">else</span> <span class="keyword">if</span>(n==<span class="number">3</span>)&#123;</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">return</span> <span class="string">&#x27;星期三&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">else</span> <span class="keyword">if</span>(n==<span class="number">4</span>)&#123;</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">return</span> <span class="string">&#x27;星期四&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">else</span> <span class="keyword">if</span>(n==<span class="number">5</span>)&#123;</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">return</span> <span class="string">&#x27;星期五&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">else</span>&#123;</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">return</span> <span class="string">&#x27;星期六&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">function</span> <span class="title function_">fnTodou</span>(<span class="params">n</span>)&#123;</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">if</span>(n&lt;<span class="number">10</span>)</span></span><br><span class="line"><span class="language-javascript">&#123;</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">return</span> <span class="string">&#x27;0&#x27;</span>+n;</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">else</span></span></span><br><span class="line"><span class="language-javascript">&#123;</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">return</span> n;</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">&quot;text/css&quot;</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-tag">div</span>&#123;</span></span><br><span class="line"><span class="language-css"><span class="attribute">text-align</span>:center;</span></span><br><span class="line"><span class="language-css"><span class="attribute">font-size</span>:<span class="number">30px</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">color</span>:red;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;div1&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="倒计时"><a href="#倒计时" class="headerlink" title="倒计时"></a>倒计时</h2><p><img src="https://raw.githubusercontent.com/pengyirui/blog_img/main/2020-05-25-3.gif" alt="效果截图"></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="variable language_">window</span>.<span class="property">onload</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">var</span> oDiv = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;div1&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">function</span> <span class="title function_">fnTimeleft</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript"><span class="comment">//实际开发中需要读取后台的时间，可以通过ajax来读取</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">var</span> sNow = <span class="keyword">new</span> <span class="title class_">Date</span>();</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="comment">// 未来时间：5月30日晚24点</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">var</span> sFuture = <span class="keyword">new</span> <span class="title class_">Date</span>(<span class="number">2021</span>,<span class="number">5</span>,<span class="number">20</span>,<span class="number">24</span>,<span class="number">0</span>,<span class="number">0</span>);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="comment">//计算还有多少秒</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">var</span> sLeft = <span class="built_in">parseInt</span>((sFuture-sNow)/<span class="number">1000</span>);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="comment">//计算还剩多少天</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">var</span> iDays = <span class="built_in">parseInt</span>(sLeft/<span class="number">86400</span>);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="comment">// 计算还剩多少小时</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">var</span> iHours  = <span class="built_in">parseInt</span>((sLeft%<span class="number">86400</span>)/<span class="number">3600</span>);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="comment">// 计算还剩多少分</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">var</span> iMinutes = <span class="built_in">parseInt</span>(((sLeft%<span class="number">86400</span>)%<span class="number">3600</span>)/<span class="number">60</span>);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="comment">// 计算还剩多少秒</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">var</span> iSeconds = sLeft%<span class="number">60</span>;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">var</span> sTr = <span class="string">&#x27;距离5月20日还剩：&#x27;</span>+ iDays + <span class="string">&#x27;天&#x27;</span> + <span class="title function_">fnTodou</span>(iHours) + <span class="string">&#x27;时&#x27;</span> + <span class="title function_">fnTodou</span>(iMinutes) + <span class="string">&#x27;分&#x27;</span>+ <span class="title function_">fnTodou</span>(iSeconds) + <span class="string">&#x27;秒&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">oDiv.<span class="property">innerHTML</span> = sTr;</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="title function_">fnTimeleft</span>();</span></span><br><span class="line"><span class="language-javascript"><span class="built_in">setInterval</span>(fnTimeleft,<span class="number">1000</span>);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">function</span> <span class="title function_">fnTodou</span>(<span class="params">n</span>)&#123;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">if</span>(n&lt;<span class="number">10</span>)</span></span><br><span class="line"><span class="language-javascript">&#123;</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">return</span> <span class="string">&#x27;0&#x27;</span>+n;</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">else</span>&#123;</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">return</span> n;</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">&quot;text/css&quot;</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-tag">div</span>&#123;</span></span><br><span class="line"><span class="language-css"><span class="attribute">text-align</span>:center;</span></span><br><span class="line"><span class="language-css"><span class="attribute">font-size</span>:<span class="number">30px</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">color</span>:red;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;div1&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="手风琴效果"><a href="#手风琴效果" class="headerlink" title="手风琴效果"></a>手风琴效果</h2><p><img src="https://raw.githubusercontent.com/pengyirui/blog_img/main/2020-05-25-4.gif" alt="效果截图"><br>需要自己设定图片位置这里就不上传了</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!doctype <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;js/jquery-1.12.4.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">*&#123;<span class="attribute">margin</span>:<span class="number">0</span>;<span class="attribute">padding</span>:<span class="number">0</span>;&#125;</span></span><br><span class="line"><span class="language-css"><span class="selector-tag">body</span>&#123;<span class="attribute">font-size</span>:<span class="number">12px</span>;&#125;</span></span><br><span class="line"><span class="language-css"><span class="selector-id">#accordion</span>&#123;<span class="attribute">width</span>:<span class="number">727px</span>; <span class="attribute">height</span>:<span class="number">350px</span>; <span class="attribute">margin</span>:<span class="number">100px</span> auto <span class="number">0</span> auto; <span class="attribute">position</span>:relative; <span class="attribute">overflow</span>:hidden; <span class="attribute">border</span>:<span class="number">1px</span> solid <span class="number">#CCC</span>;&#125;</span></span><br><span class="line"><span class="language-css"><span class="selector-id">#accordion</span> <span class="selector-tag">ul</span>&#123;<span class="attribute">list-style</span>:none;&#125;</span></span><br><span class="line"><span class="language-css"><span class="selector-id">#accordion</span> <span class="selector-tag">ul</span> <span class="selector-tag">li</span>&#123;<span class="attribute">width</span>:<span class="number">643px</span>;<span class="attribute">height</span>:<span class="number">350px</span>; <span class="attribute">position</span>:absolute; <span class="attribute">background</span>:<span class="number">#FFF</span>;&#125;</span></span><br><span class="line"><span class="language-css"><span class="selector-id">#accordion</span> <span class="selector-tag">ul</span> <span class="selector-tag">li</span> <span class="selector-tag">span</span>&#123;<span class="attribute">display</span>:block;<span class="attribute">width</span>:<span class="number">20px</span>; <span class="attribute">height</span>:<span class="number">350px</span>; <span class="attribute">float</span><span class="selector-pseudo">:left</span>; <span class="attribute">text-align</span>:center; <span class="attribute">color</span>:<span class="number">#FFF</span>; <span class="attribute">padding-top</span>:<span class="number">5px</span>; <span class="attribute">cursor</span>:pointer;&#125;</span></span><br><span class="line"><span class="language-css"><span class="selector-id">#accordion</span> <span class="selector-tag">ul</span> <span class="selector-tag">li</span> <span class="selector-tag">img</span>&#123;<span class="attribute">display</span>:block; <span class="attribute">float</span><span class="selector-pseudo">:right</span>;&#125;</span></span><br><span class="line"><span class="language-css"><span class="selector-class">.bar01</span>&#123;<span class="attribute">left</span>:<span class="number">0px</span>;&#125;</span></span><br><span class="line"><span class="language-css"><span class="selector-class">.bar02</span>&#123;<span class="attribute">left</span>:<span class="number">643px</span>;&#125;</span></span><br><span class="line"><span class="language-css"><span class="selector-class">.bar03</span>&#123;<span class="attribute">left</span>:<span class="number">664px</span>;&#125;</span></span><br><span class="line"><span class="language-css"><span class="selector-class">.bar04</span>&#123;<span class="attribute">left</span>:<span class="number">685px</span>;&#125;</span></span><br><span class="line"><span class="language-css"><span class="selector-class">.bar05</span>&#123;<span class="attribute">left</span>:<span class="number">706px</span>;&#125;</span></span><br><span class="line"><span class="language-css"><span class="selector-class">.bar01</span> <span class="selector-tag">span</span>&#123;<span class="attribute">background</span>:<span class="number">#09E0B5</span>;&#125;</span></span><br><span class="line"><span class="language-css"><span class="selector-class">.bar02</span> <span class="selector-tag">span</span>&#123;<span class="attribute">background</span>:<span class="number">#3D7FBB</span>;&#125;</span></span><br><span class="line"><span class="language-css"><span class="selector-class">.bar03</span> <span class="selector-tag">span</span>&#123;<span class="attribute">background</span>:<span class="number">#5CA716</span>;&#125;</span></span><br><span class="line"><span class="language-css"><span class="selector-class">.bar04</span> <span class="selector-tag">span</span>&#123;<span class="attribute">background</span>:<span class="number">#F28B24</span>;&#125;</span></span><br><span class="line"><span class="language-css"><span class="selector-class">.bar05</span> <span class="selector-tag">span</span>&#123;<span class="attribute">background</span>:<span class="number">#7C0070</span>;&#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">$(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">$(<span class="string">&#x27;#accordion li&#x27;</span>).<span class="title function_">click</span>(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">$(<span class="variable language_">this</span>).<span class="title function_">animate</span>(&#123;<span class="attr">left</span>:$(<span class="variable language_">this</span>).<span class="title function_">index</span>()*<span class="number">21</span>&#125;);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">$(<span class="variable language_">this</span>).<span class="title function_">prevAll</span>().<span class="title function_">each</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">$(<span class="variable language_">this</span>).<span class="title function_">animate</span>(&#123;<span class="attr">left</span>:$(<span class="variable language_">this</span>).<span class="title function_">index</span>()*<span class="number">21</span>&#125;);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">&#125;);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">$(<span class="variable language_">this</span>).<span class="title function_">nextAll</span>().<span class="title function_">each</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">$(<span class="variable language_">this</span>).<span class="title function_">animate</span>(&#123;<span class="attr">left</span>:(<span class="number">727</span>-(<span class="number">5</span>-$(<span class="variable language_">this</span>).<span class="title function_">index</span>())*<span class="number">21</span>)&#125;);</span></span><br><span class="line"><span class="language-javascript">&#125;);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">&#125;);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">&#125;)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>手风琴效果<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;accordion&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;bar01&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>非洲景色01<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;images/001.jpg&quot;</span> /&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;bar02&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>非洲景色02<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;images/002.jpg&quot;</span> /&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;bar03&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>非洲景色03<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;images/003.jpg&quot;</span> /&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;bar04&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>非洲景色04<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;images/004.jpg&quot;</span> /&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;bar05&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>非洲景色05<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;images/005.jpg&quot;</span> /&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="倒计时弹框"><a href="#倒计时弹框" class="headerlink" title="倒计时弹框"></a>倒计时弹框</h2><p><img src="https://raw.githubusercontent.com/pengyirui/blog_img/main/2020-05-25-5.gif" alt="效果截图"></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">&quot;text/css&quot;</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-class">.menu</span>&#123;</span></span><br><span class="line"><span class="language-css"><span class="attribute">height</span>:<span class="number">80px</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">background-color</span>:gold;</span></span><br><span class="line"><span class="language-css"><span class="attribute">position</span>:fixed;</span></span><br><span class="line"><span class="language-css"><span class="attribute">width</span>:<span class="number">960px</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">top</span>:<span class="number">0px</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">left</span>:<span class="number">50%</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">margin-left</span>:-<span class="number">480px</span>;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"><span class="selector-tag">p</span>&#123;</span></span><br><span class="line"><span class="language-css"><span class="attribute">text-align</span>:center;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"><span class="selector-class">.popup</span>&#123;</span></span><br><span class="line"><span class="language-css"><span class="attribute">width</span>:<span class="number">500px</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">height</span>:<span class="number">300px</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">border</span>:<span class="number">1px</span> solid <span class="number">#000</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">background-color</span>:<span class="number">#fff</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">position</span>:fixed;</span></span><br><span class="line"><span class="language-css"><span class="attribute">left</span>:<span class="number">50%</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">margin-left</span>:-<span class="number">251px</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">top</span>:<span class="number">50%</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">margin-top</span>:-<span class="number">151px</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">z-index</span>:<span class="number">9999</span>;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"><span class="selector-class">.popup</span> <span class="selector-tag">h2</span>&#123;</span></span><br><span class="line"><span class="language-css"><span class="attribute">background-color</span>:gold;</span></span><br><span class="line"><span class="language-css"><span class="attribute">margin</span>:<span class="number">10px</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">height</span>:<span class="number">40px</span>;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-class">.mask</span>&#123;</span></span><br><span class="line"><span class="language-css"><span class="attribute">position</span>:fixed;</span></span><br><span class="line"><span class="language-css"><span class="attribute">width</span>:<span class="number">100%</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">height</span>:<span class="number">100%</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">background-color</span>:<span class="number">#000</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">left</span>:<span class="number">0</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">top</span>:<span class="number">0</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">opacity</span>:<span class="number">0.5</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">z-index</span>:<span class="number">9998</span>;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"><span class="selector-class">.pop_con</span>&#123;</span></span><br><span class="line"><span class="language-css"><span class="attribute">display</span>:none;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="variable language_">window</span>.<span class="property">onload</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">var</span> oPop = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;pop_con&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">var</span> oBtn = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;btn&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">var</span> oPop_tip = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;pop_tip&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">var</span> iTime = <span class="number">5</span>;</span></span><br><span class="line"><span class="language-javascript">oBtn.<span class="property">onclick</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">oPop.<span class="property">style</span>.<span class="property">display</span> = <span class="string">&#x27;block&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript"><span class="comment">/*</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">var timer = setInterval(fnDaojishi,1000);</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript"></span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">function fnDaojishi()&#123;</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">iTime--;</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">oPop_tip.innerHTML = &#x27;还有&#x27;+ iTime +&#x27;秒钟关闭弹框&#x27;;</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript"></span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">if(iTime==0)</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">&#123;</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">oPop.style.display = &#x27;none&#x27;;</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">clearInterval(timer);</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">&#125;</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">&#125;</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">*/</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">var</span> timer = <span class="built_in">setInterval</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">iTime--;</span></span><br><span class="line"><span class="language-javascript">oPop_tip.<span class="property">innerHTML</span> = <span class="string">&#x27;还有&#x27;</span>+ iTime +<span class="string">&#x27;秒钟关闭弹框&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">if</span>(iTime==<span class="number">0</span>)</span></span><br><span class="line"><span class="language-javascript">&#123;</span></span><br><span class="line"><span class="language-javascript">oPop.<span class="property">style</span>.<span class="property">display</span> = <span class="string">&#x27;none&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript"><span class="built_in">clearInterval</span>(timer);</span></span><br><span class="line"><span class="language-javascript">iTime=<span class="number">5</span>;</span></span><br><span class="line"><span class="language-javascript">oPop_tip.<span class="property">innerHTML</span> = <span class="string">&#x27;还有5秒钟关闭弹框&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript">&#125;,<span class="number">1000</span>);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;menu&quot;</span>&gt;</span>菜单文字<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;pop_con&quot;</span> <span class="attr">id</span>=<span class="string">&quot;pop_con&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;popup&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>弹框的标题<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">id</span>=<span class="string">&quot;pop_tip&quot;</span>&gt;</span>还有5秒钟关闭弹框<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;mask&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">name</span>=<span class="string">&quot;&quot;</span> <span class="attr">value</span>=<span class="string">&quot;弹出弹框&quot;</span> <span class="attr">id</span>=<span class="string">&quot;btn&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>网页文字<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>网页文字<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>网页文字<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="选项卡"><a href="#选项卡" class="headerlink" title="选项卡"></a>选项卡</h2><p><img src="https://raw.githubusercontent.com/pengyirui/blog_img/main/2020-05-25-6.gif" alt="效果截图"></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">&quot;text/css&quot;</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-class">.btns</span> <span class="selector-tag">input</span>&#123;</span></span><br><span class="line"><span class="language-css"><span class="attribute">width</span>:<span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">height</span>:<span class="number">40px</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">background-color</span>:<span class="number">#ddd</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">border</span>:<span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-class">.btns</span> <span class="selector-class">.current</span>&#123;</span></span><br><span class="line"><span class="language-css"><span class="attribute">background-color</span>:gold;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-class">.cons</span> <span class="selector-tag">div</span>&#123;</span></span><br><span class="line"><span class="language-css"><span class="attribute">width</span>:<span class="number">500px</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">height</span>:<span class="number">300px</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">background-color</span>:gold;</span></span><br><span class="line"><span class="language-css"><span class="attribute">display</span>:none;</span></span><br><span class="line"><span class="language-css"><span class="attribute">text-align</span>:center;</span></span><br><span class="line"><span class="language-css"><span class="attribute">line-height</span>:<span class="number">300px</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">font-size</span>:<span class="number">30px</span>;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-class">.cons</span> <span class="selector-class">.active</span>&#123;</span></span><br><span class="line"><span class="language-css"><span class="attribute">display</span>: block;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;js/jquery-1.12.4.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">$(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">var</span> $btn = $(<span class="string">&#x27;.btns input&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">var</span> $div = $(<span class="string">&#x27;.cons div&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">$btn.<span class="title function_">click</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript"><span class="comment">// this 指的是原生的this，它表示当前点击的对象，使用jquery的对象需要用$(this)</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="comment">// 当前点击的按钮加上current样式后，除了当前，其他的按钮去掉current样式</span></span></span><br><span class="line"><span class="language-javascript">$(<span class="variable language_">this</span>).<span class="title function_">addClass</span>(<span class="string">&#x27;current&#x27;</span>).<span class="title function_">siblings</span>().<span class="title function_">removeClass</span>(<span class="string">&#x27;current&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="comment">//alert( $(this).index() ; //弹出当前按钮的索引值</span></span></span><br><span class="line"><span class="language-javascript"><span class="comment">// 当前点击的按钮对应索引值的div加上active样式，其他的去掉active样式</span></span></span><br><span class="line"><span class="language-javascript">$div.<span class="title function_">eq</span>( $(<span class="variable language_">this</span>).<span class="title function_">index</span>() ).<span class="title function_">addClass</span>(<span class="string">&#x27;active&#x27;</span>).<span class="title function_">siblings</span>().<span class="title function_">removeClass</span>(<span class="string">&#x27;active&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">&#125;)</span></span><br><span class="line"><span class="language-javascript">&#125;)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;btns&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">name</span>=<span class="string">&quot;&quot;</span> <span class="attr">value</span>=<span class="string">&quot;01&quot;</span> <span class="attr">class</span>=<span class="string">&quot;current&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">name</span>=<span class="string">&quot;&quot;</span> <span class="attr">value</span>=<span class="string">&quot;02&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">name</span>=<span class="string">&quot;&quot;</span> <span class="attr">value</span>=<span class="string">&quot;03&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;cons&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;active&quot;</span>&gt;</span>选项卡一的内容<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span>选项卡二的内容<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span>选项卡三的内容<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="滑动选项卡"><a href="#滑动选项卡" class="headerlink" title="滑动选项卡"></a>滑动选项卡</h2><p><img src="https://raw.githubusercontent.com/pengyirui/blog_img/main/2020-05-25-8.gif" alt="效果截图"></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">&quot;text/css&quot;</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-class">.btns</span> <span class="selector-tag">input</span>&#123;</span></span><br><span class="line"><span class="language-css"><span class="attribute">width</span>:<span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">height</span>:<span class="number">40px</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">background-color</span>:<span class="number">#ddd</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">border</span>:<span class="number">0</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">outline</span>:none;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"><span class="selector-class">.btns</span> <span class="selector-class">.current</span>&#123;</span></span><br><span class="line"><span class="language-css"><span class="attribute">background-color</span>:gold;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"><span class="selector-class">.cons</span>&#123;</span></span><br><span class="line"><span class="language-css"><span class="attribute">width</span>:<span class="number">500px</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">height</span>:<span class="number">300px</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">overflow</span>:hidden;</span></span><br><span class="line"><span class="language-css"><span class="attribute">position</span>:relative;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"><span class="selector-class">.slides</span>&#123;</span></span><br><span class="line"><span class="language-css"><span class="attribute">width</span>:<span class="number">1500px</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">height</span>:<span class="number">300px</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">position</span>:absolute;</span></span><br><span class="line"><span class="language-css"><span class="attribute">left</span>:<span class="number">0</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">top</span>:<span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"><span class="selector-class">.cons</span> <span class="selector-class">.slides</span> <span class="selector-tag">div</span>&#123;</span></span><br><span class="line"><span class="language-css"><span class="attribute">width</span>:<span class="number">500px</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">height</span>:<span class="number">300px</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">background-color</span>:gold;</span></span><br><span class="line"><span class="language-css"><span class="attribute">text-align</span>:center;</span></span><br><span class="line"><span class="language-css"><span class="attribute">line-height</span>:<span class="number">300px</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">font-size</span>:<span class="number">30px</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">float</span><span class="selector-pseudo">:left</span>;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-class">.cons</span> <span class="selector-class">.active</span>&#123;</span></span><br><span class="line"><span class="language-css"><span class="attribute">display</span>: block;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;js/jquery-1.12.4.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">$(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">var</span> $btn = $(<span class="string">&#x27;.btns input&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">var</span> $slides = $(<span class="string">&#x27;.cons .slides&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">$btn.<span class="title function_">click</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript"><span class="comment">// this 指的是原生的this，它表示当前点击的对象，使用jquery的对象需要用$(this)</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="comment">// 当前点击的按钮加上current样式后，除了当前，其他的按钮去掉current样式</span></span></span><br><span class="line"><span class="language-javascript">$(<span class="variable language_">this</span>).<span class="title function_">addClass</span>(<span class="string">&#x27;current&#x27;</span>).<span class="title function_">siblings</span>().<span class="title function_">removeClass</span>(<span class="string">&#x27;current&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">$slides.<span class="title function_">stop</span>().<span class="title function_">animate</span>(&#123;<span class="string">&#x27;left&#x27;</span>:-<span class="number">500</span>*$(<span class="variable language_">this</span>).<span class="title function_">index</span>()&#125;);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">&#125;)</span></span><br><span class="line"><span class="language-javascript">&#125;)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;btns&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">name</span>=<span class="string">&quot;&quot;</span> <span class="attr">value</span>=<span class="string">&quot;01&quot;</span> <span class="attr">class</span>=<span class="string">&quot;current&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">name</span>=<span class="string">&quot;&quot;</span> <span class="attr">value</span>=<span class="string">&quot;02&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">name</span>=<span class="string">&quot;&quot;</span> <span class="attr">value</span>=<span class="string">&quot;03&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;cons&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;slides&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span>选项卡一的内容<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span>选项卡二的内容<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span>选项卡三的内容<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="顶置菜单栏"><a href="#顶置菜单栏" class="headerlink" title="顶置菜单栏"></a>顶置菜单栏</h2><p><img src="https://raw.githubusercontent.com/pengyirui/blog_img/main/2020-05-25-9.gif" alt="效果截图"></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">&quot;text/css&quot;</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-tag">body</span>&#123;</span></span><br><span class="line"><span class="language-css"><span class="attribute">margin</span>:<span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-class">.banner</span>&#123;</span></span><br><span class="line"><span class="language-css"><span class="attribute">width</span>:<span class="number">960px</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">height</span>:<span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">background-color</span>:cyan;</span></span><br><span class="line"><span class="language-css"><span class="attribute">margin</span>:<span class="number">0</span> auto;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-class">.menu</span>&#123;</span></span><br><span class="line"><span class="language-css"><span class="attribute">width</span>:<span class="number">960px</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">height</span>:<span class="number">80px</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">background-color</span>:gold;</span></span><br><span class="line"><span class="language-css"><span class="attribute">margin</span>:<span class="number">0</span> auto;</span></span><br><span class="line"><span class="language-css"><span class="attribute">text-align</span>:center;</span></span><br><span class="line"><span class="language-css"><span class="attribute">line-height</span>:<span class="number">80px</span>;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-class">.menu_back</span>&#123;</span></span><br><span class="line"><span class="language-css"><span class="attribute">width</span>:<span class="number">960px</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">height</span>:<span class="number">80px</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">margin</span>:<span class="number">0</span> auto;</span></span><br><span class="line"><span class="language-css"><span class="attribute">display</span>:none;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-tag">p</span>&#123;</span></span><br><span class="line"><span class="language-css"><span class="attribute">text-align</span>:center;</span></span><br><span class="line"><span class="language-css"><span class="attribute">color</span>:red;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-class">.totop</span>&#123;</span></span><br><span class="line"><span class="language-css"><span class="attribute">width</span>:<span class="number">60px</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">height</span>:<span class="number">60px</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">background-color</span>:<span class="number">#000</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">color</span>:<span class="number">#fff</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">position</span>:fixed;</span></span><br><span class="line"><span class="language-css"><span class="attribute">right</span>:<span class="number">20px</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">bottom</span>:<span class="number">50px</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">line-height</span>:<span class="number">60px</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">text-align</span>:center;</span></span><br><span class="line"><span class="language-css"><span class="attribute">font-size</span>:<span class="number">40px</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">border-radius</span>:<span class="number">50%</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">cursor</span>:pointer;</span></span><br><span class="line"><span class="language-css"><span class="attribute">display</span>:none;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;js/jquery-1.12.4.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">$(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">$menu = $(<span class="string">&#x27;.menu&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">$menu_back = $(<span class="string">&#x27;.menu_back&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">$totop = $(<span class="string">&#x27;.totop&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">$(<span class="variable language_">window</span>).<span class="title function_">scroll</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript"><span class="comment">//console.log(&#x27;abc&#x27;);</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">var</span> iNum = $(<span class="variable language_">document</span>).<span class="title function_">scrollTop</span>();</span></span><br><span class="line"><span class="language-javascript"><span class="comment">//document.title = iNum;</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">if</span>(iNum&gt;<span class="number">200</span>)</span></span><br><span class="line"><span class="language-javascript">&#123;</span></span><br><span class="line"><span class="language-javascript">$menu.<span class="title function_">css</span>(&#123;</span></span><br><span class="line"><span class="language-javascript"><span class="string">&#x27;position&#x27;</span>:<span class="string">&#x27;fixed&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript"><span class="string">&#x27;left&#x27;</span>:<span class="string">&#x27;50%&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript"><span class="string">&#x27;top&#x27;</span>:<span class="number">0</span>,</span></span><br><span class="line"><span class="language-javascript"><span class="string">&#x27;marginLeft&#x27;</span>:-<span class="number">480</span></span></span><br><span class="line"><span class="language-javascript">&#125;);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">$menu_back.<span class="title function_">show</span>();</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">else</span></span></span><br><span class="line"><span class="language-javascript">&#123;</span></span><br><span class="line"><span class="language-javascript">$menu.<span class="title function_">css</span>(&#123;</span></span><br><span class="line"><span class="language-javascript"><span class="string">&#x27;position&#x27;</span>:<span class="string">&#x27;static&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript"><span class="string">&#x27;marginLeft&#x27;</span>:<span class="string">&#x27;auto&#x27;</span></span></span><br><span class="line"><span class="language-javascript">&#125;);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">$menu_back.<span class="title function_">hide</span>();</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">if</span>(iNum&gt;<span class="number">400</span>)&#123;</span></span><br><span class="line"><span class="language-javascript">$totop.<span class="title function_">fadeIn</span>();</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">else</span></span></span><br><span class="line"><span class="language-javascript">&#123;</span></span><br><span class="line"><span class="language-javascript">$totop.<span class="title function_">fadeOut</span>();</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">&#125;)</span></span><br><span class="line"><span class="language-javascript">$totop.<span class="title function_">click</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">$(<span class="string">&#x27;html,body&#x27;</span>).<span class="title function_">animate</span>(&#123;<span class="string">&#x27;scrollTop&#x27;</span>:<span class="number">0</span>&#125;);</span></span><br><span class="line"><span class="language-javascript">&#125;)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">&#125;)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;banner&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;menu&quot;</span>&gt;</span>菜单<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;menu_back&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;totop&quot;</span>&gt;</span>↑<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>文档内容<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>文档内容<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>文档内容<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>文档内容<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>文档内容<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="层级菜单"><a href="#层级菜单" class="headerlink" title="层级菜单"></a>层级菜单</h2><p><img src="https://raw.githubusercontent.com/pengyirui/blog_img/main/2020-05-25-7.gif" alt="效果截图"></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>层级菜单<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">&quot;text/css&quot;</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-tag">body</span>&#123;</span></span><br><span class="line"><span class="language-css"><span class="attribute">font-family</span>:<span class="string">&#x27;Microsoft Yahei&#x27;</span>;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"><span class="selector-tag">body</span>,<span class="selector-tag">ul</span>&#123;</span></span><br><span class="line"><span class="language-css"><span class="attribute">margin</span>:<span class="number">0px</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">padding</span>:<span class="number">0px</span>;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-tag">ul</span>&#123;<span class="attribute">list-style</span>:none;&#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-class">.menu</span>&#123;</span></span><br><span class="line"><span class="language-css"><span class="attribute">width</span>:<span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">margin</span>:<span class="number">20px</span> auto <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-class">.menu</span> <span class="selector-class">.level1</span>,<span class="selector-class">.menu</span> <span class="selector-tag">li</span> <span class="selector-tag">ul</span> <span class="selector-tag">a</span>&#123;</span></span><br><span class="line"><span class="language-css"><span class="attribute">display</span>:block;</span></span><br><span class="line"><span class="language-css"><span class="attribute">width</span>:<span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">height</span>:<span class="number">30px</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">line-height</span>:<span class="number">30px</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">text-decoration</span>:none;</span></span><br><span class="line"><span class="language-css"><span class="attribute">background-color</span>:<span class="number">#3366cc</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">color</span>:<span class="number">#fff</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">font-size</span>:<span class="number">16px</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">text-indent</span>:<span class="number">10px</span>;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-class">.menu</span> <span class="selector-class">.level1</span>&#123;</span></span><br><span class="line"><span class="language-css"><span class="attribute">border-bottom</span>:<span class="number">1px</span> solid <span class="number">#afc6f6</span>;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-class">.menu</span> <span class="selector-tag">li</span> <span class="selector-tag">ul</span> <span class="selector-tag">a</span>&#123;</span></span><br><span class="line"><span class="language-css"><span class="attribute">font-size</span>:<span class="number">14px</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">text-indent</span>:<span class="number">20px</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">background-color</span>:<span class="number">#7aa1ef</span>;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-class">.menu</span> <span class="selector-tag">li</span> <span class="selector-tag">ul</span> <span class="selector-tag">li</span>&#123;</span></span><br><span class="line"><span class="language-css"><span class="attribute">border-bottom</span>:<span class="number">1px</span> solid <span class="number">#afc6f6</span>;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-class">.menu</span> <span class="selector-tag">li</span> <span class="selector-tag">ul</span>&#123;</span></span><br><span class="line"><span class="language-css"><span class="attribute">display</span>:none;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-class">.menu</span> <span class="selector-tag">li</span> <span class="selector-tag">ul</span><span class="selector-class">.current</span>&#123;</span></span><br><span class="line"><span class="language-css"><span class="attribute">display</span>:block;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-class">.menu</span> <span class="selector-tag">li</span> <span class="selector-tag">ul</span> <span class="selector-tag">li</span> <span class="selector-tag">a</span><span class="selector-pseudo">:hover</span>&#123;</span></span><br><span class="line"><span class="language-css"><span class="attribute">background-color</span>:<span class="number">#f6b544</span>;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;js/jquery-1.12.4.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">$(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">$(<span class="string">&#x27;.level1&#x27;</span>).<span class="title function_">click</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="comment">//当前点击的元素紧挨的同辈元素向下展开，再跳到此元素的父级(li),再跳到此父级的其他的同辈元素(li),选择其他同辈元素(li)的子元素ul，然后将它向上收起。</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="comment">// 通过stop() 可以修正反复点击导致的持续动画的问题</span></span></span><br><span class="line"><span class="language-javascript">$(<span class="variable language_">this</span>).<span class="title function_">next</span>().<span class="title function_">stop</span>().<span class="title function_">slideToggle</span>().<span class="title function_">parent</span>().<span class="title function_">siblings</span>().<span class="title function_">children</span>(<span class="string">&#x27;ul&#x27;</span>).<span class="title function_">slideUp</span>();</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">&#125;)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">&#125;)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">&quot;menu&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span> <span class="attr">class</span>=<span class="string">&quot;level1&quot;</span>&gt;</span>水果<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">&quot;current&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>苹果<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>梨子<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>葡萄<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>火龙果<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span> <span class="attr">class</span>=<span class="string">&quot;level1&quot;</span>&gt;</span>海鲜<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>蛏子<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>扇贝<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>龙虾<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>象拔蚌<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span> <span class="attr">class</span>=<span class="string">&quot;level1&quot;</span>&gt;</span>肉类<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>内蒙古羊肉<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>进口牛肉<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>野猪肉<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span> <span class="attr">class</span>=<span class="string">&quot;level1&quot;</span>&gt;</span>蔬菜<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>娃娃菜<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>西红柿<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>西芹<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>胡萝卜<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span> <span class="attr">class</span>=<span class="string">&quot;level1&quot;</span>&gt;</span>速冻<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>冰淇淋<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>湾仔码头<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>海参<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>牛肉丸<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 前端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>看看全国有多少个你</title>
      <link href="/posts/38f1.html"/>
      <url>/posts/38f1.html</url>
      
        <content type="html"><![CDATA[<p>最近“互联网+政务服务”平台新出了一个【查询同名人数】功能，感觉还挺有趣的</p><p>主要是因为公安部的平台，更加靠谱。不会像百度一样出一些乱七八糟的东西</p><p>首页链接：<a href="https://zwfw.mps.gov.cn(有时候需要复制到浏览器打开)/">https://zwfw.mps.gov.cn（有时候需要复制到浏览器打开）</a></p><p>打开首页点击【查询同名人数】<br><img src="https://raw.githubusercontent.com/pengyirui/blog_img/main/2020-05-05-01.png"></p><p>使用服务的时候需要注册，毕竟是公安部的平台，还是很靠谱的。<br><img src="https://raw.githubusercontent.com/pengyirui/blog_img/main/2020-05-05-02.png"><br><img src="https://raw.githubusercontent.com/pengyirui/blog_img/main/2020-05-05-03.png"></p><p>开始查询会弹出提示和选择选项<br><img src="https://raw.githubusercontent.com/pengyirui/blog_img/main/2020-05-05-04.png"></p><p>看看这次【多人运动】多少人受到牵连😂<br><img src="https://raw.githubusercontent.com/pengyirui/blog_img/main/2020-05-05-05.png"></p>]]></content>
      
      
      
        <tags>
            
            <tag> 链接 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>录制GIF</title>
      <link href="/posts/652f.html"/>
      <url>/posts/652f.html</url>
      
        <content type="html"><![CDATA[<p>推荐软件：GifCam<br>前段时间我有这么一种需求，需要录制jquery渲染出来是怎么运动的(直观方便记忆)，于是找到了这么一款软件<br><img src="https://raw.githubusercontent.com/pengyirui/blog_img/main/2020-04-30-01.png"><br>下载链接：<a href="https://pengyirui.lanzouv.com/ic28ftg">https://pengyirui.lanzouv.com/ic28ftg</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> 软件 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>批量重命名</title>
      <link href="/posts/7b92.html"/>
      <url>/posts/7b92.html</url>
      
        <content type="html"><![CDATA[<p>推荐软件：ReNamer Pro v7.1.0<br>有时候我们有这么一种需求，图片按顺序排列（如1、2、3…；1-1、1-2、1-3…）如果一个个打实在是太麻烦。可以用这个软件进行批量操作，而且规则由你来定义，自由度极高。<br><img src="https://raw.githubusercontent.com/pengyirui/blog_img/main/2020-04-29-01.png"><br><img src="https://raw.githubusercontent.com/pengyirui/blog_img/main/2020-04-29-02.png"></p><p>下载链接：<a href="https://pengyirui.lanzous.com/ic27x6f">https://pengyirui.lanzous.com/ic27x6f</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> 软件 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>推荐几本有趣的书</title>
      <link href="/posts/7e3a.html"/>
      <url>/posts/7e3a.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>今天是4月23日也是世界读书日，借此机会分享几本我觉得还不错的书给大家。</p></blockquote><p>《影响力》 – 用户心理<br><img src="https://raw.githubusercontent.com/pengyirui/blog_img/main/2020-04-23-01.png"><br>最推荐读的一本书，在这本书中，罗伯特.西奥迪尼博士为我们一一拆解他们的招术，学会保护自己以及让这6大秘笈为我们所用。读过此书之后，定能使你做到以下两件事：一是当你真正的意图是要说“不”时，你不会再说“是”，二是可以令你自己变得比以前更具影响力。</p><hr><p>《小狗钱钱》 – 对金钱的秘密和真相，以及投资、理财的办法进行扫盲。<br><img src="https://raw.githubusercontent.com/pengyirui/blog_img/main/2020-04-23-02.png"><br>以绘本的形式讲述金钱的概念（小朋友都看得懂那种）</p><hr><p>《浪潮之巅》（第四版）（上下册） – 互联网发展<br><img src="https://raw.githubusercontent.com/pengyirui/blog_img/main/2020-04-23-03.png"><br>一个企业的发展与崛起，绝非只是空有领导强人即可达成。任何的决策、同期的商业环境、各种能量的此消彼长，也在影响着企业的兴衰。《浪潮之巅》不只是一部历史书 ，除了讲 述 科技顶尖企业的发展规律， 对于华尔街如何左右科技公司，以及金融风暴对科技产业的冲击，也多有着墨。</p><hr><p>《参与感》 – 小米口碑营销内部手册<br><img src="https://raw.githubusercontent.com/pengyirui/blog_img/main/2020-04-23-04.png"><br>雷军：猪会飞的背后，参与感就是“台风”。小米的成功不是没有道理的，能从中学习到小米这么年轻的企业能这么快进入世界五百强的队列中。</p><hr><p>《怪诞行为学》 – 可预测的非理性<br><img src="https://raw.githubusercontent.com/pengyirui/blog_img/main/2020-04-23-05.png"><br>人们的行为和决策常常偏离理性，远非你想象的那样完美！</p><hr><p>《思考，快与慢》 – 要有自己的独立思考<br><img src="https://raw.githubusercontent.com/pengyirui/blog_img/main/2020-04-23-06.png"><br>个人认为比较难读懂的一本书，但你读懂后又会觉得受益匪浅。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 书本 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>下载高质量的音乐（已失效）</title>
      <link href="/posts/7372.html"/>
      <url>/posts/7372.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>Spotify官网：<a href="https://www.spotify.com/">https://www.spotify.com</a> 下载Spotify可能需要翻墙，下载完后常规安装并且注册登录账号，这里不再赘述。</p></blockquote><blockquote><p>Spotify下载链接<a href="https://pengyirui.lanzous.com/iblbkgj">https://pengyirui.lanzous.com/iblbkgj</a><br>SIDIFY与注册机下载链接：<a href="https://pengyirui.lanzous.com/ibkqvad">https://pengyirui.lanzous.com/ibkqvad</a></p></blockquote><p>首先打开SIDIFY,选择好安装路径，并且选择好语言<br><img src="https://raw.githubusercontent.com/pengyirui/blog_img/main/2020-04-18-01.png"></p><p>先不要运行软件，这里点完成即可<br><img src="https://raw.githubusercontent.com/pengyirui/blog_img/main/2020-04-18-02.png"></p><p>打开注册机开始破解，点击PATCH后弹出弹框，选择是，然后选择SIDIFY的安装路径<br><img src="https://raw.githubusercontent.com/pengyirui/blog_img/main/2020-04-18-03.png"><br><img src="https://raw.githubusercontent.com/pengyirui/blog_img/main/2020-04-18-04.png"></p><p>我安装的路径是<code>SIDIFY/</code>，找到并选择anvsoftdrm.dll这个文件<br><img src="https://raw.githubusercontent.com/pengyirui/blog_img/main/2020-04-18-05.png"></p><p>Release Name显示绿色就代表破解成功<br><img src="https://raw.githubusercontent.com/pengyirui/blog_img/main/2020-04-18-06.png"></p><p>打开Spotify选择一首要下载的歌曲，把歌曲拖拽到SIDIFY松开即可解析音乐<br><img src="https://raw.githubusercontent.com/pengyirui/blog_img/main/2020-04-18-07.png"><br>点击确定即可转换<br><img src="https://raw.githubusercontent.com/pengyirui/blog_img/main/2020-04-18-08.png"></p><p>这样表示转换成功<br><img src="https://raw.githubusercontent.com/pengyirui/blog_img/main/2020-04-18-09.png"></p><p>如果想下载歌单的歌曲，复制链接到搜索框，然后回车即可解析歌曲<br><img src="https://raw.githubusercontent.com/pengyirui/blog_img/main/2020-04-18-10.png"><br><img src="https://raw.githubusercontent.com/pengyirui/blog_img/main/2020-04-18-11.png"><br><img src="https://raw.githubusercontent.com/pengyirui/blog_img/main/2020-04-18-12.gif" alt="大功告成~~"></p>]]></content>
      
      
      
        <tags>
            
            <tag> 软件 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据库设计 与 分库分表</title>
      <link href="/posts/b44f.html"/>
      <url>/posts/b44f.html</url>
      
        <content type="html"><![CDATA[<h3 id="数据库设计"><a href="#数据库设计" class="headerlink" title="数据库设计"></a>数据库设计</h3><ul><li>关系型数据库建议在E-R模型的基础上，我们需要根据产品经理的设计策划，抽取出来模型与关系，制定出表结构，这是项目开始的第一步</li><li>在开发中有很多设计数据库的软件，常用的如power designer，db desinger等，这些软件可以直观的看到实体及实体间的关系</li><li>设计数据库，可能是由专门的数据库设计人员完成，也可能是由开发组成员完成，一般是项目经理带领组员来完成</li><li>现阶段不需要独立完成数据库设计，但是要注意积累一些这方面的经验</li></ul><h3 id="三范式"><a href="#三范式" class="headerlink" title="三范式"></a>三范式</h3><ul><li>经过研究和对使用中问题的总结，对于设计数据库提出了一些规范，这些规范被称为范式(Normal Form)</li><li>目前有迹可寻的共有8种范式，一般需要遵守3范式即可<ul><li>第一范式（1NF）：强调的是列的原子性，即列不能够再分成其他几列。 </li><li>第二范式（2NF）：首先是 1NF，另外包含两部分内容，一是表必须有一个主键；二是没有包含在主键中的列必须完全依赖于主键，而不能只依赖于主键的一部分。 </li><li>第三范式（3NF）：首先是 2NF，另外非主键列必须直接依赖于主键，不能存在传递依赖。即不能存在：非主键列 A 依赖于非主键列 B，非主键列 B 依赖于主键的情况。 </li></ul></li></ul><h3 id="E-R模型"><a href="#E-R模型" class="headerlink" title="E-R模型"></a>E-R模型</h3><ul><li>E表示entry，实体，设计实体就像定义一个类一样，指定从哪些方面描述对象，一个实体转换为数据库中的一个表</li><li>R表示relationship，关系，关系描述两个实体之间的对应规则，关系的类型包括包括一对一、一对多、多对多</li><li>关系也是一种数据，需要通过一个字段存储在表中</li><li>实体A对实体B为1对1，则在表A或表B中创建一个字段，存储另一个表的主键值</li></ul><h3 id="数据库瓶颈"><a href="#数据库瓶颈" class="headerlink" title="数据库瓶颈"></a>数据库瓶颈</h3><p>不管是 IO 瓶颈还是 CPU 瓶颈，最终都会导致数据库的活跃连接数增加，进而逼近甚至达到数据库可承载的活跃连接数的阈值。</p><p>在业务 Service 来看， 就是可用数据库连接少甚至无连接可用，接下来就可以想象了（并发量、吞吐量、崩溃）。</p><ol><li>IO 瓶颈：</li></ol><ul><li>第一种：磁盘读 IO 瓶颈，热点数据太多，数据库缓存放不下，每次查询会产生大量的 IO，降低查询速度→分库和垂直分表。</li><li>第二种：网络 IO 瓶颈，请求的数据太多，网络带宽不够→分库。<br>.</li></ul><ol start="2"><li>CPU 瓶颈：</li></ol><ul><li>第一种：SQL 问题：如 SQL 中包含 join，group by，order by，非索引字段条件查询等，增加 CPU 运算的操作→SQL 优化，建立合适的索引，在业务 Service 层进行业务计算。</li><li>第二种：单表数据量太大，查询时扫描的行太多，SQL 效率低，增加 CPU 运算的操作→水平分表。</li></ul><h3 id="什么时候考虑分库分表"><a href="#什么时候考虑分库分表" class="headerlink" title="什么时候考虑分库分表"></a>什么时候考虑分库分表</h3><ol><li><p>能不分就不分</p><p> 并不是所有表都需要切分，主要还是看数据的增长速度。切分后在某种程度上提升了业务的复杂程度。不到万不得已不要轻易使用分库分表这个“大招”，避免“过度设计”和“过早优化”。</p><p> 分库分表之前，先尽力做力所能及的优化：升级硬件、升级网络、读写分离、索引优化等。当数据量达到单表瓶颈后，在考虑分库分表。</p></li><li><p>数据量过大，正常运维影响业务访问</p><p> 这里的运维是指：</p><ul><li>对数据库备份，如果单表太大，备份时需要大量的磁盘 IO 和网络 IO。</li><li>对一个很大的表做 DDL，MySQL会锁住整个表，这个时间会很长，这段时间业务不能访问此表，影响很大。</li><li>大表经常访问和更新，就更有可能出现锁等待。</li></ul></li><li><p>随着业务发展，需要对某些字段垂直拆分<br>这里就不举例了，在实际业务中都可能会碰到，有些不经常访问或者更新频率低的字段应该从大表中分离出去。</p></li><li><p>数据量快速增长<br>随着业务的快速发展，单表中的数据量会持续增长，当性能接近瓶颈时，就需要考虑水平切分，做分库分表了。</p></li></ol><h3 id="扩展阅读"><a href="#扩展阅读" class="headerlink" title="扩展阅读"></a>扩展阅读</h3><p>58到家数据库30条军规解读 <a href="https://mp.weixin.qq.com/s/Yjh_fPgrjuhhOZyVtRQ-SA">链接</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> SQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PC端双开微信</title>
      <link href="/posts/6897.html"/>
      <url>/posts/6897.html</url>
      
        <content type="html"><![CDATA[<p>首先在桌面找到微信的快捷方式然后用“鼠标右键-属性”确定下目标位置，比如我的就是这个位置</p><p><img src="https://raw.githubusercontent.com/pengyirui/blog_img/main/2020-04-15-01.png" alt="我微信安装的位置"></p><p>然后新建个文本文档，然后把目标的位置粘贴进去，并简单修改下，想想要开几个微信，就贴几行。</p><blockquote><p>如果当中有其他符号如括号等则需要添加双引号<br>如：<br><code>&quot;D:\Program Files (x86)\Tencent\WeChat\WeChat.exe&quot;</code><br>改成<br><code>start D:\&quot;Program Files (x86)&quot;\Tencent\WeChat\WeChat.exe</code></p></blockquote><p><img src="https://raw.githubusercontent.com/pengyirui/blog_img/main/2020-04-15-02.png" alt="例如我开四个微信"></p><p>最后修改下文本文档的后缀，把.txt改成.bat保存好，以后开微信的时候双击运行这个批处理文件就好了！</p><p><img src="https://raw.githubusercontent.com/pengyirui/blog_img/main/2020-04-15-03.png"></p><p><img src="https://raw.githubusercontent.com/pengyirui/blog_img/main/2020-04-15-04.png" alt="操作成功"></p>]]></content>
      
      
      
        <tags>
            
            <tag> 软件 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SQL基础</title>
      <link href="/posts/2435.html"/>
      <url>/posts/2435.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>之后学习SQL语句都是运行在MySQL上</p></blockquote><h2 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h2><p>Mysql将数据类型分为三大类：<br>1.数值类型<br>2.字符串类型<br>3.日期类型</p><h3 id="整数型"><a href="#整数型" class="headerlink" title="整数型"></a>整数型</h3><ul><li>存放整型的数据：在SQL中，需要更多考虑磁盘空间，系统将整数类型又分为五类<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span>tinyint：迷你型   类似byte    最大：<span class="number">127</span></span><br><span class="line"><span class="number">2.</span><span class="type">smallint</span>：小整型  <span class="number">2</span>个字节     最大：<span class="number">65535</span></span><br><span class="line"><span class="number">3.</span>mediumint：中整型    <span class="number">3</span>个字节</span><br><span class="line"><span class="number">4.</span><span class="type">int</span>：标准整型   <span class="number">4</span>个字节  （使用最多的）</span><br><span class="line"><span class="number">5.</span><span class="type">bigint</span>：大整型    <span class="number">8</span>个字节</span><br><span class="line"></span><br><span class="line"><span class="comment">---创建一张整型表</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> my_int(</span><br><span class="line">int_1 tinyint,</span><br><span class="line">    int_2 <span class="type">smallint</span>,</span><br><span class="line">    int_3 mediumint,</span><br><span class="line">    int_4 <span class="type">int</span>,</span><br><span class="line">    int_5 <span class="type">bigint</span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">---向表中插入值</span></span><br><span class="line">正常插入</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> my_int <span class="keyword">values</span>(<span class="number">-128</span>,<span class="number">32767</span>,<span class="number">100000</span>,<span class="number">100000</span>,<span class="number">100000</span>);</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ul><h3 id="浮点型"><a href="#浮点型" class="headerlink" title="浮点型"></a>浮点型</h3><ul><li>SQL中：将小数类型分为两种，浮点型，定点型。<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">浮点型：</span><br><span class="line"><span class="number">1.</span><span class="type">float</span></span><br><span class="line">单精度 <span class="number">4</span>个字节 精度小，会丢失精度</span><br><span class="line"><span class="number">2.</span><span class="keyword">double</span></span><br><span class="line">双精度 <span class="number">8</span>个字节 精度大，<span class="number">15</span>位左右。</span><br><span class="line"><span class="number">3.</span><span class="type">decimal</span></span><br><span class="line">定点型 <span class="number">8</span>个字节 小数点固定，精度固定，绝对保证整数部分不会丢失。</span><br><span class="line"></span><br><span class="line"><span class="comment">---创建一张表</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> my_decimal(</span><br><span class="line">float_f1 <span class="type">float</span>(<span class="number">10</span>,<span class="number">2</span>),</span><br><span class="line">    double_d1 <span class="keyword">double</span>(<span class="number">10</span>,<span class="number">2</span>),</span><br><span class="line">    decimal_d2 <span class="type">decimal</span>(<span class="number">10</span>,<span class="number">2</span>)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">--正常插入</span></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> my_decimal <span class="keyword">values</span>(<span class="number">99999999.99</span>,<span class="number">99999999.99</span>,<span class="number">99999999.99</span>);</span><br></pre></td></tr></table></figure></li></ul><h3 id="时间日期类型"><a href="#时间日期类型" class="headerlink" title="时间日期类型"></a>时间日期类型</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">datetime：时间日期，格式 yyyy<span class="operator">-</span>MM<span class="operator">-</span>dd HH:mm:ss  公元</span><br><span class="line"><span class="type">date</span>：日期，就是datetime中的<span class="type">date</span>部分【年月日】</span><br><span class="line"><span class="type">time</span>：时间，就是datetime中的<span class="type">time</span>部分【时分秒】</span><br><span class="line"><span class="type">timestamp</span>：时间戳，格林威治时间。<span class="number">1970</span> <span class="operator">-</span> 至今</span><br><span class="line"><span class="keyword">year</span>：年份</span><br><span class="line"></span><br><span class="line"><span class="comment">--创建一张表</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> my_time(</span><br><span class="line">d1 datetime,</span><br><span class="line">    d2 <span class="type">date</span>,</span><br><span class="line">    d3 <span class="type">time</span>,</span><br><span class="line">    d4 <span class="type">timestamp</span>,</span><br><span class="line">    d5 <span class="keyword">year</span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">--插入数据</span></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> my_time <span class="keyword">values</span>(now(),now(),now(),now(),<span class="string">&#x27;1998&#x27;</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> my_time <span class="keyword">values</span>(<span class="string">&#x27;2021-10-1&#x27;</span>,now(),now(),now(),<span class="string">&#x27;1998&#x27;</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> my_time <span class="keyword">values</span>(now(),now(),now(),<span class="string">&#x27;1970-01-01 00:00:01&#x27;</span>,<span class="string">&#x27;1998&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">--输出</span></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> my_time;</span><br><span class="line"><span class="operator">+</span><span class="comment">---------------------+------------+----------+---------------------+------+</span></span><br><span class="line"><span class="operator">|</span> d1                  <span class="operator">|</span> d2         <span class="operator">|</span> d3       <span class="operator">|</span> d4                  <span class="operator">|</span> d5   <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">---------------------+------------+----------+---------------------+------+</span></span><br><span class="line"><span class="operator">|</span> <span class="number">2021</span><span class="number">-09</span><span class="number">-04</span> <span class="number">12</span>:<span class="number">19</span>:<span class="number">28</span> <span class="operator">|</span> <span class="number">2021</span><span class="number">-09</span><span class="number">-04</span> <span class="operator">|</span> <span class="number">12</span>:<span class="number">19</span>:<span class="number">28</span> <span class="operator">|</span> <span class="number">1970</span><span class="number">-01</span><span class="number">-01</span> <span class="number">08</span>:<span class="number">00</span>:<span class="number">01</span> <span class="operator">|</span> <span class="number">1998</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">---------------------+------------+----------+---------------------+------+</span></span><br></pre></td></tr></table></figure><h3 id="字符串类型"><a href="#字符串类型" class="headerlink" title="字符串类型"></a>字符串类型</h3><ul><li>Mysql中字符串类型被划分为六类<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">char</span>：定长</span><br><span class="line"><span class="type">char</span>(<span class="number">18</span>)：磁盘在定义结构的时候，就已经确定数据的存储长度</span><br><span class="line"><span class="type">varchar</span>：变长</span><br><span class="line"><span class="type">varchar</span>(<span class="number">20</span>)：按照实际数据量进行磁盘空间分配，实际使用多少，就是多少。 字符长度</span><br><span class="line">text ：文本字符串</span><br><span class="line">text：一般超过<span class="number">255</span>长度字节的都用text</span><br><span class="line"><span class="type">blob</span> ：二进制存储</span><br><span class="line"><span class="type">blob</span>：存储文本二进制</span><br><span class="line">enum ：枚举</span><br><span class="line">enum(<span class="string">&#x27;男&#x27;</span>,<span class="string">&#x27;女&#x27;</span>,<span class="string">&#x27;未知&#x27;</span>,<span class="string">&#x27;保密&#x27;</span>)：限定数据</span><br><span class="line"><span class="keyword">set</span>：集合</span><br><span class="line"><span class="keyword">set</span>(<span class="string">&#x27;男&#x27;</span>,<span class="string">&#x27;女&#x27;</span>,<span class="string">&#x27;未知&#x27;</span>,<span class="string">&#x27;保密&#x27;</span>)：多值，不能插入没有的数据</span><br><span class="line"></span><br><span class="line"><span class="comment">---创建一张表</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> my_string(</span><br><span class="line">c_1 <span class="type">char</span>(<span class="number">11</span>),</span><br><span class="line">v_1 <span class="type">varchar</span>(<span class="number">10</span>),</span><br><span class="line">    t_1 text,</span><br><span class="line">    b_1 <span class="type">blob</span>,</span><br><span class="line">    e_1 enum(<span class="string">&#x27;男&#x27;</span>,<span class="string">&#x27;女&#x27;</span>,<span class="string">&#x27;未知&#x27;</span>,<span class="string">&#x27;保密&#x27;</span>),</span><br><span class="line">    s_1 <span class="keyword">set</span>(<span class="string">&#x27;足球&#x27;</span>,<span class="string">&#x27;橄榄球&#x27;</span>,<span class="string">&#x27;拳击&#x27;</span>)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">---正常插入</span></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> my_string <span class="keyword">values</span>(<span class="string">&#x27;13914767897&#x27;</span>,<span class="string">&#x27;我爱你小芳&#x27;</span>,<span class="string">&#x27;自我介绍一下，我是大炮，今年23岁，来自祖安...&#x27;</span>,<span class="string">&#x27;基兰,露露，女枪&#x27;</span>,<span class="string">&#x27;男&#x27;</span>,<span class="string">&#x27;足球,拳击&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">---错误。</span></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> my_string <span class="keyword">values</span>(<span class="string">&#x27;13914767897&#x27;</span>,<span class="string">&#x27;我爱你小芳&#x27;</span>,<span class="string">&#x27;自我介绍一下，我是大炮，今年23岁，来自祖安...&#x27;</span>,<span class="string">&#x27;基兰,露露，女枪&#x27;</span>,<span class="string">&#x27;男&#x27;</span>,<span class="string">&#x27;橄榄球&#x27;</span>);</span><br></pre></td></tr></table></figure></li></ul><h2 id="链接数据库"><a href="#链接数据库" class="headerlink" title="链接数据库"></a>链接数据库</h2><p>登录：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mysql -uroot -p</span><br><span class="line">回车后输入密码，当前设置的密码为mysql</span><br></pre></td></tr></table></figure><p>退出：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">quit 和 exit</span><br><span class="line">或</span><br><span class="line">ctrl+d</span><br></pre></td></tr></table></figure><p>登录成功后，输入如下命令查看效果</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">查看版本：<span class="keyword">select</span> version();</span><br><span class="line">显示当前时间：<span class="keyword">select</span> now();</span><br></pre></td></tr></table></figure><h2 id="数据库操作"><a href="#数据库操作" class="headerlink" title="数据库操作"></a>数据库操作</h2><p>查看所有数据库</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">show</span> databases;</span><br></pre></td></tr></table></figure><p>使用数据库</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">use 数据库名;</span><br><span class="line"></span><br><span class="line">例：</span><br><span class="line">use testData;</span><br></pre></td></tr></table></figure><p>查看当前使用的数据库</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> database();</span><br></pre></td></tr></table></figure><p>创建数据库</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> database 数据库名 charset<span class="operator">=</span>utf8;</span><br><span class="line"></span><br><span class="line">例：</span><br><span class="line"><span class="keyword">create</span> database python charset<span class="operator">=</span>utf8;</span><br></pre></td></tr></table></figure><p>删除数据库</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">drop</span> database 数据库名;</span><br><span class="line"></span><br><span class="line">例：</span><br><span class="line"><span class="keyword">drop</span> database python;</span><br></pre></td></tr></table></figure><h2 id="约束"><a href="#约束" class="headerlink" title="约束"></a>约束</h2><p><strong>概念：对即将进入数据库的数据加以限制。</strong><br>约束的分类：</p><ol><li>主键约束<code>primary key</code></li><li>外键约束<code>foreign key(XXXX)references(XXXX)</code></li><li>唯一约束<code>unique</code></li><li>非空约束<code>not null</code></li><li>检查约束【Mysql已经不支持】</li></ol><ul><li>自增长<code>auto_increment</code></li><li>默认<code>default</code></li><li>枚举<code>enum(&#39;YYYY&#39;,&#39;XXXX&#39;)</code></li></ul><h3 id="创建表时添加约束"><a href="#创建表时添加约束" class="headerlink" title="创建表时添加约束"></a>创建表时添加约束</h3><p>例子：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">---班级表【主表】</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> class(</span><br><span class="line"></span><br><span class="line">    c_id <span class="type">int</span> <span class="keyword">primary</span> key auto_increment,</span><br><span class="line"></span><br><span class="line">    c_name <span class="type">varchar</span>(<span class="number">20</span>) <span class="keyword">not</span> <span class="keyword">null</span>,</span><br><span class="line"></span><br><span class="line">    c_info <span class="type">varchar</span>(<span class="number">50</span>)</span><br><span class="line"></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> class(c_name,c_info) <span class="keyword">values</span>(<span class="string">&#x27;开发班&#x27;</span>,<span class="string">&#x27;Java开发班级GZ2107&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">delete</span> <span class="keyword">from</span> class <span class="keyword">where</span> c_id <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">---学生表【从表】</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> student(</span><br><span class="line"></span><br><span class="line">    id <span class="type">int</span> <span class="keyword">primary</span> key auto_increment,</span><br><span class="line"></span><br><span class="line">    name <span class="type">varchar</span>(<span class="number">10</span>) <span class="keyword">not</span> <span class="keyword">null</span>,</span><br><span class="line"></span><br><span class="line">    sex enum(<span class="string">&#x27;男&#x27;</span>,<span class="string">&#x27;女&#x27;</span>) <span class="keyword">not</span> <span class="keyword">null</span>,</span><br><span class="line"></span><br><span class="line">    age <span class="type">int</span>,</span><br><span class="line"></span><br><span class="line">    stuCode <span class="type">varchar</span>(<span class="number">20</span>) <span class="keyword">unique</span>,</span><br><span class="line"></span><br><span class="line">    class_id <span class="type">int</span>,</span><br><span class="line"></span><br><span class="line">    <span class="keyword">foreign</span> key(class_id) <span class="keyword">references</span> class(c_id)</span><br><span class="line"></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">---加入数据</span></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> student(name,sex,age,stuCode,class_id) <span class="keyword">values</span>(<span class="string">&#x27;张三&#x27;</span>,<span class="string">&#x27;男&#x27;</span>,<span class="number">20</span>,<span class="string">&#x27;xxx-yyy-111&#x27;</span>,<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> student(name,sex,age,stuCode,class_id) <span class="keyword">values</span>(<span class="string">&#x27;李四&#x27;</span>,<span class="string">&#x27;男&#x27;</span>,<span class="number">20</span>,<span class="string">&#x27;xxx-yyy-111&#x27;</span>,<span class="number">2</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> student(name,age,stuCode,class_id) <span class="keyword">values</span>(<span class="string">&#x27;王五&#x27;</span>,<span class="number">20</span>,<span class="string">&#x27;xxx-yyy-222&#x27;</span>,<span class="number">1</span>);</span><br></pre></td></tr></table></figure><h3 id="创建表之后添加约束"><a href="#创建表之后添加约束" class="headerlink" title="创建表之后添加约束"></a>创建表之后添加约束</h3><p>例子：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">---添加addr字段</span></span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> class <span class="keyword">add</span> addr <span class="type">varchar</span>(<span class="number">50</span>) <span class="keyword">not</span> <span class="keyword">null</span>;</span><br><span class="line"><span class="comment">---修改sex字段为枚举约束，并且默认“男”</span></span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> student modify sex enum(<span class="string">&#x27;男&#x27;</span>,<span class="string">&#x27;女&#x27;</span>) <span class="keyword">not</span> <span class="keyword">null</span> <span class="keyword">default</span> <span class="string">&#x27;男&#x27;</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">---例子二</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> student_two(</span><br><span class="line"></span><br><span class="line">    id <span class="type">int</span>,</span><br><span class="line"></span><br><span class="line">    name <span class="type">varchar</span>(<span class="number">20</span>),</span><br><span class="line"></span><br><span class="line">    age <span class="type">int</span>,</span><br><span class="line"></span><br><span class="line">    sex enum(<span class="string">&#x27;男&#x27;</span>,<span class="string">&#x27;女&#x27;</span>),</span><br><span class="line"></span><br><span class="line">    stuCode <span class="type">varchar</span>(<span class="number">20</span>),</span><br><span class="line"></span><br><span class="line">    class_id <span class="type">int</span></span><br><span class="line"></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="number">1.</span>添加主键约束</span><br><span class="line">    <span class="keyword">alter</span> <span class="keyword">table</span> student_two <span class="keyword">add</span> <span class="keyword">primary</span> key (id);</span><br><span class="line"></span><br><span class="line"><span class="number">2.</span>添加非空约束</span><br><span class="line">    <span class="keyword">alter</span> <span class="keyword">table</span> student_two modify name <span class="type">varchar</span>(<span class="number">20</span>) <span class="keyword">not</span> <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line"><span class="number">3.</span>添加唯一约束</span><br><span class="line">    <span class="keyword">alter</span> <span class="keyword">table</span> student_two modify stuCode <span class="type">varchar</span>(<span class="number">20</span>)<span class="keyword">not</span> <span class="keyword">null</span> <span class="keyword">unique</span>;</span><br><span class="line">    <span class="keyword">alter</span> <span class="keyword">table</span> student_two <span class="keyword">add</span> <span class="keyword">unique</span>(stuCode);</span><br><span class="line"></span><br><span class="line"><span class="number">4.</span>添加外键约束</span><br><span class="line">    <span class="keyword">alter</span> <span class="keyword">table</span> student_two <span class="keyword">add</span> <span class="keyword">constraint</span> <span class="keyword">foreign</span> key(class_id) <span class="keyword">references</span> class(c_id);</span><br></pre></td></tr></table></figure><h2 id="表操作"><a href="#表操作" class="headerlink" title="表操作"></a>表操作</h2><p>查看当前数据库中所有表</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">show</span> tables;</span><br></pre></td></tr></table></figure><p>查看表结构</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">desc</span> 表名;</span><br></pre></td></tr></table></figure><p>删除表</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">drop</span> <span class="keyword">table</span> 表名;</span><br><span class="line">例：</span><br><span class="line"><span class="keyword">drop</span> <span class="keyword">table</span> students;</span><br></pre></td></tr></table></figure><h3 id="创建表"><a href="#创建表" class="headerlink" title="创建表"></a>创建表</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">语法：</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> table_name(</span><br><span class="line">    column1 datatype <span class="keyword">constraint</span>,</span><br><span class="line">    column2 datatype,</span><br><span class="line">    column3 datatype,</span><br><span class="line">    .....</span><br><span class="line">    columnN datatype,</span><br><span class="line">    <span class="keyword">PRIMARY</span> KEY(<span class="keyword">one</span> <span class="keyword">or</span> more columns)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">---例：创建班级表</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> classes(</span><br><span class="line">    id <span class="type">int</span> unsigned auto_increment <span class="keyword">primary</span> key <span class="keyword">not</span> <span class="keyword">null</span>,</span><br><span class="line">    name <span class="type">varchar</span>(<span class="number">10</span>)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">---例：创建学生表</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> students(</span><br><span class="line">    id <span class="type">int</span> unsigned <span class="keyword">primary</span> key auto_increment <span class="keyword">not</span> <span class="keyword">null</span>,</span><br><span class="line">    name <span class="type">varchar</span>(<span class="number">20</span>) <span class="keyword">default</span> <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">    age tinyint unsigned <span class="keyword">default</span> <span class="number">0</span>,</span><br><span class="line">    height <span class="type">decimal</span>(<span class="number">5</span>,<span class="number">2</span>),</span><br><span class="line">    gender enum(<span class="string">&#x27;男&#x27;</span>,<span class="string">&#x27;女&#x27;</span>,<span class="string">&#x27;人妖&#x27;</span>,<span class="string">&#x27;保密&#x27;</span>),</span><br><span class="line">    cls_id <span class="type">int</span> unsigned <span class="keyword">default</span> <span class="number">0</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure><h3 id="修改表-添加字段"><a href="#修改表-添加字段" class="headerlink" title="修改表-添加字段"></a>修改表-添加字段</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> 表名 <span class="keyword">add</span> 列名 类型;</span><br><span class="line">例：</span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> students <span class="keyword">add</span> birthday datetime;</span><br></pre></td></tr></table></figure><h3 id="修改表-修改字段：重命名版"><a href="#修改表-修改字段：重命名版" class="headerlink" title="修改表-修改字段：重命名版"></a>修改表-修改字段：重命名版</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> 表名 change 原名 新名 类型及约束;</span><br><span class="line">例：</span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> students change birthday birth datetime <span class="keyword">not</span> <span class="keyword">null</span>;</span><br></pre></td></tr></table></figure><h3 id="修改表-修改字段：不重命名版"><a href="#修改表-修改字段：不重命名版" class="headerlink" title="修改表-修改字段：不重命名版"></a>修改表-修改字段：不重命名版</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> 表名 modify 列名 类型及约束;</span><br><span class="line">例：</span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> students modify birth <span class="type">date</span> <span class="keyword">not</span> <span class="keyword">null</span>;</span><br></pre></td></tr></table></figure><h3 id="修改表-删除字段"><a href="#修改表-删除字段" class="headerlink" title="修改表-删除字段"></a>修改表-删除字段</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> 表名 <span class="keyword">drop</span> 列名;</span><br><span class="line">例：</span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> students <span class="keyword">drop</span> birthday;</span><br></pre></td></tr></table></figure><h3 id="查看表的创建语句"><a href="#查看表的创建语句" class="headerlink" title="查看表的创建语句"></a>查看表的创建语句</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">show</span> <span class="keyword">create</span> <span class="keyword">table</span> 表名;</span><br><span class="line">例：</span><br><span class="line"><span class="keyword">show</span> <span class="keyword">create</span> <span class="keyword">table</span> classes;</span><br></pre></td></tr></table></figure><h2 id="增删改查-curd"><a href="#增删改查-curd" class="headerlink" title="增删改查(curd)"></a>增删改查(curd)</h2><blockquote><p>curd的解释: 代表创建（Create）、更新（Update）、读取（Retrieve）和删除（Delete）<br>由于查询语句过多且经常用后续会新开一章记录</p></blockquote><h3 id="增加"><a href="#增加" class="headerlink" title="增加"></a>增加</h3><blockquote><p>说明：主键列是自动增长，但是在全列插入时需要占位，通常使用0或者 default 或者 null 来占位，插入成功后以实际数据为准。</p></blockquote><h4 id="全列插入"><a href="#全列插入" class="headerlink" title="全列插入"></a>全列插入</h4><p><strong>值的顺序与表中字段的顺序对应</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> 表名 <span class="keyword">values</span>(...)</span><br><span class="line">例：</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> students <span class="keyword">values</span>(<span class="number">0</span>,’郭靖‘,<span class="number">1</span>,<span class="string">&#x27;蒙古&#x27;</span>,<span class="string">&#x27;2016-1-2&#x27;</span>);</span><br></pre></td></tr></table></figure><h4 id="部分列插入"><a href="#部分列插入" class="headerlink" title="部分列插入"></a>部分列插入</h4><p><strong>值的顺序与给出的列顺序对应</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">    <span class="keyword">insert</span> <span class="keyword">into</span> 表名(列<span class="number">1</span>,...) <span class="keyword">values</span>(值<span class="number">1</span>,...)</span><br><span class="line">    例：</span><br><span class="line">    <span class="keyword">insert</span> <span class="keyword">into</span> students(name,hometown,birthday) <span class="keyword">values</span>(<span class="string">&#x27;黄蓉&#x27;</span>,<span class="string">&#x27;桃花岛&#x27;</span>,<span class="string">&#x27;2016-3-2&#x27;</span>);</span><br><span class="line"></span><br><span class="line">上面的语句一次可以向表中插入一行数据，还可以一次性插入多行数据，这样可以减少与数据库的通信</span><br></pre></td></tr></table></figure><h4 id="全列多行插入"><a href="#全列多行插入" class="headerlink" title="全列多行插入"></a>全列多行插入</h4><p><strong>值的顺序与给出的列顺序对应</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> 表名 <span class="keyword">values</span>(...),(...)...;</span><br><span class="line">例：</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> classes <span class="keyword">values</span>(<span class="number">0</span>,<span class="string">&#x27;python1&#x27;</span>),(<span class="number">0</span>,<span class="string">&#x27;python2&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> 表名(列<span class="number">1</span>,...) <span class="keyword">values</span>(值<span class="number">1</span>,...),(值<span class="number">1</span>,...)...;</span><br><span class="line">例：</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> students(name) <span class="keyword">values</span>(<span class="string">&#x27;杨康&#x27;</span>),(<span class="string">&#x27;杨过&#x27;</span>),(<span class="string">&#x27;小龙女&#x27;</span>);</span><br></pre></td></tr></table></figure><h3 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h3><p><strong>一般推荐逻辑删除</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">delete</span> <span class="keyword">from</span> 表名 <span class="keyword">where</span> 条件</span><br><span class="line">例：</span><br><span class="line"><span class="keyword">delete</span> <span class="keyword">from</span> students <span class="keyword">where</span> id<span class="operator">=</span><span class="number">5</span>;</span><br></pre></td></tr></table></figure><h4 id="逻辑删除"><a href="#逻辑删除" class="headerlink" title="逻辑删除"></a>逻辑删除</h4><p><strong>只显示客户需要看的东西，本质就是修改操作</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">---设置一个属性，1代表给客户看，0代表不给客户看。</span></span><br><span class="line">    <span class="keyword">update</span> 表名 <span class="keyword">set</span> 属性名<span class="operator">=</span><span class="number">1</span> <span class="keyword">where</span> 关键值<span class="operator">=</span><span class="number">1</span>;</span><br><span class="line">    例：</span><br><span class="line">    <span class="keyword">update</span> students <span class="keyword">set</span> isdelete<span class="operator">=</span><span class="number">1</span> <span class="keyword">where</span> id<span class="operator">=</span><span class="number">1</span>;</span><br></pre></td></tr></table></figure><h3 id="修改"><a href="#修改" class="headerlink" title="修改"></a>修改</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">update</span> 表名 <span class="keyword">set</span> 列<span class="number">1</span><span class="operator">=</span>值<span class="number">1</span>,列<span class="number">2</span><span class="operator">=</span>值<span class="number">2.</span>.. <span class="keyword">where</span> 条件</span><br><span class="line">例：</span><br><span class="line"><span class="keyword">update</span> students <span class="keyword">set</span> gender<span class="operator">=</span><span class="number">0</span>,hometown<span class="operator">=</span><span class="string">&#x27;北京&#x27;</span> <span class="keyword">where</span> id<span class="operator">=</span><span class="number">5</span>;</span><br></pre></td></tr></table></figure><h2 id="备份"><a href="#备份" class="headerlink" title="备份"></a>备份</h2><p>运行mysqldump命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">mysqldump -u用户名 -p 需要备份的数据库名 &gt; sql文件</span><br><span class="line">例：</span><br><span class="line">mysqldump –uroot –p pythonstest &gt; python.sql;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 按提示输入mysql的密码</span></span><br></pre></td></tr></table></figure><h2 id="恢复"><a href="#恢复" class="headerlink" title="恢复"></a>恢复</h2><p>连接mysql，创建新的数据库<br>退出连接，执行如下命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">mysql -u用户名 –p 新数据库名 &lt; sql文件</span><br><span class="line">mysql -uroot –p pythonNEW &lt; python.sql</span><br><span class="line"></span><br><span class="line"><span class="comment"># 根据提示输入mysql密码</span></span><br></pre></td></tr></table></figure><h2 id="视图"><a href="#视图" class="headerlink" title="视图"></a>视图</h2><p>问题：对于复杂的查询，往往是有多个数据表进行关联查询而得到，如果数据库因为需求等原因发生了改变，为了保证查询出来的数据与之前相同，则需要在多个地方进行修改，维护起来非常麻烦</p><p>概念：<strong>通俗的讲，视图就是一条SELECT语句执行后返回的结果集。视图是对若干张基本表的引用；是一张虚表，查询语句执行的结果</strong>，不存储具体的数据（基本表数据发生了改变，视图也会跟着改变）；</p><ul><li><p>主要作用</p><blockquote><p>方便操作，特别是查询操作<br>减少复杂的SQL语句，增强可读性。<br>提高了重用性，就像一个函数<br>对数据库重构，却不影响程序的运行<br>提高了安全性能，可以对不同的用户<br>让数据更加清晰</p></blockquote></li><li><p>定义视图</p>  <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">约定俗成，建议以v_开头</span><br><span class="line"></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">view</span> 视图名称 <span class="keyword">as</span> <span class="keyword">select</span>语句;</span><br></pre></td></tr></table></figure></li><li><p>查看视图</p>  <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">查看表会将所有的视图也列出来</span><br><span class="line"></span><br><span class="line"><span class="keyword">show</span> tables;</span><br></pre></td></tr></table></figure></li></ul><h2 id="索引"><a href="#索引" class="headerlink" title="索引"></a>索引</h2><p>问题：当数据量到达千万或以上级别时，查询效率便会逐渐下降。<br>遇到最多、最容易出问题还是一些复杂的查询操作，所以查询语句的优化显然是重中之重。</p><p>概念：索引是一种特殊的文件(InnoDB数据表上的索引是表空间的一个组成部分)，它们包含着对数据表里所有记录的引用指针。<strong>更通俗的说，数据库索引好比是一本书前面的目录，能加快数据库的查询速度。</strong></p><p>原理：类似二叉树。<img src="https://raw.githubusercontent.com/pengyirui/blog_img/main/2020-04-27-01.jpg"><br>例子：如果1000条数据，1到100分成第一段，101到200分成第二段，201到300分成第三段……这样查第250条数据，只要找第三段就可以了，一下子去除了90%的无效数据。</p><p><code>注意事项：</code><br>索引不是越多越好，建立太多的索引将会影响更新和插入的速度，因为它需要同样更新每个索引文件。对于一个经常需要更新和插入的表格，就没有必要为一个很少使用的where字句单独建立索引了，对于比较小的表，排序的开销不会很大，也没有必要建立另外的索引。<br>建立索引会占用磁盘空间。</p><h3 id="如何使用"><a href="#如何使用" class="headerlink" title="如何使用"></a>如何使用</h3><ul><li>查看索引  <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">show</span> index <span class="keyword">from</span> 表名;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li>创建索引<br>  如果指定字段是字符串，需要指定长度，建议长度与定义字段时的长度一致<br>  字段类型如果不是字符串，可以不填写长度部分  <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> index 索引名称 <span class="keyword">on</span> 表名(字段名称(长度))</span><br></pre></td></tr></table></figure></li><li>删除索引  <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">drop</span> index 索引名称 <span class="keyword">on</span> 表名;</span><br></pre></td></tr></table></figure></li></ul><h2 id="事务"><a href="#事务" class="headerlink" title="事务"></a>事务</h2><p>生活例子：</p><blockquote><p>A用户和B用户是银行的储户，现在A要给B转账500元，那么需要做以下几件事：<br>    检查A的账户余额&gt;500元；<br>    A 账户中扣除500元;<br>    B 账户中增加500元;<br>正常的流程走下来，A账户扣了500，B账户加了500，皆大欢喜。</p></blockquote><p>那如果A账户扣了钱之后，系统出故障了呢？A白白损失了500，而B也没有收到本该属于他的500。</p><p>以上的案例中，隐藏着一个前提条件：A扣钱和B加钱，要么同时成功，要么同时失败。事务的需求就在于此</p><p>概念：<strong>所谓事务,它是一个操作序列，这些操作要么都执行，要么都不执行，它是一个不可分割的工作单位。</strong></p><h3 id="事务四大特性-简称ACID"><a href="#事务四大特性-简称ACID" class="headerlink" title="事务四大特性(简称ACID)"></a>事务四大特性(简称ACID)</h3><p><i class="fa fa-eye"></i>  一个很好的事务处理系统，必须具备这些标准特性：</p><ul><li>原子性(Atomicity)<br>  一个事务必须被视为一个不可分割的最小工作单元，整个事务中的所有操作要么全部提交成功，要么全部失败回滚，对于一个事务来说，不可能只执行其中的一部分操作，这就是事务的原子性</li><li>一致性(Consistency)<br>  数据库总是从一个一致性的状态转换到另一个一致性的状态。（在前面的例子中，一致性确保了，即使在执行第三、四条语句之间时系统崩溃，支票账户中也不会损失200美元，因为事务最终没有提交，所以事务中所做的修改也不会保存到数据库中。）</li><li>隔离性(Isolation)<br>  通常来说，一个事务所做的修改在最终提交以前，对其他事务是不可见的。（在前面的例子中，当执行完第三条语句、第四条语句还未开始时，此时有另外的一个账户汇总程序开始运行，则其看到支票帐户的余额并没有被减去200美元。）</li><li>持久性(Durability)<br>  一旦事务提交，则其所做的修改会永久保存到数据库。（此时即使系统崩溃，修改的数据也不会丢失。）</li></ul><h3 id="如何使用-1"><a href="#如何使用-1" class="headerlink" title="如何使用"></a>如何使用</h3><p>开启事务后执行修改命令，变更会维护到本地缓存中，而不维护到物理表中。<br>表的引擎类型必须是innodb类型才可以使用事务，这是mysql表的默认引擎</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">---查看目前事务状态：</span></span><br><span class="line"><span class="keyword">show</span> variables <span class="keyword">like</span> &quot;autocommit&quot;;</span><br><span class="line"></span><br><span class="line"><span class="comment">--设置事务自动提交关闭</span></span><br><span class="line"><span class="keyword">set</span> autocommit <span class="operator">=</span> off; </span><br><span class="line"></span><br><span class="line"><span class="comment">--设置事务自动提交开启</span></span><br><span class="line"><span class="keyword">set</span> autocommit <span class="operator">=</span> <span class="keyword">on</span>; </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">rollback</span>; <span class="comment">---回滚</span></span><br><span class="line"><span class="keyword">commit</span>; <span class="comment">---提交</span></span><br></pre></td></tr></table></figure><p>修改数据的命令会自动的触发事务，包括insert、update、delete<br>而在SQL语句中有手动开启事务的原因是：可以进行多次数据的修改，如果成功一起成功，否则一起会滚到之前的数据<br>后台操作的命令（如：select、update等）基本上都默认执行了事务</p><h2 id="计算列"><a href="#计算列" class="headerlink" title="计算列"></a>计算列</h2><p>计算列是MySQL8新特性<br>什么叫计算列呢？简单来说就是某一列的值是通过别的列计算得来的。例如，a列值为1、b列值为2，c列<br>不需要手动插入，定义a+b的结果为c的值，那么c就是计算列，是通过别的列计算得来的。<br>在MySQL 8.0中，CREATE TABLE 和 ALTER TABLE 中都支持增加计算列。下面以CREATE TABLE为例进行讲<br>解。<br>举例：定义数据表tb1，然后定义字段id、字段a、字段b和字段c，其中字段c为计算列，用于计算a+b的<br>值。 首先创建测试表tb1，语句如下：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> tb1(</span><br><span class="line">id <span class="type">INT</span>,</span><br><span class="line">a <span class="type">INT</span>,</span><br><span class="line">b <span class="type">INT</span>,</span><br><span class="line">c <span class="type">INT</span> GENERATED ALWAYS <span class="keyword">AS</span> (a <span class="operator">+</span> b) VIRTUAL</span><br><span class="line">);</span><br></pre></td></tr></table></figure><h2 id="存储过程与函数"><a href="#存储过程与函数" class="headerlink" title="存储过程与函数"></a>存储过程与函数</h2><h3 id="存储过程"><a href="#存储过程" class="headerlink" title="存储过程"></a>存储过程</h3><p>语法：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">PROCEDURE</span> 存储过程名(<span class="keyword">IN</span><span class="operator">|</span><span class="keyword">OUT</span><span class="operator">|</span><span class="keyword">INOUT</span> 参数名 参数类型,...)</span><br><span class="line">[characteristics ...]</span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line">存储过程体</span><br><span class="line"><span class="keyword">END</span></span><br></pre></td></tr></table></figure><p>以无输入无输出为例，查询emps所有数据，并命名叫select_all_data</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">DELIMITER $</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">PROCEDURE</span> select_all_data()</span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line">    <span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> emps;</span><br><span class="line"><span class="keyword">END</span> $</span><br><span class="line">DELIMITER ;</span><br></pre></td></tr></table></figure><p>调用存储过程<br>语法：<code>CALL 存储过程名(实参列表)</code><br><code>CALL select_all_data()</code></p><h3 id="存储函数"><a href="#存储函数" class="headerlink" title="存储函数"></a>存储函数</h3><p>语法：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">FUNCTION</span> 函数名(参数名 参数类型,...)</span><br><span class="line"><span class="keyword">RETURNS</span> 返回值类型</span><br><span class="line">    [characteristics ...]</span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line">    函数体 #函数体中肯定有 <span class="keyword">RETURN</span> 语句</span><br><span class="line"><span class="keyword">END</span></span><br></pre></td></tr></table></figure><p>例子：创建存储函数，名称为email_by_name()，参数定义为空，该函数查询Abel的email，并返回，数据类型为字符串型。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">DELIMITER <span class="operator">/</span><span class="operator">/</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">FUNCTION</span> email_by_name()</span><br><span class="line"><span class="keyword">RETURNS</span> <span class="type">VARCHAR</span>(<span class="number">25</span>)</span><br><span class="line">    <span class="keyword">DETERMINISTIC</span></span><br><span class="line">    <span class="keyword">CONTAINS</span> <span class="keyword">SQL</span></span><br><span class="line">    <span class="keyword">READS</span> <span class="keyword">SQL</span> DATA</span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line">    <span class="keyword">RETURN</span> (<span class="keyword">SELECT</span> email <span class="keyword">FROM</span> employees <span class="keyword">WHERE</span> last_name <span class="operator">=</span> <span class="string">&#x27;Abel&#x27;</span>);</span><br><span class="line"><span class="keyword">END</span> <span class="operator">/</span><span class="operator">/</span></span><br><span class="line">DELIMITER ;</span><br></pre></td></tr></table></figure><p>调用<br><code>SELECT email_by_name();</code></p><h3 id="区别"><a href="#区别" class="headerlink" title="区别"></a>区别</h3><table><thead><tr><th></th><th>关键字</th><th>调用语法</th><th>返回值</th><th>应用场景</th></tr></thead><tbody><tr><td>存储过程</td><td>PROCEDURE</td><td>CALL 存储过程()</td><td>理解为有0个或多个</td><td>一般用于更新</td></tr><tr><td>存储函数</td><td>FUNCTION</td><td>SELECT 函数()</td><td>只能是一个</td><td>一般用于查询结果为一个值并返回时</td></tr></tbody></table><h2 id="窗口函数"><a href="#窗口函数" class="headerlink" title="窗口函数"></a>窗口函数</h2><p>8版本的新特新</p><p>特点：分组，但不聚合。</p><p>小结：窗口函数的特点是可以分组，而且可以在分组内排序。另外，窗口函数不会因为分组而减少原表中的行<br>数，这对我们在原表数据的基础上进行统计和排序非常有用。</p><h2 id="公用表表达式"><a href="#公用表表达式" class="headerlink" title="公用表表达式"></a>公用表表达式</h2><p>8版本的新特新</p><p>公用表表达式（或通用表表达式）简称为CTE（Common Table Expressions）。<br>CTE是一个命名的临时结果集，作用范围是当前语句。CTE可以理解成一个可以复用的子查询，当然跟子查询还是有点区别的，CTE可以引用其他CTE，但子查询不能引用其他子查询。所以，可以考虑代替子查询。</p><p>依据语法结构和执行方式的不同，公用表表达式分为 <code>普通公用表表达式</code> 和 <code>递归公用表表达式</code> 2 种。</p><p>公用表表达式的作用是可以替代子查询，而且可以被多次引用。<br>递归公用表表达式对查询有一个共同根节点的树形结构数据非常高效，可以轻松搞定其他查询方式难以处理的查询。</p><p>课外拓展：汉诺塔算法</p>]]></content>
      
      
      
        <tags>
            
            <tag> SQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【运行】常用的命令</title>
      <link href="/posts/957d.html"/>
      <url>/posts/957d.html</url>
      
        <content type="html"><![CDATA[<table><thead><tr><th align="left">说明</th><th align="left">命令</th></tr></thead><tbody><tr><td align="left">计算器</td><td align="left">calc</td></tr><tr><td align="left">记事本</td><td align="left">notepad</td></tr><tr><td align="left">注册表</td><td align="left">regedit</td></tr><tr><td align="left">组策略（家庭版没有</td><td align="left">gpedit.msc</td></tr><tr><td align="left">显卡诊断</td><td align="left">dxdiag</td></tr><tr><td align="left">定时关机</td><td align="left">shutdown -s -t 秒数</td></tr><tr><td align="left">取消定时关机</td><td align="left">shutdown -a</td></tr></tbody></table>]]></content>
      
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>git常用的命令</title>
      <link href="/posts/3b9.html"/>
      <url>/posts/3b9.html</url>
      
        <content type="html"><![CDATA[<h3 id="git的两大特点"><a href="#git的两大特点" class="headerlink" title="git的两大特点"></a>git的两大特点</h3><ul><li>版本控制：可以解决多人同时开发的代码问题，也可以解决找回历史代码的问题。</li><li>分布式<br>Git是分布式版本控制系统，同一个Git仓库，可以分布到不同的机器上。首先找一台电脑充当服务器的角色，每天24小时开机，其他每个人都从这个“服务器”仓库克隆一份到自己的电脑上，并且各自把各自的提交推送到服务器仓库里，也从服务器仓库中拉取别人的提交。可以自己搭建这台服务器，也可以使用GitHub网站。</li><li>工作区与暂存区的区别<br>工作区：就是你在电脑上看到的目录，比如目录下mygit里的文件(.git隐藏目录版本库除外)。或者<strong>以后需要再新建的目录文件等等都属于工作区范畴。</strong><br>版本库(Repository)：工作区有一个隐藏目录.git,这个不属于工作区，这是版本库。其中版本库里面存了很多东西，其中最重要的就是stage(暂存区)，还有Git为我们自动创建了第一个分支master,以及指向master的一个指针HEAD。</li></ul><p><img src="https://raw.githubusercontent.com/pengyirui/blog_img/main/2021-11-20-01.jpg"><br><img src="https://raw.githubusercontent.com/pengyirui/blog_img/main/2020-04-11-01.png" alt="工作区、暂存区、版本库的关系"></p><hr><h3 id="基本操作"><a href="#基本操作" class="headerlink" title="基本操作"></a>基本操作</h3><table><thead><tr><th align="left">说明</th><th align="left">命令</th></tr></thead><tbody><tr><td align="left">初始化仓库</td><td align="left"><code>git init</code></td></tr><tr><td align="left">创建版本记录</td><td align="left"><code>git add</code></td></tr><tr><td align="left"></td><td align="left"><code>git commit -m &quot;版本说明信息&quot;</code></td></tr><tr><td align="left">查看有哪些未被提交到版本库下</td><td align="left"><code>git status</code></td></tr><tr><td align="left">查看版本记录与序列号</td><td align="left"><code>git log</code></td></tr><tr><td align="left">回退到上一个版本（一个^表示前一个版本）</td><td align="left"><code>git reset --hard HEAD^</code></td></tr><tr><td align="left"></td><td align="left"><code>git reset --hard 版本序列号</code></td></tr><tr><td align="left">查看操作记录</td><td align="left"><code>git reflog</code></td></tr><tr><td align="left">对比文件不同</td><td align="left"><code>git diff HEAD -- 文件</code></td></tr><tr><td align="left">对比两个版本的某个文件不同</td><td align="left"><code>git diff HEAD HEAD^ -- 文件</code></td></tr></tbody></table><hr><h3 id="分支"><a href="#分支" class="headerlink" title="分支"></a>分支</h3><blockquote><p>master:用户保存发布的项目代码。v1.0，v2.0<br>dve:保存开发过程中的代码</p></blockquote><p><img src="https://raw.githubusercontent.com/pengyirui/blog_img/main/2021-11-20-01.png" alt="协同开发分支维护"></p><table><thead><tr><th align="left">说明</th><th align="left">命令</th></tr></thead><tbody><tr><td align="left">创建分支</td><td align="left"><code>git branch 分支名称</code></td></tr><tr><td align="left">切换分支</td><td align="left"><code>git checkout 分支名称</code></td></tr><tr><td align="left">创建并切换分支</td><td align="left"><code>git checkout -b 分支名称</code></td></tr><tr><td align="left">查看全部提交记录</td><td align="left"><code>git log --pretty=oneline</code></td></tr><tr><td align="left">合并分支到当前分支</td><td align="left"><code>git merge 分支名称</code></td></tr><tr><td align="left">删除分支</td><td align="left"><code>git branch -d 分支名称</code></td></tr><tr><td align="left">禁止快速合并</td><td align="left"><code>git merge --no-ff -m &#39;提交的信息&#39; 合并的分支名称</code></td></tr></tbody></table><blockquote><p>当临时有需求的情况下，暂时放下手头工作快速切换新需求</p></blockquote><table><thead><tr><th align="left">相当于弄了个快照</th><th align="left">git stash</th></tr></thead><tbody><tr><td align="left">查看快照</td><td align="left"><code>git stash list</code></td></tr><tr><td align="left">恢复快照</td><td align="left"><code>git stash pop</code></td></tr></tbody></table><hr><h3 id="冲突"><a href="#冲突" class="headerlink" title="冲突"></a>冲突</h3><p>Git用<code>&lt;&lt;&lt;&lt;&lt;&lt;&lt;，=======，&gt;&gt;&gt;&gt;&gt;&gt;&gt;</code>标记出不同分支的内容<br>其中<code>&lt;&lt;&lt;HEAD</code>是指主分支修改的内容，<code>&gt;&gt;&gt;&gt;&gt;fenzhi1</code> 是指fenzhi1上修改的内容，我们可以修改下如下后保存：手动解决冲突，并提交</p><h3 id="远程操控"><a href="#远程操控" class="headerlink" title="远程操控"></a>远程操控</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">添加ssh账户：</span><br><span class="line">输入git log查看邮箱和名字</span><br><span class="line">vi .gitconfig 输入邮箱如图</span><br><span class="line"></span><br><span class="line">退回仓库目录输入ssh-keygen -t rsa -C &#x27;你的邮箱&#x27;</span><br><span class="line">查看ssh：在家目录.ssh/下（win系统就是C盘用户.ssh下</span><br><span class="line">id_rsa是你电脑的私钥</span><br><span class="line">id_rsa.pub是你的ssh</span><br><span class="line">拿着ssh公匙去生成（设置→安全设置→SSH公匙）</span><br></pre></td></tr></table></figure><table><thead><tr><th align="left">说明</th><th align="left">命令</th></tr></thead><tbody><tr><td align="left">git全局设置：</td><td align="left"><code>git config --global user.name &quot;你的名字&quot;</code></td></tr><tr><td align="left"></td><td align="left"><code>git config --global user.email &quot;你的邮箱&quot;</code></td></tr><tr><td align="left">推送代码，一般都是创建一个分支保存完后（app、commit）再推送）</td><td align="left"><code>git push origin 分支名称</code></td></tr><tr><td align="left">克隆仓库</td><td align="left"><code>git clone 仓库地址</code></td></tr><tr><td align="left">如果克隆失败，尝试输入以下两条代码</td><td align="left"><code>eval &quot;$(ssh-agent -s)&quot;</code></td></tr><tr><td align="left"></td><td align="left"><code>ssh-add</code></td></tr><tr><td align="left">忽略远程版本与本地版本差异，强行pull下来</td><td align="left"><code>git pull origin master --allow-unrelated-histories</code></td></tr><tr><td align="left">跟踪远程（可以直接git pull,不用打origin smart</td><td align="left"><code>git branch --set-upstream-to=origin/远程的分支 本地的分支</code></td></tr><tr><td align="left">推送到远程的初始仓库</td><td align="left"><code>git remote add origin 远程仓库的地址</code></td></tr><tr><td align="left">切换远程仓库</td><td align="left"><code>git remote set-url origin 远程仓库的地址</code></td></tr></tbody></table><h3 id="gitignore"><a href="#gitignore" class="headerlink" title=".gitignore"></a>.gitignore</h3><table><thead><tr><th>语法</th><th>含义</th></tr></thead><tbody><tr><td>/</td><td>目录</td></tr><tr><td>*</td><td>多个字符</td></tr><tr><td>?</td><td>单个字符</td></tr><tr><td>[]</td><td>多个可选字符匹配单个字符</td></tr><tr><td>!</td><td>不忽略(跟踪)匹配到的文件或目录</td></tr></tbody></table><p>例子：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">#忽略所有.svn目录</span><br><span class="line">.svn/</span><br><span class="line">#忽略所有target目录</span><br><span class="line">target/</span><br><span class="line">#忽略所有.idea目录</span><br><span class="line">.idea/</span><br><span class="line">#忽略所有.iml文件</span><br><span class="line">*.iml</span><br></pre></td></tr></table></figure><p>规则不生效问题：<br>解决方法就是先把本地缓存删除（改变成未track状态），然后再提交:<br><code>git rm -r --cached target</code><br>此后不再追踪track这两个文件夹</p><h3 id="尾巴"><a href="#尾巴" class="headerlink" title="尾巴"></a>尾巴</h3><p>更加详细的链接：<br>码云帮助中心：<a href="https://gitee.com/help/categories/43">https://gitee.com/help/categories/43</a><br>git大全：<a href="https://gitee.com/all-about-git">https://gitee.com/all-about-git</a><br>菜鸟教程：<a href="https://www.runoob.com/git/git-tutorial.html">https://www.runoob.com/git/git-tutorial.html</a><br>git命令学习demo：<a href="https://oschina.gitee.io/learn-git-branching/?demo">https://oschina.gitee.io/learn-git-branching/?demo</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>批量删除B站抽奖动态</title>
      <link href="/posts/d6f6.html"/>
      <url>/posts/d6f6.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>转载自 <a href="https://www.bilibili.com/video/av95622019">https://www.bilibili.com/video/av95622019</a></p></blockquote><p>需要到自己的B站主页，之后点开开发者工具，在控制台下粘贴以下代码后回车<br><img src="https://raw.githubusercontent.com/pengyirui/blog_img/main/2020-04-08-01.jpg"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">// 域名: space.bilibili.com</span><br><span class="line"></span><br><span class="line">var needDelDeled = true,</span><br><span class="line">    delay = 1000,</span><br><span class="line">    scrolls = 800;</span><br><span class="line">var w = &#x27;&#x27;, d = &#x27;&#x27;, r = 0;</span><br><span class="line">function getLuckyDraw() &#123;</span><br><span class="line">    w.css(&quot;background-color&quot;, &quot;#f1c40f&quot;);</span><br><span class="line">    w = w.parents(&quot;.card&quot;);</span><br><span class="line">    w.css(&quot;background-color&quot;, &quot;#2ecc71&quot;);</span><br><span class="line">    w[w.length - 1].querySelectorAll(&quot;.child-button&quot;)[1].click();</span><br><span class="line">    setTimeout(clickDel, delay);</span><br><span class="line">&#125;</span><br><span class="line">function getDel() &#123;</span><br><span class="line">    d.css(&quot;background-color&quot;, &quot;#8e44ad&quot;);</span><br><span class="line">    d = d.parents(&quot;.card&quot;);</span><br><span class="line">    d.css(&quot;background-color&quot;, &quot;#2ecc71&quot;);</span><br><span class="line">    d[d.length - 1].querySelectorAll(&quot;.child-button&quot;)[1].click();</span><br><span class="line">    setTimeout(clickDel, delay);</span><br><span class="line">&#125;</span><br><span class="line">function clickDel() &#123;</span><br><span class="line">    //点删除</span><br><span class="line">    $(&quot;.popup-content-ctnr&quot;)[$(&quot;.popup-content-ctnr&quot;).length - 2].querySelector(&quot;.bl-button&quot;).click(); // 点确定</span><br><span class="line">    r += scrolls;</span><br><span class="line">    $(&#x27;html, body&#x27;).animate(&#123; scrollTop: r &#125;, 30);</span><br><span class="line">    $(&quot;.fold-text&quot;).click()</span><br><span class="line">    $(&quot;.expand-btn&quot;).click();</span><br><span class="line">    w = $(&quot;.main-content&quot;).find(&#x27;span[click-title=&quot;抽奖详情&quot;]&#x27;);</span><br><span class="line">    d = $(&quot;.main-content&quot;).find(&#x27;.deleted-text&#x27;);</span><br><span class="line">    if (d.length &amp;&amp; needDelDeled) setTimeout(getDel, delay);</span><br><span class="line">    else setTimeout(getLuckyDraw, delay);</span><br><span class="line">&#125;</span><br><span class="line">if (/dynamic/.test(window.location.href) &amp;&amp; confirm(&quot;是不是要删除抽奖动态&quot;)) &#123;</span><br><span class="line">    r += scrolls;</span><br><span class="line">    $(&#x27;html, body&#x27;).animate(&#123; scrollTop: r &#125;, 30);</span><br><span class="line">    $(&quot;.fold-text&quot;).click()</span><br><span class="line">    $(&quot;.expand-btn&quot;).click();</span><br><span class="line">    w = $(&quot;.main-content&quot;).find(&#x27;span[click-title=&quot;抽奖详情&quot;]&#x27;);//*互动抽奖内容定位</span><br><span class="line">    d = $(&quot;.main-content&quot;).find(&#x27;.deleted-text&#x27;);   //*已删除内容定位</span><br><span class="line">    if (d.length &amp;&amp; needDelDeled) setTimeout(getDel, delay);</span><br><span class="line">    else setTimeout(getLuckyDraw, delay);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> B站 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>日常使用的软件</title>
      <link href="/posts/5591.html"/>
      <url>/posts/5591.html</url>
      
        <content type="html"><![CDATA[<table><thead><tr><th align="left">类别</th><th align="left">软件名称</th></tr></thead><tbody><tr><td align="left">软件管理</td><td align="left">火绒安全、CCleanner、IObitUninstallerPROPortable</td></tr><tr><td align="left">浏览器</td><td align="left">chrome、firefox、Microsoft Edge</td></tr><tr><td align="left">即时通讯</td><td align="left">TIM、微信</td></tr><tr><td align="left">企业管理</td><td align="left">企业微信、阿里钉钉</td></tr><tr><td align="left">在线文档</td><td align="left">石墨文档、金山文档</td></tr><tr><td align="left">思维导图</td><td align="left">XMind ZEN、幕布</td></tr><tr><td align="left">屏幕录屏</td><td align="left">EV录屏、Bandicam</td></tr><tr><td align="left">云盘</td><td align="left">蓝奏云、百度云盘</td></tr><tr><td align="left">音乐</td><td align="left">网易云音乐、QQ音乐、Spotify</td></tr><tr><td align="left">播放器</td><td align="left">PotPlayer、QQ影音</td></tr><tr><td align="left">虚拟机</td><td align="left">VMware Workstation Pro、网易mumu模拟器</td></tr><tr><td align="left">编辑器</td><td align="left">Visual Studio Code、Sublime Text 3、Typora</td></tr></tbody></table><hr><table><thead><tr><th align="left">功能</th><th align="left">软件名称</th></tr></thead><tbody><tr><td align="left">PDF查看器</td><td align="left">福昕高级PDF</td></tr><tr><td align="left">文件搜索</td><td align="left">Everything</td></tr><tr><td align="left">下载器</td><td align="left">Internet Download Manager</td></tr><tr><td align="left">批量重命名</td><td align="left">ReNamer</td></tr><tr><td align="left">快速截屏</td><td align="left">Snipaste</td></tr><tr><td align="left">文字识别</td><td align="left">天若OCR文字识别</td></tr><tr><td align="left">便捷翻译</td><td align="left">金山词霸2016</td></tr><tr><td align="left">练习打字</td><td align="left">打字旋风</td></tr><tr><td align="left">格式转换</td><td align="left">格式工厂</td></tr><tr><td align="left">解压缩</td><td align="left">7-zip</td></tr><tr><td align="left">图片浏览</td><td align="left">ImageGlass</td></tr><tr><td align="left">python环境</td><td align="left">Anaconda3</td></tr></tbody></table><hr><p>微软商店下载<br>|功能|软件名称|<br>| :—–| :—- |<br>|调节屏幕亮度|Twinkle Tray|<br>|各个媒体音量|EarTrumpet|</p>]]></content>
      
      
      
        <tags>
            
            <tag> 软件 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>网页变灰色</title>
      <link href="/posts/999b.html"/>
      <url>/posts/999b.html</url>
      
        <content type="html"><![CDATA[<p>今天是 2020 年 4 月 4 日，星期六，清明节。</p><p>我们的国家经历了非常惨痛的时刻，很多英雄在救助他人的路上倒下，更有很多烈士英雄保卫人民的安危遇难，今天全国下降半旗，北京时间 10 点全国默哀三分钟，来致敬英雄们。同时今天一切公共娱乐活动也都会停止，包括直播、综艺、影视、游戏等等。</p><p>我也在这里也向全国抗击新冠肺炎疫情斗争牺牲的烈士和逝世的同胞表达深切的哀悼，向所有在抗战在疫情前线的工作和医护人员致敬。我们每一个人的平安面前，都是英雄的人墙。</p><h1 id="网站变灰"><a href="#网站变灰" class="headerlink" title="网站变灰"></a>网站变灰</h1><p>今天大家可以看到很多很多网站包括主页和内容也都已经变成了灰色，比如百度、B 站、爱奇艺、CSDN 等等。通过浏览器的开发者工具观察和点击勾选样式后发现有这么一段变灰色的css代码。</p><pre><code>// B站的html.gray &#123;    -webkit-filter: grayscale(.95);&#125;</code></pre><p>-</p><pre><code>// CSDN的html &#123;    -webkit-filter: grayscale(100%);    -moz-filter: grayscale(100%);    -ms-filter: grayscale(100%);    -o-filter: grayscale(100%);    filter: grayscale(100%);    filter: progid:DXImageTransform.Microsoft.BasicImage(grayscale=1);&#125;</code></pre><blockquote><p>其实，如果不考虑旧版本的浏览器直接这样也可以</p></blockquote><pre><code>html &#123;    filter: grayscale(100%);&#125;</code></pre><p>至此又学习到了点新知识</p><h1 id="尾巴"><a href="#尾巴" class="headerlink" title="尾巴"></a>尾巴</h1><p>分享个MDN的测试demo链接，里面有更多东西学习<br><a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/filter">https://developer.mozilla.org/zh-CN/docs/Web/CSS/filter</a></p><p><img src="https://raw.githubusercontent.com/pengyirui/blog_img/main/2020-04-04-1.gif"></p>]]></content>
      
      
      
        <tags>
            
            <tag> 前端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>查看自己B站的注册时间</title>
      <link href="/posts/d76.html"/>
      <url>/posts/d76.html</url>
      
        <content type="html"><![CDATA[<p>首先需要在浏览器登录B站首页</p><blockquote><p>B站首页链接 <a href="https://www.bilibili.com/">https://www.bilibili.com/</a></p></blockquote><p>然后点击下面的链接就能查看json文件</p><blockquote><p>查看链接 <a href="https://member.bilibili.com/x2/creative/h5/calendar/event?ts=0">https://member.bilibili.com/x2/creative/h5/calendar/event?ts=0</a><br>(需要复制到浏览器才能看，不要直接点开（不知道为什么😥)</p></blockquote><p>其中有一个<code>jointime</code>的字段，这个是注册B站的时间戳。<br><img src="https://raw.githubusercontent.com/pengyirui/blog_img/main/2020-03-30-1.png" alt="比如我的就是这样的"></p><p>复制<code>jointime</code>字段的数字，去转换时间戳的网址转换就能看出自己是什么时候注册的啦</p><blockquote><p>转换时间戳的链接 –&gt; <a href="https://tool.lu/timestamp/">https://tool.lu/timestamp/</a></p></blockquote><p><img src="https://raw.githubusercontent.com/pengyirui/blog_img/main/2020-03-30-2.png" alt="我注册时间"></p>]]></content>
      
      
      
        <tags>
            
            <tag> B站 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>如何全面的检测你的电脑</title>
      <link href="/posts/8d39.html"/>
      <url>/posts/8d39.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>刚买回来的电脑不知道整体状况怎么样？以下工具希望能帮到你</p></blockquote><p>一、电脑硬件和帧率显示的软件显卡超频和硬件监控于一体的软件<br>MSI afterburner（官网下载）：<a href="http://download-cn.msi.com/uti_exe/vga/MSIAfterburnerSetup.zip">http://download-cn.msi.com/uti_exe/vga/MSIAfterburnerSetup.zip</a><br><img src="https://raw.githubusercontent.com/pengyirui/blog_img/main/2020-03-28-1.png" alt="MSI afterburner"></p><hr><p>二、电脑的硬件详细信息<br>Aida64（官网试用版，有功能限制）：<a href="http://download.aida64.com/aida64extreme620.exe">http://download.aida64.com/aida64extreme620.exe</a><br>Aida64（网络绿色版）：<a href="http://cr2.197946.com/aida64extreme_build_5157_xbnj9z3mdy.zip">http://cr2.197946.com/aida64extreme_build_5157_xbnj9z3mdy.zip</a><br><img src="https://raw.githubusercontent.com/pengyirui/blog_img/main/2020-03-28-2.png" alt="Aida64"></p><hr><p>三、硬盘性能测试软件（适合小白<br>AS SSD （官网英文版）：<a href="https://www.alex-is.de/PHP/fusion/downloads.php?cat_id=4&amp;file_id=9">https://www.alex-is.de/PHP/fusion/downloads.php?cat_id=4&amp;file_id=9</a><br>AS SSD （网络汉化版）：<a href="http://forspeed.onlinedown.net/down/newdown/3/12/AS%20SSD%20Benchmark%202.0.7316.34247.zip">http://forspeed.onlinedown.net/down/newdown/3/12/AS%20SSD%20Benchmark%202.0.7316.34247.zip</a><br><img src="https://raw.githubusercontent.com/pengyirui/blog_img/main/2020-03-28-3.png" alt="AS SSD"></p><hr><p>四、类似AS SSD但功能更全（上手难度大<br>Crystal DiskMark（官网下载）：<a href="https://zh.osdn.net/frs/redir.php?m=xtom_us&amp;f=crystaldiskmark/71859/CrystalDiskMark7_0_0hShizuku.zip">https://zh.osdn.net/frs/redir.php?m=xtom_us&amp;f=crystaldiskmark%2F71859%2FCrystalDiskMark7_0_0hShizuku.zip</a><br><img src="https://raw.githubusercontent.com/pengyirui/blog_img/main/2020-03-28-4.png" alt="Crystal DiskMark"></p><hr><p>五、硬盘测试软件（检查有没有坏道等<br>HD tune Pro（官网15天试用版）：<a href="http://www.hdtune.com/files/hdtunepro_575_trial.exe">http://www.hdtune.com/files/hdtunepro_575_trial.exe</a><br><img src="https://raw.githubusercontent.com/pengyirui/blog_img/main/2020-03-28-5.png" alt="HD tune Pro"></p><p>六、非常专业权威的电脑性能测试软件（游戏测试用得多,steam与wegame有得卖<br>3D Mark（官网）：<a href="https://www.3dmark.com/">https://www.3dmark.com/</a><br><img src="https://raw.githubusercontent.com/pengyirui/blog_img/main/2020-03-28-6.png" alt="3D Mark"></p><blockquote><p>依然不懂怎么使用？详细版可以看【<a href="https://www.bilibili.com/video/BV1q7411C7px">保姆级教学</a>】</p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> 软件 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>自制定时器</title>
      <link href="/posts/d965.html"/>
      <url>/posts/d965.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>现在市面上的那些提醒软件要么占用资源多，要么弹广告耍流氓。真是受够了。。。唯有自己做一个咯~</p></blockquote><p>需要python环境</p><p>代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> ctypes</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">MsgBox</span>(<span class="params">title,text,style</span>):</span><br><span class="line"><span class="keyword">return</span> ctypes.windll.user32.MessageBoxW(<span class="number">0</span>,text,title,style)</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">MsgBox(<span class="string">&#x27;上课&#x27;</span>,<span class="string">&#x27;学习使我快乐！！！&#x27;</span>,<span class="number">0</span>)</span><br><span class="line">time.sleep(<span class="number">60</span>*<span class="number">45</span>)</span><br><span class="line">MsgBox(<span class="string">&#x27;下课&#x27;</span>,<span class="string">&#x27;来啊，快活啊，反正有，大把时光&#x27;</span>,<span class="number">0</span>)</span><br><span class="line">time.sleep(<span class="number">60</span>*<span class="number">10</span>)</span><br></pre></td></tr></table></figure><p>效果图：<br><img src="https://raw.githubusercontent.com/pengyirui/blog_img/main/2020-03-25-1.png"><br><img src="https://raw.githubusercontent.com/pengyirui/blog_img/main/2020-03-25-2.png"></p><hr><p>顺便推荐手机上的清单类APP，没广告，免费部分完全够用（简直是做慈善啊😂</p><p>官网链接 ====&gt; <a href="https://www.dida365.com/#q/all/tasks">嘀嗒清单</a></p><p><img src="https://raw.githubusercontent.com/pengyirui/blog_img/main/2020-03-25-3.png" alt="官网截图"></p>]]></content>
      
      
      
        <tags>
            
            <tag> 软件 </tag>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>matery主题追加更多功能</title>
      <link href="/posts/201a.html"/>
      <url>/posts/201a.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>部分教程已过时效，请注意修改<br>hexo-theme-matery的介绍  ===&gt;<a href="https://blinkfox.github.io/2018/09/28/qian-duan/hexo-bo-ke-zhu-ti-zhi-hexo-theme-matery-de-jie-shao/">链接</a><br>详细的文章 ==&gt;<a href="https://yafine66.gitee.io/posts/4ab2.html">链接</a></p></blockquote><h3 id="文章的字段解释"><a href="#文章的字段解释" class="headerlink" title="文章的字段解释"></a>文章的字段解释</h3><p><img src="https://raw.githubusercontent.com/pengyirui/blog_img/main/2020-03-23-1.png" alt="文章里面的设置"><br><img src="https://raw.githubusercontent.com/pengyirui/blog_img/main/2020-03-23-2.png" alt="详细的版本"></p><h3 id="相册的添加"><a href="#相册的添加" class="headerlink" title="相册的添加"></a>相册的添加</h3><p>修改图片的前半部分链接（没什么大问题基本不会改）：在主题layout目录下<code>galleries.ejs</code>文件和gallery.ejs文件</p><p>相册配置文件（相册后半部分链接）：在站点目录<code>sources/_data/</code>下有一个<code>galleries.json</code> 的文件</p><ul><li>name是相册标题</li><li>cover是封面图片</li><li>description是相册介绍</li><li>photos是图片列表</li></ul><p>最后一步，设置相册的相框：在站点目录<code>source\galleries\</code>下新建以相册的命名的文件夹，新建的文件夹下再新建<code>index.md</code></p><h3 id="看板娘设置"><a href="#看板娘设置" class="headerlink" title="看板娘设置"></a>看板娘设置</h3><p>1、首先检查博客主目录下面的<code>package.json</code>里是否有<code>hexo-helper-live2d</code>依赖<br>*以下命令在博客主目录下执行<br>卸载：<code>npm uninstall hexo-helper-live2d</code><br>安装：<code>npm install --save hexo-helper-live2d</code></p><p>2、下载各种动画model：<br>链接：<a href="https://github.com/xiazeyu/live2d-widget-models.git">https://github.com/xiazeyu/live2d-widget-models.git</a><br>如果慢可以使用以下链接：<a href="https://gitee.com/pengyirui/live2d-widget-models">https://gitee.com/pengyirui/live2d-widget-models</a></p><p>3、下载好之后将packages里的所有动画模板拷贝到博客的node_modules目录里</p><p>4、配置博客站点配置文件，_config.yml</p><pre><code>live2d:enable: truepluginModelPath: assets/model:    use: live2d-widget-model-epsilon2_1  #模板目录，在node_modules里display:    position: right    width: 150     height: 300mobile:    show: false  #是否在手机进行显示</code></pre><h3 id="使用git备份博客"><a href="#使用git备份博客" class="headerlink" title="使用git备份博客"></a>使用git备份博客</h3><blockquote><p>由于github的服务器在国外，访问的速度有时候不稳定。以下内容使用的是gitee<br>如果想要是私密仓库最好是开放后再提交，之后再设置成私密</p></blockquote><h1 id="全局设置"><a href="#全局设置" class="headerlink" title="全局设置"></a>全局设置</h1><pre><code>git config --global user.name &quot;你的名字&quot;git config --global user.email &quot;你的邮箱&quot;</code></pre><h1 id="创建git仓库"><a href="#创建git仓库" class="headerlink" title="创建git仓库"></a>创建git仓库</h1><pre><code>git initgit remote add origin git@github.com:xxx/xxx  // 即你的 SSH urlgit add .git commit -m &quot;版本说明信息&quot;git push origin master</code></pre><h3 id="尾巴"><a href="#尾巴" class="headerlink" title="尾巴"></a>尾巴</h3><p>主题git仓库 ==&gt; <a href="https://gitee.com/yafine66/hexo-theme-matery">https://gitee.com/yafine66/hexo-theme-matery</a></p><p>看板娘预览图：<a href="https://huaji8.top/post/live2d-plugin-2.0/">https://huaji8.top/post/live2d-plugin-2.0/</a></p><p>制作相册部分参考了两位大佬的博客：<br><a href="https://liyangzone.com/2019/07/22/hexo%E5%8D%9A%E5%AE%A2%E6%B7%BB%E5%8A%A0%E4%B8%80%E7%BA%A7%E5%88%86%E7%B1%BB%E7%9B%B8%E5%86%8C/">https://liyangzone.com/2019/07/22/hexo博客添加一级分类相册/</a><br><a href="https://yafine66.gitee.io/posts/3b98.html">https://yafine66.gitee.io/posts/3b98.html</a></p><p>Valine评论系统官网：<a href="https://leancloud.cn/dashboard/login.html">https://leancloud.cn/dashboard/login.html</a><br>七牛云：<a href="https://www.qiniu.com/">https://www.qiniu.com/</a><br>友盟+：<a href="https://www.umeng.com/">https://www.umeng.com/</a></p><p>文章预览图推荐使用474*314px</p>]]></content>
      
      
      
        <tags>
            
            <tag> 博客 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>那些神奇的网站</title>
      <link href="/posts/b5fa.html"/>
      <url>/posts/b5fa.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>转载自：<a href="https://blog.csdn.net/qq_43901693/article/details/100606828">https://blog.csdn.net/qq_43901693/article/details/100606828</a><br>根据自己使用习惯，略有增减</p></blockquote><hr><h2 id="导航页（工具集）"><a href="#导航页（工具集）" class="headerlink" title="导航页（工具集）"></a>导航页（工具集）</h2><p>现实君工具箱（综合型在线工具集成网站）：<a href="http://tool.uixsj.cn/">http://tool.uixsj.cn/</a></p><p>蓝调网站：<a href="http://lcoc.top/">http://lcoc.top/</a></p><p>偷渡鱼：<a href="https://touduyu.com/">https://touduyu.com/</a></p><p>小呆导航：<a href="https://www.webjike.com/index.html">https://www.webjike.com/index.html</a></p><p>简法主页：<a href="http://www.jianfast.com/">http://www.jianfast.com/</a></p><p>KIM主页：<a href="https://kim.plopco.com/">https://kim.plopco.com/</a></p><p>聚BT：<a href="https://jubt.net/cn/index.html">https://jubt.net/cn/index.html</a></p><p>兔2工具合集：<a href="https://www.tool2.cn/">https://www.tool2.cn/</a></p><p>爱资料工具（在线实用工具集合）：<a href="https://www.toolnb.com/">https://www.toolnb.com</a></p><p>工具导航：<a href="https://hao.logosc.cn/">https://hao.logosc.cn/</a></p><h2 id="学习"><a href="#学习" class="headerlink" title="学习"></a>学习</h2><p>MDN：<a href="https://developer.mozilla.org/zh-CN">https://developer.mozilla.org/zh-CN</a></p><p>IBM Developer：<a href="https://www.ibm.com/developerworks/cn">https://www.ibm.com/developerworks/cn</a></p><p>前端学习路线：<a href="https://github.com/iq9891/awesome-frontend/blob/master/README.md">https://github.com/iq9891/awesome-frontend/blob/master/README.md</a></p><p>谷粉学术： <a href="https://gfsoso.99lb.net/scholar.html">https://gfsoso.99lb.net/scholar.html</a></p><p>大学资源网：<a href="http://www.dxzy163.com/">http://www.dxzy163.com/</a></p><p>简答题：<a href="http://www.jiandati.com/">http://www.jiandati.com/</a></p><p>中国大学MOOC：<a href="https://www.icourse163.org/">https://www.icourse163.org</a></p><p>我要自学网：<a href="https://www.51zxw.net/">https://www.51zxw.net</a></p><p>猫咪论文：<a href="https://lunwen.im/">https://lunwen.im/</a></p><p>iData（论文搜索）：<a href="https://www.cn-ki.net/">https://www.cn-ki.net</a></p><p>码农之家（计算机电子书下载）：<a href="https://www.xz577.com/">https://www.xz577.com</a></p><p>鸠摩搜书：<a href="https://www.jiumodiary.com/">https://www.jiumodiary.com</a></p><p>脚本之家电子书下载：<a href="https://www.jb51.net/books/">https://www.jb51.net/books/</a></p><p>搜书VIP-电子书搜索：<a href="http://www.soshuvip.com/all.html">http://www.soshuvip.com/all.html</a></p><p>书格（在线古籍图书馆）：<a href="https://new.shuge.org/">https://new.shuge.org/</a></p><p>术语在线：<a href="http://www.termonline.cn/">http://www.termonline.cn/</a></p><p>必看网（人生必看的书籍）：<a href="https://www.biikan.com/">https://www.biikan.com/</a></p><h2 id="冷知识-黑科技"><a href="#冷知识-黑科技" class="headerlink" title="冷知识 / 黑科技"></a>冷知识 / 黑科技</h2><p>星系观察：<a href="https://stellarium-web.org/">https://stellarium-web.org/</a></p><p>渣男-说话的艺术：<a href="https://lovelive.tools/">https://lovelive.tools/</a></p><p>全历史：<a href="https://www.allhistory.com/">https://www.allhistory.com/</a></p><p>iData：<a href="https://www.cn-ki.net/">https://www.cn-ki.net/</a></p><h2 id="资源搜索"><a href="#资源搜索" class="headerlink" title="资源搜索"></a>资源搜索</h2><p>DogeDoge搜索引擎：<a href="https://www.dogedoge.com/">https://www.dogedoge.com</a></p><p>秘迹搜索：<a href="https://mijisou.com/">https://mijisou.com/</a></p><p>小白盘：<a href="https://www.xiaobaipan.com/">https://www.xiaobaipan.com/</a></p><p>云盘精灵（资源搜索）：<a href="https://www.yunpanjingling.com/">https://www.yunpanjingling.com</a></p><p>虫部落（资源搜索）：<a href="https://www.chongbuluo.com/">https://www.chongbuluo.com</a></p><p>如风搜（资源搜索）：<a href="http://www.rufengso.net/">http://www.rufengso.net/</a></p><p>爱扒：<a href="https://www.zyboe.com/">https://www.zyboe.com/</a></p><p>大数据导航：<a href="http://hao.199it.com/">http://hao.199it.com/</a></p><h2 id="小工具"><a href="#小工具" class="headerlink" title="小工具"></a>小工具</h2><p>win10微软官方：<a href="https://www.microsoft.com/zh-cn/software-download/windows10">https://www.microsoft.com/zh-cn/software-download/windows10</a></p><p>小米笔记本中安装小米互传（小米笔记本15.6pro测试ok）:<br>蓝牙驱动：<a href="https://downloadcenter.intel.com/zh-cn/download/29460">https://downloadcenter.intel.com/zh-cn/download/29460</a><br>网卡驱动：<a href="https://downloadcenter.intel.com/zh-cn/download/29455">https://downloadcenter.intel.com/zh-cn/download/29455</a><br>小米互传：<a href="http://cdn.cnbj1.fds.api.mi-img.com/download/miaiot/MiAIoT_Setup_1.0.0.259_20191108_1618X.exe">http://cdn.cnbj1.fds.api.mi-img.com/download/miaiot/MiAIoT_Setup_1.0.0.259_20191108_1618X.exe</a></p><p>下载B站视频：<a href="https://www.urlgot.cn/">https://www.urlgot.cn/</a></p><p>MyFreeMP3（音乐下载）：<a href="http://mctool.cn/music/">http://mctool.cn/music/</a></p><p>在线接口测试（Getman）：<a href="https://getman.cn/">https://getman.cn/</a></p><p>香当网（年终总结，个人简历，事迹材料，租赁合同，演讲稿）：<a href="https://www.xiangdang.net/">https://www.xiangdang.net/</a></p><p>二维码生成：<a href="https://cli.im/">https://cli.im/</a></p><p>拷贝兔：<a href="https://cp.anyknew.com/">https://cp.anyknew.com/</a></p><p>图片无限变放大：<a href="http://bigjpg.com/zh">http://bigjpg.com/zh</a></p><p>幕布（在线大纲笔记工具）：<a href="https://mubu.com/">https://mubu.com/</a></p><p>奶牛快传（在线传输文件利器）：<a href="https://cowtransfer.com/">https://cowtransfer.com</a></p><p>调查问卷制作：<a href="https://www.wenjuan.com/">https://www.wenjuan.com/</a></p><p>果核剥壳：<a href="https://www.ghpym.com/">https://www.ghpym.com/</a></p><p>熊猫破解：<a href="http://www.xmpojie.com/">http://www.xmpojie.com/</a></p><p>软件下载：<a href="https://www.unyoo.com/">https://www.unyoo.com/</a></p><p>MSDN我告诉你（windows10系统镜像下载）：<a href="https://msdn.itellyou.cn/">https://msdn.itellyou.cn/</a></p><p>独木成林：<a href="https://www.avdll.com/">https://www.avdll.com/</a></p><p>亿破姐：<a href="https://www.ypojie.com/">https://www.ypojie.com/</a></p><h2 id="视频"><a href="#视频" class="headerlink" title="视频"></a>视频</h2><p>2W电影网：<a href="http://kk2w.cc/">http://kk2w.cc/</a></p><p>粤视频：<a href="http://www.yuesp.com/">http://www.yuesp.com/</a></p><p>片库：<a href="https://www.pianku.tv/">https://www.pianku.tv/</a></p><p>电影推荐（分类别致）：<a href="http://www.mvcat.com/">http://www.mvcat.com</a></p><p>去看TV：<a href="https://www.qukantv.net/">https://www.qukantv.net/</a></p><p>动漫视频网：<a href="http://www.zzzfun.com/">http://www.zzzfun.com/</a></p><p>NO视频官网：<a href="http://www.novipnoad.com/">http://www.novipnoad.com/</a></p><p>蓝光画质电影：<a href="http://www.languang.co/">http://www.languang.co/</a></p><h2 id="设计"><a href="#设计" class="headerlink" title="设计"></a>设计</h2><p>Font Awesome：<a href="https://fa5.dashgame.com/">https://fa5.dashgame.com</a><br>Font Awesome（中文网）：<a href="http://www.fontawesome.com.cn/">http://www.fontawesome.com.cn</a></p><p>免费音频素材：<a href="https://icons8.cn/music">https://icons8.cn/music</a></p><p>新CG儿（视频素材模板，无水印+免费下载）：<a href="https://www.newcger.com/">https://www.newcger.com/</a></p><p>小图标下载：<a href="https://www.easyicon.net/">https://www.easyicon.net/</a></p><p>第一字体转换器：<a href="http://www.diyiziti.com/">http://www.diyiziti.com/</a></p><p>doyoudosh（平面设计）：<a href="https://www.doyoudo.com/">https://www.doyoudo.com</a></p><p>企业宣传视频在线制作：<a href="https://duomu.tv/">https://duomu.tv/</a></p><p>MAKE海报设计官网：<a href="http://maka.im/">http://maka.im/</a></p><p>一键海报神器：<a href="https://www.logosc.cn/photo/?utm_source=hao.logosc.cn&amp;utm_medium=referral">https://www.logosc.cn/photo/?utm_source=hao.logosc.cn&amp;utm_medium=referral</a></p><p>字由（字体设计）：<a href="http://www.hellofont.cn/">http://www.hellofont.cn/</a></p><p>查字体网站：<a href="https://fonts.safe.360.cn/">https://fonts.safe.360.cn/</a></p><p>爱给网（免费素材下载的网站，包括音效、配乐，3D、视频、游戏，平面、教程）：<a href="http://www.aigei.com/">http://www.aigei.com/</a></p><h2 id="文档"><a href="#文档" class="headerlink" title="文档"></a>文档</h2><p>嗨文库（文库资源下载）：<a href="http://hiwenku.com/">http://hiwenku.com</a></p><p>三顿PPT导航：<a href="https://sandunppt.com/">https://sandunppt.com</a></p><p>即书（在线制作PPT）：<a href="https://www.keysuper.com/">https://www.keysuper.com</a></p><p>PDF处理：<a href="https://smallpdf.com/cn">https://smallpdf.com/cn</a></p><p>PDF处理：<a href="https://www.ilovepdf.com/zh-cn">https://www.ilovepdf.com/zh-cn</a></p><p>PDF处理：<a href="https://www.pdfpai.com/">https://www.pdfpai.com/</a></p><p>PDF处理：<a href="https://www.hipdf.cn/">https://www.hipdf.cn/</a></p><p>腾讯文档（在线协作编辑和管理文档）：<a href="https://docs.qq.com/">https://docs.qq.com</a></p><p>ProcessOn（在线协作制作结构图）：<a href="https://www.processon.com/">https://www.processon.com</a></p><p>PPT在线制作：<a href="https://www.woodo.cn/">https://www.woodo.cn/</a></p><p>TinyPNG（在线压缩图片）：<a href="https://tinypng.com/">https://tinypng.com</a></p><p>UZER.ME（在线使用各种大应用，在线使用CAD，MATLAB，Office三件套）：<a href="https://uzer.me/">https://uzer.me</a></p><p>优品PPT（模板下载）：<a href="http://www.ypppt.com/">http://www.ypppt.com/</a></p><p>第一PPT（模板下载）：<a href="http://www.1ppt.com/xiazai/">http://www.1ppt.com/xiazai/</a></p><h2 id="图片"><a href="#图片" class="headerlink" title="图片"></a>图片</h2><p>多功能图片网站（免费版权：<a href="https://www.logosc.cn/so/">https://www.logosc.cn/so/</a></p><p>电脑壁纸：<a href="http://lcoc.top/bizhi/">http://lcoc.top/bizhi/</a></p><p>unsplash：<a href="https://unsplash.com/">https://unsplash.com/</a></p><p>pixabay：<a href="https://pixabay.com/">https://pixabay.com/</a></p><p>免费素材图片：<a href="https://www.pexels.com/">https://www.pexels.com/</a></p><p>沙沙野：<a href="https://www.ssyer.com/">https://www.ssyer.com/</a></p><p>彼岸图网：<a href="http://pic.netbian.com/">http://pic.netbian.com/</a></p><p>极像素（超高清大图）：<a href="https://www.sigoo.com/">https://www.sigoo.com/</a></p><p>免费版权图片搜索：<a href="https://www.logosc.cn/so/">https://www.logosc.cn/so/</a></p><p>pixiv:<a href="https://www.pixiv.net/">https://www.pixiv.net</a></p><p>yande：<a href="https://yande.re/user/home">https://yande.re/user/home</a></p><p>Skuawk（摄影图）：<a href="http://skuawk.com/">http://skuawk.com</a></p><p>免费商用网站Stockvault：<a href="https://www.stockvault.net/">https://www.stockvault.net/</a></p><p>随即图<br><a href="https://api.yunernya.com/bing/">https://api.yunernya.com/bing/</a><br><a href="https://api.yunernya.com/girl/">https://api.yunernya.com/girl/</a><br><a href="https://api.yunernya.com/pc/">https://api.yunernya.com/pc/</a><br><a href="https://api.yunernya.com/m/">https://api.yunernya.com/m/</a><br>bing库1743张<br>pc库400张<br>m库1480张<br>girl库10164张</p><h2 id="社交"><a href="#社交" class="headerlink" title="社交"></a>社交</h2><p>电脑端微博（按发布时间排序）：weibo.com/?is_search=1</p>]]></content>
      
      
      
        <tags>
            
            <tag> 链接 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>常用的Markdown语法</title>
      <link href="/posts/adfd.html"/>
      <url>/posts/adfd.html</url>
      
        <content type="html"><![CDATA[<h2 id="基础"><a href="#基础" class="headerlink" title="基础"></a>基础</h2><p>1.大标题： </p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">## heading</span></span><br></pre></td></tr></table></figure><p>2.小标题： </p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="section"># heading</span></span><br></pre></td></tr></table></figure><p>3.普通文本：</p><pre><code>plain text</code></pre><p>4.超链接： </p><pre><code>[text](url)</code></pre><p>5.代码块： </p><pre><code>​```//some code here```</code></pre><h2 id="标题"><a href="#标题" class="headerlink" title="标题"></a>标题</h2><p>Markdown支持共六级标题，语法如下：</p><pre><code>## 一级标题## 二级标题## 第六级标题</code></pre><hr><h2 id="强调"><a href="#强调" class="headerlink" title="强调"></a>强调</h2><pre><code>*这些文字会生成&lt;em&gt;的效果*_这些文字会生成&lt;u&gt;的效果_**这些文字会生成&lt;strong&gt;效果**__这些文字会生成&lt;strong&gt;的效果__</code></pre><p>效果如下：</p><p>(文本问题，暂不展示效果)</p><hr><h2 id="换行"><a href="#换行" class="headerlink" title="换行"></a>换行</h2><p>四个及以上的空格加回车。（这个还真不如直接用HTML简单）</p><hr><h2 id="无序列表"><a href="#无序列表" class="headerlink" title="无序列表"></a>无序列表</h2><pre><code>* 项目一 无序列表 * 项目二    * 项目二的子项目一 无序列表     * 项目二的子项目二即：*+空格+项目TAB+*+空格+子项目</code></pre><p>效果如下：</p><ul><li>项目一 无序列表 </li><li>项目二<ul><li>项目二的子项目一 无序列表 </li><li>项目二的子项目二</li></ul></li></ul><hr><h2 id="有序列表"><a href="#有序列表" class="headerlink" title="有序列表"></a>有序列表</h2><pre><code>1. 项目一 有序列表 2. 项目二 3. 项目三    1. 项目三的子项目一     2. 项目三的子项目二即：数字+.+空格+项目TAB+数字+.+空格+子项目</code></pre><p>效果如下：</p><ol><li>项目一 有序列表 </li><li>项目二 </li><li>项目三<ol><li>项目三的子项目一 </li><li>项目三的子项目二</li></ol></li></ol><hr><h2 id="任务列表"><a href="#任务列表" class="headerlink" title="任务列表"></a>任务列表</h2><p>语法如下（中括号内为字母x）：</p><pre><code>- [ ] 任务一 未做任务 - [x] 任务二 已做任务</code></pre><p>效果如下：</p><p>（显示问题）</p><ul><li><input disabled="" type="checkbox"> 任务一 未做任务 </li><li><input checked="" disabled="" type="checkbox"> 任务二 已做任务</li></ul><h2 id="图片"><a href="#图片" class="headerlink" title="图片"></a>图片</h2><p>语法如下：</p><pre><code>![title text](url)</code></pre><hr><h2 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h2><p>语法如下：</p><pre><code>文本链接：[text](url)自动生成链接：&lt;url&gt;例：email &lt;example@example.com&gt;[GitHub](http://github.com)自动生成连接  &lt;http://www.github.com/&gt;</code></pre><p>效果如下：</p><p>文本链接：<a href="url">text</a><br>自动生成链接：<url><br>例：<br>email <a href="mailto:&#101;&#x78;&#x61;&#109;&#x70;&#108;&#x65;&#x40;&#101;&#x78;&#97;&#109;&#x70;&#108;&#101;&#x2e;&#99;&#111;&#x6d;">&#101;&#x78;&#x61;&#109;&#x70;&#108;&#x65;&#x40;&#101;&#x78;&#97;&#109;&#x70;&#108;&#101;&#x2e;&#99;&#111;&#x6d;</a><br><a href="http://github.com/">GitHub</a><br>自动生成连接  <a href="http://www.github.com/">http://www.github.com/</a></p><hr><h2 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h2><p>语法如下：</p><pre><code>&gt; 第一行引用文字&gt; 第二行引用文字&gt; 第一行引用文字&gt; 第二行引用文字</code></pre><hr><h2 id="行内代码"><a href="#行内代码" class="headerlink" title="行内代码"></a>行内代码</h2><p>语法如下：</p><pre><code>`code here`</code></pre><p>效果如下</p><p><code>code here</code></p><hr><h2 id="代码块"><a href="#代码块" class="headerlink" title="代码块"></a>代码块</h2><kbd><pre><code>some code here</code></pre></kbd><p>效果如下</p><pre><code>print(&quot;hello world&quot;)</code></pre><hr><h2 id="表格"><a href="#表格" class="headerlink" title="表格"></a>表格</h2><figure class="highlight md"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">|标题一|标题二|</span><br><span class="line">|:----:|:----:|</span><br><span class="line">|内容一|内容二|</span><br><span class="line"></span><br><span class="line">居中</span><br><span class="line">|:----:|</span><br><span class="line"></span><br><span class="line">左对齐</span><br><span class="line">|:----|</span><br><span class="line"></span><br><span class="line">右对齐</span><br><span class="line">|----:|</span><br></pre></td></tr></table></figure><p>效果如下：</p><table><thead><tr><th align="center">标题一</th><th align="center">标题二</th></tr></thead><tbody><tr><td align="center">内容一</td><td align="center">内容二</td></tr></tbody></table><h2 id="3-后续"><a href="#3-后续" class="headerlink" title="3.后续"></a>3.后续</h2><p>推荐使用的Markdowm编辑器</p><p>Visual Studion Code <a href="https://code.visualstudio.com/">https://code.visualstudio.com/</a></p><p>typora <a href="https://www.typora.io/">https://www.typora.io/</a></p><hr><p>菜鸟教程</p><p><a href="https://www.runoob.com/markdown/md-tutorial.html">https://www.runoob.com/markdown/md-tutorial.html</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>更改python源，使用国内源</title>
      <link href="/posts/a119.html"/>
      <url>/posts/a119.html</url>
      
        <content type="html"><![CDATA[<h3 id="永久修改，一劳永逸："><a href="#永久修改，一劳永逸：" class="headerlink" title="永久修改，一劳永逸："></a>永久修改，一劳永逸：</h3><p>Linux下，修改 ~/.pip/pip.conf (没有就创建一个)， 修改 index-url至tuna，内容如下：</p><pre><code>[global]index-url = https://pypi.tuna.tsinghua.edu.cn/simple</code></pre><p>windows下，直接在user目录中创建一个pip目录，如：C:\Users\xx\pip，新建文件pip.ini，内容如下</p><pre><code>[global]  index-url = https://pypi.tuna.tsinghua.edu.cn/simple  </code></pre><hr><h3 id="临时使用"><a href="#临时使用" class="headerlink" title="临时使用"></a>临时使用</h3><p>可以在使用pip的时候加参数</p><pre><code>-i https://pypi.tuna.tsinghua.edu.cn/simple</code></pre><p>例如：</p><pre><code>pip install -i https://pypi.tuna.tsinghua.edu.cn/simple gevent  </code></pre><hr><h3 id="其他源"><a href="#其他源" class="headerlink" title="其他源"></a>其他源</h3><p>豆瓣：<a href="http://pypi.douban.com/simple/">http://pypi.douban.com/simple/</a><br>清华：<a href="https://pypi.tuna.tsinghua.edu.cn/simple">https://pypi.tuna.tsinghua.edu.cn/simple</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>初次建立博客</title>
      <link href="/posts/c8bd.html"/>
      <url>/posts/c8bd.html</url>
      
        <content type="html"><![CDATA[<h2 id="简洁版"><a href="#简洁版" class="headerlink" title="简洁版"></a>简洁版</h2><blockquote><p>使用的是 Node.js + Git Bash + Hexo 所建立</p></blockquote><ul><li><p>hexo cl<br>清理</p></li><li><p>hexo g<br>生成</p></li><li><p>hexo s<br>启动4k端口</p></li><li><p>hexo d<br>推到远端</p></li><li><p>hexo cl &amp;&amp; hexo g &amp;&amp; hexo d<br>“素质三连”</p></li><li><p>hexo n “文章名”<br>新建文章</p></li></ul><hr><h2 id="详细版"><a href="#详细版" class="headerlink" title="详细版"></a>详细版</h2><pre><code>--- #安装Nodejsnode -v #查看node版本npm -v #查看npm版本npm install -g cnpm --registry=http://registry.npm.taobao.org #安装淘宝的cnpm 管理器cnpm -v #查看cnpm版本cnpm install -g hexo-cli #安装hexo框架hexo -v #查看hexo版本mkdir blog #创建blog目录cd blog #进入blog目录sudo hexo init #生成博客 初始化博客hexo s #启动本地博客服务http://localhost:4000/ #本地访问地址hexo n &quot;我的第一篇文章&quot; #创建新的文章#返回blog目录hexo clean #清理hexo g #生成#Github创建一个新的仓库 YourGithubName.github.iocnpm install --save hexo-deployer-git #在blog目录下安装git部署插件----#配置_config.yml-----DeploymentDocs: https://hexo.io/docs/deployment.htmldeploy:type: gitrepo: https://github.com/YourGithubName/YourGithubName.github.io.gitbranch: master-----hexo d #部署到Github仓库里https://YourGithubName.github.io/ #访问这个地址可以查看博客git clone https://github.com/blinkfox/hexo-theme-matery themes/hexo-theme-matery-master #下载matery主题到本地#修改hexo根目录下的 _config.yml 文件 ： theme: hexo-theme-matery-masterhexo cl #清理一下hexo g #生成hexo d #部署到远程Github仓库https://YourGithubName.github.io/ #查看博客</code></pre><hr><h1 id="尾巴"><a href="#尾巴" class="headerlink" title="尾巴"></a>尾巴</h1><p>主题包 <a href="https://github.com/blinkfox/hexo-theme-matery/blob/develop/README_CN.md">https://github.com/blinkfox/hexo-theme-matery/blob/develop/README_CN.md</a></p><p>看板娘<br><a href="https://www.jianshu.com/p/3a6342e16e57">https://www.jianshu.com/p/3a6342e16e57</a></p><p>主要参考视频<br><a href="https://www.bilibili.com/video/av70212514">https://www.bilibili.com/video/av70212514</a><br><a href="https://www.bilibili.com/video/av44544186">https://www.bilibili.com/video/av44544186</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
            <tag> 博客 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
